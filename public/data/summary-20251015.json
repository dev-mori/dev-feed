[
  {
    "title": "nodejs/node – 2025-10-15, Version 25.0.0 (Current), @RafaelGSS",
    "date": "2025-10-15T17:20:43.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v25.0.0",
    "content": "Node.js 25 is here! We have upgraded V8 to **14.1**, bringing major `JSON.stringify`\r\nperformance improvements, built-in `Uint8Array` base64/hex conversion, and ongoing\r\nWebAssembly and JIT pipeline optimizations.\r\n\r\nThis release doubles down on secure-by-default apps and web-standard APIs: the permission\r\nmodel gains `--allow-net`, Web Storage is enabled by default, and `ErrorEvent` is now a global.\r\n\r\nWe’ve also removed or finalized long-deprecated APIs such as SlowBuffer,\r\nand added quality-of-life improvements like a portable compile cache and JSPI for WebAssembly.\r\n\r\n### Notable Changes\r\n\r\n* \\[[`8bc7dfd16f`](https://github.com/nodejs/node/commit/8bc7dfd16f)] - **build**: test on Python 3.14 release candidate 3 (Christian Clauss) [#59983](https://github.com/nodejs/node/pull/59983)\r\n* \\[[`663554abdf`](https://github.com/nodejs/node/commit/663554abdf)] - **(SEMVER-MAJOR)** **lib**: expose global ErrorEvent (Richie Bendall) [#58920](https://github.com/nodejs/node/pull/58920)\r\n* \\[[`3312e4e946`](https://github.com/nodejs/node/commit/3312e4e946)] - **(SEMVER-MAJOR)** **src**: unflag --experimental-webstorage by default (Daniel M Brasil) [#57666](https://github.com/nodejs/node/pull/57666)\r\n* \\[[`462c74181d`](https://github.com/nodejs/node/commit/462c74181d)] - **(SEMVER-MAJOR)** **src,permission**: add --allow-net permission (Rafael Gonzaga) [#58517](https://github.com/nodejs/node/pull/58517)\r\n\r\n### Deprecations and Removals\r\n\r\n* \\[[`d33f4b539a`](https://github.com/nodejs/node/commit/d33f4b539a)] - **(SEMVER-MAJOR)** **assert**: move assert.fail with multiple arguments to eol (James M Snell) [#58532](https://github.com/nodejs/node/pull/58532)\r\n* \\[[`b21574d63b`](https://github.com/nodejs/node/commit/b21574d63b)] - **(SEMVER-MAJOR)** **assert**: move CallTracker to EOL (James M Snell) [#58006](https://github.com/nodejs/node/pull/58006)\r\n* \\[[`308b6bc6de`](https://github.com/nodejs/node/commit/308b6bc6de)] - **(SEMVER-MAJOR)** **async\\_hooks**: move `asyncResource` property on bound function to EOL (James M Snell) [#58618](https://github.com/nodejs/node/pull/58618)\r\n* \\[[`daced4ab98`](https://github.com/nodejs/node/commit/daced4ab98)] - **(SEMVER-MAJOR)** **buffer**: move SlowBuffer to EOL (Filip Skokan) [#58220](https://github.com/nodejs/node/pull/58220)\r\n* \\[[`df16f0fd8d`](https://github.com/nodejs/node/commit/df16f0fd8d)] - **(SEMVER-MAJOR)** **child\\_process**: move \\_channel to end-of-life (James M Snell) [#58527](https://github.com/nodejs/node/pull/58527)\r\n* \\[[`a472745958`](https://github.com/nodejs/node/commit/a472745958)] - **(SEMVER-MAJOR)** **crypto**: runtime-deprecate default shake128/256 output lengths (Filip Skokan) [#59008](https://github.com/nodejs/node/pull/59008)\r\n* \\[[`c3b986853c`](https://github.com/nodejs/node/commit/c3b986853c)] - **(SEMVER-MAJOR)** **crypto**: move deprecated hash and mgf1Hash options to EOL (James M Snell) [#58706](https://github.com/nodejs/node/pull/58706)\r\n* \\[[`66632648ba`](https://github.com/nodejs/node/commit/66632648ba)] - **(SEMVER-MAJOR)** **crypto**: runtime deprecate ECDH.setPublicKey() (James M Snell) [#58620](https://github.com/nodejs/node/pull/58620)\r\n* \\[[`a5f9ca1f77`](https://github.com/nodejs/node/commit/a5f9ca1f77)] - **(SEMVER-MAJOR)** **dns**: move falsy hostname in lookup to end-of-life (James M Snell) [#58619](https://github.com/nodejs/node/pull/58619)\r\n* \\[[`2bb7667475`](https://github.com/nodejs/node/commit/2bb7667475)] - **(SEMVER-MAJOR)** **fs**: move FileHandle close on GC to EOL (James M Snell) [#58536](https://github.com/nodejs/node/pull/58536)\r\n* \\[[`eec0302088`](https://github.com/nodejs/node/commit/eec0302088)] - **(SEMVER-MAJOR)** **fs**: move rmdir recursive option to end-of-life (James M Snell) [#58616](https://github.com/nodejs/node/pull/58616)\r\n* \\[[`25dd206c29`](https://github.com/nodejs/node/commit/25dd206c29)] - **(SEMVER-MAJOR)** **fs**: remove `fs.F_OK`, `fs.R_OK`, `fs.W_OK`, `fs.X_OK` (Livia Medeiros) [#55862](https://github.com/nodejs/node/pull/55862)\r\n* \\[[`91dadf2897`](https://github.com/nodejs/node/commit/91dadf2897)] - **(SEMVER-MAJOR)** **http**: deprecate writeHeader (Sebastian Beltran) [#59060](https://github.com/nodejs/node/pull/59060)\r\n* \\[[`4e06a648ff`](https://github.com/nodejs/node/commit/4e06a648ff)] - **(SEMVER-MAJOR)** **perf\\_hooks**: move deprecated accessors to EOF (James M Snell) [#58531](https://github.com/nodejs/node/pull/58531)\r\n* \\[[`a3dfca90d1`](https://github.com/nodejs/node/commit/a3dfca90d1)] - **(SEMVER-MAJOR)** **process**: move multipleResolves event to EOL (James M Snell) [#58707](https://github.com/nodejs/node/pull/58707)\r\n* \\[[`790acc8689`](https://github.com/nodejs/node/commit/790acc8689)] - **(SEMVER-MAJOR)** **tls**: move IP-address servername deprecation to eol (James M Snell) [#58533](https://github.com/nodejs/node/pull/58533)\r\n* \\[[`3aaa2ebe19`](https://github.com/nodejs/node/commit/3aaa2ebe19)] - **(SEMVER-MAJOR)** **url**: move bad port deprecation in legacy url to end-of-life (James M Snell) [#58617](https://github.com/nodejs/node/pull/58617)\r\n\r\n### Semver-Major Commits\r\n\r\n* \\[[`7c9fbc15bc`](https://github.com/nodejs/node/commit/7c9fbc15bc)] - **(SEMVER-MAJOR)** **assert,util**: fail promise comparison in deep equal checks (Ruben Bridgewater) [#59448](https://github.com/nodejs/node/pull/59448)\r\n* \\[[`11222f1a27`](https://github.com/nodejs/node/commit/11222f1a27)] - **(SEMVER-MAJOR)** **assert,util**: handle invalid dates as equal in deep comparison (Ruben Bridgewater) [#57627](https://github.com/nodejs/node/pull/57627)\r\n* \\[[`acce2e8f87`](https://github.com/nodejs/node/commit/acce2e8f87)] - **(SEMVER-MAJOR)** **build**: reset embedder string to \"-node.0\" (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`8a87ba031b`](https://github.com/nodejs/node/commit/8a87ba031b)] - **(SEMVER-MAJOR)** **build**: bump minimum Clang version to 19 (Michaël Zasso) [#59048](https://github.com/nodejs/node/pull/59048)\r\n* \\[[`21b131e93a`](https://github.com/nodejs/node/commit/21b131e93a)] - **(SEMVER-MAJOR)** **build**: reset embedder string to \"-node.0\" (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`f31c88021b`](https://github.com/nodejs/node/commit/f31c88021b)] - **(SEMVER-MAJOR)** **build**: stop distributing Corepack (Antoine du Hamel) [#57617](https://github.com/nodejs/node/pull/57617)\r\n* \\[[`b3238442d8`](https://github.com/nodejs/node/commit/b3238442d8)] - **(SEMVER-MAJOR)** **deps**: patch V8 for illumos (Dan McDonald) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`2a1da3260d`](https://github.com/nodejs/node/commit/2a1da3260d)] - **(SEMVER-MAJOR)** **deps**: patch V8 to avoid duplicated zlib symbol (Michaël Zasso) [#54077](https://github.com/nodejs/node/pull/54077)\r\n* \\[[`7772a2df9d`](https://github.com/nodejs/node/commit/7772a2df9d)] - **(SEMVER-MAJOR)** **deps**: update V8 to 14.1.146.11 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`6d61175db0`](https://github.com/nodejs/node/commit/6d61175db0)] - **(SEMVER-MAJOR)** **deps**: V8: backport 1d3362c55396 (Shu-yu Guo) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`974773572e`](https://github.com/nodejs/node/commit/974773572e)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick 4f38995c8295 (Shu-yu Guo) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`70bfc398e9`](https://github.com/nodejs/node/commit/70bfc398e9)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick 044b9b6f589d (Rezvan Mahdavi Hezaveh) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`6bfc525cf0`](https://github.com/nodejs/node/commit/6bfc525cf0)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick d2ad518a0b57 (Joyee Cheung) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`754d28e34f`](https://github.com/nodejs/node/commit/754d28e34f)] - **(SEMVER-MAJOR)** **deps**: V8: revert 6d6c1e680c7b (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`8c508b9399`](https://github.com/nodejs/node/commit/8c508b9399)] - **(SEMVER-MAJOR)** **deps**: V8: revert e3cddbedb205 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`88ca8287b6`](https://github.com/nodejs/node/commit/88ca8287b6)] - **(SEMVER-MAJOR)** **deps**: use std::map in MSVC STL for EphemeronRememberedSet (Joyee Cheung) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`838e2332a5`](https://github.com/nodejs/node/commit/838e2332a5)] - **(SEMVER-MAJOR)** **deps**: patch V8 for illumos (Dan McDonald) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`3522731d9a`](https://github.com/nodejs/node/commit/3522731d9a)] - **(SEMVER-MAJOR)** **deps**: remove problematic comment from v8-internal (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`d234475a33`](https://github.com/nodejs/node/commit/d234475a33)] - **(SEMVER-MAJOR)** **deps**: define V8\\_PRESERVE\\_MOST as no-op on Windows (Stefan Stojanovic) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`a738eb4a7f`](https://github.com/nodejs/node/commit/a738eb4a7f)] - **(SEMVER-MAJOR)** **deps**: fix FP16 bitcasts.h (Stefan Stojanovic) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`1744c7d991`](https://github.com/nodejs/node/commit/1744c7d991)] - **(SEMVER-MAJOR)** **deps**: patch V8 to avoid duplicated zlib symbol (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`fff0d1554d`](https://github.com/nodejs/node/commit/fff0d1554d)] - **(SEMVER-MAJOR)** **deps**: update V8 to 13.7.152.9 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`968e2f47c8`](https://github.com/nodejs/node/commit/968e2f47c8)] - **(SEMVER-MAJOR)** **dgram**: move deprecated APIs to EOL (James M Snell) [#58474](https://github.com/nodejs/node/pull/58474)\r\n* \\[[`5623194a6b`](https://github.com/nodejs/node/commit/5623194a6b)] - **(SEMVER-MAJOR)** **doc,src,test**: replace use of deprecated `GetIsolate` (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`823ca6991f`](https://github.com/nodejs/node/commit/823ca6991f)] - **(SEMVER-MAJOR)** **fs**: make `processReadResult()` and `readSyncRecursive()` private (Livia Medeiros) [#58672](https://github.com/nodejs/node/pull/58672)\r\n* \\[[`a273674dee`](https://github.com/nodejs/node/commit/a273674dee)] - **(SEMVER-MAJOR)** **fs**: move fs stream open method to eol (James M Snell) [#58529](https://github.com/nodejs/node/pull/58529)\r\n* \\[[`39d73036e7`](https://github.com/nodejs/node/commit/39d73036e7)] - **(SEMVER-MAJOR)** **lib**: use validators for argument validation (Nam Yooseong) [#59416](https://github.com/nodejs/node/pull/59416)\r\n* \\[[`cd68e35704`](https://github.com/nodejs/node/commit/cd68e35704)] - **(SEMVER-MAJOR)** **lib**: deprecate `_stream_*` modules (Dario Piotrowicz) [#58337](https://github.com/nodejs/node/pull/58337)\r\n* \\[[`a822a1cbe7`](https://github.com/nodejs/node/commit/a822a1cbe7)] - **(SEMVER-MAJOR)** **lib**: deprecate \\_tls\\_common and \\_tls\\_wrap (Dario Piotrowicz) [#57643](https://github.com/nodejs/node/pull/57643)\r\n* \\[[`705bcc2a00`](https://github.com/nodejs/node/commit/705bcc2a00)] - **(SEMVER-MAJOR)** **module**: move Module.\\_debug to end-of-life (James M Snell) [#58473](https://github.com/nodejs/node/pull/58473)\r\n* \\[[`5fe7800683`](https://github.com/nodejs/node/commit/5fe7800683)] - **(SEMVER-MAJOR)** **node-api**: add warning for NAPI\\_EXPERIMENTAL (Miguel Marcondes Filho) [#58280](https://github.com/nodejs/node/pull/58280)\r\n* \\[[`e1d4d6ab49`](https://github.com/nodejs/node/commit/e1d4d6ab49)] - **(SEMVER-MAJOR)** **repl**: eol deprecate instantiating without new (Aviv Keller) [#59495](https://github.com/nodejs/node/pull/59495)\r\n* \\[[`ed94bc48f3`](https://github.com/nodejs/node/commit/ed94bc48f3)] - **(SEMVER-MAJOR)** **src**: update crypto.getCipherInfo() to use DictionaryTemplate (James M Snell) [#60036](https://github.com/nodejs/node/pull/60036)\r\n* \\[[`37a3df3556`](https://github.com/nodejs/node/commit/37a3df3556)] - **(SEMVER-MAJOR)** **src**: fix calls to v8::Object::wrap (Andreas Haas) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`801ae26fa3`](https://github.com/nodejs/node/commit/801ae26fa3)] - **(SEMVER-MAJOR)** **src**: update NODE\\_MODULE\\_VERSION to 141 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`10df38a38b`](https://github.com/nodejs/node/commit/10df38a38b)] - **(SEMVER-MAJOR)** **src**: improve performance of dotenv ToObject (James M Snell) [#60038](https://github.com/nodejs/node/pull/60038)\r\n* \\[[`075936b413`](https://github.com/nodejs/node/commit/075936b413)] - **(SEMVER-MAJOR)** **src**: use std::string\\_view from node\\_report (iknoom) [#60006](https://github.com/nodejs/node/pull/60006)\r\n* \\[[`234c26cca3`](https://github.com/nodejs/node/commit/234c26cca3)] - **(SEMVER-MAJOR)** **src**: store `Local` for `CallbackScope` on stack (Anna Henningsen) [#59705](https://github.com/nodejs/node/pull/59705)\r\n* \\[[`708fd1945b`](https://github.com/nodejs/node/commit/708fd1945b)] - **(SEMVER-MAJOR)** **src**: remove node.h APIs to make callback without an async context (Chengzhong Wu) [#58471](https://github.com/nodejs/node/pull/58471)\r\n* \\[[`56989d33f5`](https://github.com/nodejs/node/commit/56989d33f5)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::EmitBeforeExit and node::EmitExit (Chengzhong Wu) [#58469](https://github.com/nodejs/node/pull/58469)\r\n* \\[[`d429aa2d17`](https://github.com/nodejs/node/commit/d429aa2d17)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::CreatePlatform and node::FreePlatform (Chengzhong Wu) [#58470](https://github.com/nodejs/node/pull/58470)\r\n* \\[[`e0ae14ce73`](https://github.com/nodejs/node/commit/e0ae14ce73)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::InitializeNodeWithArgs (Chengzhong Wu) [#58470](https://github.com/nodejs/node/pull/58470)\r\n* \\[[`db1700e4b5`](https://github.com/nodejs/node/commit/db1700e4b5)] - **(SEMVER-MAJOR)** **src**: update NODE\\_MODULE\\_VERSION to 138 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`0a87084150`](https://github.com/nodejs/node/commit/0a87084150)] - **(SEMVER-MAJOR)** **test**: update cppgc-object addon config (StefanStojanovic) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`7dd49d7da4`](https://github.com/nodejs/node/commit/7dd49d7da4)] - **(SEMVER-MAJOR)** **test**: spin longer for sequential/test-worker-prof (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`faba50df96`](https://github.com/nodejs/node/commit/faba50df96)] - **(SEMVER-MAJOR)** **test**: remove `--always-turbofan` flag (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`496f12dec6`](https://github.com/nodejs/node/commit/496f12dec6)] - **(SEMVER-MAJOR)** **test**: update snapshot for V8 14.1 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`05aa3a1c70`](https://github.com/nodejs/node/commit/05aa3a1c70)] - **(SEMVER-MAJOR)** **test,win**: split addon tests (StefanStojanovic) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`308de27255`](https://github.com/nodejs/node/commit/308de27255)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 14.0 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`b736370c07`](https://github.com/nodejs/node/commit/b736370c07)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.9 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`085a94ac9b`](https://github.com/nodejs/node/commit/085a94ac9b)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.8 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`a71ae18ac8`](https://github.com/nodejs/node/commit/a71ae18ac8)] - **(SEMVER-MAJOR)** **tools**: enable leaptiering for aix/ibmi (Abdirahim Musse) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`a8217a9eb8`](https://github.com/nodejs/node/commit/a8217a9eb8)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.7 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`fdef0725de`](https://github.com/nodejs/node/commit/fdef0725de)] - **(SEMVER-MAJOR)** **util,console**: colorize regexp groups, character classes, etc (Ruben Bridgewater) [#59710](https://github.com/nodejs/node/pull/59710)\r\n* \\[[`411cc42d22`](https://github.com/nodejs/node/commit/411cc42d22)] - **(SEMVER-MAJOR)** **worker**: move terminate callback to end-of-life (James M Snell) [#58528](https://github.com/nodejs/node/pull/58528)\r\n\r\n### Semver-Minor Commits\r\n\r\n* \\[[`94422e8a40`](https://github.com/nodejs/node/commit/94422e8a40)] - **(SEMVER-MINOR)** **src**: add an option to make compile cache portable (Aditi) [#58797](https://github.com/nodejs/node/pull/58797)\r\n* \\[[`29738c7b42`](https://github.com/nodejs/node/commit/29738c7b42)] - **(SEMVER-MINOR)** **src,permission**: add --allow-inspector ability (Rafael Gonzaga) [#59711](https://github.com/nodejs/node/pull/59711)\r\n* \\[[`f9fcc746f3`](https://github.com/nodejs/node/commit/f9fcc746f3)] - **(SEMVER-MINOR)** **v8**: add cpu profile (theanarkh) [#59807](https://github.com/nodejs/node/pull/59807)\r\n* \\[[`4396cf2d45`](https://github.com/nodejs/node/commit/4396cf2d45)] - **(SEMVER-MINOR)** **wasm**: enable JSPI (Guy Bedford) [#59941](https://github.com/nodejs/node/pull/59941)\r\n\r\n### Semver-Patch Commits\r\n\r\n* \\[[`91f035e597`](https://github.com/nodejs/node/commit/91f035e597)] - **assert**: resolve TODO and rename function (Antoine du Hamel) [#59451](https://github.com/nodejs/node/pull/59451)\r\n* \\[[`2e675c4fa3`](https://github.com/nodejs/node/commit/2e675c4fa3)] - **benchmark**: use non-deprecated WriteUtf8V2 method (Michaël Zasso) [#60173](https://github.com/nodejs/node/pull/60173)\r\n* \\[[`0fb040603b`](https://github.com/nodejs/node/commit/0fb040603b)] - **build**: upgrade Python linter ruff, add rules ASYNC,PERF (Christian Clauss) [#59984](https://github.com/nodejs/node/pull/59984)\r\n* \\[[`f468b6c72b`](https://github.com/nodejs/node/commit/f468b6c72b)] - **build**: update minimum Xcode version to 16.4 (Michaël Zasso) [#60079](https://github.com/nodejs/node/pull/60079)\r\n* \\[[`0eda17ba20`](https://github.com/nodejs/node/commit/0eda17ba20)] - **build**: fix flags for ngtcp2 on IBM i (SRAVANI GUNDEPALLI) [#60073](https://github.com/nodejs/node/pull/60073)\r\n* \\[[`22a864a275`](https://github.com/nodejs/node/commit/22a864a275)] - **build**: remove corepack from release tarballs (Jordan Harband) [#59835](https://github.com/nodejs/node/pull/59835)\r\n* \\[[`7079041e0a`](https://github.com/nodejs/node/commit/7079041e0a)] - **build**: only mention Apple when on Apple (Michaël Zasso) [#59385](https://github.com/nodejs/node/pull/59385)\r\n* \\[[`954d3f44ef`](https://github.com/nodejs/node/commit/954d3f44ef)] - **build**: check Apple clang version in configure script (Michaël Zasso) [#59358](https://github.com/nodejs/node/pull/59358)\r\n* \\[[`2b4a09ef8b`](https://github.com/nodejs/node/commit/2b4a09ef8b)] - **build**: fix OpenSSL version detection (Richard Lau) [#59353](https://github.com/nodejs/node/pull/59353)\r\n* \\[[`af77e4bf2f`](https://github.com/nodejs/node/commit/af77e4bf2f)] - **build**: update macOS runner and Xcode (Michaël Zasso) [#59238](https://github.com/nodejs/node/pull/59238)\r\n* \\[[`86bfdb5528`](https://github.com/nodejs/node/commit/86bfdb5528)] - **build**: remove `nocorepack` `vcbuild` flag (Antoine du Hamel) [#57772](https://github.com/nodejs/node/pull/57772)\r\n* \\[[`b13f24c2da`](https://github.com/nodejs/node/commit/b13f24c2da)] - **build, src**: fix include paths for vtune files (Rahul) [#59999](https://github.com/nodejs/node/pull/59999)\r\n* \\[[`2216a3b1d5`](https://github.com/nodejs/node/commit/2216a3b1d5)] - **deps**: V8: cherry-pick 1e190bbb0396 (Richard Lau) [#60206](https://github.com/nodejs/node/pull/60206)\r\n* \\[[`1b22f6049a`](https://github.com/nodejs/node/commit/1b22f6049a)] - **deps**: upgrade npm to 11.6.2 (npm team) [#60168](https://github.com/nodejs/node/pull/60168)\r\n* \\[[`a1b73fe430`](https://github.com/nodejs/node/commit/a1b73fe430)] - **deps**: V8: cherry-pick 2abc61361dd4 (Richard Lau) [#60177](https://github.com/nodejs/node/pull/60177)\r\n* \\[[`4eb6e6fd79`](https://github.com/nodejs/node/commit/4eb6e6fd79)] - **deps**: V8: cherry-pick 87356585659b (Joyee Cheung) [#60069](https://github.com/nodejs/node/pull/60069)\r\n* \\[[`c0b8c80164`](https://github.com/nodejs/node/commit/c0b8c80164)] - **deps**: define V8\\_PRESERVE\\_MOST as no-op on Windows (Stefan Stojanovic) [#56238](https://github.com/nodejs/node/pull/56238)\r\n* \\[[`65a32bac18`](https://github.com/nodejs/node/commit/65a32bac18)] - **deps**: add ngtcp2 test binaries (James M Snell) [#59946](https://github.com/nodejs/node/pull/59946)\r\n* \\[[`ebfc28a037`](https://github.com/nodejs/node/commit/ebfc28a037)] - **deps**: update nghttp3 to 1.11.0 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`dceb1fca40`](https://github.com/nodejs/node/commit/dceb1fca40)] - **deps**: update ngtcp2 to 1.14.0 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`ee36b86ba3`](https://github.com/nodejs/node/commit/ee36b86ba3)] - **deps**: patch V8 to 13.7.152.19 (Node.js GitHub Bot) [#58713](https://github.com/nodejs/node/pull/58713)\r\n* \\[[`0b3fc0d7a8`](https://github.com/nodejs/node/commit/0b3fc0d7a8)] - **deps**: patch V8 to 13.7.152.14 (Node.js GitHub Bot) [#58631](https://github.com/nodejs/node/pull/58631)\r\n* \\[[`91b3bd3fe6`](https://github.com/nodejs/node/commit/91b3bd3fe6)] - **deps**: patch V8 to 13.7.152.13 (Node.js GitHub Bot) [#58539](https://github.com/nodejs/node/pull/58539)\r\n* \\[[`f77a96cd76`](https://github.com/nodejs/node/commit/f77a96cd76)] - **deps**: patch V8 to 13.7.152.10 (Node.js GitHub Bot) [#58446](https://github.com/nodejs/node/pull/58446)\r\n* \\[[`1cd16e5355`](https://github.com/nodejs/node/commit/1cd16e5355)] - **doc**: improve code snippet alternative of url.parse() using WHATWG URL (Steven) [#60209](https://github.com/nodejs/node/pull/60209)\r\n* \\[[`d54e6aec9e`](https://github.com/nodejs/node/commit/d54e6aec9e)] - **doc**: `createSQLTagStore` -> `createTagStore` (Aviv Keller) [#60182](https://github.com/nodejs/node/pull/60182)\r\n* \\[[`aef3fc37eb`](https://github.com/nodejs/node/commit/aef3fc37eb)] - **doc**: use markdown when branch-diff major release (Rafael Gonzaga) [#60179](https://github.com/nodejs/node/pull/60179)\r\n* \\[[`a2f088d516`](https://github.com/nodejs/node/commit/a2f088d516)] - **doc**: update teams in collaborator-guide.md and add links (Bart Louwers) [#60065](https://github.com/nodejs/node/pull/60065)\r\n* \\[[`75a6fff6be`](https://github.com/nodejs/node/commit/75a6fff6be)] - **doc**: disambiguate top-level `worker_threads` module exports (René) [#59890](https://github.com/nodejs/node/pull/59890)\r\n* \\[[`51df7b92bc`](https://github.com/nodejs/node/commit/51df7b92bc)] - **doc**: update macOS version used to build releases (Michaël Zasso) [#60080](https://github.com/nodejs/node/pull/60080)\r\n* \\[[`910c8796f9`](https://github.com/nodejs/node/commit/910c8796f9)] - **doc**: update BUILDING to reflect Clang 19 changes (Michaël Zasso) [#59782](https://github.com/nodejs/node/pull/59782)\r\n* \\[[`34f9b7eab9`](https://github.com/nodejs/node/commit/34f9b7eab9)] - **doc**: reserve NMV 140 for Electron 39 (David Sanders) [#59627](https://github.com/nodejs/node/pull/59627)\r\n* \\[[`3f6f6db43f`](https://github.com/nodejs/node/commit/3f6f6db43f)] - **doc**: update minimum Xcode and VS versions (Michaël Zasso) [#59358](https://github.com/nodejs/node/pull/59358)\r\n* \\[[`d9fe28bd6b`](https://github.com/nodejs/node/commit/d9fe28bd6b)] - **doc**: fix `CHANGELOG.md` version listing (Antoine du Hamel) [#59299](https://github.com/nodejs/node/pull/59299)\r\n* \\[[`0ab50c2768`](https://github.com/nodejs/node/commit/0ab50c2768)] - **doc**: reserve NMV 139 for Electron 38 (Calvin) [#58779](https://github.com/nodejs/node/pull/58779)\r\n* \\[[`516b4ebd3c`](https://github.com/nodejs/node/commit/516b4ebd3c)] - **doc**: mark Node.js 23 as End-of-Life (Antoine du Hamel) [#58563](https://github.com/nodejs/node/pull/58563)\r\n* \\[[`59b70e5fe3`](https://github.com/nodejs/node/commit/59b70e5fe3)] - **http**: fix http client leaky with double response (theanarkh) [#60062](https://github.com/nodejs/node/pull/60062)\r\n* \\[[`5cf3c3e24c`](https://github.com/nodejs/node/commit/5cf3c3e24c)] - **http2**: rename variable to additionalPseudoHeaders (Tobias Nießen) [#60208](https://github.com/nodejs/node/pull/60208)\r\n* \\[[`535efea962`](https://github.com/nodejs/node/commit/535efea962)] - **http2**: do not crash on mismatched ping buffer length (René) [#60135](https://github.com/nodejs/node/pull/60135)\r\n* \\[[`4bfa387f6d`](https://github.com/nodejs/node/commit/4bfa387f6d)] - **lib**: fix constructor in \\_errnoException stack tree (SeokHun) [#60156](https://github.com/nodejs/node/pull/60156)\r\n* \\[[`4daeec11b9`](https://github.com/nodejs/node/commit/4daeec11b9)] - **lib**: fix typo in QuicSessionStats (SeokHun) [#60155](https://github.com/nodejs/node/pull/60155)\r\n* \\[[`15278252bb`](https://github.com/nodejs/node/commit/15278252bb)] - **lib**: remove redundant destroyHook checks (Gürgün Dayıoğlu) [#60120](https://github.com/nodejs/node/pull/60120)\r\n* \\[[`83052ff9ad`](https://github.com/nodejs/node/commit/83052ff9ad)] - **lib**: add `node:` prefix in sys module deprecation warning (Dario Piotrowicz) [#58442](https://github.com/nodejs/node/pull/58442)\r\n* \\[[`d5abfbf582`](https://github.com/nodejs/node/commit/d5abfbf582)] - **lib**: add module to use in module deprecation warnings (Dario Piotrowicz) [#58442](https://github.com/nodejs/node/pull/58442)\r\n* \\[[`db0121bedd`](https://github.com/nodejs/node/commit/db0121bedd)] - **module**: fix directory option in the enableCompileCache() API (Joyee Cheung) [#59931](https://github.com/nodejs/node/pull/59931)\r\n* \\[[`822a8c3244`](https://github.com/nodejs/node/commit/822a8c3244)] - **perf\\_hooks**: fix stack overflow error (Antoine du Hamel) [#60084](https://github.com/nodejs/node/pull/60084)\r\n* \\[[`d52cd04591`](https://github.com/nodejs/node/commit/d52cd04591)] - **quic**: continue working on quic api bits (James M Snell) [#60123](https://github.com/nodejs/node/pull/60123)\r\n* \\[[`b4af647920`](https://github.com/nodejs/node/commit/b4af647920)] - **quic**: reduce boilerplate and other minor cleanups (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`cd9fd09a27`](https://github.com/nodejs/node/commit/cd9fd09a27)] - **quic**: multiple fixups and updates (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`a6c5d27739`](https://github.com/nodejs/node/commit/a6c5d27739)] - **quic**: update more of the quic to the new compile guard (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`ee7b8ab29c`](https://github.com/nodejs/node/commit/ee7b8ab29c)] - **quic**: few additional small comment edits in cid.h (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`c8b64bd023`](https://github.com/nodejs/node/commit/c8b64bd023)] - **quic**: fixup NO\\_ERROR macro conflict on windows (James M Snell) [#59381](https://github.com/nodejs/node/pull/59381)\r\n* \\[[`e2fefd78e2`](https://github.com/nodejs/node/commit/e2fefd78e2)] - **quic**: fixup windows coverage compile error (James M Snell) [#59381](https://github.com/nodejs/node/pull/59381)\r\n* \\[[`99c80e3a45`](https://github.com/nodejs/node/commit/99c80e3a45)] - **quic**: update the guard to check openssl version (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`0e754fa5d1`](https://github.com/nodejs/node/commit/0e754fa5d1)] - **quic**: start re-enabling quic with openssl 3.5 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`200fe9e7f4`](https://github.com/nodejs/node/commit/200fe9e7f4)] - **repl**: move completion logic to internal module (Dario Piotrowicz) [#59889](https://github.com/nodejs/node/pull/59889)\r\n* \\[[`3ac88a7a66`](https://github.com/nodejs/node/commit/3ac88a7a66)] - **src**: use string\\_view in `WriteReport()` (Anna Henningsen) [#60201](https://github.com/nodejs/node/pull/60201)\r\n* \\[[`a1244f04de`](https://github.com/nodejs/node/commit/a1244f04de)] - **src**: make additional cleanups in node locks impl (James M Snell) [#60061](https://github.com/nodejs/node/pull/60061)\r\n* \\[[`fdb6e66227`](https://github.com/nodejs/node/commit/fdb6e66227)] - **src**: update locks to use DictionaryTemplate (James M Snell) [#60061](https://github.com/nodejs/node/pull/60061)\r\n* \\[[`367bcce6a6`](https://github.com/nodejs/node/commit/367bcce6a6)] - **src**: fix usage of deprecated V8 API (Michaël Zasso) [#60174](https://github.com/nodejs/node/pull/60174)\r\n* \\[[`23fa18444f`](https://github.com/nodejs/node/commit/23fa18444f)] - **src**: fix small compile warning in quic/streams.cc (James M Snell) [#60118](https://github.com/nodejs/node/pull/60118)\r\n* \\[[`0ec1d186f4`](https://github.com/nodejs/node/commit/0ec1d186f4)] - **src**: always use strong reference to `napi_async_context` resource (Anna Henningsen) [#59828](https://github.com/nodejs/node/pull/59828)\r\n* \\[[`ce748f6cae`](https://github.com/nodejs/node/commit/ce748f6cae)] - **src**: use `Global` for storing resource in Node-API callback scope (Anna Henningsen) [#59828](https://github.com/nodejs/node/pull/59828)\r\n* \\[[`36256230b4`](https://github.com/nodejs/node/commit/36256230b4)] - **src**: cleanup quic TransportParams class (James M Snell) [#59884](https://github.com/nodejs/node/pull/59884)\r\n* \\[[`985e2fb383`](https://github.com/nodejs/node/commit/985e2fb383)] - _**Revert**_ \"**test**: ensure message event fires in worker message port test\" (Luigi Pinca) [#60126](https://github.com/nodejs/node/pull/60126)\r\n* \\[[`da9cd745c8`](https://github.com/nodejs/node/commit/da9cd745c8)] - **test**: ensure assertions are reachable in `test/client-proxy` (Antoine du Hamel) [#60175](https://github.com/nodejs/node/pull/60175)\r\n* \\[[`e105e821e9`](https://github.com/nodejs/node/commit/e105e821e9)] - **test**: skip quic tests that IBM i does not support (SRAVANI GUNDEPALLI) [#60160](https://github.com/nodejs/node/pull/60160)\r\n* \\[[`bfc81ca228`](https://github.com/nodejs/node/commit/bfc81ca228)] - **test**: ensure assertions are reachable in `test/async-hooks` (Antoine du Hamel) [#60150](https://github.com/nodejs/node/pull/60150)\r\n* \\[[`712cee951c`](https://github.com/nodejs/node/commit/712cee951c)] - **test**: skip tests that cause timeouts on IBM i (SRAVANI GUNDEPALLI) [#60148](https://github.com/nodejs/node/pull/60148)\r\n* \\[[`f8a43f6f34`](https://github.com/nodejs/node/commit/f8a43f6f34)] - **test**: deflake test-fs-promises-watch-iterator (Luigi Pinca) [#60060](https://github.com/nodejs/node/pull/60060)\r\n* \\[[`1f95d39997`](https://github.com/nodejs/node/commit/1f95d39997)] - **test**: prepare junit file attribute normalization (sangwook) [#59432](https://github.com/nodejs/node/pull/59432)\r\n* \\[[`eb159a8cfd`](https://github.com/nodejs/node/commit/eb159a8cfd)] - **test**: remove duplicated allocUnsafeSlow test (Michaël Zasso) [#58524](https://github.com/nodejs/node/pull/58524)\r\n* \\[[`d93cff5af3`](https://github.com/nodejs/node/commit/d93cff5af3)] - _**Revert**_ \"**test**: fix watch tests not including completion messages\" (Joyee Cheung) [#58190](https://github.com/nodejs/node/pull/58190)\r\n* \\[[`6102159fa1`](https://github.com/nodejs/node/commit/6102159fa1)] - **test**: fix watch tests not including completion messages (Dario Piotrowicz) [#58183](https://github.com/nodejs/node/pull/58183)\r\n* \\[[`ad2c1bf62e`](https://github.com/nodejs/node/commit/ad2c1bf62e)] - **test,doc**: skip --max-old-space-size-percentage on 32-bit platforms (Asaf Federman) [#60144](https://github.com/nodejs/node/pull/60144)\r\n* \\[[`6dbf7086bb`](https://github.com/nodejs/node/commit/6dbf7086bb)] - **test\\_runner**: fix suite timeout (Moshe Atlow) [#59853](https://github.com/nodejs/node/pull/59853)\r\n* \\[[`f0aa073907`](https://github.com/nodejs/node/commit/f0aa073907)] - **test\\_runner**: add junit file attribute support (sangwook) [#59432](https://github.com/nodejs/node/pull/59432)\r\n* \\[[`cff138c6b1`](https://github.com/nodejs/node/commit/cff138c6b1)] - **tests**: start adding quic test server utilities (James M Snell) [#59946](https://github.com/nodejs/node/pull/59946)\r\n* \\[[`20dc4b514a`](https://github.com/nodejs/node/commit/20dc4b514a)] - **tools**: use cooldown property correctly (Rafael Gonzaga) [#60134](https://github.com/nodejs/node/pull/60134)\r\n* \\[[`ec26b1c01a`](https://github.com/nodejs/node/commit/ec26b1c01a)] - **tools**: add lint rule to ensure assertions are reached (Antoine du Hamel) [#60125](https://github.com/nodejs/node/pull/60125)\r\n* \\[[`bab752d4db`](https://github.com/nodejs/node/commit/bab752d4db)] - **typings**: add buffer internalBinding typing (방진혁) [#60163](https://github.com/nodejs/node/pull/60163)\r\n* \\[[`1986ee4b65`](https://github.com/nodejs/node/commit/1986ee4b65)] - **vm**: hint module identifier in instantiate errors (Chengzhong Wu) [#60199](https://github.com/nodejs/node/pull/60199)\r\n* \\[[`23b834058c`](https://github.com/nodejs/node/commit/23b834058c)] - **wasm**: revert enable JSPI as already enabled (Guy Bedford) [#60014](https://github.com/nodejs/node/pull/60014)\r\n* \\[[`4bfcad1ac5`](https://github.com/nodejs/node/commit/4bfcad1ac5)] - _**Revert**_ \"**watch**: fix watch args not being properly filtered\" (Joyee Cheung) [#58190](https://github.com/nodejs/node/pull/58190)\r\n* \\[[`4acb854039`](https://github.com/nodejs/node/commit/4acb854039)] - **watch**: fix watch args not being properly filtered (Dario Piotrowicz) [#57936](https://github.com/nodejs/node/pull/57936)\r\n"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.6",
    "date": "2025-10-15T15:16:13.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.6",
    "content": "### Core Changes\n\n- Add nextjs condition when cacheComponents is enabled: #84843\n- remove rdcForNavigations configuration & bundle with cacheComponents: #84870\n- Convert eslint-config-next project to TypeScript: #84839\n- [eslint-config] [Breaking] Use Flat config by default: #84874\n\n### Misc Changes\n\n- Update turborepo env in workflows: #84879\n- Turbopack: take task cache log before starting snapshot: #84755\n- Turbopack: allow gzip compression on trace files: #84685\n- Turbopack: process task result as part of the task completion: #84638\n- Add test for eslint-config-next: #84838\n- Turbopack: lower level drop collectibles: #84895\n- docs: next/dynamic headings: #84492\n\n### Credits \n\nHuge thanks to @gnoff, @ijjk, @ztanner, @sokra, @devjiwonchoi, and @icyJoseph for helping!\n"
  },
  {
    "title": "アンマネージド Amazon EC2 ノードへの AWS Systems Manager エージェント自動インストール",
    "date": "2025-10-15T13:19:52.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/automate-installing-ssm-agent-on-unmanaged-ec2-instances-in-an-aws-organization/",
    "content": "<p>本記事は、2025 年 7 月 17 日に公開された <a href=\"https://aws.amazon.com/jp/blogs/mt/automate-installing-ssm-agent-on-unmanaged-ec2-instances-in-an-aws-organization/\">Automate installing AWS Systems Manager agent on unmanaged Amazon EC2 nodes</a> を翻訳したものです。</p> \n<p>大規模な AWS リソースのフリート（訳者注: EC2 インスタンス群）管理は困難な課題です。組織は、タスクの自動化、インベントリの収集、インスタンスのパッチ適用、セキュリティコンプライアンスの維持のために、複数のソリューションに依存しています。インバウンドポートを開いたり SSH キーを管理したりせずにインスタンスにアクセスしたいと思うこともあるでしょう。<a href=\"https://aws.amazon.com/systems-manager/\" target=\"_blank\" rel=\"noopener\">AWS Systems Manager (SSM)</a> は、これらすべてのニーズを大規模にサポートする一元管理ソリューションとして機能することで、この複雑さを簡素化します。</p> \n<p>Systems Manager の機能を使用するには、次の 3 要件を満たす必要があります:</p> \n<ol> \n <li>インスタンスに Systems Manager エージェント (<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/ssm-agent.html\" target=\"_blank\" rel=\"noopener\">SSM エージェント</a>) がインストールされている</li> \n <li>Systems Manager に必要な<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/setup-instance-permissions.html\" target=\"_blank\" rel=\"noopener\">インスタンスのアクセス許可が設定されている</a></li> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/general/latest/gr/ssm.html\" target=\"_blank\" rel=\"noopener\">AWS Systems Manager エンドポイント</a>へのネットワーク接続がある</li> \n</ol> \n<p><a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-unified-console.html\" target=\"_blank\" rel=\"noopener\">Systems Manager の統合コンソール</a>を使用すると、組織内のすべてのノードに対してインスタンスのアクセス許可を設定および付与できます。<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/diagnose-and-remediate.html\" target=\"_blank\" rel=\"noopener\">診断と修復</a>機能は、管理されていない AWS ノードを特定し、ネットワーク関連の問題を解決するのに役立ちます。これらの問題には、セキュリティグループの設定ミスや、<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/what-is-amazon-vpc.html\" target=\"_blank\" rel=\"noopener\">Amazon Virtual Private Cloud (Amazon VPC)</a> DNS（訳者注: DNS ホスト名と DNS 解決のこと）の無効化が含まれます。<br> AWS が提供する多くの Amazon Machine Image (AMI) には <a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/ami-preinstalled-agent.html\">Systems Manager エージェントがプリインストールされています</a>が、カスタム AMI または古い <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/AMIs.html\" target=\"_blank\" rel=\"noopener\">AMI</a> はエージェントのインストールが必要になる場合があります。大規模なフリートを管理する組織では、複数のサーバーとアカウントにわたって SSM エージェントを手動でインストールすると、運用上の負担が生じます。</p> \n<p>このブログでは、既存の <a href=\"https://aws.amazon.com/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon EC2</a> インスタンスに SSM エージェントをインストールする自動化ソリューションを紹介します。このソリューションは、複数のアカウントやリージョンに分散したノードのフリートに対して、SSM エージェントのインストールを効率化するように設計されています。これにより、AWS Organization 全体で Systems Manager の管理機能を素早く導入できます。</p> \n<h4>前提条件</h4> \n<p>ノードは以下の前提条件を満たす必要があります。:</p> \n<ol> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/operating-systems-and-machine-types.html\" target=\"_blank\" rel=\"noopener\">サポートされているオペレーティングシステム</a>: \n  <ul> \n   <li>Windows Server 2016-2025</li> \n   <li>Amazon Linux 2/2023</li> \n   <li>RHEL/CentOS 7.x-10.x</li> \n   <li>Ubuntu 18.04-24.04</li> \n   <li>SUSE Linux Enterprise 15.x</li> \n  </ul> </li> \n <li>Windows ノード用の <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2launch-v2.html\" target=\"_blank\" rel=\"noopener\">EC2Launch v2</a> エージェント</li> \n <li>Linux ノード用の <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/user-data.html#user-data-cloud-init\" target=\"_blank\" rel=\"noopener\">Cloud-init</a></li> \n <li>SSM エージェントのインストールファイルのダウンロードおよびインストール後の実行ログのアップロードには、<a href=\"https://aws.amazon.com/s3/\">Amazon S3</a> (s3.amazonaws.com) へのネットワーク接続が必要です。<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/VPC_Internet_Gateway.html\" target=\"_blank\" rel=\"noopener\">インターネットゲートウェイ</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/vpc-nat-gateway.html\" target=\"_blank\" rel=\"noopener\">NAT ゲートウェイ</a>、プライベートサブネットの場合は、<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/privatelink/vpc-endpoints-s3.html\" target=\"_blank\" rel=\"noopener\">S3 ゲートウェイエンドポイント</a>を使用して接続できます。</li> \n <li>Linux ベースのノードでは、SSM エージェントソフトウェアをダウンロードし、ログをアップロードするために、unzip、curl、awscli パッケージが必要です。これらのパッケージがない場合、自動的にシステムのパッケージリポジトリからインストールを試みます。その際、インストール中にインターネットアクセスが必要です。</li> \n <li>統合コンソールをセットアップ済みの場合は、セットアップ時に登録した<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-setting-up-organizations.html\" target=\"_blank\" rel=\"noopener\"> Systems Manager の委任管理者</a>アカウントを使用してください。 \n  <ul> \n   <li>統合コンソールをセットアップしていない場合は、組織の管理アカウントまたは <a href=\"https://aws.amazon.com/jp/blogs/mt/cloudformation-stacksets-delegated-administration/\">CloudFormation StackSets の委任管理者</a>アカウントを使用してください。</li> \n  </ul> </li> \n</ol> \n<h4>重要な注意事項</h4> \n<p>このソリューションは、ユーザーデータを使用して SSM エージェントをインストールし、プロセス中にノードの停止と起動を要求します。これにより、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/InstanceStorage.html\">一時ストレージ</a>がクリアされ、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses\">非 Elastic IP アドレス</a>が変更されることに注意が必要です。</p> \n<p>これらのノード上で実行中のアプリケーションはすべて中断されます。予期しない中断を避けるため、この作業は予定されたメンテナンス期間中に実行することをお勧めします。</p> \n<p>実行中、このソリューションはインスタンスから S3 へのログアップロードを可能にするために、一時的にインスタンスプロファイルをアタッチします。完了すると、この一時的なプロファイルは削除され、インスタンスは元の状態に戻ります。</p> \n<h2></h2> \n<h2>ソリューションの概要</h2> \n<p>このソリューションでは、<a href=\"https://aws.amazon.com/cloudformation/\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation</a> を使用した自動デプロイにより、必要なすべてのリソースをプロビジョニングします。これらのリソースには、S3 バケット、Systems Manager Automation ランブック、<a href=\"https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles.html\" target=\"_blank\" rel=\"noopener\">IAM ロール</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/access_policies.html\" target=\"_blank\" rel=\"noopener\">アクセス許可ポリシー</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\" target=\"_blank\" rel=\"noopener\">インスタンスプロファイル</a>が含まれます。デプロイ後、<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-automation.html\" target=\"_blank\" rel=\"noopener\">Systems Manager Automation</a> ランブックをオンデマンドで実行して、SSM エージェントをインストールできます。インストールは、EC2 フリート全体またはタグを使用して特定のノードを対象にすることができます。</p> \n<div id=\"attachment_61604\" class=\"wp-caption aligncenter\" style=\"width: 1178px\"> \n <p><img class=\"wp-image-61604 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/ArchitecturalDiagram.png\" alt=\"Architecture diagram showing automated SSM Agent installation workflow across an AWS Organization. The flow starts with CloudFormation deployment creating automation runbooks, which then orchestrate SSM Agent installation across multiple accounts and regions through three runbooks: Orchestrator, Primary, and Secondary.\" aria-describedby=\"caption-attachment-61604\"></p> \n <p id=\"caption-attachment-61604\" class=\"wp-caption-text\">図 1 – SSM エージェントインストールのデプロイメントワークフローのアーキテクチャ図</p> \n</div> \n<p>デプロイメントワークフローは、連携して動作する 3 つの相互接続された Systems Manager Automation ランブックで構成されています。プロセスは、中心的な調整役として機能する SSMAgentInstall-Orchestrator ランブックを実行することから始まります。この Orchestrator ランブックは最初にすべての入力パラメーターを検証し、次に指定されたターゲットアカウントごとに SSMAgentInstall-Primary ランブックを呼び出します。</p> \n<p>Primary ランブックは、ターゲットリージョンでの入力で指定されたノード (タグを使用するか、診断と修復の出力を使用するかのいずれか) に対して実行されます。各ターゲットノードに対して、SSMAgentInstall-Secondary ランブックを呼び出し、まずそのノードが既に SSM で管理されているかどうかを確認します。</p> \n<p>ノードが管理されていない場合、Secondary ランブックは、順序付けられた手順で慎重にインストールプロセスを進めます。ノードの適格性 (Auto Scaling グループのメンバーシップ、ルートボリュームのタイプ、ノードの状態) 検証した後、停止と開始のサイクルを実行します。このサイクルでは、ユーザーデータを介して SSM エージェントのインストールスクリプトを注入し、必要な IAM アクセス許可を一時的にアタッチし、エージェントが正常にインストールされたことを確認します。</p> \n<p>このプロセス全体を通して、実行ログが収集され、Central Account の S3 バケットに格納されます。最終的に、Orchestrator ランブックがすべての結果を集約して包括的な CSV レポートを作成し、組織全体の各インストール試行の成否を可視化します。</p> \n<h4>IAM アクセス許可について:</h4> \n<p>インストール後、SSM エージェントがノードを AWS Systems Manager に登録します。そのため、ノードが Systems Manager エンドポイントに接続でき、必要な <a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/setup-instance-permissions.html\">IAM アクセス許可</a>を持っていることを確認してください。<strong>注意</strong>: 統合コンソールを使用している場合、必要な IAM アクセス許可は自動的に設定されます。</p> \n<h2></h2> \n<h2>ウォークスルー</h2> \n<p>このソリューションをデプロイするには、<a href=\"https://aws.amazon.com/blogs/mt/cloudformation-stacksets-delegated-administration/\" target=\"_blank\" rel=\"noopener\">CloudFormation StackSets の委任管理者</a>アカウントを使用してください。</p> \n<h3></h3> \n<h3>Step1: CloudFormation テンプレートを使用したリソースのデプロイ</h3> \n<ol> \n <li><a href=\"https://github.com/aws-samples/sample_automate_installing_SSM_agent_on_unmanaged_EC2_instances/blob/main/Templates/CloudFormation/SSMAgentMultiAccountInstallation.yaml\" target=\"_blank\" rel=\"noopener\">&nbsp;CloudFormation テンプレート</a>をダウンロードします。</li> \n <li>適切な AWS アカウントにログインします。有効になっている場合は、統合コンソールのホームリージョンに切り替えます。</li> \n <li>AWS CloudFormation のコンソールに移動し、ナビゲーションペインのスタックをクリックした後スタックページで、右上の<strong>スタックの作成</strong>を選択し、<strong>新しいリソースを使用 (標準) </strong>を選択します。</li> \n <li><strong>前提条件 – テンプレートの準備</strong>で、<strong>既存のテンプレートを選択</strong>を選択します。</li> \n <li><strong>テンプレートソース</strong>で、<strong>テンプレートファイルのアップロード</strong>を選択し、<strong>ファイルの選択</strong>を選択して、ステップ 1 でダウンロードしたテンプレートを選択します。</li> \n <li><strong>次へ</strong>を選択します。</li> \n <li>スタック名を入力します (例: SSMAgentMultiAccountInstallation)。</li> \n <li>パラメータセクションで、パラメータの値を指定します: \n  <ul> \n   <li><strong>DeploymentTargetsOUs</strong> では、ターゲットインスタンスが存在する組織単位 (OU) の ID を指定します。CloudFormation は、Stacksets を使用してこれらのアカウントとリージョンにリソースを作成しようとします。</li> \n   <li><strong>OrganizationId</strong>では、<a href=\"https://docs.aws.amazon.com/ja_jp/organizations/latest/userguide/orgs_view_org.html#orgs_view_org\" target=\"_blank\" rel=\"noopener\">Organizations の組織 ID</a> を入力します。</li> \n   <li><strong>TargetRegions</strong>では、組織内のターゲットインスタンスが存在するリージョンを入力します。</li> \n  </ul> </li> \n <li><strong>スタックオプションの設定</strong>ページで、必要に応じてタグを適用します。</li> \n <li>機能セクションで、<strong>AWS CloudFormation によって IAM リソースがカスタム名で作成される場合があることを承認します。</strong>を選択し、<strong>次へ</strong>を選択します。</li> \n <li><strong>確認して作成ページ</strong>で<strong>送信</strong>を選択します。</li> \n</ol> \n<div id=\"attachment_61624\" class=\"wp-caption aligncenter\" style=\"width: 2019px\"> \n <p><img class=\"wp-image-61624 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Picture1-7-1.png\" alt=\"CloudFormation stack parameters configuration in the console console showing three input fields: 1. DeploymentTargetsOUs: For specifying Organizational Unit IDs where target instances are located. 2. OrganizationId: For entering the Organization ID. 3. TargetRegions: For entering the regions where target instances are located.\" aria-describedby=\"caption-attachment-61624\"></p> \n <p id=\"caption-attachment-61624\" class=\"wp-caption-text\">図 2 – AWS CloudFormation コンソール – スタックページ</p> \n</div> \n<h3></h3> \n<h3>Step2: Automation ランブックの実行</h3> \n<ol> \n <li>CloudFormation テンプレートのデプロイが完了したら、同じリージョンで Systems Manager コンソールを開きます。</li> \n <li>ナビゲーションペインで <strong>変更管理ツールカテゴリの自動化</strong>を選択し、<strong>Execute runbook</strong> を選択します。</li> \n <li><strong>Owned by me</strong> タブで、<strong>SSMAgentInstall-Orchestrator </strong>を選択し、<strong>Next</strong> を選択します。</li> \n <li><strong>Input parameters</strong> セクションで、必要な入力を指定します: \n  <ul> \n   <li><strong>AutomationAssumeRole</strong> に、SSMAgentInstall-MAMR-AutomationAdministrationRole を選択します</li> \n   <li><strong>UploadLogsToS3Bucket</strong> に、ログ用 S3 バケット <strong>ssm-agent-install-automation-logs-&lt;アカウント ID&gt;</strong> を選択します</li> \n  </ul> </li> \n <li>タグを使ってインスタンスをターゲットにする場合は、以下を指定します<strong>:</strong> \n  <ul> \n   <li><strong>TargetAccounts – </strong>アンマネージドインスタンスが実行されているアカウント ID または OU を入力します。</li> \n   <li><strong>TargetRegions – </strong>アンマネージドインスタンスを含むリージョンを入力します。</li> \n   <li><strong>TargetTagKey – </strong>ターゲットのタグキーを tag: として入力します (すべてのインスタンスをターゲットにする場合は InstanceIds を使用)。</li> \n   <li><strong>TargetTagValue – </strong>ターゲットのタグ値を入力します (すべてのインスタンスをターゲットにする場合は、InstanceIds と共に * を使用)。</li> \n  </ul> </li> \n <li>あるいは、以前に Systems Manager 統合コンソールで診断を実行した場合は、<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/running-diagnosis-execution-ec2.html\" target=\"_blank\" rel=\"noopener\">診断と修復</a> の出力を使用してCSV からアンマネージドインスタンスを取得できます: \n  <ul> \n   <li>ナビゲーションペインで<strong>診断および是正</strong>を選択します。</li> \n   <li><strong>View executions</strong> を選択します。</li> \n   <li>実行を選択し、<strong>Output</strong> セクションを展開します。</li> \n   <li><strong>AggregateOutput.ExportObjectUri</strong> から S3 パスをコピーします。</li> \n  </ul> </li> \n <li><strong>Execute</strong> を選択します。</li> \n <li>完了すると、 S3 バケットに集約レポートの CSV ファイルが作成され、出力サマリーにファイルパスを表示します。</li> \n</ol> \n<div id=\"attachment_61625\" class=\"wp-caption aligncenter\" style=\"width: 2158px\"> \n <p><img class=\"wp-image-61625 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Picture2-5-1.png\" alt=\"The image shows an example of the final output at the end of the Automation execution.\" aria-describedby=\"caption-attachment-61625\"></p> \n <p id=\"caption-attachment-61625\" class=\"wp-caption-text\">図 3 – AWS Systems Manager – オートメーション Output</p> \n</div> \n<p>レポート CSV ファイルには、インスタンスごとの詳細と実行ログが含まれています:</p> \n<div id=\"attachment_61626\" class=\"wp-caption aligncenter\" style=\"width: 2469px\"> \n <p><img class=\"wp-image-61626 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Picture3-5.png\" alt=\"The image shows an example of the report csv file generated by Orchestrator Automation runbook.\" aria-describedby=\"caption-attachment-61626\"></p> \n <p id=\"caption-attachment-61626\" class=\"wp-caption-text\">図 4 – インスタンスの詳細 CSV レポート</p> \n</div> \n<p>このソリューションは、CloudFormation StackSets を使用して必要なリソースを複数の AWS アカウントにデプロイし、その後 Systems Manager Automation ランブックを実行して SSM エージェントをインストールします。完了すると、S3 にインスタンスレベルの詳細と実行ログを含む包括的な CSV レポートを生成し、組織全体のデプロイ状況を可視化します。上記 Automation ランブックを使用した後に SSM エージェントがインストールされていない場合は、<a href=\"https://aws-samples.github.io/cloud-operations-best-practices/docs/guides/centralized-operations-management/node-management/managing-ssm-agent\" target=\"_blank\" rel=\"noopener\">ベストプラクティスとして紹介されている方法</a>のいずれかを使用するか、<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/manually-install-ssm-agent-linux.html\" target=\"_blank\" rel=\"noopener\">手動インストール</a>に切り替えることができます。</p> \n<h2></h2> \n<h2>クリーンアップ</h2> \n<p>ソリューションが不要になった場合は、プロビジョニングした AWS リソースを削除することを忘れないでください。これにより、継続的なコストを回避できます。クリーンアップするには:</p> \n<ol> \n <li>&nbsp;AWS CloudFormation コンソールに移動します。</li> \n <li>このソリューションで作成したスタックを選択します。</li> \n <li><strong>削除</strong>を選択し、確認画面が表示されたら削除をクリックします。</li> \n</ol> \n<p>削除プロセスでは、CloudFormation テンプレートと Automation ランブックの両方で作成されたすべてのリソース (S3 バケット、ログファイル、関連する IAM ロールとポリシー、その他の依存リソースなど) を削除します。</p> \n<h2></h2> \n<h2>まとめ</h2> \n<div> \n <p>このAWS Systems Manager のエージェントインストールの自動化ソリューションは、複雑な手動プロセスを効率的な運用に変革することを目的としています。手動でのエージェントインストールの手間を軽減することで、組織が Systems Manager のポテンシャルを最大限に活用できるよう設計されています。組織は AWS 基盤の運用の効率化、セキュリティコンプライアンスの確保、自動化された管理を実現できます。</p> \n <p>EC2インスタンスに SSM エージェントがインストールされたら、AWS Systems Manager の機能を深く活用してください。Patch Manager、Session Manager、Parameter Store、Automation などの機能を活用すると、AWS 運用をさらに強化できます。</p> \n</div> \n<ul class=\"p-rich_text_list p-rich_text_list__bullet p-rich_text_list--nested\" data-border=\"0\" data-indent=\"0\" data-list-tree=\"true\" data-stringify-type=\"unordered-list\"> \n <li data-stringify-border=\"0\" data-stringify-indent=\"0\"><a class=\"c-link\" href=\"https://aws.amazon.com/awstv/watch/5c64c6a2a17/\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://aws.amazon.com/awstv/watch/5c64c6a2a17/\">自動パッチ適用を実装する</a>: Patch Manager を使用して、EC2 インスタンスに定期的な自動パッチ適用スケジュールを設定し、システムを常に最新で安全な状態に維持します。</li> \n <li data-stringify-border=\"0\" data-stringify-indent=\"0\"><a class=\"c-link\" href=\"https://www.youtube.com/watch?v=O9DNLecCi90\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://www.youtube.com/watch?v=O9DNLecCi90\">Session Manager で セキュリティを強化する</a>: SSH アクセスを Session Manager に置き換え、インバウンドポートを開く必要なく、安全で監査可能なインスタンスアクセスを実現します。</li> \n <li data-stringify-border=\"0\" data-stringify-indent=\"0\"><a class=\"c-link\" href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/parameter-store-working-with.html\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-working-with.html\">Parameter Store による設定の効率化</a>: 構成データ、シークレット、その他の運用パラメータを Parameter Store に安全に保存します。</li> \n</ul> \n<div>\n ここで立ち止まらず、\n <a href=\"https://aws.amazon.com/systems-manager/features/\">AWS Systems Managerのさまざまな機能</a>を活用しましょう。\n <br> 自動パッチ管理からセキュアなリモートアクセス、パラメータストアからメンテナンスウィンドウまで、Systems Manager には多くの機能があります。これらを活用することで、AWS 基盤の管理を効率化し、運用の効率性を高めることができます。\n</div> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"wp-image-11636 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/aaalzand-400.jpg\" alt=\"\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Ali Alzand</h3> \n  <p>Ali は、Amazon Web Services のMicrosoft Specialist Solutions Architectです。Ali は、グローバルな顧客が Microsoft のワークロードをクラウドに移行、モダナイズ、最適化することを支援しています。Aliは、Systems Manager、Amazon EC2 Windows、EC2 Image Builder などの AWS サービスを活用したクラウド運用に特化しています。仕事以外では、アウトドアを探索したり、週末にグリルで友人とバーベキューを楽しんだり、さまざまな料理を味わうことを楽しんでいます。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"wp-image-11636 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Justin-Thomas.jpg\" alt=\"\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Justin Thomas</h3> \n  <p>Justin Thomas は、AWS Premium Support のシニアクラウドサポートエンジニアです。Justin は、AWS Systems Manager、Linux、シェルスクリプティングに特に長けており、顧客のクラウドインフラストラクチャの移行、最適化、ナビゲーションに関する技術的なガイダンスを提供することに強い関心を持っています。仕事以外では、友人や家族と過ごす時間を大切にし、新しい料理を試したり映画を観たりするのが好きです。</p> \n </div> \n</footer> \n<p>翻訳は Partner Sales Solutions Architect 福井 敦が担当しました。</p>"
  },
  {
    "title": "vitejs/vite – v6.4.0",
    "date": "2025-10-15T09:42:05.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.4.0",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.4.0/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "README ファイルの心配をやめた方法",
    "date": "2025-10-15T06:23:54.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/how-i-stopped-worrying-about-readme-files/",
    "content": "<p>本記事は 2025 年 10 月 9 日に公開された <a href=\"https://keerthi-sreenivas.github.io/Profile/?refresh=1\" target=\"_blank\" rel=\"noopener\">Keerthi Sreenivas</a> による “<a href=\"https://kiro.dev/blog/how-i-stopped-worrying-about-readme-files/\" target=\"_blank\" rel=\"noopener\">How I stopped worrying about ReadMe files</a>” を翻訳したものです。</p> \n<p>多くの開発者と同じように、私もこんな経験があります。：深夜 2 時に素晴らしい新機能をプッシュし、ビルドが通ってデプロイが成功したときの達成感。ところが 3 週間後に、新しいチームメンバーが私の古い README を見ながらオンボーディングしようとすると、そこに書かれているのはバージョン2.1の手順。一方で、実際に動いているのはバージョン3.2。セットアップコマンドは通らず、APIエンドポイントも変わっている。かつて頼りになっていたドキュメントが、今や足かせになっていたのです。</p> \n<p>開発チームにとって、ドキュメントを常に最新に保つのは大きな課題です。変化の早い開発環境において、コードの変更のたびに README を手動で更新するのは現実的ではありません。その結果、ドキュメントはすぐに古くなり、信頼できない情報源となってしまいます。これが新しいメンバーのオンボーディングを遅らせ、開発者同士が質問のために作業を中断しなければならない事態を引き起こします。こうした絶え間ない中断はシニアエンジニアの負担を増やし、燃え尽き症候群や離職を加速させます。そして彼らがチームを離れると、重要な組織の知識も一緒に失われてしまうのです。</p> \n<h2>ドキュメントが自動的に「魔法のように」更新されるとしたら？</h2> \n<p><a href=\"https://kiro.dev/docs/hooks/\" target=\"_blank\" rel=\"noopener\">Kiro のエージェントフック</a>がこの問題を解決します。エージェントフックとは、IDE 上で特定のイベントが発生したときに、あらかじめ定義されたエージェントのアクションを自動で実行するトリガーのことです。ドキュメントを手動で更新する代わりに、ファイルを保存した際に README を自動更新したり、エンドポイントの変更時に API ドキュメントを更新したり、コードの進化に応じて使用例を自動生成するようなフックを設定できます。</p> \n<h2>仕組み</h2> \n<p><strong>1. エージェントフックを定義する：</strong> ユーザーは、ドキュメント要件をエージェントフックとして自然言語で定義できます。<br> プロンプトの例：「このリポジトリ内のすべての Python ファイル（.py）において、新しく追加された API や削除された古い API を検出し、OpenAPI の YAML を更新してください。存在しなくなった API は削除してください。また、.py ファイルの更新内容に基づいて ReadMe ファイルも更新してください。」<br> 図 1 は、ユーザーがエージェントフックを作成している様子を示しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/1-How-I-stopped-worrying-about-ReadMe-files-1.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166891\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/1-How-I-stopped-worrying-about-ReadMe-files-1.png\" alt=\"\" width=\"1640\" height=\"1054\"></a></p> \n<p><strong>2. Kiro がエージェントフック設定を作成する：</strong> Kiro は、エージェントフック要件をタイトル、説明、イベント、監視するファイルパス、およびイベント発生時に Kiro に送信される指示を含んだ構成を自動作成します。詳細については、<a href=\"https://kiro.dev/docs/hooks/best-practices/\" target=\"_blank\" rel=\"noopener\">フック定義のベストプラクティス</a>をご参照ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/2-How-I-stopped-worrying-about-ReadMe-files.png\"><img loading=\"lazy\" class=\"alignnone wp-image-166888 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/2-How-I-stopped-worrying-about-ReadMe-files.png\" alt=\"\" width=\"1636\" height=\"1784\"></a></p> \n<p>この場合では、ステップ 1 のプロンプト例に基づいて、以下の構成（図 2）が作成されました。Kiro はタイトルを「API Documentation Sync」として構成を生成し、イベントを「File Saved」（他の<a href=\"https://kiro.dev/docs/hooks/types/\" target=\"_blank\" rel=\"noopener\">フックタイプ</a>も利用可能）として設定し、監視するパスをリポジトリ内のすべての .py ファイルに設定しました。エージェントフックの指示も、エージェントフック作成時にユーザーが提供した初期プロンプトに基づいて生成されます。</p> \n<h3>エージェントフック作成</h3> \n<div id=\"attachment_166895\" style=\"width: 1010px\" class=\"wp-caption alignnone\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-creation-How-I-stopped-worrying-about-ReadMe-files.gif\"><img aria-describedby=\"caption-attachment-166895\" loading=\"lazy\" class=\"wp-image-166895 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-creation-How-I-stopped-worrying-about-ReadMe-files.gif\" alt=\"\" width=\"1000\" height=\"650\"></a>\n <p id=\"caption-attachment-166895\" class=\"wp-caption-text\">エージェントフックの作成（ステップ 1 と 2 を表示）</p>\n</div> \n<p>エージェントフックが作成されると、json 設定が .kiro/hooks フォルダに .hook ファイルとして保存されることがわかります。私の場合、図 3 の以下の設定が保存されます。エージェントフックの設定は、UI または生成された .hook ファイルのいずれかの方法で変更できます。</p> \n<p>エージェントフック作成後に .kiro/hook/api-documentation-sync.kiro.hook に保存される設定：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-text\">{\n  \"enabled\": true,\n  \"name\": \"API Documentation Sync\",\n  \"description\": \"Watches for changes in Python files to detect new or removed API's, the nupdates OpenAPI YAML documentation and README files accordingly\",\n  \"version\": \"1\",\n  \"when\": {\n    \"type\": \"fileEdited\",\n    \"patterns\": [\n      \"**/*.py\"\n    ]\n  },\n  \"then\": {\n    \"type\": \"askAgent\",\n    \"prompt\": \"Analyze the changed Python files to identify any new API endpoints, modified endpoints, or removed endpoints. Then:\n\n\n1. Scan all Python files in the repository to build a complete inventory of current API endpoints\n2. Compare with existing OpenAPI YAML documentation to identify:\n - New APIs that need to be added\n - Removed APIs that need to be deleted\n - Modified APIs that need updates\n3. Update the OpenAPI YAML file with the detected changes\n4. Update README.md and any other relevant documentation files to reflect the API changes\n5. Provide a summary of what APIs were added, modified, or removed\n\n\nFocus on Flask routes, FastAPI endpoints, Django views, or any other Python web framework endpoints you find.\"\n  }\n}</code></pre> \n</div> \n<p><strong>3. イベント発生時にフックがトリガーされる：</strong> ファイルの保存や作成などのイベントが発生すると、エージェントフックがトリガーされ、Kiro 内で新しいセッションがバックグラウンドで実行されます。開発者は、エージェントフックセッションを通じて提案された変更を受け入れたり修正したりできます。</p> \n<p><strong>フックをテストしてみましょう。</strong> たとえば Kiro に「レコードを CSV として抽出する新しい API を追加するのを手伝って」と依頼したとします。Kiro は関連する .py ファイルに新しい API エンドポイントを追加します。バックグラウンドでは、「Execute hook: API Documentation Sync」という名前の別のセッションが作成され、Kiro が OpenAPI.yaml ファイルと README ファイルを更新します。Kiro は導入された変更を追跡するために CHANGELOG.md も生成します。<br> 以下のビデオは、新しい API が「app.py」ファイルに追加されたときに API Documentation Sync フックがトリガーされる様子を示しています。</p> \n<h3>エージェントフックがトリガーされる</h3> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-triggered-How-I-stopped-worrying-about-ReadMe-files.gif\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166898\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-triggered-How-I-stopped-worrying-about-ReadMe-files.gif\" alt=\"\" width=\"750\" height=\"487\"></a></p> \n<h2>エージェントフックで他に何ができるか？</h2> \n<p>README の自動化は強力ですが、それは始まりに過ぎません。エージェントフックは、コードが変更されたときに必要となるあらゆる日常的なタスクを自動化できます：</p> \n<ul> \n <li><strong>コード最適化：</strong> 可読性、保守性、パフォーマンス最適化のためのコード最適化</li> \n <li><strong><a href=\"https://kiro.dev/docs/hooks/examples/#internationalization-helper\" target=\"_blank\" rel=\"noopener\">言語ローカライゼーション</a>：</strong>ユーザー向けテキストコンテンツの自動翻訳生成</li> \n <li><strong>セキュリティドキュメント：</strong> 認証コードを変更したときのセキュリティ考慮事項の更新</li> \n <li><strong>アーキテクチャ図：</strong> サービス統合を変更したときのシステム図の更新</li> \n <li><strong>デプロイメントガイド：</strong> Docker 設定を変更したときのデプロイメント手順の更新</li> \n <li><strong>トラブルシューティングガイド：</strong> 例外処理コードに基づく一般的なエラーシナリオの生成</li> \n <li><strong><a href=\"https://kiro.dev/docs/hooks/examples/#integration-with-mcp\" target=\"_blank\" rel=\"noopener\">Figma デザインの検証</a>：</strong> Figma MCP を使用して HTML/CSS ファイルが Figma デザインに従っているかを検証</li> \n</ul> \n<p>その他にもたくさんあります。詳細なエージェントフック設定を含む<a href=\"https://kiro.dev/docs/hooks/examples/\" target=\"_blank\" rel=\"noopener\">例のリスト</a>をご覧ください。</p> \n<h2>最終的に重要なのは何か</h2> \n<p>ドキュメントが自動で常に最新の状態に保たれるようになると、まるで魔法のような変化が起こります。：開発者は再びドキュメントを信頼するようになります。チームメンバー同士で作業を中断し合うことも減ります。開発者は集中状態を保ったままより多くの時間を過ごし、コード品質が向上し、機能のリリースも加速します。しかし、得られる恩恵は生産性指標にとどまりません。</p> \n<p>新しい開発者のオンボーディングが速くなり、正確なドキュメントが組織にとっての「知の蓄積」なります。経験豊富な開発者がチームから去るとき、知識も一緒にドアから出て行くのではなく、彼らの在職中にエージェントフックによって常に最新の状態に保ってきたガイドの中に生き続けます。ドキュメントは 3 か月前の古いスナップショットではなく、コードベースの現在の状態をリアルタイムで反映した「生きた記録」であるべきです。Kiro のエージェントフックを活用すれば、ドキュメントがコードと並行して自動的に進化する間、あなたは優れたソフトウェアの構築に集中できます。</p> \n<h2>まとめ</h2> \n<p>みなさんが Kiro でエージェントフックを設定し、ご自身のプロジェクトで実際に動作する様子を見るのをとても楽しみにしています。ぜひ <a href=\"https://discord.com/invite/kirodotdev\" target=\"_blank\" rel=\"noopener\">Discord サーバー</a>にて、ご意見やご感想をお聞かせください。このブログで話したドキュメントのユースケースから始めて、他のユースケースにもぜひチャレンジしてみてください。具体例は<a href=\"https://kiro.dev/docs/hooks/examples/\" target=\"_blank\" rel=\"noopener\">こちらのドキュメント</a>でも紹介されています。</p> \n<h2>エージェントフック使用時の注意点</h2> \n<p>正規表現を利用するイベントトリガー（たとえば、<code>**/*.py</code>）でエージェントフックを実装する場合、パターンの適用範囲を慎重に検討することが重要です。あまりに広範囲なスコープになると、フックが実行されたときに過度の変更をもたらし、大規模プロジェクトにて意図しないドキュメント更新につながる可能性があります。効率性とドキュメントの明確性を維持するために、より具体的で対象を絞ったパターンマッチングを実装することをお勧めします。<a href=\"https://kiro.dev/docs/hooks/troubleshooting/\" target=\"_blank\" rel=\"noopener\">エージェントフックのトラブルシューティング</a>を参照してください。</p> \n<p>翻訳はApp Dev Consultantの宇賀神が担当しました。</p>"
  },
  {
    "title": "AWS Transform for VMware を使用して VMware ワークロードを移行およびモダナイズする",
    "date": "2025-10-15T04:29:34.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/migrate-and-modernize-vmware-workloads-with-aws-transform-for-vmware/",
    "content": "<p>本稿は、2025 年 7 月 8 日に <a href=\"https://aws.amazon.com/blogs/architecture/\" target=\"_blank\" rel=\"noopener\">AWS Architecture Blog</a> で公開された <a href=\"https://aws.amazon.com/jp/blogs/architecture/migrate-and-modernize-vmware-workloads-with-aws-transform-for-vmware/\" target=\"_blank\" rel=\"noopener\">Migrate and modernize VMware workloads with AWS Transform for VMware</a> を翻訳したものです。</p> \n<p>2025年5月15日、AWS は画期的なソリューションである <a href=\"https://aws.amazon.com/jp/transform/vmware/\" target=\"_blank\" rel=\"noopener\">AWS Transform for VMware</a> を発表しました。この革新的なサービスは、クラウド移行における長年の課題に正面から取り組み、AWS クラウドへの簡素化され効率的な移行の新たな時代を切り開きます。手作業を大幅に削減し、重要な VMware ワークロードの移行を加速することで、AWS Transform for VMware は、組織がクラウドへのアプローチを革新することを目指しています。</p> \n<p><a href=\"https://aws.amazon.com/jp/blogs/news/new-capabilities-in-aws-transform-for-vmware/\" target=\"_blank\" rel=\"noopener\">一般提供開始の発表</a>以来、AWS Transform for VMware は業界全体で注目を集めており、組織はその機能を活用して VMware のワークロードの移行とモダナイゼーションの取り組みを加速したいと考えています。この革新的な技術の詳細を掘り下げていく中で、 AWS Transform for VMware が移行を簡素化するだけでなく、クラウド導入とデジタルトランスフォーメーションの実態を再形成していることを明らかにします。</p> \n<h2>VMware 移行の課題</h2> \n<p>企業のワークロードをクラウドに移行することは、単なる技術的な課題ではありません。それは、ビジネス変革、精度、スピード、そして最小限の中断です。長年にわたる確立された運用プロセスは、文書化が不十分な構成、一貫性に欠けるセキュリティプラクティス、そして暗黙知への強い依存を伴う複雑な環境を作り出すことが多くあります。技術チームは、これらの変革プロジェクトを実行しながら、複雑なアプリケーションの依存関係を把握し、複数のステークホルダー間で調整を行い、ビジネスの継続性を維持しなければなりません。包括的な文書化の欠如と、システム間の依存関係に対する明確な理解の不足は、頻繁な移行期間の延長やプロジェクトリスクの増加につながります。さらに、進行中の運用と移行活動のバランスを取る必要性も課題です。適切な知識の移転を実現することは、これらの重要な取り組みにさらに複雑さを加えます。</p> \n<h2>ソリューションの概要</h2> \n<p>AWS Transform for VMware が、アプリケーションのディスカバリーを簡素化し、ネットワーク変換を自動化し、包括的なアーキテクチャを通じて複雑な移行をオーケストレーションする方法について、以下の図で見ていきましょう。</p> \n<p>これらの機能がどのように連携するかを理解するために、アーキテクチャの各構成要素を調べてみましょう。</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/07/06/Screenshot-2025-07-06-at-18.42.20.png\" alt=\"Component architecture of AWS Transform for VMware\" width=\"1207\" height=\"726\"></p> \n<h2>効率化されたディスカバリーとアセスメント</h2> \n<p>この旅は、VMware 環境の徹底的なディスカバリーとアセスメントから始まります (1)。<a href=\"https://aws.amazon.com/jp/transform/vmware/\" target=\"_blank\" rel=\"noopener\">AWS Transform for VMware</a> (4) は複数のディスカバリー方法をサポートしています。1つの選択肢は、VMware インベントリ収集用の <a href=\"https://www.dell.com/en-us/shop/vmware/sl/rvtools\" target=\"_blank\" rel=\"noopener\">RVTools</a> です。VMware NSX を実行しているお客様向けには、オプションで <a href=\"https://aws.amazon.com/jp/blogs/news/exporting-network-configuration-data-with-import-export-for-nsx/\" target=\"_blank\" rel=\"noopener\">import/export</a> 機能があります。さらに、<a href=\"https://aws.amazon.com/jp/application-discovery/\" target=\"_blank\" rel=\"noopener\">AWS Application Discovery Service</a> は、移行のためのデータと依存関係を収集する、エージェントベースおよびエージェントレスの両方のディスカバリーオプション (2) を提供しています。</p> \n<p>インベントリ検出 (5) は、ソース環境から重要なデータを収集し、AWS Migration Discovery アカウント (7) 内にある <a href=\"https://aws.amazon.com/jp/s3/\" target=\"_blank\" rel=\"noopener\">Amazon Simple Storage Service</a> (Amazon S3) バケット (12) に安全に保存します。このデータは、十分な情報に基づいた移行計画の基礎となり、AWS Application Discovery Service (15) によって、AWS Migration Planning アカウントでさらに処理されます。AWS Transform は、これらのサービスと連携し、移行の進捗状況を追跡し、サーバーのインベントリと依存関係データを収集するための単一の場所を提供します。これは、アプリケーションの適切なグループ化とウェーブプランニングの成功に不可欠です。</p> \n<h2>インテリジェントなネットワーク変換とウェーブプランニング</h2> \n<p>環境を包括的に理解することで、AWS Transform for VMware は、次の重要なフェーズへ移行します。ネットワーク変換機能 (19) は、ターゲットネットワークインフラストラクチャを設定するために、<a href=\"https://aws.amazon.com/jp/cloudformation/\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation テンプレート</a> (13、26) の作成を自動化します。これらのテンプレートにより、クラウド環境がソース設定を密接に反映することを確実にし、移行のセットアップを簡素化します。</p> \n<p>一方、ウェーブプランニング機能 (6) は、高度な<a href=\"https://en.wikipedia.org/wiki/Graph_neural_network\" target=\"_blank\" rel=\"noopener\">グラフニューラルネットワーク</a>を使用してアプリケーションの依存関係を分析し、最適な移行ウェーブを計画します。これにより、複雑なポートフォリオおよびアプリケーションの依存関係分析が最小限に抑えられ、移行準備の整ったウェーブプランが提供され、スムーズな移行を実現します。</p> \n<h2>強化されたセキュリティとコンプライアンス</h2> \n<p>セキュリティは移行プロセス全体を通じて最優先事項です。<a href=\"https://aws.amazon.com/jp/kms/\" target=\"_blank\" rel=\"noopener\">AWS Key Management Service</a> (AWS KMS) (8、16、26) は、保存されたデータ、会話履歴、および成果物に対して堅牢な暗号化を提供します。デフォルトでは、AWS マネージドキーが使用され、追加の制御のために<a href=\"https://docs.aws.amazon.com/ja_jp/kms/latest/developerguide/concepts.html\" target=\"_blank\" rel=\"noopener\">カスタマーマネージドキー</a>を使用するオプションがあります。</p> \n<p><a href=\"https://aws.amazon.com/jp/organizations/\" target=\"_blank\" rel=\"noopener\">AWS Organizations</a> (9) は、複数の AWS アカウントにわたる一元管理を可能にし、<a href=\"https://aws.amazon.com/jp/cloudtrail/\" target=\"_blank\" rel=\"noopener\">AWS CloudTrail</a> (14、26) は、完全な監査証跡のために API アクティビティの取得と記録をします。アクセス制御は、<a href=\"https://aws.amazon.com/jp/iam/\" target=\"_blank\" rel=\"noopener\">AWS Identity and Access Management</a> (IAM) (26) を通じて管理され、AWS アカウント全体で一元化されたアクセス管理を提供します。</p> \n<p><a href=\"https://aws.amazon.com/jp/cloudwatch/\" target=\"_blank\" rel=\"noopener\">Amazon CloudWatch</a> (10、26) は、管理アカウント内の AWS Transform サービスのアクティビティ、リソース利用状況、および運用メトリクスを継続的に監視し、移行プロセス全体を通じて完全な可視性と制御を提供します。<a href=\"https://aws.amazon.com/jp/iam/identity-center/\" target=\"_blank\" rel=\"noopener\">AWS Identity Center</a> (11) は、移行に関与するすべての AWS アカウントに一元的なアクセス管理を提供することで、セキュリティをさらに強化します。</p> \n<h2>組織的な移行実行</h2> \n<p>移行を実行する時が来たら、AWS Transform はさまざまな AWS ツールとサービス (20) と連携し、エンドツーエンドの移行をオーケストレーションします。<a href=\"https://aws.amazon.com/jp/application-migration-service/\" target=\"_blank\" rel=\"noopener\">AWS Application Migration Service</a> (25) は、綿密に計画されたウェーブとグループ化に基づいて、ソース環境から AWS Migration Target Account (18) の <a href=\"https://aws.amazon.com/jp/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Compute Cloud</a> (Amazon EC2) インスタンス (21) にサーバーを複製します。</p> \n<p>AWS レプリケーションエージェント (2) は、AWS Application Migration Service と連携し、効率的で信頼性の高いデータ転送を実現します。<a href=\"https://aws.amazon.com/jp/ebs/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Block Store</a> (Amazon EBS) (21) は、移行された仮想マシンに必要なストレージを提供し、最適なパフォーマンスとスケーラビリティを実現します。</p> \n<h2>柔軟なネットワーク構成</h2> \n<p>AWS Transform for VMware は、異なる要件に対応する2つのネットワークモデルを提供します：</p> \n<ul> \n <li>ハブアンドスポークモデル – <a href=\"https://aws.amazon.com/jp/transit-gateway/\" target=\"_blank\" rel=\"noopener\">AWS Transit Gateway</a> (23) は、Amazon Virtual Private Clouds (Amazon VPC) に共有 <a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/vpc-nat-gateway.html\" target=\"_blank\" rel=\"noopener\">NAT ゲートウェイ</a>を持つ中央ハブ VPC を介して接続します。このモデルは、一元管理および共有サービスに最適です。</li> \n <li>分離モデル – 各 VPC は接続性が確立されていない状態で独立して動作します。このアプローチは、既存の AWS ネットワークインフラストラクチャを持つお客様向けに設計されており、新しい VPC を既存のネットワークトポロジーに手動で接続することを可能にします。</li> \n</ul> \n<p>AWS Transform によって作成された VPC (22) は、オンプレミスのネットワークセグメントと一致し、シームレスな移行を提供します。NAT ゲートウェイ (24) は、プライベートサブネットにアウトバウンドインターネットアクセスを提供し、セキュリティを維持しながら必要な接続性を可能にします。ハブアンドスポークアーキテクチャでは、ハブ VPC の一元化 NAT ゲートウェイを複数のスポーク VPC に提供でき、コストの最適化と管理の簡素化を実現できます。分離された VPC 展開の場合、インターネットアクセスを必要とする各 VPC 内で専用の NAT ゲートウェイをプロビジョニングする必要があります。すべての場合において、NAT ゲートウェイを通る Egress トラフィックの流入を可能にするために、ルートテーブルを設定する必要があります</p> \n<p>完全なセットアップ手順と要件については、<a href=\"https://docs.aws.amazon.com/ja_jp/transform/latest/userguide/what-is-service.html\" target=\"_blank\" rel=\"noopener\">AWS Transform ユーザーガイド</a>を参照してください。</p> \n<h2>追加の考慮事項</h2> \n<p>AWS Transform for VMware のディスカバリーワークスペースは、世界中でご利用いただけます (3)。サポートされているリージョンに関する最新の情報については、<a href=\"https://aws.amazon.com/jp/about-aws/global-infrastructure/regional-product-services/\" target=\"_blank\" rel=\"noopener\">AWS Services by Region</a> (17) を参照してください。</p> \n<p>移行プロセス全体を通じて、AWS Migration Discovery アカウントと AWS Migration Target アカウントの両方の主要な移行成果物は Amazon S3 バケット (12、26) に格納されます。これらには、インベントリデータ、依存関係マッピング、ウェーブプラン、アプリケーショングループ化、同様に Infrastructure as Code templates (AWS CloudFormation および AWS Cloud Development Kit)、およびウェーブごとの移行計画が含まれます。</p> \n<h2>お客様のメリット</h2> \n<p>AWS Transform for VMware は、重要な利点を提供します：</p> \n<ul> \n <li>手作業の手間を削減 – 自動化により人的ミスを最小限に抑え、貴重な IT リソースを解放します</li> \n <li>精度の向上 – AI 主導の依存関係マッピングとウェーブプランを活用でき、最適な移行戦略を立てられます</li> \n <li>コラボレーションの強化 ― 一元管理とトラッキングにより、チーム間の連携が向上します</li> \n <li>コスト最適化 – インスタンスの適切なサイズと AWS の柔軟な価格設定モデルを活用して、即時かつ長期的なコスト削減を実現します</li> \n <li>将来性 – AWS クラウドサービス上で、継続的なモダナイゼーションとイノベーションの機会を開きます</li> \n</ul> \n<p>移行ソリューションを実装する際には、常に組織のセキュリティ要件、コンプライアンス義務、および <a href=\"https://aws.amazon.com/jp/architecture/security-identity-compliance/\" target=\"_blank\" rel=\"noopener\">AWS セキュリティベストプラクティクス</a>を確認し、遵守してください。詳細なセキュリティガイダンスについては、<a href=\"https://docs.aws.amazon.com/ja_jp/security/\" target=\"_blank\" rel=\"noopener\">AWS セキュリティドキュメント</a>と組織のセキュリティチームに相談してください。</p> \n<h2>料金</h2> \n<p>AWS Transform は、エージェント AI 機能により、VMware ワークロード向けの移行およびモダナイゼーションプロジェクトを加速します。現在、アセスメントと変換を含む主要機能を無料* で AWS のお客様へ提供しています。これにより、前払い費用なしで、移行とモダナイゼーションの道のりを迅速化できます。</p> \n<p><em>*無料とは、AWS Transform サービス自体を指します。移行時に使用する AWS サービスおよびリソースには標準料金が適用されます。</em></p> \n<h2>まとめと次のステップ</h2> \n<p>AWS Transform for VMware は、組織に VMware の移行とモダナイゼーションの複雑さを克服する力を与えます。包括的で自動化されたアプローチを提供することで、AWS クラウドへのより高速で信頼性の高い移行を可能にします。この新しいサービスは、変化する VMware の環境を自信を持って進むために必要なツールと機能を提供します。</p> \n<p>探究したアーキテクチャは、AWS Transform for VMware が主要な課題にどのように取り組むか示しています：</p> \n<ul> \n <li>ディスカバリーおよびアセスメントプロセスを効率化</li> \n <li>ネットワーク変換とインテリジェントウェーブプランニングの自動化</li> \n <li>最小限の混乱で移行実行をオーケストレート</li> \n <li>移行全体を通じたセキュリティとコンプライアンスの向上</li> \n <li>一元管理と監視の提供</li> \n <li>多様な要件に対応できる柔軟なネットワークオプションの提供</li> \n</ul> \n<p>VMware 移行の旅を加速する準備はできましたか？ <a href=\"https://aws.amazon.com/jp/transform/vmware/\" target=\"_blank\" rel=\"noopener\">AWS Transform for VMware</a> 製品ページにアクセスして、詳細をご確認いただき、今日から始めましょう。AWS Transform for VMware の<a href=\"https://aws.storylane.io/share/qye0se68an9i?utm_source=pdp\" target=\"_blank\" rel=\"noopener\">インタラクティブデモ</a>をご確認ください。VMware NSX 環境からネットワーク構成をエクスポートする場合は、<a href=\"https://aws.amazon.com/jp/blogs/news/exporting-network-configuration-data-with-import-export-for-nsx/\" target=\"_blank\" rel=\"noopener\">Import/Export for NSX によるネットワーク構成データのエクスポート</a>も参照してください。私たち専門家チームが、お客様の移行およびモダナイゼーションの取り組みをガイドし、AWS クラウドの可能性を最大限に引き出すお手伝いをいたします。</p> \n<hr> \n<h3>著者について</h3> \n<p>\n <!-- '\"` --></p> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/05/28/Screenshot-2025-05-28-at-09.14.50.png\" alt=\"Kiran Reid\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Kiran Reid</h3> \n  <p>Kiran Reidは、AWS の Senior Generative AI および Machine Learning Specialist です。人工知能 (AI) 技術に関する専門知識を持つ Kiran は、AWS のパートナーやお客様と密接に連携し、AI を活用したワークロードの移行とモダナイゼーションを支援しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/06/26/akulrama.jpeg\" alt=\"Ramu Akula\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Ramu Akula</h3> \n  <p>Ramu Akula は、AWS の Principal Portfolio Manager および Telco Network Transformation specialist です。24 年以上にわたる IT 分野での経験を活かし、お客様の AWS へのワークロード移行およびモダナイジングを支援しています</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/1f1362ea41d1bc65be321c0a378a20159f9a26d0/2024/11/07/Patrick-Kremer.png\" alt=\"Patrick Kremer\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Patrick Kremer</h3> \n  <p>Patrick Kremer は、インフラの移行と現代化に特化した Senior Specialist Solutions Architect です。Patrick は 2022 年に AWS に入社し、20 年にわたる VMware の経験を活かし、お客様が AWS ソリューションに移行するのを支援してきました。彼は教育とブログ活動に情熱を持つ、認定 AWS Solutions Architect Professional です。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/06/02/markjagg.jpeg\" alt=\"Mark Jaggers\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Mark Jaggers</h3> \n  <p>Mark Jaggers は、AWS の Outbound Product Management であり、クラウド移行およびディザスタリカバリーソリューションの市場開拓戦略を統括しています。Mark は、AWS Elastic Disaster Recovery と AWS Application Migration Service の両方のサービスチーム内で働き、お客様の大規模な IT インフラストラクチャのモダナイズを支援しています。</p> \n </div> \n</footer> \n<p>この投稿の翻訳は Solutions Architect の田澤が担当させていただきました。原文記事は<a href=\"https://aws.amazon.com/jp/blogs/architecture/migrate-and-modernize-vmware-workloads-with-aws-transform-for-vmware/\" target=\"_blank\" rel=\"noopener\">こちら</a>です。</p>"
  },
  {
    "title": "週刊AWS – 2025/10/6週",
    "date": "2025-10-15T03:53:06.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-weekly-20251006/",
    "content": "<p>みなさん、こんにちは。ソリューションアーキテクトの杉山です。今週も <a href=\"https://aws.amazon.com/jp/blogs/news/tag/%E9%80%B1%E5%88%8Aaws/\">週刊AWS</a> をお届けします。</p> \n<p>2025 年 11 月 21 日に、株式会社LangGenius、株式会社リコー、アマゾンウェブサービスジャパン合同会社が登壇する「<a href=\"https://d2e7mz4alxgx8z.cloudfront.net/\">企業の生成 AI 活用を加速する Dify Enterprise on AWS 〜セキュアなデータの活用とパートナー導入事例〜</a>」のイベントが開催されます。Dify Enterprise の新機能紹介、機密性の高いデータを保有する企業システムと Dify の安全な連携手法、Dify 導入パートナーによる事例紹介を通じて、エンタープライズでの安全かつ効果的な生成 AI 活用の知見を提供します。物理開催のため、事前にお申し込みの上、ご参加ください。</p> \n<p>それでは、先週の主なアップデートについて振り返っていきましょう。</p> \n<p><span id=\"more-166830\"></span></p> \n<h4>2025年10月6日週の主要なアップデート</h4> \n<ul> \n <li>10/6(月) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ec2-c8i-and-c8i-flex-instances-generally-available\" target=\"_blank\" rel=\"noopener\">新しいコンピュート最適化 Amazon EC2 C8i および C8i-flex インスタンス</a><br> AWS が新しいコンピュート最適化インスタンス C8i と C8i-flex の一般提供を開始しました。カスタム Intel Xeon 6 プロセッサを搭載し、従来の Intel ベースインスタンスと比較して最大 15% のコスト削減と 2.5 倍のメモリ帯域幅を実現します。Web アプリケーションでは最大 60%、AI 推論では最大 40% の性能向上を達成します。C8i-flex は Web サーバーやデータベース向けで、料金が少し安価で採用しやすいタイプです。C8i は、CPU 負荷の高いシステム向けのインスタンスタイプです。バージニア北部、オハイオ、オレゴン、スペインリージョンで利用可能です。詳細は<a href=\"https://aws.amazon.com/ec2/instance-types/c8i/\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの Blog 記事をご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-eks-distro-kubernetes-version-1-34\" target=\"_blank\" rel=\"noopener\">Amazon EKS と Amazon EKS Distro が Kubernetes バージョン 1.34 をサポート開始</a><br> Amazon EKS と Amazon EKS Distro で Kubernetes version 1.34 のサポートが開始されました。Kubernetes 1.34 のアップデートの内容を一部取り上げると、コンテナイメージを取得する時のセキュリティが強化され、従来よりも安全にイメージの認証を行えるようになりました。また Pod 内の複数コンテナのリソース管理が簡素化され、より効率的なリソース配分が可能になります。既存クラスターは EKS コンソールや eksctl を使って簡単にアップグレード可能で、全ての AWS リージョンで利用できます。詳細は<a href=\"https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions-standard.html\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n  </ul> </li> \n <li>10/7(火) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/automatic-quota-management-service-quotas/\" target=\"_blank\" rel=\"noopener\">AWS Service Quotas の自動 Quota 管理が一般提供開始</a><br> AWS Service Quotas で自動クォータ管理機能が一般提供開始となりました。AWS Service Quotas は各サービスの利用上限 (Quota) を一元管理するサービスです。新しいアップデートで、Quota 使用量を監視し、上限に近づくと事前に自動通知を受け取れるようになります。これまでは Quota 超過でサービスが停止するリスクがありましたが、事前通知により計画的な対応が可能です。通知は email や SMS、Slack などで受け取れます。</li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-marketplace-japan-consumption-tax-support\" target=\"_blank\" rel=\"noopener\">AWS Marketplace が Channel Partner Private Offers の日本消費税サポートを拡張</a><br> AWS Marketplace で日本の消費税サポートが拡張され、Channel Partner Private Offers (CPPO) にも対応しました。これまで、日本に住所を持つ ISV 会社 (SaaS 系) や Channel Partner が、日本のお客様に販売する場合、AWS Japan が 10% の消費税を徴収して、日本の税務当局に送金をしています。今回のアップデートで、Channel Partner Private Offers (CPPO) の取引においても、日本の消費税のサポートが拡大されました。CPPO とは、AWS パートナーが、AWS Marketplace に出品されている ISV製品・SaaS製品を、各ベンダーに代わって販売することができるプログラムです。詳細は<a href=\"https://aws.amazon.com/jp/local/invoice-faq/\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの FAQ</a>をご参照ください。</li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-marketplace-currencies-usage-based-private-offers\" target=\"_blank\" rel=\"noopener\">AWS Marketplace が使用量ベースのプライベートオファーで新しい通貨をサポート</a><br> AWS Marketplace で Usage ベース (従量課金制) のプライベートオファーが EUR、GBP、AUD、JPY の 4 つの新通貨に対応しました。これまで、通貨が USD のみ利用可能でしたが、利用しやすい通貨で取引できるようになりました。外国為替リスクを回避でき、売り手は現地通貨での受取が可能となり、利用者は調達プロセスが簡素化されます。詳細は<a href=\"https://external-aws-mp-isvs.s3.amazonaws.com/Internationalization/Local_Currency_Cheatsheet_Seller.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-documentdb-mongodb-compatibility-new-regions-asia-pacific-mexico\" target=\"_blank\" rel=\"noopener\">Amazon DocumentDB (MongoDB 互換) が、アジア太平洋地域とメキシコの 4 つの新しいリージョンで利用可能になりました</a><br> Amazon DocumentDB (MongoDB 互換) が大阪リージョン、タイリージョン、マレーシアリージョン、メキシコ中央リージョンで新たに利用可能になりました。Amazon DocumentDB は、MongoDB 互換のフルマネージドデータベースとなり、今回のアップデートでリージョンが拡張し、システムを構成しやすくなりました。</li> \n  </ul> </li> \n <li>10/8(水) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-q-developer-understand-service-prices-estimate-workload-costs\" target=\"_blank\" rel=\"noopener\">Amazon Q Developer がサービス料金の理解とワークロードコストの見積もりを支援</a><br> Amazon Q Developer に新しく「価格・コスト見積もり」を行うための機能が追加されました。自然言語で AWS サービスの料金情報を取得できるため、人間が複数の価格ページを確認する手間を削減しやすくなりました。「RDS 拡張サポートの料金は?」「SNS で月 100 万通知の見積もりは?」といった質問を投げかけられます。AWS Management Console のチャットパネルから利用可能です。詳細は<a href=\"https://docs.aws.amazon.com/cost-management/latest/userguide/ce-cost-analysis-q.html\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.comabout-aws/whats-new/2025/10/general-purpose-amazon-ec2-m8a-instances/\" target=\"_blank\" rel=\"noopener\">新しい汎用 Amazon EC2 M8a インスタンス</a><br> AWS で新しい汎用 EC2 インスタンス M8a の提供が開始されました。5世代目 AMD EPYC プロセッサを搭載し、従来の M7a インスタンスと比較して最大 30% の性能向上と 19% のコストパフォーマンス改善を実現しています。メモリ帯域幅も 45% 向上し、レイテンシに敏感なワークロードにも対応できるようになりました。金融アプリケーション、ゲーム、レンダリング、アプリケーションサーバーなどの高性能が求められる用途に最適で、オハイオ、オレゴン、スペインリージョンで利用可能です。詳細は<a href=\"https://aws.amazon.com/blogs/aws/new-general-purpose-amazon-ec2-m8a-instances-are-now-available\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの Blog 記事をご参照ください。</a></li> \n  </ul> </li> \n <li>10/9(木) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-dynamodb-ipv6/\" target=\"_blank\" rel=\"noopener\">Amazon DynamoDB が Internet Protocol version 6 (IPv6) をサポート開始</a><br> Amazon DynamoDB に VPC からアクセスする際に IPv6 がサポートしました。AWS PrivateLink Gateway および Interface エンドポイントを利用して VPC 内からアクセスする際に、IPv6 を利用した接続が可能となります。現在は米国リージョンで利用可能で、他のリージョンにも順次展開予定です。詳細は<a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/AccessingDynamoDB.html#dual-stackipv4-6\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-quick-suite-agentic-ai-powered-workspace\" target=\"_blank\" rel=\"noopener\">Amazon Quick Suite の提供開始</a><br> 従来あった Amazon QuickSight が Amazon Quick Suite に名前がリブランドされました。組織内の全従業員がデータに触れながら新しいインサイトを得やすくする方向性へのリブランドとなります。AI を活用した新機能を 3 つピックアップすると、Quick Research : インターネット上の情報と社内のデータをかけ合わせて質の高いレポートを作成、Quick Automate : 複雑な多段階のビジネスプロセスを自然処理で定義しながら自動的に処理、Quick Index : 組織内のデータを MCP、S3、Gmail、Sharepoint などと連携してナレッジべースとして提供、といった機能が含まれています。社内データと AI を連携する仕組みを、より統合された形で提供することで、社内でのインサイト発見に活用しやすくなります。最大 25 ユーザーまで 30 日間の無料トライアルが利用でき、バージニア北部、オレゴン、シドニー、アイルランドリージョンで提供中です。東京リージョンについては、Qucik Suite の UI に変更されていますが、新たな機能は現時点では利用できません。詳細は<a href=\"https://aws.amazon.com/jp/blogs/news/reimagine-business-intelligence-amazon-quicksight-evolves-to-amazon-quick-suite/\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの Blog 記事をご参照ください。</a></li> \n  </ul> </li> \n <li>10/10(金) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-client-vpn-macos-tahoe/\" target=\"_blank\" rel=\"noopener\">AWS Client VPN が macOS Tahoe をサポート開始</a><br> AWS Client VPN が MacOS Tahoe (バージョン 26.0) に対応しました。これまでも Mac 用の Client を提供していましたが、より最新の MacOS のバージョンに対応した形です。Client VPN ソフトウェアのバージョン 5.3.1 以降でサポートをしています。Client VPN は、リモートワークで自宅から会社のネットワークや AWS 環境に安全に接続したい場合に利用いただけるネットワーク系のサービスです。詳細は<a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n  </ul> </li> \n</ul> \n<p>それでは、また来週お会いしましょう！</p> \n<h1>著者について</h1> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2024/05/31/sugi-profile_en.png\" alt=\"Suguru Sugiyama\" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\"><a href=\"https://x.com/sugimount\" target=\"_blank\" rel=\"noopener\">杉山 卓(Suguru Sugiyama) / @sugimount</a></h3> \n  <p>AWS Japan のソリューションアーキテクトとして、幅広い業種のお客様を担当しています。最近は生成 AI をお客様のビジネスに活かすためにアイデア出しやデモンストレーションなどを多く行っています。好きなサービスは仮想サーバーを意識しないもの全般です。趣味はゲームや楽器演奏です</p> \n </div> \n</footer>"
  },
  {
    "title": "2025 年 9 月の AWS Black Belt オンラインセミナー資料及び動画公開のご案内",
    "date": "2025-10-15T03:07:24.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/2025-09-aws-blackbelt/",
    "content": "<p>2025 年 9 月に公開された AWS Black Belt オンラインセミナーの資料及び動画についてご案内させて頂きます。<br> 動画はオンデマンドでご視聴いただけます。</p> \n<p>また、過去の AWS Black Belt オンラインセミナーの資料及び動画は「<a href=\"https://aws.amazon.com/jp/blogs/news/aws-blackbelt-overview/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Black Belt Online Seminar 一覧</a>」に一覧がございます。<br> YouTube の再生リストは「<a href=\"https://www.youtube.com/playlist?list=PLzWGOASvSx6FIwIC2X1nObr1KcMCBBlqY\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Black Belt Online Seminar の Playlist</a>」をご覧ください。<span id=\"more-166861\"></span></p> \n<hr> \n<h3>Reserved Instances</h3> \n<p>Reserved Instances は、1 年または 3 年の期間で特定の使用量を契約するかわりに、オンデマンド料金と比較して低料金を実現する柔軟な料金モデルです。本セッションでは、Reserved Instances の概要、購入方法および購入計画などについて説明します。</p> \n<p><iframe loading=\"lazy\" title=\"Reserved InstancesãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/z7CEXdf6ZRw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Reserved Instances_1031_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/z7CEXdf6ZRw\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>Reserved Instances の概要や購入方法を知りたい方</li> \n <li>Reserved Instances の購入計画を立てたい方</li> \n <li>データベースなどのワークロードのコスト最適化を促進したい方</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>Reserved Instances の概要・購入方法について学んでいただけます</li> \n <li>購入計画や購入後のモニタリングについても紹介します</li> \n</ul> \n<p><strong>スピーカー</strong><br> 加須屋 悠己<br> テクニカルアカウントマネージャー</p> \n<hr> \n<h3>Amazon Managed Grafana</h3> \n<p>Amazon Managed Grafana は 拡張性、安全性、⾼可⽤性を備えたフルマネージドな Grafana 環境を提供する AWS サービスです。本セッションでは、Amazon Managed Grafana についてご紹介しております。</p> \n<p><iframe loading=\"lazy\" title=\"Amazon Managed GrafanaãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/4X7Q5ERQncA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-Managed-Grafana_0831_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/4X7Q5ERQncA\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>AWS 上でオープンソースを利⽤したオブザーバビリティに関⼼のある⽅</li> \n <li>Grafana の運⽤に課題を持っている⽅</li> \n <li>Amazon Managed Grafana に興味のある⽅</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>Amazon Managed Grafana の特徴や機能</li> \n <li>Amazon Managed Grafana のユースケース</li> \n</ul> \n<p><strong>スピーカー</strong><br> 辻林侑<br> ソリューションアーキテクト</p> \n<hr> \n<h3>Amazon Cognito</h3> \n<p>Amazon Cognito は、ウェブアプリケーションやモバイルアプリケーションにユーザー認証、認可、ユーザー管理機能を簡単に追加できる認証サービスです。複雑な認証システムの構築や運用が不要になることから、多くのお客様のアプリケーション開発で採用頂いています。本セッションでは、Amazon Cognito を使用するユースケースや機能についてご紹介します。</p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-Cognito_1031_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>）&nbsp;</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>アイデンティティ管理に AWS の利⽤を検討している⽅</li> \n <li>Amazon Cognito でできることを理解されたい⽅</li> \n <li>Cognito ユーザープールと ID プールの違いや使い⽅を理解されたい⽅</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>アイデンティティ管理における Amazon Cognito の使い方を学習いただけます</li> \n <li>Amazon Cognito ユーザープールと ID プールの違いについて理解を深めていただけます</li> \n <li>Amazon Cognito の機能や認証フローを習得いただけます</li> \n</ul> \n<p><strong>スピーカー</strong><br> 鈴⽊ 理希也／海江⽥ 祥汰／吉⽥ 健⼈<br> クラウドサポートエンジニア</p> \n<hr> \n<h3>Amazon GuardDuty Runtime Monitoring 編</h3> \n<p>Amazon GuardDuty の保護プランである Runtime Monitoring は EC2、ECS、EKS のワークロード内部の異常な動作をモニタリングし、セキュリティ脅威を検知できます。本セミナーでは Amazon GuardDuty Runtime Monitoring の概要と開始方法および検知例について解説します。</p> \n<p><iframe loading=\"lazy\" title=\"Amazon GuardDuty Runtime Monitoring ç·¨ãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/UOIHnC75Pek?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-GuardDuty-Runtime-Monitoring_0930_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/UOIHnC75Pek\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>AWS ワークロード上のセキュリティ強化をご検討中の方</li> \n <li>Amazon GuardDuty Runtime Monitoring の機能について知りたい方</li> \n <li>Amazon GuardDuty Runtime Monitoring の開始方法や検出例について知りたい方</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>ランタイムモニタリングをおすすめする理由</li> \n <li>Amazon GuardDuty Runtime Monitoring の概要</li> \n <li>Amazon GuardDuty Runtime Monitoring の開始方法</li> \n <li>Amazon GuardDuty Runtime Monitoring による脅威検出の例</li> \n</ul> \n<p><strong>スピーカー</strong><br> 坂下 拓弥<br> クラウドサポートエンジニア</p> \n<hr> \n<h3>Amazon Connect Global Resiliency</h3> \n<p>Amazon Connect は東京リージョンで複数の要素により信頼性を高めていますが、地域的な災害や障害が発生した場合など、より高い要件に対応することが必要なお客様のために大阪リージョンを利用した Amazon Connect Global Resiliency によって事業継続計画にも対応できるようになりました。本セッションは Amazon Connect が備える信頼性を改めて解説し、Amazon Connect Global Resiliency で実現可能になることや注意事項について紹介致します。</p> \n<p><iframe loading=\"lazy\" title=\"Amazon Connect Global ResiliencyãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/RSw62JtyEWM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-Connect-Global-Resiliency_0930_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/RSw62JtyEWM\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>Amazon Connect が備えている信頼性を理解したい方</li> \n <li>Amazon Connect における BCP の設計に関心のある方</li> \n <li>Amazon Connect Global Resiliency の具体的な機能が知りたい方</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>Amazon Connect が備える信頼性について</li> \n <li>Amazon Connect Global Resiliency の機能、動作、および運用上の注意事項</li> \n <li>Amazon Connect Global Resiliency の具体的な切替方法</li> \n</ul> \n<p><strong>スピーカー</strong><br> 清水 幸典<br> Amazon Connect スペシャリスト ソリューションアーキテクト</p>"
  },
  {
    "title": "Amazon Bedrock AgentCore、東京を含むAWSリージョンで一般提供開始：AIエージェントを現実の世界へ",
    "date": "2025-10-15T01:25:32.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-bedrock-agentcore-is-now-generally-available/",
    "content": "<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore-services_1015.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166820\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore-services_1015.png\" alt=\"Amazon Bedrock AgentCore Services\" width=\"1280\" height=\"720\"></a></p> \n<p>本記事は米国時間 10 月 13 日に公開された AWS エージェンティック AI 担当バイスプレジデント　スワミ・シバスブラマニアン（Swami Sivasubramanian）の署名ブログ「<a href=\"https://aws.amazon.com/jp/blogs/machine-learning/amazon-bedrock-agentcore-is-now-generally-available/\">Make agents a reality with Amazon Bedrock AgentCore: Now generally available</a>」の日本語抄訳版です。</p> \n<p><strong>AIエージェントをプロトタイプから、セキュリティ、スケーラビリティ、信頼性を備えた本番環境へ</strong></p> \n<p>2006年に AWS を立ち上げた時、私たちはクラウドコンピューティングが組織のテクノロジーを構築し、スケールさせる方法を変革すると信じていました。現在、AI エージェントについても同様の転換点に立っています。私たちは、数十億もの AI エージェントが協働し、日常業務から複雑なビジネスプロセスまであらゆるものを変革する世界を思い描いています。しかし、これを現実のものとするには、フレームワークやローコードの開発者向けツール以上のものが必要です。企業がビジネスの基盤として信頼できるAIエージェントには、エンタープライズグレードの運用基盤が必要です。その基盤は、セキュアで信頼性が高く、スケーラブルで、AI エージェントの非決定的な性質を考慮して構築されている必要があります。AWS はミッションクリティカルなシステム構築支援の経験を活かし、多様な組織が自信を持ってエージェンティックシステムを本番環境へ移行できる包括的な基盤を <a href=\"https://aws.amazon.com/jp/bedrock/agentcore/\">Amazon Bedrock AgentCore</a> を通じて提供します。</p> \n<p><strong>AgentCore: AIエージェントを迅速に本番環境へ</strong></p> \n<p>AgentCore の一般提供開始により、すべての開発者がAIエージェントをパイロット環境からフルスケールの本番環境へ迅速に移行することが可能になります。AgentCore は AI エージェントの構築、デプロイ、運用に必要な基盤を提供します。エージェントに複雑なワークフローを処理するためのツール、メモリ、データを簡単に取り入れることが可能です。数行のコードを書くだけで、現在利用可能な最も安全でスケーラブルなランタイム環境の一つの選択肢にAIエージェントをデプロイすることが可能です。また、エンタープライズグレードでの展開に必要なコントロールとアクセス管理を備えてこれらのエージェントを運用できます。これらすべてをインフラ管理なしで実行でき、任意のモデルやエージェントフレームワークを使って簡単に開始できます。</p> \n<p>AgentCore SDK は、多様な業界のあらゆる規模のお客様に既に100万回以上ダウンロードされています。初期のお客様には、Clearwater Analytics (CWAN)、Cox Automotive、Druva、Ericsson、Experian、Heroku、National Australia Bank、ソニーグループ、Thomson Reutersなど、その他多くのお客様が含まれます。AgentCore はまた、Accenture、Cisco、Deloitte、SalesforceなどのAWSパートナーによってサポートされ、すでに変革を実現する結果をもたらし始めています。</p> \n<p><strong>AgentCore: 包括的なAIエージェント基盤</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore_a-comprehensive-agentic-platform_1015.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166821\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore_a-comprehensive-agentic-platform_1015.png\" alt=\"AgentCore, a comprehensive agentic platform\" width=\"1998\" height=\"1125\"></a></p> \n<p>AI エージェントの構築は簡単ではありません。例えば、ID プロバイダーとの統合方法、メモリと可観測性（オブザーバビリティ）の実現方法、ツールとの統合方法などを理解する必要があります。私たちのAIエージェント基盤は、構築からデプロイ、運用までのAI エージェント開発ライフサイクル全体にわたるフルマネージドサービスを提供します。任意のモデルやフレームワークを組み合わせることができ、エンタープライズグレードのインフラストラクチャとツールにアクセスしながら最大限の柔軟性を提供します。その主要な機能を見てみましょう。</p> \n<p><strong>自由自在にAIエージェント構築：</strong>AI エージェント分野は急速に進化しており、新しいフレームワーク、モデル、プロトコルがほぼ毎週のように登場しています。AgentCore のサービス群はモジュールとして提供されているため、必要に応じて組み合わて利用することも、単独で利用することも可能であり、開発者はAIエージェントを望む方法で構築できます。組織としては、チームが必要とするAgentCore のサービスを選択しながら、好みのフレームワーク（CrewAI、Google ADK、LangGraph、LlamaIndex、OpenAI Agents SDK、Strands Agentsを含む）とモデル（Amazon Bedrockで利用可能なモデルや、OpenAIやGeminiなどBedrock以外で利用可能なモデルを含む）を使用できるため、望む方法で自由に構築できます。</p> \n<p><strong>価値を生み出すAIエージェントのための基盤：</strong>AI エージェントは具体的なアクションの実行で価値を生み出します。例えば、コードの記述と実行、企業システムへの接続、ウェブサイトのナビゲーションなどです。AgentCoreはこれらに不可欠なサービスを提供します。AgentCore Code Interpreter により、AIエージェントは分離された環境でコードを安全に生成・実行でき、AgentCore Browserにより、AIエージェントはウェブアプリケーションを大規模に操作することができるようになります。また、AgentCore Gateway は既存の API や AWS Lambda 関数をエージェント互換のツールに変換し、既存の MCP サーバーに接続し、必要不可欠なサードパーティのビジネスツールやサービス（JiraやAsana、Zendeskなど）とのシームレスな統合を提供します。この統一されたアクセスポイントにより、企業システム全体にわたる安全な統合が可能になります。AgentCore Identity を使用すると、エージェントはOAuth 標準を使用した適切な認証と認可によって、これらのツール全体に安全にアクセスし、操作できます。</p> \n<p><strong>インテリジェントなメモリを備えたコンテキスト対応AIエージェント：</strong>AIエージェントが真に効果的であるためには、時間の経過とともに対話からコンテキストを維持し、学習する必要があります。例えば、企業向けソフトウェアを検討するお客様を支援する営業サポートAIエージェントの例を考えてみましょう。複数回にわたるお客様との会話から、お客様の業界、予算上の制約、技術要件を記憶し、同じ質問を繰り返すことを避けながら、お客様にパーソナライズされた提案を行う必要があります。同様に、複雑な技術的トラブルシューティングを支援する例では、AI エージェントは以前のデバッグ試行の結果を思い出し、より的を絞ったソリューションを提供しなければなりません。AgentCore Memory は、開発者が複雑なメモリインフラストラクチャを管理することなく、このような高度なコンテキスト対応エクスペリエンスの構築を支援し、AI エージェントがユーザーの好み、過去のやり取り、そして会話を豊かにする関連コンテキストの詳細な理解を構築・維持するのを支援します。</p> \n<p><strong>信頼できるエージェントのための包括的な可観測性：</strong>AI エージェントはリアルタイムで推論し、非決定的にアクションを実行します。そのため、開発者にはAIエージェントの推論とアクションに対して完全な可視性が必要です。AgentCore Observability は、リアルタイムダッシュボードと詳細な監査証跡を通じて包括的なモニタリングを提供します。組織はAIエージェントのすべてのアクションを追跡し、問題を迅速にデバッグし、パフォーマンスを継続的に最適化できます。AgentCore Observability は、メトリクス、ログ、トレースなどのテレメトリデータを収集してルーティングするための標準化されたプロトコルとツールを提供するオープンソースのオブザーバビリティフレームワークであるOpenTelemetry（OTEL）との互換性を提供しています。これにより、Dynatrace、Datadog、Arize Phoenix、LangSmith、Langfuseなどの既存のモニタリングツールと統合が可能です。</p> \n<p><strong>業界をリードする信頼性であらゆる規模に対応：</strong>従来のアプリケーションとは異なり、AI エージェントのワークロード持続時間は本質的に予測不可能です。AgentCore Runtime はこうした変動性に対応するように設計されており、必要に応じてゼロから数千のセッションへと自動的にスケーリングし、長時間実行タスク向けに業界をリードする8時間のランタイムを提供します。</p> \n<p><strong>エンタープライズグレードのAIエージェントセキュリティ：</strong>AIエージェントはユーザーに代わって行動しながら、複数のシステムに安全にアクセスし、機密データを処理する必要があるため、堅牢なセキュリティと規制コンプライアンスの実現においては一切の妥協が許されません。AgentCore はAI エージェントが安全に運用できるよう、すべてのサービスにセキュリティを組み込んでいます。バーチャルプライベートクラウド（VPC）環境と <a href=\"https://aws.amazon.com/jp/privatelink/\">AWS PrivateLink</a> をサポートし、ネットワークトラフィックをプライベートで安全に保ちます。最も重要なことに、AgentCore Runtime は microVM 技術を通じて業界をリードするセキュリティを提供し、各AIエージェントのセッションに独自の分離されたコンピューティング環境を与え、データ漏洩を防止し、すべての相互作用の完全性を維持します。</p> \n<p><strong>AgentCoreでスピード、スケール、セキュリティを両立：</strong>AgentCore は、<a href=\"https://kiro.dev/\">Kiro</a> や Cursor AI などの統合開発環境（IDE）で動作する MCP サーバーを通じて、本番環境対応の AI エージェントを簡単に構築できます。開始にはわずか数分しかかかりません。そして、これらは簡略化されたツールではありません。堅牢なセキュリティを維持しながら、ゼロから数千のセッションへと即座にスケールできる、フル機能の本番環境対応ソリューションです。つまり、お客様のチームは AI エージェントが実証済みの基盤上に構築されていることを理解した上で、アイデアからデプロイメントまで自信を持って迅速に進めることができます。</p> \n<p><strong>AIエージェントの価値を実現するお客様事例</strong></p> \n<p>Cohere Health の規制された医療環境から、Ericsson の複雑でテクニカルなシステム、そしてソニーグループのグローバル規模での変革まで、先進的な組織がAgentCoreを活用して業界を超えた次世代のAIイノベーションを推進しています。AI 時代に成功する組織は、未来を完璧に予測する組織ではなく、進化する柔軟性を維持しながら実証された基盤の上に構築する組織でしょう。AgentCore を基盤とすることで、AI エージェントの展開と運用のための専用サービスにアクセスできるだけでなく、グローバル規模でセキュリティを確保しながら、企業の変革を支援してきた約20年の経験を持つパートナーも得ることになるでしょう。</p> \n<p>世界最大の広告会社 Publicis Groupe に所属するEpsilon が、AgentCore を使用して大手ブランドのキャンペーンをパーソナライズし、革新する様子を以下のビデオでご覧ください。同社の Intelligent Campaign Automation ソリューションは、複数のチャネルにわたるキャンペーン設計、オーディエンスターゲティング、リアルタイム最適化を自動化し、実行時間の短縮と顧客ターゲティング精度の向上を大規模に実現しています。</p> \n<p><iframe loading=\"lazy\" title=\"Epsilon Transforms Marketing Campaigns with Amazon Bedrock AgentCore | Amazon Web Services\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/Ds7z4JA5gB4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong>インテリジェントなワークフロー自動化による製造業の変革：</strong>Amazon Devices Operations &amp; Supply Chain チームは、AI エージェントを活用した製造アプローチの開発にAgentCoreを使用しています。この新しいアプローチの一環として、AIエージェントは製品仕様を使って協働し、手動プロセスを自動化します。あるAIエージェントは製品要件を読み取り、品質管理のための詳細なテスト手順を作成し、別のエージェントは製造ライン上のロボットが必要とするビジョンシステムをトレーニングします。その結果、従来はエンジニアリング時間に数日を要していたオブジェクト検出モデルの微調整が、高い精度で1時間以内に完了できるようになりました。この実証実験は、AI エージェントが初期製品要件から最終生産までの過程を効率化するスマートな製造へのビジョンの始まりに過ぎません。</p> \n<p><strong>AIエージェントによる医療判断の迅速化：</strong>医療現場では、1分1秒が重要です。Cohere Health® は臨床インテリジェンス企業で、保険者（Payer）、医療機関（Provider）の連携を強化し、ケア前後の臨床的意思決定のスピードと正確性を向上させることに焦点を当てています。同社の臨床トレーニングを受けたAIは、患者ケアへのアクセスを加速し、患者のアウトカムを改善し、医療機関の管理負担を軽減し、ケア継続全体にわたって医療サービス提供におけるエコノミクスを改善します。</p> \n<p>例えば、Cohere HealthはAgentCoreを利用して、医療保険における医療の必要性審査の精度と効率を最適化するAI搭載コパイロットであるCohere Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> を構築しました。Cohere Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> は、臨床記録、患者メモ、FAX などの構造化データと非構造化データの両方を分析し、要求された治療の医学的必要性を検証するための証拠を迅速に特定して表示します。このコパイロットは、医療保険の審査担当者に事前承認リクエストの審査に向けて必要な臨床コンテキストを提供し、審査担当者の質問にもインテリジェントに対応します。</p> \n<p>Cohere Health は、高度に規制された医療業界においてエージェンティックAIを初めて本番環境でデプロイするためのエンタープライズグレードのインフラを求め、AgentCore を選択しました。AgentCore で利用可能な包括的な監査証跡、拡張セッションサポート、複数時間にわたる複雑なワークフローを通じて履歴を維持する機能は、Cohere Health のユースケースに不可欠となっています。</p> \n<p>Cohere Health は、Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> が今後レビュー時間を30～40％短縮し、重要な義務付けられた処理時間を満たすのに貢献するだろうと予想しています。より迅速な意思決定は、患者にとりケアへのアクセスを早め、治療への順守を増やし、結果を改善し、コストを削減します。Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> はまた、医療保険が臨床的決定の正確性を約30％向上し、それによって医療費の削減と患者のアウトカム改善に貢献する見込みです。</p> \n<p>通<strong>信業界におけるAIエージェント — 複雑なシステムの簡素化：</strong> 通信技術における世界的リーダーであるEricssonは、AIエージェントのデプロイにおける課題に取り組むためにAgentCore を使用しています。Ericsson で、ビジネスエリアネットワークにおけるAIと先進テクノロジーを担当する責任者であるDag Lindbo 氏は次のように述べています。「Ericsson において、私たちの3G/4G/5G/6Gシステムは数百万行ものコードで構成され、数千の相互接続されたサブシステムに及んでいます。これは、国レベルの重要インフラストラクチャにおける数十年にわたるエンジニアリングイノベーションを示しています。AgentCore は、データと情報の重要な融合を実現し、実世界のR&amp;Dにおいて前例のない能力を持つAIエージェントを提供し、数万人規模の社員全体で二桁の価値創出につながるでしょう。また、AgentCore は任意のエージェントフレームワークを使用できるため、多くのチームとユースケースにわたって拡張する上で不可欠です」</p> \n<p><strong>エンターテインメント業界におけるエージェント活用：</strong>セキュリティ、オブザーバビリティとスケーラビリティを両立：世界有数のテクノロジー・エンターテインメント企業であるソニーグループでも、AgentCoreがインパクトを生み出しています。「Agentic AI は、これまでにないレベルでの業務の高度化と効率化を実現するために不可欠な技術です」とソニーグループ株式会社 D&amp;Tプラットフォーム AI Acceleration 部門 部門長の大場 正博氏は述べています。「一方で、エージェンティックAI の活用には、多くの技術的課題があることも事実です。Amazon Bedrock AgentCore を活用することで、グループ全体のAgentic AI Platform を構築し、エンタープライズレベルのセキュリティ、オブザーバビリティそしてスケーラビリティを実現し、さらにクロスプラットフォームでのシームレスな AI リソースへの接続を実現しました。Amazon Bedrock AgentCore を 私たちの AI エコシステムの中核に置くことで、膨大なAIを管理・共有する能力を獲得し、確信と安全性を持ってAIトランスフォーメーションを加速することができます」</p> \n<p>AgentCore は現在、アジアパシフィック（ムンバイ）、アジアパシフィック（シンガポール）、アジアパシフィック（シドニー）、アジアパシフィック（東京）、ヨーロッパ（ダブリン）、ヨーロッパ（フランクフルト）、米国東部（バージニア北部）、米国東部（オハイオ）、米国西部（オレゴン）の9つの AWS リージョンで一般提供され、お客様の世界規模での展開をサポートしています。AgentCore上で動作するように予め設計・構築されたAIエージェントとツールを提供する <a href=\"https://aws.amazon.com/marketplace/solutions/ai-agents-and-tools?trk=70405219-a2f8-4816-a915-9932f523f1bd&amp;sc_channel=el\">AWS Marketplace</a>を活用することで価値実現までの時間を加速することも可能です。</p> \n<p><strong>Amazon Bedrock AgentCoreをご利用の日本のお客様からのコメント</strong><br> （日本語抄訳版における追加記載、五十音順）</p> \n<p><strong>株式会社ウェザーニューズ　執行役員 テクノロジー・プロダクト責任者 出羽 秀章氏</strong><br> ウェザーニューズでは、BtoC 向けの「お天気エージェント」やBtoB 向け SaaS サービスにおいて、AIエージェントの β 版をリリースし、天気に関連するデータやソリューションの提供を開始しています。正式リリース後により多くのユーザーに安心してご利用いただくためには、性能・セキュリティ・ガバナンス・スケーラビリティといった観点が不可欠です。今回、Amazon Bedrock AgentCore のマネージドサービスを活用することで、これらの課題解決に向けて大きく前進できると考えています。新たに提供されるフルマネージドなサービス群と共に、お客様へこれまで以上に大きなビジネス価値をお届けできることを楽しみにしています。</p> \n<p><strong>TIS株式会社 IT 基盤技術事業本部 IT基盤ビジネス事業部長　黒田 訓功氏</strong><br> 当社のお客様には、安全性とガバナンスを重視するエンタープライズ企業に加え、AI活用による成長を目指す中堅・中小企業まで、幅広い層が含まれます。Amazon Bedrock AgentCore によるアイデンティティ管理、セッション隔離、運用の透明性の確保は、そうしたお客様にとって“安心して業務を任せられる AI エージェント”の基盤となります。応答の質、対話の一貫性、サービスの稼働安定性が整うと、利用者にとって使いやすく、心地よい体験となります。そのような体験が信頼を育み、選ばれ続けるサービスにつながると考えています。Amazon Bedrock AgentCore があるからこそ、TIS はお客様から信頼される AI エージェントソリューションの提供者として、これからも期待に応え続けられると確信しています。</p> \n<p><strong>株式会社ディー・エヌ・エー ML Ops Engineer　外山 寛氏</strong><br> 弊社ディー・エヌ・エーでは AI オールインを掲げ全社で AI 活用を推進していきます。その際に大規模言語モデル（LLM）を業務で安全に活用するためにデータセキュリティに配慮したシステム設計が重要になってきます。 Amazon Bedrock AgentCore ではそのようなシステム設計を支援するための機能が提供されていると感じます。 今後のさらなるきめ細やかなデータセキュリティ機能の発展に期待しています。</p> \n<p><strong>株式会社野村総合研究所　AI 担当 経営役　生産革新センター　センター長　稲葉 貴彦氏</strong><br> Amazon Bedrock AgentCore は、企業のデジタル変革を根本的に変える可能性を秘めています。多様なオープンソースフレームワークとの柔軟な連携や、独自の機能を提供する 7 つのサービスの選択肢、完全なセッション分離機能と最大 8 時間の長時間ワークロード対応により、より高度な業務での安定運用が期待できます。プレビュー版からの検証を経て、現在、社内外の複数プロジェクトで利活用を進めており、今後も検証を重ねながら、当社のお客様の競争優位性確保に貢献してまいります。</p> \n<p>今すぐAgentCoreを始めましょう – aws.amazon.com/bedrock/agentcore/にアクセスして、エージェントの未来を構築し始めましょう！</p>"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.5",
    "date": "2025-10-14T23:36:19.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.5",
    "content": "### Core Changes\n\n- feat: using @next/rspack-core: #84221\n- Upgrade React from `ead92181-20251010` to `d7215b49-20251013`: #84850\n- Turbopack build: Switch to using workerthreads for process: #84818\n- [Cache Components] Dev - restart render on cache miss: #84088\n- Update font data: #84785\n- Fix build compile mode if pages dir does not exist in Next.js 16: #84783\n- improve next config schema validation errors: #84847\n- Upgrade React from `d7215b49-20251013` to `56e84692-20251014`: #84860\n- warnOnce for Middleware deprecation: #84862\n- Add codemod for Middleware API to Proxy API: #84824\n- Deprecate Middleware API and add Proxy API: #84764\n- remove `clientParamParsing` configuration & bundle it with `cacheComponents`: #84763\n- remove dynamicIO flag: #84872\n- Bump eslint-plugin-react to 7.37.0: #84876\n\n### Misc Changes\n\n- docs: soft 404's, Suspense and loading.tsx: #83867\n- [turbopack] Discuss Core Web vitals in our bundle size gap docs: #84837\n- [turbopack] document missing webpack loader features: #84849\n- [turbopack] fix typo in docs: #84868\n- [turbopack] Remove the implementation of `TaskInput` from `AutoSet`: #84867\n\n### Credits \n\nHuge thanks to @SyMind, @icyJoseph, @timneutkens, @lubieowoce, @vercel-release-bot, @greguintow, @huozhi, @devjiwonchoi, @lukesandberg, and @ztanner for helping!\n"
  },
  {
    "title": "ごめん、カーソル移動を効率的にするヘルシェイク矢野.vimのこと考えてた",
    "date": "2025-10-14T22:11:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/takets/articles/vim-plugin-hellshake-yano",
    "content": "この記事は、Vim駅伝2025年10月15日の記事です。\n前回の記事は、482FさんのLua Neovim で斜体を無効化する です。\nVimでのカーソル移動は、hjklやw/b/eといったモーションキーを使うのが基本です。\nが。画面に表示されているN行目のM文字目に移動したいとき、何度もキーを繰り返し押す必要があります。当たり前の話です。しかし面倒であることには違いありません。\n本来、位置Aに移動したいだけであって、キー入力は仕方なく行う行為です。なので対策したかったので対策しました。\n\n 対策：hit-a-hint系プラグイン\n移動にキーをたくさん入力せねばならない問題に対して、いく..."
  },
  {
    "title": "作って意地でも理解する フォントがレンダリングされるまで",
    "date": "2025-10-14T20:10:48.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yayo1/articles/4fb4dd2a6c4654",
    "content": "いきなりですが、2つ質問です。今まさにあなたが読んでいる文字がどうやってレンダリングされているか説明できますか？私はできませんでした。それではあるモノの仕組みを理解するために最も効率の良い方法は何でしょうか？そう、自作することです！それではフォントのパーサーとレンダラーをゼロから作っていきましょう！\n\n 目的\n小さなTrueTypeレンダラーを自作し、フォントがレンダリングされるまで流れを理解することが目的です。具体的には、Unicodeのフォントを読み込んで、任意の文字列をレンダリングしpngファイルとして書き出すまでを目標とします。実装はほぼプレーンなC++で、ベクトル演算用にglm..."
  },
  {
    "title": "ハッカソンはいいぞ！ー Revenuecat主催のハッカソンに参加してみて",
    "date": "2025-10-14T14:05:15.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kontaco/articles/0415ba73e8099c",
    "content": "\n TLDR\n先日RevenueCat主催のDevpostで開催されたハッカソンに参加して、子供向けアプリをリリースしました。\n結論結果はふるいませんでした。。。残念。\nとはいえ、今回、個人開発者はハッカソンで外的に期限を設定すると良いなと感じました。\n元々作ろうと思っていたプロダクトだったので開発は少ししていたのですが、今回リリースまでこぎつけられたのはこのハッカソンがあったからです。\n個人開発は孤独でペースメークを自分でするしかなく、期限を設定することで一定程度価値を得られると思います。\n\n 伝えたいこと：デッドラインがないと完成しない\n\n 元々作ろうと思っていたけど進まなかった\nK..."
  },
  {
    "title": "vitejs/vite – v6.3.7",
    "date": "2025-10-14T13:43:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.3.7",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.3.7/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v7.1.10",
    "date": "2025-10-14T13:16:35.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.10",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.10/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "週刊生成AI with AWS – 2025/10/6週",
    "date": "2025-10-14T09:56:05.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/weekly-genai-20251006/",
    "content": "<p>みなさん、こんにちは。AWS ソリューションアーキテクトの三厨です。</p> \n<p>来る 10/24 に AWS Japan AI Agent Day 2025 が開催されます。本日ご紹介するAmazon Quick Suite をはじめとして、 AWS でAgentを活用するための知見を学ぶことができます。ぜひ、<a href=\"https://pages.awscloud.com/aws-japan-ai-agent-day-reg.html\">こちらの申し込みページ</a>からご登録をお願いいたします。</p> \n<p>先日 2つの新しいプランを追加した「<a href=\"https://pages.awscloud.com/jp-genai-accelerator-program-reg.html\">AWS ジャパン生成 AI 実用化推進プログラム</a>」も非常に多くの申し込みをいただいています。引き続き募集中ですのでよろしくお願いします。</p> \n<p>それでは、10 月 6 日週の生成 AI with AWS界隈のニュースを見ていきましょう。</p> \n<p><span id=\"more-166787\"></span></p> \n<p><strong>さまざまなニュース</strong></p> \n<ul> \n <li style=\"list-style-type: none\"> \n  <ul> \n   <li>AWS生成AI国内事例ブログ: <a href=\"https://aws.amazon.com/jp/blogs/news/genai-case-study-ist/\">株式会社情報戦略テクノロジー様、AIエージェント秘書「パイオにゃん」で情報探索業務を83%改善</a><br> 株式会社情報戦略テクノロジー様は、IT コンサルティングやシステム開発を行う企業です。社員の情報探索業務の効率化とスキルアップという課題に対して、Amazon Bedrock を活用したAIエージェント秘書「パイオにゃん」を開発しました。その結果、情報探索業務を83%改善し、社員一人ひとりに寄り添いともに成長する仕組みを実現しています。さらに社員の成長の可視化にも成功し、組織全体の生産性向上に貢献しています。</li> \n   <li>AWS生成AI国内事例ブログ: <a href=\"https://aws.amazon.com/jp/blogs/news/daiichi-sankyo-ai-agent-integrated-drug-discovery/\">第一三共株式会社様、AIエージェント統合型創薬基盤の構築を開始</a><br> 第一三共株式会社様は、製薬企業として次世代の創薬研究プロセスの実現に取り組んでいます。AWS と連携し、AIエージェントシステムを統合した創薬研究基盤の構築を開始しました。AI・クラウド・実験自動化技術を融合させることで、創薬研究プロセスの革新を目指しています。この取り組みにより、創薬の効率化と新薬開発の加速が期待されています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/reimagine-business-intelligence-amazon-quicksight-evolves-to-amazon-quick-suite/\">ビジネスインテリジェンスの再解釈: Amazon QuickSight から Amazon Quick Suite への進化</a>」を公開<br> Amazon QuickSight が Amazon Quick Suite へと進化しました。この記事では、エージェンティックAIを搭載した新しいワークスペース機能について詳しく解説しています。ビジネスインテリジェンスの概念を再定義し、データ分析の新しい形を体験できる内容となっています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/jaldx-solutions-awssupport-bedrock/\">Amazon Bedrockを活用したAWS サポート問い合わせ内容の自動集約ソリューションの実装</a>」を公開<br> AWS Support と Amazon Bedrock を組み合わせた、サポート問い合わせ内容の自動集約ソリューションの実装方法を紹介しています。生成AIを活用することで、サポート対応の効率を向上させる実践的な事例です。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/supercharge-your-organizations-productivity-with-the-amazon-q-business-browser-extension/\">Amazon Q Business ブラウザ拡張機能による組織の生産性向上</a>」を公開<br> Amazon Q Business のブラウザ拡張機能について詳しく解説しています。ブラウザから直接企業ナレッジにアクセスし、生成AIの支援を受けられる機能により、組織全体の生産性向上が期待できます。実際の使用方法と活用シーンを紹介しています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/how-to-manage-ai-bots-with-aws-waf-and-enhance-security/\">AWS WAF で AI ボットを管理し、セキュリティを強化する方法</a>」を公開<br> 生成AIボットの普及に伴い、ウェブサイトへのボットアクセス管理が重要になっています。この記事では、AWS WAF を使用して AI ボットを適切に管理し、セキュリティを強化する方法を解説しています。正規のAIボットと悪意のあるボットを区別する実践的な手法を紹介しています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/your-essential-guide-to-cloud-governance-at-aws-reinvent-2025/\">AWS re:Invent 2025 におけるクラウドガバナンスの必須ガイド</a>」を公開<br> AWS re:Invent 2025 で注目すべきクラウドガバナンス関連のセッションとトピックを紹介しています。生成AI時代におけるガバナンスのベストプラクティスについても触れられています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/aws-summit-japan-2025-genai-lg/\">[AWS Summit Japan 2025] 生成 AI を用いた自治体向けソリューションデモのご紹介</a>」を公開<br> AWS Summit Japan 2025 で展示された、生成AIを用いた自治体向けソリューションデモを紹介しています。公共セクターにおける生成AI活用の具体例を学べる貴重な機会です。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/announcing-healthdata-agent-healthcare-lifescience-transformation/\">日本のヘルスケア・ライフサイエンス業界における戦略的ビジョン「Journey for 2030 データがつながる、価値を生む」を発表</a>」を公開<br> 日本のヘルスケア・ライフサイエンス業界における AWS の戦略的ビジョン「Journey for 2030」を発表しました。データ連携による価値創出を目指す、業界の未来像を描いています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/journey-for-2030/\">ヘルスケア・ライフサイエンスの意思決定と業務の高度化を実現する HealthData x Agent を発表</a>」を公開<br> ヘルスケアとライフサイエンス分野向けの新しいソリューション「HealthData x Agent」を発表しました。AIエージェントを活用して医療データの分析と意思決定を支援し、業界の変革を加速させるソリューションです。この記事では、HealthData x Agent の機能と活用方法を詳しく解説しています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/transforming-sap-technical-documentation-with-genai-accelerating-knowledge-generation-for-sap-notes-with-amazon-bedrock/\">生成AIで起こるSAP技術文書変革：Amazon BedrockでSAP Notesのナレッジ生成を加速</a>」を公開<br> SAP システムの技術ドキュメント作成に生成AIを活用する方法を紹介しています。Amazon Bedrock を使用して SAP Notes のナレッジ生成を自動化・高速化することで、ドキュメント作成の効率を大幅に向上させる事例を解説しています。</li> \n   <li>ブログ記事「<a href=\"https://aws.amazon.com/jp/blogs/news/introducing-claude-sonnet-4-5-in-amazon-bedrock-anthropics-most-intelligent-model-best-for-coding-and-complex-agents/\">Amazon Bedrock での Claude Sonnet 4.5 のご紹介: Anthropic の最もインテリジェントなモデルで、コーディングや複雑なエージェントに最適</a>」を公開<br> Anthropic の最新モデル Claude Sonnet 4.5 が Amazon Bedrock で利用可能になりました。特にコーディングタスクと複雑なエージェント構築において優れた性能を発揮します。この記事では、Claude Sonnet 4.5 の特徴と活用方法、実際のユースケースを詳しく紹介しています。</li> \n  </ul> </li> \n <li style=\"list-style-type: none\"></li> \n</ul> \n<p><strong>サービスアップデート</strong></p> \n<ul> \n <li style=\"list-style-type: none\"> \n  <ul> \n   <li><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2025/10/amazon-q-developer-understand-service-prices-estimate-workload-costs/\">Amazon Q Developer がサービス価格の理解とワークロードコスト見積もりに対応</a><br> Amazon Q Developer に新機能が追加され、AWS サービスの価格を理解し、ワークロードのコスト見積もりを支援できるようになりました。開発者は自然言語で質問するだけで、使用予定のサービスのコスト情報を取得し、アーキテクチャ設計時のコスト最適化が容易になります。コスト意識の高い開発を支援する重要なアップデートです。</li> \n   <li><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2025/10/amazon-quick-suite-agentic-ai-powered-workspace/\">Amazon Quick Suite: エージェンティックAI搭載ワークスペースを発表</a><br> Amazon QuickSight が Amazon Quick Suite へと進化し、エージェンティックAIを搭載したワークスペース機能が追加されました。AIエージェントがデータ分析を支援し、ビジネスインサイトの発見を加速します。自然言語でのデータ探索、自動的なインサイト生成、インタラクティブなダッシュボード作成など、データ分析の新しい体験を提供します。</li> \n   <li><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2025/10/automatic-quota-management-service-quotas/\">AWS Service Quotas で自動クォータ管理機能が一般提供開始</a><br> AWS Service Quotas に自動クォータ管理機能が一般提供開始されました。この機能により、サービスの使用状況を監視し、クォータ上限に近づいた際に自動的に引き上げリクエストを送信できるようになります。生成AIワークロードなど、急速にスケールするアプリケーションの運用において、クォータ制限によるサービス中断を防ぐことができます。</li> \n  </ul> </li> \n</ul> \n<p>今週は以上です。それでは、また来週お会いしましょう！</p> \n<h1>著者について</h1> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/04/14/wmikuriy.jpeg\" alt=\"Wataru Mikuriya\" width=\"150\">\n  </div> \n  <h4 class=\"lb-h4\"><a href=\"https://x.com/mickn_space\" target=\"_blank\" rel=\"noopener\">三厨 航&nbsp; (Wataru MIKURIYA)</a></h4> \n  <p>AWS Japan のソリューションアーキテクト (SA) として、ヘルスケア・ハイテク製造業のお客様のクラウド活用を技術的な側面・ビジネス的な側面の双方から支援しています。クラウドガバナンスや IaC 分野に興味があり、最近はそれらの分野の生成 AI 応用にも興味があります。最近感動したものは帯広の豚丼です。</p> \n </div> \n</footer>"
  },
  {
    "title": "大阪万博内部 API 解説",
    "date": "2025-10-14T09:38:31.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/nakasyou/articles/osakaexpo-api",
    "content": "大阪万博が昨日閉幕したので、大阪万博の予約サイトの API について自分が調べたことを公開しようと思います。\n数日前にタイムスリップした気持ちでお読みください。\nまた、脆弱だと思ったポイントもあるので、閉幕したのでそれも解説しちゃいます。\n\n 想定読者\n\n万博のアプリの裏側をちょっと覗いてみたい人\n大阪万博の脆弱っぽい部分をちょっと知りたい人\n閉幕してしまったけれど自分がどこに行ったかを思い出したい人\n次日本で万博が開催されたときにアプリを開発する人、および発注する人\n\n\n tl;dr\n成果物: https://github.com/pnsk-lab/myakumyakujs\n\n 認証の..."
  },
  {
    "title": "【開催報告】Amazon SageMaker Roadshow -Japan",
    "date": "2025-10-14T07:58:08.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-sagemaker-roadshow-japan-report/",
    "content": "<p>シニア GTM アナリティクススペシャリストソリューションアーキテクトの大薗です。</p> \n<p>2025 年 7 月 15 日に「<a href=\"https://aws-experience.com/apj/smb/event/638f8520-2a2e-4ac9-9f15-6f664304bb80\">Amazon SageMaker Roadshow –Japan</a>」を開催しました。本イベントでは、<a href=\"https://aws.amazon.com/jp/sagemaker/\">Amazon SageMaker</a> 開発チームが来日し、次世代の Amazon SageMaker を開発した理由やその機能紹介を行い、AWS Japan チームからデモやプレゼンテーションを通じて Amazon SageMaker の世界観を深堀りしました。さらに NX 情報システム株式会社様、キヤノンＩＴソリューションズ株式会社様、ソニーグループ株式会社様、株式会社 NTT データ様より SageMaker を含めたデータと AI の具体的な活用事例についてお話がありました。本ブログでは当日の各発表内容について紹介します。</p> \n<h3>次世代の Amazon SageMaker とは？</h3> \n<p>次世代の Amazon SageMaker は、2024 年末に開催された re:Invent 2024 で発表された、すべてのデータに対する統合アクセスとともに、分析と AI のための統合エクスペリエンスを提供するサービスです。モデル開発、生成 AI、データ処理、SQL 分析のために使い慣れた AWS ツールを使用して、統合スタジオ環境からの迅速なコラボレーションと構築を実現します。</p> \n<h3>アジェンダ</h3> \n<ol> \n <li>Welcome and Keynote</li> \n <li>Navigating Modern Data Landscapes with Amazon SageMaker</li> \n <li>Amazon SageMaker エンドツーエンドデモ</li> \n <li>Amazon SageMaker によるデータ &amp; AI ガバナンスの民主化</li> \n <li>NX Data Station ～ Nippon Express ｘ キヤノン MJ グループによるデータ分析基盤構築（NX 情報システム株式会社様、キヤノンＩＴソリューションズ株式会社様）</li> \n <li>Amazon SageMaker による生成 AI アプリケーション開発</li> \n <li>ソニーグループにおける生成 AI の社内活用と今後の展望（ソニーグループ株式会社様）</li> \n <li>データから AI をつなぐオールインワンプラットフォーム「データレイクハウス」と Amazon SageMaker（株式会社 NTT データ様）</li> \n</ol> \n<h3></h3> \n<h3>1. Welcome and Keynote</h3> \n<p>イベントキーノートとして、Amazon SageMaker のプロダクトマネジメントの Director である William が登壇しました。William はまず、データ、AI、アナリティクスの融合が進む現代において、AWS のデータ基盤がどのように進化してきたかを語りました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166757\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/william‐.jpg\" alt=\"\" width=\"2560\" height=\"1920\"></p> \n<p>マネージドデータベースの導入から始まり、サーバーレス化、マルチリージョン展開、そして <a href=\"https://aws.amazon.com/jp/rds/aurora/\">Amazon Aurora</a> による高速トランザクション処理の実現まで、データベース技術の革新的な進化を時系列で解説しました。さらに、Amazon 社内での大規模 AI モデル開発経験が、現在の <a href=\"https://aws.amazon.com/jp/sagemaker/ai/\">Amazon SageMaker AI</a> という形で結実し、一般提供されているという歴史的な流れも紹介しました。そして生成 AI のテクノロジーとして <a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a> や <a href=\"https://aws.amazon.com/jp/ai/generative-ai/nova/\">Amazon Nova</a> シリーズ、また、<a href=\"https://aws.amazon.com/jp/q/developer/\">Amazon Q Developer</a> や <a href=\"https://aws.amazon.com/jp/q/business/\">Amazon Q Business</a>、<a href=\"https://aws.amazon.com/jp/quicksight/\">Amazon QuickSight</a> など、開発者やビジネスアナリストが AI を活用するための具体的なサービスも紹介されました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166758\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/william-3.png\" alt=\"\" width=\"3472\" height=\"1946\"></p> \n<p>かつては個別に発展していたビッグデータ、SQL アナリティクス、機械学習、生成 AI の領域が、Amazon SageMaker という単一のプラットフォームで統合されつつある未来像を示し、次のスピーカーである Stephanie による Amazon SageMaker の詳細説明への期待を高めて締めくくられました。</p> \n<h3>2. Navigating Modern Data Landscapes with Amazon SageMaker</h3> \n<p>次のセッションでは、AWS のアナリティクス関連の Go-to-Market チームリーダーを務める Stephanie が登壇し、次世代 Amazon SageMaker の全容を紹介しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166759\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/steph-1.jpg\" alt=\"\" width=\"2560\" height=\"1928\"></p> \n<p>冒頭、Stephanie は現在の企業が直面している課題について触れました。第三社機関の調査を引用しながら、多くの企業が生成 AI の実験に取り組んでいるものの、その 70% が本番環境への展開に至っていないという現状を指摘。その根本的な原因の一つともなる、強固なデータ基盤の重要性を力強く訴えかけました。そして、これらの課題を解決するために開発された次世代 Amazon SageMaker の紹介へと話を展開。その中でも「<a href=\"https://aws.amazon.com/jp/sagemaker/unified-studio/\">Amazon SageMaker Unified Studio</a>」という新しい統合環境の紹介に時間を割き、データエンジニア、ビジネスアナリスト、データサイエンティストが一つのプラットフォーム上で協働できる環境の中で、従来別々に存在していたツールやワークフローをシームレスに統合できることのメリットを説明しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166760\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/steph-2.png\" alt=\"\" width=\"3474\" height=\"1954\"></p> \n<p>データガバナンスの面では、<a href=\"https://aws.amazon.com/jp/sagemaker/catalog/\">Amazon SageMaker Catalog</a> という新機能を紹介。生成 AI を活用してメタデータを自動生成する機能や、データの品質管理、データリネージ管理の機能が組み込まれており、全社規模でのデータ活用を加速できる点を強調しました。さらに、<a href=\"https://aws.amazon.com/jp/sagemaker/lakehouse/\">Amazon SageMaker のレイクハウスアーキテクチャ</a>についても詳しく解説。オープンな設計思想に基づき、様々なデータソースを統合できる柔軟性と、<a href=\"https://aws.amazon.com/jp/what-is/zero-etl/\">ゼロ ETL</a> による効率的なデータ処理の実現について解説しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166761\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/steph-3-compressed.png\" alt=\"\" width=\"3474\" height=\"1952\"></p> \n<p>最後に、<a href=\"https://aws.amazon.com/jp/sagemaker/pricing/\">Amazon SageMaker の料金</a>の考え方について、紹介した様々な機能が従量課金制で提供される点を解説しました。これによりコスト面での懸念を払拭しながら、企業のデータ活用と AI 導入への取り組みを進めやすいモデルとなっていることを強調しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166762\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/steph-4.png\" alt=\"\" width=\"3474\" height=\"1954\"></p> \n<p>まとめとして、次世代 Amazon SageMaker が企業のデータ活用と AI 導入を本質的に変革するプラットフォームとして位置づけられていることを強調してセッションを締めくくりました。</p> \n<h3>3. Amazon SageMaker エンドツーエンドデモ</h3> \n<p>続くセッションでは、AWS Japan BigData Architect 関山より、次世代の Amazon SageMaker のユーザー体験をエンドツーエンドで知っていただくために、架空の企業エニーカンパニービバレッジにおけるデータと ML/AI の課題解決のストーリーを Amazon SageMaker Unified Studio 上でデモしました。</p> \n<p>Amazon SageMaker Unified Studio の各機能はネイティブで <a href=\"https://aws.amazon.com/jp/q/\">Amazon Q</a> と統合されており、データディスカバリー、ETL ヴィジュアルパイプラインの自動作成、SQL の自動生成などが可能になっています。下のスクリーンショットは、画面右側の Amazon Q チャットウィンドウで自動生成したクエリをクエリブックから実行するデモです。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166763\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/sekiyama-1.png\" alt=\"\" width=\"2560\" height=\"1440\"></p> \n<p>Amazon SageMaker Unified Studio におけるデータガバナンスの中核をなすのが Amazon SageMaker Catalog です。SageMaker Catalog を使用することで、データを簡単に発見・共有する仕組みを導入できます。また、生成 AI を活用することで新しく作ったテーブルにビジネスメタデータを自動生成することもできます。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166764\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/sekiyama-2.png\" alt=\"\" width=\"2560\" height=\"1440\"></p> \n<p>SageMaker Catalog で共有されたデータを機械学習チームが利用して、今後の製品の売り上げを予測しグラフにプロットしています。このデモでは機械学習に加えて、生成 AI を活用したマーケティングコンテンツ (テキスト・画像) の自動生成も紹介しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166765\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/sekiyama-3.png\" alt=\"\" width=\"2560\" height=\"1440\"></p> \n<p>このように、複数人で協働する具体的なユースケースを想定したデモを通じて、Amazon SageMaker Unified Studio を活用したデータと AI に関する一連の作業のイメージを披露しました。データと AI の活用に課題をお持ちの方には、ぜひ、次世代の Amazon SageMaker ならびに Amazon SageMaker Unified Studio をお試しいただき、データとAIをビジネス推進のために活用いただけましたら幸いです。</p> \n<h3>4. Amazon SageMaker によるデータ &amp; AI ガバナンスの民主化</h3> \n<p>デモセッションに続いて、AWS Japan アナリティクススペシャリストソリューションアーキテクトの大薗よりデータ &amp; AI ガバナンスの民主化をテーマにセッションを行いました。</p> \n<p>セッションでは、まず AI 時代におけるテクノロジーの変化について説明し、生成 AI の進化について触れました。単純なチャットボットから、複雑なタスクを自動化する生成エージェント、さらには完全自立型のエージェンティックAIへと発展していく流れを解説し、今後ますます質が高く統制されたデータを最大限活用いる環境準備が不可欠である時代がきていることを提起しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166766\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/ojunpei-1-compressed.png\" alt=\"\" width=\"3476\" height=\"1952\"></p> \n<p>データガバナンスに対する新しい考え方として、従来の「統制重視」から「データ活用促進のためのガードレール」という位置づけへの転換について説明し、企業全体でのデータガバナンスの民主化の必要性を述べました。組織面での取り組みでは、「データスチュワードシップ」の概念を中心に、クロスファンクショナルなチーム編成の必要性や、データドメイン駆動のガバナンスについて説明。これらを実現するための具体的な組織構造についても例を交えて解説しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166767\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/ojunpei-2-compressed.png\" alt=\"\" width=\"3474\" height=\"1950\"></p> \n<p>技術面では、SageMaker Catalog の機能の詳解を行いました。このツールが「発見」「ガバナンス」「コラボレーション」という 3 つの主要機能を持つことを説明し、特に「発見」の機能については、メタデータの自動生成やデータ品質の可視化などの特徴と仕組みを紹介しました。最後に、プロジェクトベースの権限管理モデルや、様々なツールとの統合について説明を行い、データガバナンスのプラットフォームとしての SageMaker Catalog の位置づけを示してセッションを終えました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166768\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/ojunpei-3-compressed.png\" alt=\"\" width=\"3472\" height=\"1950\"></p> \n<h3>5. NX Data Station ～ Nippon Express ｘ キヤノンMJグループによるデータ分析基盤構築（NX情報システム株式会社様、キヤノンＩＴソリューションズ株式会社様）</h3> \n<p>本セッションでは日本通運株式会社 (NX) が AWS 上で利用しているデータ分析基盤である「NX Data Station」について、NX 情報システム株式会社 (NIS) からそのビジネスの狙いを、そして技術観点で伴走支援を提供しているキヤノンＩＴソリューションズ株式会社からは、どのような構成でどう進化させているかの説明がありました。<br> 最初に登壇した NIS 第 5 アプリケーションマネジメント部 次長 髙 為彦氏からは、日本通運が置かれているビジネス的な課題とNX Data Station を活用することでどのように課題解決に取り組んでいるかについて説明がありました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166769\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/nx-1.png\" alt=\"\" width=\"1314\" height=\"726\"></p> \n<p>最初に、NX Data Station のアーティテクチャーの概要が説明されました。NX グループでは 2013 年からオンプレミスやプライベートクラウドから AWS へ移行を開始しており、それらとの親和性を鑑み、<a href=\"https://aws.amazon.com/jp/redshift/\">Amazon Redshift</a> や Amazon QuickSight などのサービスを利用し、データレイク、データウェアハウスを構築されてきました。<br> 髙氏は、AWS は機械学習や AI などのサービス基盤がアドオンで追加可能で、基本的に従量課金であり、スモールスタートが可能であること、コストパフォーマンスの良さ、およびデータ利活用文化を醸成する上で必要となる PoC やトライ&amp; エラーに適しているという運用面から、AWS を選定したと説明されました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166770\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/nx-2.png\" alt=\"\" width=\"1287\" height=\"715\"></p> \n<p>課題の例として、物流業界における労働力不足という社会課題について、日本通運がどう対応し、NX Data Station をどう活用しているかの説明がありました。自動倉庫といった機械による効率化もあるものの、まだ人手に頼ることも多くあり、24 時間稼働の大型倉庫などでは、一日の労働者数が延べ数百人規模になることもある業務です。髙氏は、労働力不足への対応で重要なのは適切な人員配置であると説明したうえで、繁忙期、閑散期、キャンペーンなどに適切な配置を実施するため、NX Data Station のデータレイクに蓄積したデータを BI の分析や機械学習により予測し、最適な配置を計算していると説明しました。商品カテゴリー、作業スペース必要の有無などを考慮したメッシュの細かい予測をし、その予測に対してフォークリフトに乗れる、特殊梱包ができる、など従業員の属性などを掛け合わせ、最適な人員配置を計算します。また、求人情報をダッシュボード化して分析し、それらの人員確保の戦略を練ることも合わせて行っています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166771\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/nx-3.png\" alt=\"\" width=\"1304\" height=\"733\"></p> \n<p>続いて、キヤノンＩＴソリューションズ株式会社 渡邊 哲也 氏より、NX Data Station のアーキテクチャについて、技術的な説明があった後に、それをどのように継続して改善しているかについて説明がありました。構成として、ETL は <a href=\"https://aws.amazon.com/jp/glue/\">AWS Glue</a> 、補足手法として <a href=\"https://aws.amazon.com/jp/appflow/\">Amazon AppFlow</a> と <a href=\"https://aws.amazon.com/jp/dms/\">AWS Database Migration Service</a> (DMS)、データレイクとしての <a href=\"https://aws.amazon.com/jp/s3/\">Amazon S3</a>、DWH として Amazon Redshift を活用する構成です。<br> また、 渡邊氏は、NX Data Station が活用され続けている理由として、キヤノンＩＴソリューションズが 1/サービスを常にアップデートすること、2/データ登録の障壁をなくすこと、そして 3/前向きなユーザーを待たせないこと、といった工夫を続けていることを説明されました。<br> これにより、SIer がなんでもやるのではなく、ユーザーによるデータ活用の 「自走」 が行われる環境を実現しているとし、最後に、利用している AWS サービスが含まれる、Amazon SageMaker への移行・活用を検討している事を説明されました。</p> \n<h3>6. Amazon SageMaker による生成 AI アプリケーション開発</h3> \n<p>AWS Japan の AI/ML スペシャリストソリューションアーキテクトである武田からは、Amazon SageMaker の AI 機能に深く踏み込んだ内容に関するセッションをお届けしました。</p> \n<p>セッションは、現代の AI 活用の課題提起から始まりました。生成 AI の急速な発展により、顧客体験の改革や従業員の生産性向上など、様々な可能性が広がっている一方で、企業が直面している現実的な課題について説明。特に、単に基盤モデルの API を利用するだけでは、企業の複雑な課題解決や競合との差別化は難しいという点を強調しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166772\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/tketomo-1.png\" alt=\"\" width=\"3474\" height=\"1944\"></p> \n<p>さらに、現在の生成 AI の技術的背景について、歴史的な流れを交えながら説明が続きました。ニューラルネットワークから始まり、ディープラーニング、そして現在のトランスフォーマーモデルに至るまでの技術の変遷について説明を行ったうえで、なぜ Amazon SageMaker が必要になるのかといった点について解説しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166773\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/tketomo-3.png\" alt=\"\" width=\"3470\" height=\"1948\"></p> \n<p>セッションの後半では、実際のデモを用いて SageMaker Unified Studio における AI/ML 関連の機能を深堀りして紹介しました。チャットボット開発の手順からファインチューニングの方法まで、具体的な操作フローを示し、システムプロンプトの設定、ナレッジベースの統合、ガードレールの設定など、実務で必要となる機能が単一の画面で操作できる点、さらに、プロジェクトの共有機能など、チーム開発を意識した機能についても触れ、従来別々に管理されていた機能が一つの環境で扱えるようになった点について説明しました。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166774\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/tketomo-4.png\" alt=\"\" width=\"3588\" height=\"1960\"></p> \n<p>セッションを通じて、生成 AI の活用には技術的な理解と実務的なノウハウの両方が必要であり、Amazon SageMaker がそれらを統合的にサポートするプラットフォームとして機能していることを伝えました。</p> \n<h3>7. ソニーグループにおける生成AIの社内活用と今後の展望（ソニーグループ株式会社様）</h3> \n<p>本セッションでは、ソニーグループ株式会社からソニーグループにおける生成 AI の活用を推進するための取り組みの概要と、技術的な観点から RAG (Retrieval-Augmented Generation) の精度向上のための施策や Amazon SageMaker の活用についてご紹介いただきました。</p> \n<p>ソニーグループでは、様々な事業領域にわたる AI の民主化を積極的に推進しています。ソニーグループの全社員が AI とデータの良き使い手となり、AI のビジネスへの適用を加速させることで、クリエイティビティと生産性向上の両立を狙っています。</p> \n<p>AI の民主化を実現するため、ソニーグループでは主に Enterprise LLM と Playground という 2 つのソリューションを提供しています。Enterprise LLM はビジネスにおける安全な生成 AI 活用を可能にするプラットフォームであり、Playground はより実践的なビジネス適用を支援する環境です。これらのソリューションを通じて、ソニーグループは従業員が生成 AI を日常的なビジネス活動に取り入れやすい環境を整備しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166775\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/sony-1.png\" alt=\"\" width=\"1392\" height=\"782\"></p> \n<p>Enterprise LLM のアーキテクチャは 130 以上のモデルへのアクセス、ローコード・ノーコードでエージェントを作成可能なワークスペース、カスタムデータパイプライン、外部検索 API などから成り、ソニーグループでの AI 活用を支えています。ソニーグループでの AI 活用において、ソニーグループ内の専門用語の理解は重要です。RAG の検索精度向上のために埋め込みモデルの Fine-tuning を検証しており、<a href=\"https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/nbi.html\">Amazon SageMaker notebook instance</a> を活用することでマネージドな Fine-tuning ジョブの実行が可能で、検証プロセス全体が数時間程度で完了できことが紹介されました。また、推論エンドポイントには <a href=\"https://docs.aws.amazon.com/ja_jp/sagemaker/latest/dg/serverless-endpoints.html\">Amazon SageMaker Serverless Inference</a> を採用し、プロビジョニングされた同時実行を活用することでコールドスタートを最小限に抑えながらコストも削減することに成功しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166776\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/sony-2.png\" alt=\"\" width=\"2390\" height=\"1342\"></p> \n<p>また、Amazon SageMaker により、幅広いユースケースに対応可能な多様なモデルの提供や、Amazon SageMaker Unified Studio によるローコード・ノーコードでの生成 AI アプリケーション構築が可能です。将来的には SLM (Small Language Model) の進化により生成 AI のエッジ展開が予想されますが、その際にも Amazon SageMaker でのカスタムモデル構築が重要な役割を果たすことが期待されています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166777\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/sony-3.png\" alt=\"\" width=\"1394\" height=\"782\"></p> \n<h3>8. データからAIをつなぐオールインワンプラットフォーム「データレイクハウス」とAmazon SageMaker（株式会社 NTTデータ様）</h3> \n<p>最後のセッションとして、株式会社 NTT データより、”データからAIをつなぐオールインワンプラットフォーム「データレイクハウス」と Amazon SageMaker” と題した発表がありました。</p> \n<p>まずはじめに、オールインワンプラットフォームが必要とされるようになった背景について説明がありました。従来型のビルディングブロックによるデータ分析基盤では、利用するサービスの数が増え複雑化し、学習コストや運用負荷、データの分散管理といった課題が顕在化しています。そのため、あらゆるデータを一か所で管理できるデータレイクハウスアーキテクチャを持ち、複数のユースケースに対応した機能がオールインワンで提供されるデータプラットフォームが必要になってきています。これが次世代の Amazon SageMaker です。これまで各サービス個別で提供していた UI や資材管理を一元化する Unified Studio、複数サービス横断でデータの探索をしたり、一元的なガバナンス・セキュリティを提供する Catalog、データを Open Table Format で一元管理するレイクハウスアーキテクチャで構成されています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166778\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/nttdata-1.png\" alt=\"\" width=\"3480\" height=\"1956\"></p> \n<p>上記を踏まえる形で、次世代の Amazon SageMaker について NTT データからの視点で解説がありました。次世代の Amazon SageMaker は多様なユースケースに対応するデータ・アナリティクス・AI サービスを統合し、オールインワンプラットフォーム化することで、よりデータ・AI を管理・活用しやすくする仕組みです。本プラットフォームは、データレイクハウスアーキテクチャを採用し、Amazon S3 上のデータを管理するだけでなく、Amazon Redshift のマネージドストレージを Apache Iceberg 互換の API で統合することができます。また、<a href=\"https://aws.amazon.com/jp/datazone/\">Amazon DataZone</a> を内包する Amazon SageMaker Catalog にて横断的なデータだけではなく AI モデルを管理し、ガバナンス・セキュリティをかけることができます。そして、最後に、AWS が持つアナリティクス・機械学習・生成 AI の多様なサービスを、Amazon SageMaker Unified Studio という、一元的なエントリーポイントで生産性高くデータと AI、アプリの開発を行うことができます。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-166779\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/13/nttdata-2.png\" alt=\"\" width=\"3482\" height=\"1956\"></p> \n<p>最後に生成 AI 時代のデータ活用組織のあり方について説明されました。AI エージェントシステムの開発には、データ・AI・生成AI・アプリの要素が必要であり、これまで説明してきたオールインワンプラットフォームはすべての要素が含まれており、最適です。ただ、ツールがオールインワンプラットフォームである以上、組織側もオールインワンになる必要があります。すなわち、データエンジニア・データサイエンティスト・生成 AI エンジニア、アプリエンジニアがいかにサイロ化を防ぎ協力し合えるかが重要です。NTT データも例外ではなく、組織の壁を超える取り組みを行っているものの、その難しさに直面しています。そのためには、より広い視点から AI システムを俯瞰するアーキテクトのような職種も必要になってくるのではないでしょうか。NTT データでは、オールインワンプラットフォームの考え方や AI システムの全体像を理解している、このスーパーマンを育成し、お客様をご支援できるように尽力していると述べ、発表を締めくくりました。</p> \n<h3>まとめ</h3> \n<p>「Amazon SageMaker Roadshow –Japan」と題した本セミナーでは、近年注目されているデータと AI の統合というテーマに関連する、多様な観点を含むセッションが盛り沢山となりました。本セミナーにて紹介された AWS サービスにご興味ある場合は無料で個別相談会を開催しております。皆様からのお申込みをお待ちしております。<a href=\"https://aws.amazon.com/jp/contact-us/\">お申込みリンク</a></p> \n<p>本ブログは、ソリューションアーキテクトの大薗が作成しました。</p>"
  },
  {
    "title": "Nani翻訳の技術的な話",
    "date": "2025-10-14T05:31:58.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/catnose99/articles/nani-translate",
    "content": "先日 Nani というAI翻訳アプリをリリースしました。macOS / Windowsアプリを使うとショートカットで解説つきの翻訳を簡単に呼び出すことができます。\nhttps://x.com/catnose99/status/1973218927158424056\nこの記事ではNaniの技術的な話をまとめておきます。「レスポンスが速い」という声も多くいただいているので、そのあたりの工夫についても触れたいと思います。\n\n ざっくりとした構成\n主な使用技術やサービスは以下のようになっています。\n\n\nTurso: SQLiteでユーザーの設定などを保存\n\nUpstash (Redis): キャ..."
  },
  {
    "title": "コーエーテクモゲームス：AWSと歩むゲームサーバー開発研修の設計と実装",
    "date": "2025-10-14T05:04:54.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/koei-tecmo-aws-game-development-training/",
    "content": "<p>ゲーム業界は今、かつてない変革期を迎えています。モバイルゲームの普及、クロスプラットフォーム化、そしてメタバースの概念拡大など、従来のゲーム開発に求められる技術スタックでは対応しきれない課題や知識需要が次々と生まれています。特に、大規模なマルチプレイヤーオンラインゲームの開発においては、スケーラブルなサーバーサイド技術への需要が急速に高まっています。</p> \n<p>しかし、こうした技術需要に対して、ゲーム開発に特化したサーバーサイド技術を持つプログラマーの育成には課題が山積しているのが現状です。多くのゲームプログラマーはクライアントサイドの開発に特化しており、サーバーサイド技術への理解が十分とは言えません。従来の Web アプリケーション開発とは異なる、リアルタイム性やスケーラビリティ、グローバル展開といったゲーム特有の要件、さらには可用性・レジリエンシーを確保した堅牢なシステム設計に対応できるプログラマーの育成が、業界の課題となっています。</p> \n<p>ゲーム開発におけるクライアントサイド技術に加えて、サーバーサイド技術も身につけることで、ゲームプログラマーとしてのキャリアの可能性は大きく広がります。オンラインゲームの企画段階からアーキテクチャ設計に関わることができ、技術的制約を考慮した企画提案や、運用を見据えた実装が可能になります。</p> \n<p>このような背景から、<a href=\"https://www.gamecity.ne.jp/\" target=\"_blank\" rel=\"noopener\">株式会社コーエーテクモゲームス (以下、コーエーテクモゲームス) </a>と、Amazon Web Services Japan は共同で、2025 年度新卒ゲームプログラマー向けに、次世代のゲームプログラマーを育成する「ゲームサーバー開発研修プログラム」を実施しました。その取り組みをご紹介します。</p> \n<p><span id=\"more-164962\"></span></p> \n<h3>ゲームサーバー開発研修プログラムの設計</h3> \n<p>オンラインゲーム開発・運営では、ゲーム開発スキルに加えて、以下のネットワーク関連スキルの習得が不可欠です：</p> \n<ul> \n <li>サーバーサイド基盤技術：Linux、TCP/IP、HTTP/HTTPS プロトコル</li> \n <li>データベース設計：RDB、NoSQL、分散データベース</li> \n <li>リアルタイム通信：UDP、TCP ソケットを活用したゲーム通信プロトコル</li> \n <li>分散システム設計：負荷分散、可用性・レジリエンシー対応</li> \n <li>クラウドアーキテクチャ：AWS サービス群の適切な活用と組み合わせ</li> \n</ul> \n<p>新卒ゲームプログラマーがこれらのスキルを効率よく身につけられるよう、コーエーテクモゲームスと協力して、ゲームサーバー開発の研修プログラムを作り上げました。</p> \n<p>また、この研修では、<strong>「オンラインゲームがどのような仕組みで動いているのかを理解し、それを他の人とわかりやすく話し合えるようになること」</strong>を目標に掲げています。プログラミングスキルやネットワーク関連スキルを習得することはもちろん大切ですが、それだけではありません。習得した知識を使って、オンラインゲームの仕組み全体を理解し、チームメンバーや企画部門、運営チームなど、さまざまな立場のスタッフと技術的な意見交換ができるようになることに期待しています。その結果、企画段階から「この機能のトレードオフは性能面でどうか」といった技術的な観点での提案ができたり、「将来の運用負荷を考慮したシステム設計」ができる。そんな幅広い視点を持つゲームプログラマーを育成することでオンラインゲーム開発力を高めたいと考えています。</p> \n<p>この目標を達成するための、新卒ゲームプログラマー向けの研修は以下の方針で行いました。</p> \n<ul> \n <li>1. <strong>段階的スキル構築</strong>：基礎から応用まで無理のない学習曲線を設定</li> \n <li>2. <strong>ゲーム開発に即した学習</strong>：汎用的なWebアプリではなく、ゲーム開発の文脈で技術を習得</li> \n <li>3. <strong>実践重視</strong>：座学・ハンズオン・グループワーク・確認テストを効果的に組み合わせ</li> \n <li>4. <strong>チーム開発体験</strong>：個人学習に加え、グループ内のディスカッションや他グループのプレゼンテーションを通じた学びを得る</li> \n</ul> \n<h3>ゲームサーバー開発研修プログラムの実装</h3> \n<p>研修プログラムは5日間の集中プログラムとして行われ、具体的には以下の技術要素を実践的に学習しました。本研修ではオンラインゲームの主要機能 (ギルド作成・ギルド参加・ギルド内でのプレイヤー間メッセージ送信)を題材に、データベース設計から Linux サーバーの操作、 Web API とリアルタイムサーバーのソフトウェアを一通り開発することができ、オンラインゲームにおけるサーバーサイド開発を体験することができるカリキュラムとして実装しています。</p> \n<h4>1日目: データベース</h4> \n<ul> \n <li>リレーショナルデータベースを活用したゲームデータ設計の基本概念</li> \n <li>ゲームデータに対する SQL 操作</li> \n <li>テーブル設計グループワーク</li> \n</ul> \n<h4>2日目: Linuxサーバー・TCP/IP</h4> \n<ul> \n <li>Amazon EC2 インスタンスでの Linux OS 基本操作</li> \n <li>パフォーマンス監視、プロセス管理、ログ分析</li> \n <li>TCP/IP プロトコルスタック、パケット解析</li> \n</ul> \n<h4>3日目: ネットワークプログラミング①</h4> \n<ul> \n <li>HTTP プロトコルの理解</li> \n <li>PHP を用いた Web API の実装</li> \n <li>Web API の設計グループワーク</li> \n</ul> \n<h4>4日目: ネットワークプログラミング②</h4> \n<ul> \n <li>ゲーム開発におけるネットワーク通信手段の理解</li> \n <li>Node.js を用いたリアルタイムサーバーの実装</li> \n <li>リアルタイムサーバーにおけるスケーラビリティの考慮</li> \n</ul> \n<h4>5日目: クラウドとアーキテクチャ設計</h4> \n<ul> \n <li>クラウドコンピューティングの基礎</li> \n <li>要件定義からアーキテクチャ設計に至るプロセス</li> \n <li>ゲームサーバーのアーキテクチャ設計グループワーク</li> \n</ul> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/18/koei-tecmo-aws-game-development-training-image-database-session.jpg\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-165282\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/18/koei-tecmo-aws-game-development-training-image-database-session-1024x768.jpg\" alt=\"\" width=\"1024\" height=\"768\"></a><br> データベース研修の様子</p> \n<h4>グループワークの実施</h4> \n<p>研修の一部では、3〜4名のチームに分かれて、オンラインゲームを題材に以下の3つの設計課題に取り組みました：</p> \n<ul> \n <li>データベース設計：プレイヤーデータ、ギルド、メッセージ情報の設計</li> \n <li>Web API 設計：ゲームクライアント・サーバー間通信、ギルド参加、メッセージ送受信の実装</li> \n <li>クラウドアーキテクチャ設計：AWS サービスを活用したシステム設計</li> \n</ul> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/18/koei-tecmo-aws-game-development-training-group-work-1.jpg\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-165290 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/18/koei-tecmo-aws-game-development-training-group-work-1-1024x768.jpg\" alt=\"\" width=\"1024\" height=\"768\"></a><br> グループワークで作成した API 設計の一例</p> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/18/koei-tecmo-aws-game-development-training-group-work-2.jpg\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-165291 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/18/koei-tecmo-aws-game-development-training-group-work-2-1024x809.jpg\" alt=\"\" width=\"1024\" height=\"809\"></a><br> グループワークの成果物のプレゼンテーションが行われている様子</p> \n<p>グループワークの実施により、個人学習では得られない以下の効果が確認されました：</p> \n<p><strong>技術的議論を通じた理解の深化</strong>：チームメンバー間での技術的議論により、個人学習では気づかない設計上の考慮点や最適化手法を発見する場面が見られました。特に、データベース設計においては「なぜこの設計にするのか」という根拠を説明し合い、他チームからのフィードバックを得ることで、理解が大幅に深まりました。</p> \n<p><strong>多角的な視点の獲得</strong>： 同一の技術課題に対して複数のアプローチを検討する機会が生まれました。これにより、単一の解決策に固執せず、トレードオフを考慮した柔軟な思考力が身につきました。</p> \n<h3>研修の成果と評価</h3> \n<h4>参加者フィードバック</h4> \n<p>研修終了後のアンケートでは、「オンラインゲームのアーキテクチャを大まかに理解できたこと」「サーバーサイド技術への苦手意識の改善」など参加者から多くの前向きな評価をいただきました。実施後の参加者向けのアンケートでも想像以上の高い満足度が確認できており、新卒ゲームプログラマーの成長に合わせた学習カリキュラムの提供を今後もコーエーテクモゲームスと共同で計画しています。</p> \n<p>以下に、フリーコメントの一部を抜粋して紹介します：</p> \n<blockquote>\n <p>サーバーサイドの分野について漠然としていた理解が、より具体的でクリアなものになりました。特にデータベース設計やアーキテクチャ設計については、パズルのような面白さがあり、アイデアや深い思考が求められる点に強く関心を持つことができました。</p>\n</blockquote> \n<blockquote>\n <p>以前はプログラミングでネットワーク関連に触れる機会がなく、今回の研修でサーバーの構築や運用の概要を知ることができ、大変勉強になりました。「ネットワークが難しそう」という印象から、「ネットワークをもっと知りたい」という意欲的な姿勢に変化することができました。</p>\n</blockquote> \n<blockquote>\n <p>オンラインゲームに必要な技術や考え方、さらにインターネットを介することで重要性が増すセキュリティについて、実感を伴う形で理解を深めることができました。</p>\n</blockquote> \n<h4>技術理解度の測定</h4> \n<p>技術理解度の測定には、<a href=\"https://aws.amazon.com/jp/training/digital/trivia/\" target=\"_blank\" rel=\"noopener\">AWS Skill Builder Trivia</a>を活用し、ゲーム感覚で学習効果を測定できる仕組みを導入しました。AWS Skill Builder Triviaは、リアルタイムでマルチプレイヤー競争が可能なクイズプラットフォームです。本研修では、5日間の学習内容の復習を目的として、研修で扱った技術要素に関するカスタムクイズを作成し活用しました。</p> \n<p>特に効果的だった点：</p> \n<ul> \n <li>即座のフィードバック：クイズ結果により、理解不足の領域を即座に特定できる</li> \n <li>競争要素：リアルタイムリーダーボードによる学習意欲の向上</li> \n <li>インタラクティブな体験：QRコードでの簡単参加により、全員がスマートフォンから気軽に参加できる</li> \n</ul> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/koei-tecmo-aws-game-development-training-trivia-2-1.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/koei-tecmo-aws-game-development-training-trivia-2-1-1024x801.jpg\" alt=\"\" width=\"1024\" height=\"801\" class=\"aligncenter size-large wp-image-166011\"></a><br> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/koei-tecmo-aws-game-development-training-trivia-2-2.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/koei-tecmo-aws-game-development-training-trivia-2-2.jpg\" alt=\"\" width=\"2180\" height=\"1640\" class=\"aligncenter size-full wp-image-166010\"></a></p> \n<p style=\"text-align: center\">AWS Skill Builder Triviaを活用した復習セッションの様子</p> \n<h3>今後の展望</h3> \n<p>今後の展望について、執行役員 エンタテインメント事業部 シブサワ・コウブランド長 澤田 圭輔 氏と、エンタテインメント事業部シブサワ・コウブランド シニアリーダー 冨士田 智仁 氏に、今後の展望について話を伺いました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/24/koei-tecmo-aws-game-development-training-sawada-1.jpeg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/24/koei-tecmo-aws-game-development-training-sawada-1.jpeg\" alt=\"\" width=\"131\" height=\"179\" class=\"alignright size-full wp-image-165640\"></a></p> \n<p>「5 日間の集中研修で基礎技術を習得した後、チームでミニゲームを作成し、ネットワーク機能を実装することにしました。クライアント・サーバー間の連携や、実際のコーディング経験の重要性を、実践的なゲーム開発を通じて体験してもらうことで、より実用的なスキルが身につくと考えています。新卒社員にとって、サーバーサイド技術との連携を実感できる貴重な機会になると期待しています。そして、今回の研修で得た技術・経験を活かして開発現場で活躍いただけることに期待しています！」</p> \n<p style=\"text-align: center\">澤田 圭輔 氏</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/24/koei-tecmo-aws-game-development-training-fujita.jpeg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/24/koei-tecmo-aws-game-development-training-fujita.jpeg\" alt=\"\" width=\"135\" height=\"202\" class=\"alignright size-full wp-image-165643\"></a></p> \n<p>「研修の成功を受け、より高度な技術領域への展開を計画しています。<a href=\"https://aws.amazon.com/jp/training/classroom/\" target=\"_blank\" rel=\"noopener\">AWS のクラスルームトレーニング</a>を活用し、専門コースの受講を検討中です。また、研修参加者のスキルの可視化と継続的な学習モチベーションの維持のため、<a href=\"https://aws.amazon.com/jp/certification/\" target=\"_blank\" rel=\"noopener\">AWS 認定資格</a>の取得を推奨しています。既に一部の社員が積極的に資格取得に取り組んでおり、社内の AWS 技術レベルの向上に大きく貢献しています。」</p> \n<p style=\"text-align: center\">冨士田 智仁 氏</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/aws-cloud-training-learning-pass.jpg\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/aws-cloud-training-learning-pass.jpg\" alt=\"\" width=\"960\" height=\"540\" class=\"aligncenter size-full wp-image-165816\"></a></p> \n<p style=\"text-align: center\">初級クラウド人材育成おすすめラーニングパス</p> \n<h3>おわりに</h3> \n<p>コーエーテクモゲームスと Amazon Web Services Japan の共同研修である「ゲームサーバー開発研修プログラム」は、ゲーム業界特有の技術要件に対応できる人材育成において、貴重な一歩を踏み出すことができました。</p> \n<p>リアルタイム性、スケーラビリティ、グローバル対応、継続的サービス運用といったゲーム特有の要件を満たすために、クラウドの理解と実践的活用スキルを磨き続けることがゲーム開発者のキャリアの幅を大きく広げると期待しています。</p> \n<p>また、今回の取り組みが、ゲーム業界全体での技術人材育成のモデルケースとなり、より多くの企業で同様のプログラムが展開されることを期待しています。AWS は今後も、ゲーム業界のイノベーションを支える人材育成に積極的に貢献していきます。</p> \n<p>この記事は、アマゾン ウェブ サービス ジャパン合同会社 シニアソリューションアーキテクト 大西 啓太郎が執筆しました。</p>"
  },
  {
    "title": "AWS IoT Greengrass nucleus lite – リソース制約のあるデバイスでエッジコンピューティングに革命を起こす",
    "date": "2025-10-14T04:34:58.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-iot-greengrass-nucleus-lite-revolutionizing-edge-computing-on-resource-constrained-devices/",
    "content": "<section class=\"blog-post-content lb-rtxt\">\n この記事は&nbsp;Camilla Panni, Greg Breen によって書かれた \n <a href=\"https://aws.amazon.com/jp/blogs/iot/aws-iot-greengrass-nucleus-lite-revolutionizing-edge-computing-on-resource-constrained-devices/\">AWS IoT Greengrass nucleus lite – Revolutionizing edge computing on resource-constrained devices</a> の日本語訳です。この記事は ソリューションアーキテクトの川崎が翻訳しました。\n</section> \n<section></section> \n<section></section> \n<section class=\"blog-post-content lb-rtxt\">\n <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">AWS IoT Greengrass</a> は、オープンソースのエッジランタイムです。このクラウドサービスは、マルチプロセスアプリケーションを大規模に構築 / デプロイ / 管理することができ、IoT フリート全体の運用を支援します。\n <br> AWS IoT Greengrass は2020 年 12 月に V2 をリリースし、 \n <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\">nucleus</a>として知られる Java エッジランタイムを導入しました。 2024 年 12 月の \n <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-release-2024-12-16.html\">release 2.14.0</a>&nbsp;では、 C 言語で書かれた追加のエッジランタイムオプションである nucleus lite を追加しました。 AWS IoT Greengrass nucleus lite は、リソース制約のあるデバイスを対象とした軽量な \n <a href=\"https://github.com/aws-greengrass/aws-greengrass-lite\">オープンソース</a> のエッジランタイムです。スマートホームハブ、スマートエネルギーメーター、スマートビークル、エッジ AI、ロボティクスなどの大量生産アプリケーション向けに、低コストのシングルボードコンピュータで AWS IoT Greengrass の機能を拡張できます。このブログでは、2つのエッジランタイムオプションの利点を説明し、ユースケースに最適なオプションを選択するための指針を提供します。\n <p></p> \n <h2>nucleus と nucleus lite の主な違い</h2> \n <p>AWS IoT Greengrass nucleus lite は、AWS IoT Greengrass の <a href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_Operations.html\">V2 クラウドサービス API</a> と&nbsp;<a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html\">プロセス間通信 (IPC)</a>&nbsp;インターフェースと完全に互換性があります。これは、1 つまたは両方の実行時を対象としたコンポーネントを構築してデプロイできること、また、クラウドサービスを使用してデバイスフリートを管理し続けることができることを意味します。ただし、nucleus lite には、いくつかの重要な違いがあり、特定のユースケースに適しています。</p> \n <h3>メモリ使用量</h3> \n <p>AWS IoT Greengrass nucleus は、<a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-v2-requirements\">ディスク スペース 256 MB 以上、RAM 96 MB 以上</a>が必要です。<br> ただし、オペレーティング システムやJava 仮想マシン (JVM)、アプリケーションが動作するため、 RAM は最低 512 MB を推奨しています。昨今では、1GB以上のRAMを搭載したデバイスは一般的になってきています。しかし、限られたリソースで動作を求められるデバイスも数多く存在しています。物理的リソース条件が厳しいデバイスでも利用できるよう nucleus lite が誕生しました。<br> nucleus lite は非常に小さなフットプリントで動作します。<a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-lite-component.html#greengrass-nucleus-lite-component-requirements\">RAM 5MB 、ストレージ (ディスク/フラッシュ)&nbsp; 5MB </a>のみ必要です。また、JVM を必要とせず、C 標準ライブラリのみで動作可能です。</p> \n <p><img loading=\"lazy\" class=\"wp-image-16654 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/f6e1126cedebf23e1463aee73f9df08783640400/2025/04/15/Picture-1-6.png\" alt=\"Memory footprint of nucleus versus nucleus lite\" width=\"565\" height=\"353\"></p> \n <p style=\"text-align: center\">図 1: nucleus と nucleus lite のメモリフットプリントの比較</p> \n <p>リソース制約のあるデバイス上でも AWS IoT Greengrass を利用する新しい選択肢が生ました。</p> \n <h3>静的メモリ割り当て</h3> \n <p>AWS IoT Greengrass nucleus lite&nbsp; ランタイムのメモリフットプリントは、初期設定とビルドプロセス中に決定されます。ランタイムが開始すると、 nucleus lite は一定量のメモリを割り当て、その後はその量が一定のままです。<br> つまり、 nucleus lite はリソース要件が予測可能で再現性があり、メモリリークのリスクが最小限に抑えられ、ガベージコレクションを行う言語に関連する非決定論的な待ち時間がなくなります。<br> メモリ使用量が変動するのは、デプロイした AWS IoT Greengrass コンポーネントや AWS IoT Greengrass 外で実行するプログラムによる動的メモリ割り当てのみです。</p> \n <h3>ディレクトリ構造</h3> \n <p>Nucleus lite は、Nucleus lite ランタイム、Greengrass コンポーネント、設定、ログをディスク上の異なる領域に分離します。組み込み Linux システムでは、これらの異なる要素は通常、異なるパーティションまたは異なるボリュームに保存できます。<br> 例えば:</p> \n <ul> \n  <li>nucleus lite ランタイムは、OS イメージの更新を可能にするため、A/B パーティション分割の一部として、読み取り専用パーティションに格納される可能性があります。</li> \n  <li>AWS IoT Greengrass のコンポーネントと設定は、アプリケーションが AWS IoT Greengrass のデプロイメントによって管理できるように、読み書き可能なパーティションまたはオーバーレイに格納される可能性があります。</li> \n  <li>ログファイルは、ルートボリュームの限られたフラッシュメモリの書き込みサイクルを消費しないように、一時パーティションまたは別の物理ボリュームに格納される可能性があります。</li> \n </ul> \n <p>この分離により、スケールでデバイス製造のための golden イメージを構築するのに役立ちます。詳細については、 <a href=\"https://docs.aws.amazon.com/prescriptive-guidance/latest/iot-greengrass-golden-images/introduction.html\">Manufacturing devices at scale with AWS IoT Greengrass golden images</a> をご覧ください。</p> \n <h3>systemd との統合</h3> \n <p><a href=\"https://systemd.io/\">systemd</a>&nbsp;は Linux システムで一般的に利用可能なシステムとサービス管理フレームワークで、AWS IoT Greengrass nucleus lite には必須です。<br> nucles lite をデバイスにインストールすると、 <a href=\"https://github.com/aws-greengrass/aws-greengrass-lite/blob/main/docs/design/overview.md\">systemd サービスまたはデーモンの集合体</a>&nbsp;としてインストールされます。nucles lite は、デバイスに展開する AWS IoT Greengrass コンポーネントごとに個別の systemd サービスとしてインストールします。nucles lite は、デバイスの多数のフリートにまたがってスケールするクラウド管理の systemd として考えることができます。<br> nucleus lite とコンポーネントを systemd サービスとしてインストールしているため、systemd がシステムログを処理し、集中管理します。つまり、一般的な Linux システムツールを使用して、デバイスソフトウェアを監視、保守、デバッグできます。</p> \n <h2>nucleus と nucleus lite の選択</h2> \n <p style=\"text-align: left\">nucleus ランタイムと nucleus lite ランタイムの選択は、使用ケース、デバイスの制約、必要な機能、および OS によって異なります。次の表は、選択の目安を要約したものです。</p> \n <table class=\"aligncenter\" style=\"height: 435px\" border=\"1\" width=\"610\"> \n  <tbody> \n   <tr> \n    <td><strong>nucleus 利用ケース</strong></td> \n    <td><strong>nucleus lite 利用ケース</strong></td> \n   </tr> \n   <tr> \n    <td style=\"width: 300px\"> \n     <ul> \n      <li>オペレーティングシステムに Windows を使用したい、または systemd が含まれていない Linux ディストリビューションを使用したい場合</li> \n      <li>アプリケーションコンポーネントが Docker コンテナである場合</li> \n      <li>アプリケーションコンポーネントが Lambda 関数である場合</li> \n      <li>スクリプト言語または解釈型プログラミング言語を使ってアプリケーションコンポーネントを開発する場合</li> \n      <li><a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/operating-system-feature-support-matrix.html\">nucleus lite でまだサポートされていない機能</a>を使用したい場合</li> \n      <li><a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/gw-self-host-gg2.html\">AWS IoT SiteWise ゲートウェイ</a>を作成する場合</li> \n     </ul> </td> \n    <td style=\"width: 300px\"> \n     <ul> \n      <li>デバイスのメモリが制約されており、RAM が 512 MB 以下の場合</li> \n      <li>デバイスの CPU のクロック周波数が 1 GHz 未満の場合</li> \n      <li>組み込み Linux ディストリビューションを作成し、OS イメージの更新や A/B パーティションなどの機能をサポートするため、パーティションスキームを正確に制御する必要がある場合</li> \n      <li>マシン語にコンパイルされるプログラミング言語を使ってアプリケーションコンポーネントを開発する場合</li> \n      <li>ava が適さないコンプライアンス要件がある場合</li> \n      <li>静的メモリ割り当てを好む場合</li> \n     </ul> </td> \n   </tr> \n  </tbody> \n </table> \n <p style=\"text-align: center\">表 1: nucleus と nucleus lite を選択する際の指針</p> \n <p>表 1 の指示は規範ではなく、一般的なガイダンスです。たとえば、ユースケースのニーズに基づいて、ギガバイトの RAM を搭載したデバイスで nucleus lite を使用することができます。また、デバイスのリソースが十分にある場合は、スクリプト言語やインタプリタ型言語で書かれたコンポーネントを nucleus lite にデプロイすることもできます。</p> \n <h2>シナリオとユースケース</h2> \n <h3>ユースケース</h3> \n <p>メモリとプロセシング能力が制限された低コストデバイス、そして慎重に選別された組み込み Linux ディストリビューションに適しているのが、リソース要件のハードルが低い nucleus lite です。こうしたデバイスには、スマートホーム、産業、自動車、スマートメーターなど、さまざまな分野があります。</p> \n <h3>組込みシステム</h3> \n <p>nucleus lite は、ローンチ時から <a href=\"https://github.com/aws4embeddedlinux/meta-aws\">meta-aws project</a> によって提供される組み込み Linux のサポートを含むことで、組み込みシステム開発者にとって大きな前進を示しています。このプロジェクトには、<a href=\"https://github.com/aws4embeddedlinux/meta-aws/tree/master/recipes-iot/aws-iot-greengrass\">サンプルレシピ</a> が含まれており、AWS IoT Greengrass を OpenEmbedded または Yocto プロジェクトにビルドインすることができます。このプロジェクトの姉妹プロジェクト <a href=\"https://github.com/aws4embeddedlinux/meta-aws-demos\">meta-aws-demos</a> には、<a href=\"https://github.com/aws4embeddedlinux/meta-aws-demos/tree/master/meta-aws-demos/recipes-core/images/aws-iot-greengrass-lite-demo-image#ab-update-example-made-with-meta-rauc\">RAUC を使った A/B アップデートのデモ</a>など、AWS IoT Greengrass の数多くのデモが含まれています。</p> \n <h3>コンテナ化された軽量&nbsp;AWS IoT Greengrass nucleus lite&nbsp;によるマルチテナンシーのサポート</h3> \n <p>nucleus lite はフットプリントが小さいため、マルチテナント IoT デプロイに対して効果的なコンテナ化を実現できます。独自の AWS IoT Greengrass ランタイムと一体化した複数の分離アプリケーションを実行できます。</p> \n <p><img loading=\"lazy\" class=\"wp-image-16660 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/f6e1126cedebf23e1463aee73f9df08783640400/2025/04/15/Picture-2.png\" alt=\"Multi-tenant containerization\" width=\"648\" height=\"182\"></p> \n <p style=\"text-align: center\">図 2: マルチテナントのコンテナ化</p> \n <p>アーキテクチャの利点は次のとおりです:</p> \n <ul> \n  <li><span style=\"text-decoration: underline\">セキュリティを考慮した分離</span>: それぞれのコンテナ化されたインスタンスは、アプリケーション間の厳格な境界を維持します。</li> \n  <li><span style=\"text-decoration: underline\">リソース最適化</span>: 軽量なフットプリントにより、制約された環境でも複数のコンテナをサポートできます。</li> \n  <li><span style=\"text-decoration: underline\">独立した運用</span>: アプリケーションを個別に管理、デバッグ、更新できます。</li> \n  <li><span style=\"text-decoration: underline\">柔軟なデプロイ</span>: デバイスの機能に基づいて、さまざまなコンテナ化の戦略をサポートします。</li> \n </ul> \n <h2></h2> \n <h2>実装のベストプラクティス</h2> \n <p>nucleus lite を使用するには、コンポーネントを書き直す必要はありません。ただし、メモリ効率を最大化したい場合は、コンポーネントを最適化または書き換えることを選択できます。<br> nucleus lite を使用するにあたり、以下の重要な考慮事項を確認ください。</p> \n <h3>プラグインの互換性</h3> \n <p><a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/develop-greengrass-components.html#component-types\">プラグインコンポーネント</a> は、Java 版 の nucleus ランタイムと密接に統合された特殊な Java コンポーネントです。これらのプラグインは nucleus lite ランタイムでは使用できません。</p> \n <h3>コンポーネント言語の考慮事項</h3> \n <p>カスタムコンポーネント用のプログラミング言語を選択する際は、各言語のインタープリターまたはランタイム環境が全体のメモリフットプリントに影響することを考慮する必要があります。Python のような言語を選択すると、nucleus lite のメモリ節約効果がある程度相殺されます。Java を選択する場合は、システムに JVM を導入する必要があります。</p> \n <h3>異なるシナリオ向けの推奨事項</h3> \n <p>nucleus から nucleus lite に移行する際、既存のコンポーネントはそのまま動作します。そのため、nucleus lite への移行が簡単になり、最適化の計画を立てている間も機能が維持されます。</p> \n <p>新規に作成する場合:</p> \n <ul> \n  <li>最大の効率を得るために、重要なコンポーネントを書き換えることを検討してください。</li> \n  <li>C、C ++、Rust などのランタイムオーバーヘッドが最小限の言語を選んでください。</li> \n  <li>開発の労力とメモリ最適化のニーズのバランスをとってください。</li> \n </ul> \n <p>メモリ容量の計画を立てる場合:</p> \n <ul> \n  <li>メモリ計算では、すべてのランタイム依存関係を考慮してください。</li> \n  <li>nucleus lite のサイズだけでなく、システム全体のフットプリントを評価してください。</li> \n  <li>適切な場合はコンポーネントの統合を検討してください。</li> \n </ul> \n <h2></h2> \n <h2>将来の展望と結論</h2> \n <p>今後、AWS IoT Greengrass nucleus lite を活用することで、エッジコンピューティングの実装を再構築できます。<br> リソース要件を大幅に削減することで、次のようなことが可能になります。</p> \n <ul> \n  <li>リソースの制限のあるデバイスに IoT 機能をデプロイ</li> \n  <li>より広範なハードウェアでのエッジコンピューティングソリューションの実装</li> \n  <li>機能を維持しながら運用オーバーヘッドの削減</li> \n  <li>リソース要件に制限されていた新しい使用例の実現</li> \n </ul> \n <p>開発者にとって、nucleus lite はエッジで革新的なことを行う新たな機会を提供します。リソース制約のあるデバイスでエッジコンピューティングが可能かどうかを気にする代わりに、ビジネス価値を生み出すソリューションの実装に集中できます。<br> この AWS IoT ポートフォリオの強化により、より幅広いデバイスやユースケースに対応する効率的かつスケーラブルな IoT ソリューションを構築するというコミットメントが示されました。<br> AWS IoT Greengrass nucleus lite を使用して IoT ソリューションの開発に向けて以下を検討ください。</p> \n <ul> \n  <li><strong>詳細を理解する :</strong> <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">AWS IoT Greengrass のドキュメント</a>を参照してください。</li> \n  <li><strong>nucleus lite を試す :</strong> <a href=\"https://github.com/aws-greengrass/aws-greengrass-lite/blob/main/docs/SETUP.md#setting-up-greengrass-nucleus-lite\">インストールガイド</a>または <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/getting-started.html\">Getting Started チュートリアル</a> に従って実験と開発を始めましょう。</li> \n  <li><strong>専門家に質問 :</strong> 質問やガイダンスが必要な場合は、AWS IoT の専門家に相談してください。</li> \n  <li><strong>コミュニティに参加 :</strong> <a href=\"https://repost.aws/topics/TAEQXJMLWWTp2elx_Bkb1Kvw/internet-of-things-iot\">AWS IoT</a> コミュニティフォーラムで体験を共有したり、他のユーザーから学びましょう。</li> \n  <li><strong>コントリビュート :</strong> <a href=\"https://github.com/aws-greengrass/aws-greengrass-lite\">オープンソースリポジトリ</a>にコードを投稿してください。</li> \n </ul> \n <p>_________________________________________________________________________________</p> \n <h3>著者について</h3> \n <p><img loading=\"lazy\" class=\"alignleft wp-image-16664 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/f6e1126cedebf23e1463aee73f9df08783640400/2025/04/15/Picture-3-120x150.png\" alt=\"\" width=\"120\" height=\"150\"><strong>Camilla Panni</strong> は、 Amazon Web Services のソリューションアーキテクトです。彼女は、イタリア全土の公共部門の顧客がクラウド導入の取り組みを加速するのを支援しています。自動化とIoTにおける彼女の技術的背景が、顧客が新興技術でイノベーションを起こすのを支援することへの情熱を後押ししています。</p> \n <p>&nbsp;</p> \n</section> \n<section class=\"blog-post-content lb-rtxt\">\n <img loading=\"lazy\" class=\"size-medium wp-image-16663 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f6e1126cedebf23e1463aee73f9df08783640400/2025/04/15/Picture-4.png\" alt=\"\" width=\"120\" height=\"160\">\n <strong>Greg Breen</strong> は、Amazon Web Services のシニア IoT スペシャリスト ソリューションアーキテクトです。オーストラリアを拠点とし、アジア太平洋地域全体の顧客がIoTソリューションを構築するのを支援しています。組み込みシステムにおける豊富な経験を持つ彼は、製品開発チームがデバイスを市場に投入するのを支援することに特に関心を持っています。\n</section>"
  },
  {
    "title": "RAGでドキュメントの更新に強くする手法",
    "date": "2025-10-14T01:00:33.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/knowledgesense/articles/8b96daf7ca2474",
    "content": "\n 導入\nこんにちは、株式会社ナレッジセンスの須藤英寿です。\n今回は、ドキュメントの更新に強いRAGの手法「VersionRAG」を紹介します。\nhttps://arxiv.org/pdf/2510.08109\n\n\n サマリー\nRAGは便利な手法ですが、文書のバージョンの変化が苦手です。例えば、仕様書のように更新されていく文書の新旧の認識が苦手です。Google検索で出てきた情報が古い情報で、今では利用できない。というのは誰しもが経験してきたのではないでしょうか。RAGでも、同様の問題が発生します。\n今回紹介する「VersionRAG」は、内容が時間経過でどんどん更新されていくドキュメン..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.4",
    "date": "2025-10-13T23:37:59.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.4",
    "content": "### Core Changes\n\n- Use ESLint Flat Config: #84800\n- fix missing flight-router-state-tree header normalization: #84718\n- Write `.next/dev/types/**/*.d.ts` to default tsconfig: #84747\n- Upgrade React from `9724e3e6-20251008` to `ead92181-20251010`: #84793\n- [mcp] capture next config schema errors: #84832\n\n### Example Changes\n\n- [docs] fix(with-supabase): Update README env variables: #84745\n\n### Misc Changes\n\n- Update test/CNA templates React version to 19.2.0: #84736\n- Turbopack: use the same serialization method for lookup as for storing: #84765\n- Turbopack: update petgraph: #84757\n- [turbopack] Issue 'too many matches' warning for DirAssets also: #84768\n- Revert \"Fix flakey overlay feedback test\": #84819\n- [test]: de-flake client-cache.original.test.ts: #84831\n- [ci]: set NEXT_TEST_VERSION to release tag for deploy tests: #84840\n\n### Credits \n\nHuge thanks to @eps1lon, @devjiwonchoi, @CarloQuick, @sokra, @lukesandberg, @ztanner, and @huozhi for helping!\n"
  },
  {
    "title": "【Unity】フキダシUIを作ろう、それもテキストに応じて伸びるやつな【ハンズオン, LayoutGroup, LayoutElement】",
    "date": "2025-10-13T22:07:05.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/gameshitai/articles/0b35fe99012c6a",
    "content": "\n 背景\n\nLayoutGroup あたりの解説記事書こう → なんか仕組み解説よりかフキダシ作成の手順解説記事になったけどまあいっか\nCanvas, TextMeshPro の解説はありません(追加してほしい事柄があればコメントにどうぞ)\n\n\n 完成形\n\n\nこんなフキダシを作りながら、各コンポーネントの使い方を覚えていきましょ～\n\n\n 準備, 設計\n↓使用するフキダシ スプライトはこちら↓\nhttps://fukidesign.com/e1695/\nフキダシUI のオブジェクト構成\nCanvas\n└─ WordBubble\n   └─ Text\nWordBubble オブジェクトの担当..."
  },
  {
    "title": "Vibe Codingで25万ダウンロード超のOSSを開発できた。できたが… ── AIの役割 vs 人間の役割ではなく「協働」で考える",
    "date": "2025-10-13T22:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/team_zenn/articles/claudecode-ai-coding-vs-human-engineer",
    "content": "\n はじめに\n@dyoshikawaです。\n私の2025年6月ごろからの取り組みとして、Claude CodeによるVibe CodingでRulesyncというOSSツールを公開しました。\nそこでかなり自由にClaude Codeでいろんな手法を試すことができましたので、AIコーディング全般のTipsをお伝えできればと思います。\n一方で（人間の介入が少なすぎる）Vibe Codingの弊害としてコードベースやドキュメントが崩壊し、途中で開発がストップした場面もありました。ここのプロセスの反省と、どのように開発可能に復帰させたかという点も紹介します。\n最後に人間の役割、AIの役割、ソフト..."
  },
  {
    "title": "AWS Lambda(Ruby)の起動が遅い…ボトルネックを特定するまでの道のり",
    "date": "2025-10-13T21:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/fusic/articles/aws-lambda-ruby-function-performance",
    "content": "壮大なタイトルではありますが、先に結論を書くと、\nrequire 'aws-sdk'\nこの部分を\nrequire 'aws-sdk-sqs'\nのように、 使用するモジュール(今回で言うとSQS)に絞る ことで起動が速くなりました。\nそして、もう一つは Rubyを3.2→3.4に上げること です。これも高速化に寄与しました。\nポイントとしてはこの2点なのですが、この結論に至るまでに試したことや、他にもこんなアプローチがあったな、など思うことがあったので記事にしてみました。\n\n 起こっていた問題\n弊社内で利用しているSlack Appにて呼び出している「Amazon API Gateway ..."
  },
  {
    "title": "vercel/next.js – v15.5.5",
    "date": "2025-10-13T17:15:14.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.5.5",
    "content": "> [!NOTE]  \r\n> This release is backporting bug fixes. It does **not** include all pending features/changes on canary.\r\n\r\n### Core Changes\r\n- Split code-frame into separate compiled package (#84238)\r\n- Add deprecation warning to Runtime config (#84650)\r\n- fix: unstable_cache should perform blocking revalidation during ISR revalidation (#84716)\r\n- feat: `experimental.middlewareClientMaxBodySize` body cloning limit  (#84722)\r\n- fix: missing next/link types with typedRoutes (#84779)\r\n\r\n### Misc Changes\r\n- docs: early October improvements and fixes (#84334)\r\n\r\n### Credits\r\n\r\nHuge thanks to @devjiwonchoi, @ztanner, and @icyJoseph for helping!"
  },
  {
    "title": "Next.js App Routerで破綻しない設計──本番で使えるアーキテクチャ実践ガイド",
    "date": "2025-10-13T15:32:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yukionishi/articles/cd79e39ea6c172",
    "content": "Next.jsのApp Routerは、“設計力が試されるフレームワーク”です。\nServer Components、Server Actions、そして“use client”による明確な境界。\nそれらは間違いなく強力な仕組みであり、\n使いこなせば、アプリケーションの構造を根本から変えるほどのポテンシャルを持っています。\nただ、どう設計すれば破綻しないのかについては、\n誰も明確な指針を示してくれません。\n実際、僕自身もいくつものチーム開発でApp Routerを使いながら、\n「境界があいまいになる」「Server Actionsが散らかる」\nといった“App Router地獄”を何度も..."
  },
  {
    "title": "yomitokuで作る無料の日本語OCR Webアプリ【Flask + TypeScript】",
    "date": "2025-10-13T14:45:46.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/lecto/articles/b345c7f3920ae9",
    "content": "\n はじめに\n昨今、AI が急速に普及している中で、改めて「OCR（光学文字認識）」という技術に注目してみました。\nOCR の API サービスは多数存在していますが、どれも従量課金制で、利用量が増えるとコストが膨らんでいきます。Google Cloud Vision API や Amazon Textract などは高精度ですが、個人開発や小規模なプロジェクトでは原価が気になるところです。\n「日本語 OCR を自分で構築できれば、コストを気にせず色々なことに使えるのではないか？」\nOSS の OCR ライブラリとしては、Tesseract や EasyOCR などが有名ですが、日本語の..."
  },
  {
    "title": "Claude Codeに自分の記憶を持ってもらうMCPサーバーを作った話",
    "date": "2025-10-13T14:28:18.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/pppp303/articles/claude-ops-mcp-memory",
    "content": "\n 作ったもの：claude-ops-mcp\nhttps://github.com/pppp606/claude-ops-mcp/\nClaude Codeの操作履歴をMCPサーバーとして提供するツールです。ClaudeCodeが自分で書いた自分のログを、自身で読み返すためのMCPです。\n\n なぜ作ったか\nClaude Codeがv2になり /rewind コマンドで会話を巻き戻せるのは便利なのですが、根本的にClaude Codeは自身が行った作業の内容を理解（記憶）していないという問題があります。\n「え、ちょっと何したの？」という素朴な質問に、自身のログを遡って確認するという機能はなく..."
  },
  {
    "title": "Unity: 2D で大量の草を生やす",
    "date": "2025-10-13T14:24:18.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ruccho/articles/258b59603547d0",
    "content": "2D で草を表現するのに、大量のメッシュを Transparent キューで描画する方法を調べました。\n\n\n 前提条件\n\nURP 17 カスタム\n\n2D Renderer と Lights 2D を使用\nすでにいろいろ改造しており、いざとなれば追加の改造も可能である前提\n\n\n描画対象\n\nPer Instance なデータのある描画\n\n個別の草が風でなびいたり、Rigidbody とのインタラクションをもたせるため、インスタンスごとに状態を持たせる必要がある\n\n\n既存の 2D ライティングと統合するため Shader Graph の Sprite Lit シェーダーを使いたい\nTransp..."
  },
  {
    "title": "知ってるかい？Codexならスマホでタスク完結できる世界線を。",
    "date": "2025-10-13T12:06:21.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/fastdoctor/articles/80f22eb54883b0",
    "content": "※ ファンタジーではありません。\nもちろん丸投げでは完結できませんし、指示を無視した事もしてきます。\nそこはAI駆動開発に片足突っ込んだ人なら分かる通り、一定許容する必要がありますよね。\nしかし、以前この記事を書いた後で意見がまたガラッと変わるのですが、突如Codexに推し変することにしました。\nhttps://zenn.dev/fastdoctor/articles/f2f6b90f95c039\nもし以下に課題を感じてるという人がいたら、私と同じくシュタインズゲートの選択をしてはいかがでしょうか・・・😈\n\nClaude Code使ってるが、結局パソコンの前から離れて仕事できない。\nスマ..."
  },
  {
    "title": "なぜ気軽にテーブルにカラムを足してはいけないのか",
    "date": "2025-10-13T10:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mj2mkt/articles/2025-10-12-dont-add-columns-at-random",
    "content": "\n はじめに\nデータベース（RDB）の設計で深く考えずにテーブルにカラムを追加してしまうことはありませんか？テーブルの追加よりもアプリケーション側での変更が少ないので、心理的ハードルが低いこともあるでしょう。しかし、そうしてカラム追加していくうちに取り返しのつかないことになるかもしれません。\nこの記事では大きく以下の3つに分けて、なぜ気軽にテーブルにカラムを足してはいけないのかを説明します。\n\nそもそもデータベース設計がちゃんとできていないことの兆候である\n変更のコストが大きい\nインデックスの設計が難しくなる\n\n\n そもそもデータベース設計がちゃんとできていないことの兆候である\n気軽にカ..."
  },
  {
    "title": "Snowflake 自律化サービスがもたらすデータエンジニアの新時代",
    "date": "2025-10-13T09:54:38.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/dataheroes/articles/d6da9fb50e0b1e",
    "content": "\n はじめに\n私は、CCCMKホールディングス株式会社でエンジアリング全般の責任者をしていますTaroと申します。\n当社は、日本最大級の共通ポイントサービス「Vポイント」を運営しており、Snowflakeを中心としたデータ活用基盤を構築運用しています。\n最近、テクノロジーロードマップを見直しており、今年に入ってからのSnowflakeのいくつかの機能リリースを元にデータ基盤の未来についての考察を兼ねて、この記事を書きました。\nという訳で、本記事は技術的な予測というより、一人のベテランデータエンジニアが『こうあってほしい』と考える未来像です。\n時間軸や具体的な機能は外れる可能性が高いですが..."
  },
  {
    "title": "【React】「とりあえず切り出す」をやめる - カスタムフック設計で大事なこと",
    "date": "2025-10-13T04:00:00.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/uzu_tech/articles/12bb1dde240c5b",
    "content": "こんにちは!\n株式会社Sally エンジニアの haruten です♪\n私たち株式会社Sallyでは、マーダーミステリーをスマホやPCで遊べるアプリ「ウズ」や、マーダーミステリーを制作してウズ上で公開・プレイできるエディターツール「ウズスタジオ」などを開発・運営しています。\nhttps://sally-inc.jp/\n今回はReactのカスタムフックの設計について学び直す機会があったので、その備忘録です！\n\n はじめに\nカスタムフックは、Reactにおけるロジックの再利用を可能にする強力な機能です。\nしかし最近、とりあえずスパゲッティコードを切り出して分割するだけに利用していることに気づ..."
  },
  {
    "title": "Anthropicが公開しているClaude Codeのベストプラクティスを初心者向けに解説",
    "date": "2025-10-13T02:42:53.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/tmasuyama1114/articles/claude_code_best_practice_guide",
    "content": "こんにちは、とまだです。\n「AIツールを使ってコーディングを効率化したい！」\nそう思ってClaude Codeを始めてみたものの、思うような結果が出なくて悩んでいませんか？\n今回は、Anthropic社が公開しているClaude Codeのベストプラクティスから抜粋し、初心者にもわかりやすく解説します！\nこれを読めば、Claude Codeをもっと効果的に使いこなせるようになるはずです。\nちなみに私は本業ではフリーランスエンジニア、ならびにAI駆動開発の導入支援を行っています。\nまた、Udemy で AI 駆動開発講座を複数開講しており、いくつかベストセラーもいただいています。\nその経験..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.3",
    "date": "2025-10-12T23:46:44.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.3",
    "content": "### Core Changes\n\n- Upgrade React from `3025aa39-20251007` to `9724e3e6-20251008`: #84642\n- Remove unused `eslint-disable` directives: #84797\n\n### Misc Changes\n\n- [cna] Preserve existing config option when enabling React Compiler: #84663\n- Prevent failing `types-and-precompiled` from corrupting terminal output: #84799\n\n### Credits \n\nHuge thanks to @eps1lon for helping!\n"
  },
  {
    "title": "TinyGoはどのように \"Tiny\" を実現している？",
    "date": "2025-10-12T06:00:05.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/uji/articles/how-tinygo-tiny",
    "content": "!\nこの資料は TinyGo Conference 2025 in Japan の登壇資料です。\n\n\n 自己紹介\n\n名前: uji\n\n神戸市在住\nNOT A HOTEL のソフトウェアエンジニア\nGopher 7年生、TinyGo は 3年くらい前に初めて触りました\nKOBE.go, Kyoto.go 運営\n\n\nKOBE.go TinyGo Keebイベントの様子\n\n作ったもの\n\nhttps://x.com/uji_rb/status/1964242879175327748\nhttps://x.com/uji_rb/status/1975770765812527488\nhttps://z..."
  },
  {
    "title": "モダンフロントエンドはJSON APIが鬱陶しいので、無くしていきたい",
    "date": "2025-10-12T00:44:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/naofumik/articles/0714f7237a493c",
    "content": "\n はじめに\nKaigi on Rails 2025で発表し、何人かの人といろいろ話しているうちに、モダンフロントエンドが面倒臭いのはJSON APIのせいではないかと考えるようになりました。そしてJSON APIそのものが悪いというよりは、JSON APIを必要以上に使う原因となっているSPAが問題ではないかと思っています。まだ考えは固まっていないのですが、まずは部分的に紹介したいと思います。\n\n モダンフロントエンドはJSON基礎工事が大変\n\nSPAのReactフロントエンドを作る場合、Hotwireなら不要だった多大な工数が新しく発生します。\nAPIエンドポイントのルータおよびコン..."
  },
  {
    "title": "nodejs/node – 2025-10-08, Version 24.10.0 (Current), @RafaelGSS",
    "date": "2025-10-11T16:18:16.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v24.10.0",
    "content": "### Notable Changes\r\n\r\n* \\[[`31bb476895`](https://github.com/nodejs/node/commit/31bb476895)] - **(SEMVER-MINOR)** **console**: allow per-stream `inspectOptions` option (Anna Henningsen) [#60082](https://github.com/nodejs/node/pull/60082)\r\n* \\[[`3b92be2fb8`](https://github.com/nodejs/node/commit/3b92be2fb8)] - **(SEMVER-MINOR)** **lib**: remove util.getCallSite (Rafael Gonzaga) [#59980](https://github.com/nodejs/node/pull/59980)\r\n* \\[[`18c79d9e1c`](https://github.com/nodejs/node/commit/18c79d9e1c)] - **(SEMVER-MINOR)** **sqlite**: create authorization api (Guilherme Araújo) [#59928](https://github.com/nodejs/node/pull/59928)\r\n\r\n### Commits\r\n\r\n* \\[[`e8cff3d51e`](https://github.com/nodejs/node/commit/e8cff3d51e)] - **benchmark**: remove unused variable from util/priority-queue (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`03294252ab`](https://github.com/nodejs/node/commit/03294252ab)] - **benchmark**: update count to n in permission startup (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`3c8a609d9b`](https://github.com/nodejs/node/commit/3c8a609d9b)] - **benchmark**: update num to n in dgram offset-length (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`7b2032b13e`](https://github.com/nodejs/node/commit/7b2032b13e)] - **benchmark**: adjust dgram offset-length len values (Bruno Rodrigues) [#59708](https://github.com/nodejs/node/pull/59708)\r\n* \\[[`552d887aee`](https://github.com/nodejs/node/commit/552d887aee)] - **benchmark**: update num to n in dgram offset-length (Bruno Rodrigues) [#59708](https://github.com/nodejs/node/pull/59708)\r\n* \\[[`31bb476895`](https://github.com/nodejs/node/commit/31bb476895)] - **(SEMVER-MINOR)** **console**: allow per-stream `inspectOptions` option (Anna Henningsen) [#60082](https://github.com/nodejs/node/pull/60082)\r\n* \\[[`0bf022d4c0`](https://github.com/nodejs/node/commit/0bf022d4c0)] - **console,util**: improve array inspection performance (Ruben Bridgewater) [#60037](https://github.com/nodejs/node/pull/60037)\r\n* \\[[`04d568e591`](https://github.com/nodejs/node/commit/04d568e591)] - **deps**: V8: cherry-pick f93055fbd5aa (Olivier Flückiger) [#60105](https://github.com/nodejs/node/pull/60105)\r\n* \\[[`621058b3bf`](https://github.com/nodejs/node/commit/621058b3bf)] - **deps**: update archs files for openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\r\n* \\[[`81b3009fe6`](https://github.com/nodejs/node/commit/81b3009fe6)] - **deps**: upgrade openssl sources to openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\r\n* \\[[`dc44c9f349`](https://github.com/nodejs/node/commit/dc44c9f349)] - **deps**: upgrade npm to 11.6.1 (npm team) [#60012](https://github.com/nodejs/node/pull/60012)\r\n* \\[[`ec0f137198`](https://github.com/nodejs/node/commit/ec0f137198)] - **deps**: update ada to 3.3.0 (Node.js GitHub Bot) [#60045](https://github.com/nodejs/node/pull/60045)\r\n* \\[[`f490f91874`](https://github.com/nodejs/node/commit/f490f91874)] - **deps**: update amaro to 1.1.4 (pmarchini) [#60044](https://github.com/nodejs/node/pull/60044)\r\n* \\[[`de7a7cd0d7`](https://github.com/nodejs/node/commit/de7a7cd0d7)] - **deps**: update ada to 3.2.9 (Node.js GitHub Bot) [#59987](https://github.com/nodejs/node/pull/59987)\r\n* \\[[`a533e5b5db`](https://github.com/nodejs/node/commit/a533e5b5db)] - **doc**: add automated migration info to deprecations (Augustin Mauroy) [#60022](https://github.com/nodejs/node/pull/60022)\r\n* \\[[`7fb8fe4875`](https://github.com/nodejs/node/commit/7fb8fe4875)] - **doc**: fix typo on child\\_process.md (Angelo Gazzola) [#60114](https://github.com/nodejs/node/pull/60114)\r\n* \\[[`24c1ef9846`](https://github.com/nodejs/node/commit/24c1ef9846)] - **doc**: remove optional title prefixes (Aviv Keller) [#60087](https://github.com/nodejs/node/pull/60087)\r\n* \\[[`08b9eb8e19`](https://github.com/nodejs/node/commit/08b9eb8e19)] - **doc**: mark `.env` files support as stable (Santeri Hiltunen) [#59925](https://github.com/nodejs/node/pull/59925)\r\n* \\[[`66d90b8063`](https://github.com/nodejs/node/commit/66d90b8063)] - **doc**: mention reverse proxy and include simple example (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\r\n* \\[[`14aa1119cb`](https://github.com/nodejs/node/commit/14aa1119cb)] - **doc**: provide alternative to `url.parse()` using WHATWG URL (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\r\n* \\[[`f9412324f6`](https://github.com/nodejs/node/commit/f9412324f6)] - **doc**: fix typo of built-in module specifier in worker\\_threads (Deokjin Kim) [#59992](https://github.com/nodejs/node/pull/59992)\r\n* \\[[`64e738a342`](https://github.com/nodejs/node/commit/64e738a342)] - **doc,crypto**: reorder ML-KEM in the asymmetric key types table (Filip Skokan) [#60067](https://github.com/nodejs/node/pull/60067)\r\n* \\[[`1b25008b41`](https://github.com/nodejs/node/commit/1b25008b41)] - **http**: improve writeEarlyHints by avoiding for-of loop (Haram Jeong) [#59958](https://github.com/nodejs/node/pull/59958)\r\n* \\[[`35f9b6b28f`](https://github.com/nodejs/node/commit/35f9b6b28f)] - **inspector**: improve batch diagnostic channel subscriptions (Chengzhong Wu) [#60009](https://github.com/nodejs/node/pull/60009)\r\n* \\[[`3b92be2fb8`](https://github.com/nodejs/node/commit/3b92be2fb8)] - **(SEMVER-MINOR)** **lib**: remove util.getCallSite (Rafael Gonzaga) [#59980](https://github.com/nodejs/node/pull/59980)\r\n* \\[[`c495e1fe57`](https://github.com/nodejs/node/commit/c495e1fe57)] - **lib**: optimize priority queue (Gürgün Dayıoğlu) [#60039](https://github.com/nodejs/node/pull/60039)\r\n* \\[[`6be31fb9f3`](https://github.com/nodejs/node/commit/6be31fb9f3)] - **lib**: implement passive listener behavior per spec (BCD1me) [#59995](https://github.com/nodejs/node/pull/59995)\r\n* \\[[`c5e4aa763b`](https://github.com/nodejs/node/commit/c5e4aa763b)] - **meta**: bump actions/setup-python from 5.6.0 to 6.0.0 (dependabot\\[bot]) [#60090](https://github.com/nodejs/node/pull/60090)\r\n* \\[[`50fa1f4a76`](https://github.com/nodejs/node/commit/50fa1f4a76)] - **meta**: bump ossf/scorecard-action from 2.4.2 to 2.4.3 (dependabot\\[bot]) [#60096](https://github.com/nodejs/node/pull/60096)\r\n* \\[[`def4ce976c`](https://github.com/nodejs/node/commit/def4ce976c)] - **meta**: bump actions/cache from 4.2.4 to 4.3.0 (dependabot\\[bot]) [#60095](https://github.com/nodejs/node/pull/60095)\r\n* \\[[`24b5abc0e9`](https://github.com/nodejs/node/commit/24b5abc0e9)] - **meta**: bump step-security/harden-runner from 2.12.2 to 2.13.1 (dependabot\\[bot]) [#60094](https://github.com/nodejs/node/pull/60094)\r\n* \\[[`8ccf2b0b34`](https://github.com/nodejs/node/commit/8ccf2b0b34)] - **meta**: bump actions/setup-node from 4.4.0 to 5.0.0 (dependabot\\[bot]) [#60093](https://github.com/nodejs/node/pull/60093)\r\n* \\[[`78580147ef`](https://github.com/nodejs/node/commit/78580147ef)] - **meta**: bump actions/stale from 9.1.0 to 10.0.0 (dependabot\\[bot]) [#60092](https://github.com/nodejs/node/pull/60092)\r\n* \\[[`705686b5c4`](https://github.com/nodejs/node/commit/705686b5c4)] - **meta**: bump codecov/codecov-action from 5.5.0 to 5.5.1 (dependabot\\[bot]) [#60091](https://github.com/nodejs/node/pull/60091)\r\n* \\[[`423a6bc744`](https://github.com/nodejs/node/commit/423a6bc744)] - **meta**: bump github/codeql-action from 3.30.0 to 3.30.5 (dependabot\\[bot]) [#60089](https://github.com/nodejs/node/pull/60089)\r\n* \\[[`9d9bd0fb4f`](https://github.com/nodejs/node/commit/9d9bd0fb4f)] - **meta**: move Michael to emeritus (Michael Dawson) [#60070](https://github.com/nodejs/node/pull/60070)\r\n* \\[[`dbeee55824`](https://github.com/nodejs/node/commit/dbeee55824)] - **module**: use sync cjs when importing cts (Marco Ippolito) [#60072](https://github.com/nodejs/node/pull/60072)\r\n* \\[[`a722f677ac`](https://github.com/nodejs/node/commit/a722f677ac)] - **perf\\_hooks**: fix histogram fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`b3295b8353`](https://github.com/nodejs/node/commit/b3295b8353)] - **process**: fix wrong asyncContext under unhandled-rejections=strict (Shima Ryuhei) [#60103](https://github.com/nodejs/node/pull/60103)\r\n* \\[[`cff4a7608a`](https://github.com/nodejs/node/commit/cff4a7608a)] - **process**: fix default `env` for `process.execve` (Richard Lau) [#60029](https://github.com/nodejs/node/pull/60029)\r\n* \\[[`cd034e927f`](https://github.com/nodejs/node/commit/cd034e927f)] - **process**: fix hrtime fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`18c79d9e1c`](https://github.com/nodejs/node/commit/18c79d9e1c)] - **(SEMVER-MINOR)** **sqlite**: create authorization api (Guilherme Araújo) [#59928](https://github.com/nodejs/node/pull/59928)\r\n* \\[[`d949222043`](https://github.com/nodejs/node/commit/d949222043)] - **sqlite**: replace `ToLocalChecked` and improve filter error handling (Edy Silva) [#60028](https://github.com/nodejs/node/pull/60028)\r\n* \\[[`6417dc879e`](https://github.com/nodejs/node/commit/6417dc879e)] - **src**: bring permissions macros in line with general C/C++ standards (Anna Henningsen) [#60053](https://github.com/nodejs/node/pull/60053)\r\n* \\[[`e273c2020c`](https://github.com/nodejs/node/commit/e273c2020c)] - **src**: update contextify to use DictionaryTemplate (James M Snell) [#60059](https://github.com/nodejs/node/pull/60059)\r\n* \\[[`5f9ff60664`](https://github.com/nodejs/node/commit/5f9ff60664)] - **src**: remove `AnalyzeTemporaryDtors` option from .clang-tidy (iknoom) [#60008](https://github.com/nodejs/node/pull/60008)\r\n* \\[[`9db54adccc`](https://github.com/nodejs/node/commit/9db54adccc)] - **src**: update cares\\_wrap to use DictionaryTemplates (James M Snell) [#60033](https://github.com/nodejs/node/pull/60033)\r\n* \\[[`fc0ceb7b82`](https://github.com/nodejs/node/commit/fc0ceb7b82)] - **src**: correct the error handling in StatementExecutionHelper (James M Snell) [#60040](https://github.com/nodejs/node/pull/60040)\r\n* \\[[`3e8fdc1d8d`](https://github.com/nodejs/node/commit/3e8fdc1d8d)] - **src**: remove unused variables from report (Moonki Choi) [#60047](https://github.com/nodejs/node/pull/60047)\r\n* \\[[`d744324d8e`](https://github.com/nodejs/node/commit/d744324d8e)] - **src**: avoid unnecessary string allocations in SPrintF impl (Anna Henningsen) [#60052](https://github.com/nodejs/node/pull/60052)\r\n* \\[[`de65a5c719`](https://github.com/nodejs/node/commit/de65a5c719)] - **src**: make ToLower/ToUpper input args more flexible (Anna Henningsen) [#60052](https://github.com/nodejs/node/pull/60052)\r\n* \\[[`354026df5a`](https://github.com/nodejs/node/commit/354026df5a)] - **src**: allow `std::string_view` arguments to `SPrintF()` and friends (Anna Henningsen) [#60058](https://github.com/nodejs/node/pull/60058)\r\n* \\[[`42f7d7cb20`](https://github.com/nodejs/node/commit/42f7d7cb20)] - **src**: remove unnecessary `std::string` error messages (Anna Henningsen) [#60057](https://github.com/nodejs/node/pull/60057)\r\n* \\[[`30c2c0fedd`](https://github.com/nodejs/node/commit/30c2c0fedd)] - **src**: remove unnecessary shadowed functions on Utf8Value & BufferValue (Anna Henningsen) [#60056](https://github.com/nodejs/node/pull/60056)\r\n* \\[[`eb99eec09b`](https://github.com/nodejs/node/commit/eb99eec09b)] - **src**: avoid unnecessary string -> `char*` -> string round trips (Anna Henningsen) [#60055](https://github.com/nodejs/node/pull/60055)\r\n* \\[[`c1f1dbdce2`](https://github.com/nodejs/node/commit/c1f1dbdce2)] - **src**: remove useless dereferencing in `THROW_...` (Anna Henningsen) [#60054](https://github.com/nodejs/node/pull/60054)\r\n* \\[[`ea0f5e575d`](https://github.com/nodejs/node/commit/ea0f5e575d)] - **src**: fill `options_args`, `options_env` after vectors are finalized (iknoom) [#59945](https://github.com/nodejs/node/pull/59945)\r\n* \\[[`415fff217a`](https://github.com/nodejs/node/commit/415fff217a)] - **src**: use RAII for uv\\_process\\_options\\_t (iknoom) [#59945](https://github.com/nodejs/node/pull/59945)\r\n* \\[[`982b03ecbd`](https://github.com/nodejs/node/commit/982b03ecbd)] - **test**: mark `test-runner-run-watch` flaky on macOS (Richard Lau) [#60115](https://github.com/nodejs/node/pull/60115)\r\n* \\[[`831a0d3d28`](https://github.com/nodejs/node/commit/831a0d3d28)] - **test**: ensure that the message event is fired (Luigi Pinca) [#59952](https://github.com/nodejs/node/pull/59952)\r\n* \\[[`5538cfc1e8`](https://github.com/nodejs/node/commit/5538cfc1e8)] - **test**: replace diagnostics\\_channel stackframe in output snapshots (Chengzhong Wu) [#60024](https://github.com/nodejs/node/pull/60024)\r\n* \\[[`77ec400d90`](https://github.com/nodejs/node/commit/77ec400d90)] - **test**: mark test-web-locks skip on IBM i (SRAVANI GUNDEPALLI) [#59996](https://github.com/nodejs/node/pull/59996)\r\n* \\[[`1aaadb9e31`](https://github.com/nodejs/node/commit/1aaadb9e31)] - **test**: ensure message event fires in worker message port test (Jarred Sumner) [#59885](https://github.com/nodejs/node/pull/59885)\r\n* \\[[`1d5cc5e57a`](https://github.com/nodejs/node/commit/1d5cc5e57a)] - **test**: mark sea tests flaky on macOS x64 (Richard Lau) [#60068](https://github.com/nodejs/node/pull/60068)\r\n* \\[[`c412b1855d`](https://github.com/nodejs/node/commit/c412b1855d)] - **test**: expand tls-check-server-identity coverage (Diango Gavidia) [#60002](https://github.com/nodejs/node/pull/60002)\r\n* \\[[`ad87975029`](https://github.com/nodejs/node/commit/ad87975029)] - **test**: fix typo of test-benchmark-readline.js (Deokjin Kim) [#59993](https://github.com/nodejs/node/pull/59993)\r\n* \\[[`bad4b9b878`](https://github.com/nodejs/node/commit/bad4b9b878)] - **test**: add new `startNewREPLSever` testing utility (Dario Piotrowicz) [#59964](https://github.com/nodejs/node/pull/59964)\r\n* \\[[`ef90b0f456`](https://github.com/nodejs/node/commit/ef90b0f456)] - **test**: verify tracing channel doesn't swallow unhandledRejection (Gerhard Stöbich) [#59974](https://github.com/nodejs/node/pull/59974)\r\n* \\[[`d7285459fe`](https://github.com/nodejs/node/commit/d7285459fe)] - **timers**: fix binding fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`6529ae9b0c`](https://github.com/nodejs/node/commit/6529ae9b0c)] - **tools**: add message on auto-fixing js lint issues in gh workflow (Dario Piotrowicz) [#59128](https://github.com/nodejs/node/pull/59128)\r\n* \\[[`1ca116a6ea`](https://github.com/nodejs/node/commit/1ca116a6ea)] - **tools**: verify signatures when updating nghttp\\* (Antoine du Hamel) [#60113](https://github.com/nodejs/node/pull/60113)\r\n* \\[[`20d10a2398`](https://github.com/nodejs/node/commit/20d10a2398)] - **tools**: use dependabot cooldown and move tools/doc (Rafael Gonzaga) [#59978](https://github.com/nodejs/node/pull/59978)\r\n* \\[[`275c07064c`](https://github.com/nodejs/node/commit/275c07064c)] - **typings**: update 'types' binding (René) [#59692](https://github.com/nodejs/node/pull/59692)\r\n* \\[[`8c21c4b286`](https://github.com/nodejs/node/commit/8c21c4b286)] - **wasi**: fix WasiFunction fast call signature (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`b865074641`](https://github.com/nodejs/node/commit/b865074641)] - **win,tools**: add description to signature (Martin Costello) [#59877](https://github.com/nodejs/node/pull/59877)\r\n"
  }
]