[
  {
    "title": "Amazon Redshift DC2 から RA3 および Amazon Redshift Serverless へのアップグレードのベストプラクティス",
    "date": "2025-10-22T12:32:44.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/best-practices-for-upgrading-from-amazon-redshift-dc2-to-ra3-and-amazon-redshift-serverless/",
    "content": "<p><a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a> は、標準 SQL と既存のビジネスインテリジェンス（BI）ツールを使用してデータを簡単かつ費用対効果高く分析できる、高速でペタバイト規模のクラウドデータウェアハウスです。何万もの顧客が Amazon Redshift を利用してエクサバイト規模のデータを分析し、複雑な分析クエリを実行して、最高のコストパフォーマンスを実現しています。</p> \n<p>完全マネージド型の AI 駆動による Massively Parallel Processing（MPP）アーキテクチャを備えた Amazon Redshift は、迅速かつコスト効率的にビジネス意思決定を推進します。以前、Amazon Redshift はコンピュート集約型ワークロードに最適化された DC2（Dense Compute）ノードタイプを提供していました。しかし、これらはコンピュートとストレージを独立してスケーリングする柔軟性に欠け、現在利用可能な多くの最新機能をサポートしていませんでした。分析需要の増大に伴い、多くのお客様が DC2 から RA3 または <a href=\"https://aws.amazon.com/jp/redshift/redshift-serverless/\">Amazon Redshift Serverless</a> へアップグレードしています。これらは独立したコンピュートとストレージのスケーリングを提供し、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/datashare-overview.html\">データ共有</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/zero-etl-using.html\">ゼロ ETL 統合</a>、<a href=\"https://aws.amazon.com/jp/redshift/features/redshift-ml/\">Amazon Redshift ML</a> による組み込みの人工知能および機械学習（AI/ML）サポートなどの高度な機能を備えています。</p> \n<p>この記事では、ターゲットアーキテクチャと移行戦略を計画するための実践的なガイドを提供し、アップグレードオプション、主要な考慮事項、および成功したシームレスな移行を促進するためのベストプラクティスをカバーしています。</p> \n<h2>DC2 ノードから RA3 および Redshift Serverless へのアップグレードプロセス</h2> \n<p>アップグレードへの第一歩は、新しいアーキテクチャをどのようにサイジングすべきかを理解することです。このために、AWS はプロビジョニングされたクラスター用の<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/managing-cluster-considerations.html#rs-upgrading-to-ra3\">推奨表</a>を提供しています。Redshift Serverless エンドポイントの構成を決定する際は、RPU とメモリの関係を調べることで、コンピューティング容量の詳細を評価できます。各 RPU は 16 GiB の RAM を割り当てます。ベース RPU 要件を見積もるには、DC2 ノードクラスターの合計 RAM を 16 で割ります。これらの推奨事項は、初期ターゲットアーキテクチャのサイジングに関するガイダンスを提供しますが、ワークロードのコンピューティング要件に依存します。要件をより適切に見積もるには、<a href=\"https://github.com/aws/redshift-test-drive\">Redshift Test Drive</a> を使用して潜在的な構成を実行する概念実証の実施を検討してください。詳細については、「<a href=\"https://aws.amazon.com/jp/blogs/big-data/find-the-best-amazon-redshift-configuration-for-your-workload-using-redshift-test-drive/\">Redshift Test Drive を使用してワークロードに最適な Amazon Redshift 構成を見つける</a>」および「<a href=\"https://aws.amazon.com/jp/blogs/big-data/successfully-conduct-a-proof-of-concept-in-amazon-redshift/\">Amazon Redshift で概念実証を実施する</a>」を参照してください。ターゲット構成とアーキテクチャを決定した後、アップグレード戦略を構築できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture1.jpg\"><img class=\"wp-image-167682 size-large aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture1-1024x114.jpg\" alt=\"\" width=\"1024\" height=\"114\"></a></p> \n<h2>アーキテクチャパターン</h2> \n<p>最初のステップは、ソリューションのターゲットアーキテクチャを定義することです。「<a href=\"http://aws.amazon.com/jp/blogs/big-data/architecture-patterns-to-optimize-amazon-redshift-performance-at-scale/\">Amazon Redshift のパフォーマンスを大規模に最適化するためのアーキテクチャパターン</a>」で提示されているオプションから、ユースケースに最も適合するメインのアーキテクチャパターンを選択できます。次の図に示すように、主に2つのシナリオがあります。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture2.jpg\"><img loading=\"lazy\" class=\"size-large wp-image-167683 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture2-1024x396.jpg\" alt=\"\" width=\"1024\" height=\"396\"></a></p> \n<p>執筆時点では、Redshift Serverless には手動のワークロード管理機能がなく、すべてが自動ワークロード管理で実行されます。独立したスケーリングとより良いパフォーマンスを実現するために、ユースケースに基づいてワークロードを複数のエンドポイントへ分離することを検討してください。詳細については、「Amazon Redshiftのパフォーマンスを大規模に最適化するためのアーキテクチャパターン」を参照してください。</p> \n<h2>アップグレード戦略</h2> \n<p>DC2 ノードから RA3 ノードまたは Redshift Serverless へのアップグレード時には、2つのアップグレードオプションから選択できます：</p> \n<ul> \n <li>リアーキテクチャ ： 最初のステップでは、ワークロードを評価してモダンなデータアーキテクチャの導入効果があるかを判断します。次に、DC2 ノードからのアップグレードと同時に、既存プラットフォームのリアーキテクチャを実施します。</li> \n <li>段階的アプローチ ： これは2段階の戦略です。第1段階では、ターゲットの RA3 または Serverless 構成への単純な移行を行います。第2段階では、最先端の Redshift 機能を活用してターゲットアーキテクチャをモダナイズできます。</li> \n</ul> \n<p>通常、段階的なアプローチを推奨しています。これにより、将来の最適化を可能にしながら、よりスムーズな移行が実現できます。段階的アプローチの第1段階は、以下のステップで構成されています：</p> \n<ul> \n <li>既存の DC2 クラスターに相当する RA3 ノードまたは Redshift Serverless の構成を評価します。プロビジョニングされたクラスターの<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/managing-cluster-considerations.html#rs-upgrading-to-ra3\">サイジングガイドライン</a>またはサーバーレスエンドポイントの<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/serverless-capacity.html\">コンピューティング容量オプション</a>を使用します。</li> \n <li>Redshift Test Drive を使用して、非本番環境で選択したターゲット構成を検証します。この自動化ツールにより、本番ワークロードのシミュレーションプロセスが簡素化されます。さまざまな潜在的なターゲット構成で包括的な what-if 分析を実行できます。</li> \n <li>特定のターゲット構成の価格対性能比に満足できたら、次のセクションで詳述する方法のいずれかを使用してアップグレードプロセスに進みます。</li> \n</ul> \n<p>Redshift RA3 インスタンスと Redshift Serverless は、ゼロ ETL、<a href=\"https://aws.amazon.com/jp/redshift/redshift-streaming-ingestion/\">Amazon Redshift Streaming Ingestion</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/getting-started-datashare-writes.html\">データ共有を使用したマルチウェアハウス書き込み</a>、独立したコンピュートとストレージのスケーリングなど、強力な新機能へのアクセスを提供します。これらのメリットを最大限に活用するために、現在のアーキテクチャの包括的なレビュー（段階的アプローチの第2段階）を実施し、Amazon Redshiftの最新機能を使用したモダナイゼーションの機会を特定することをお勧めします。例えば：</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/jp/blogs/big-data/sharing-amazon-redshift-data-securely-across-amazon-redshift-clusters-for-workload-isolation/\">データ共有を使用したマルチウェアハウスアーキテクチャ</a>を実装し、ワークロードを分離してパフォーマンスを向上させる</li> \n <li>現在、トランザクショナルソースから Amazon Redshift へのデータ転送に <a href=\"https://aws.amazon.com/jp/dms/\">AWS Database Migration Service</a>（AWS DMS）を使用している場合は、ゼロ ETLを実装して運用を効率化し、メンテナンスのオーバーヘッドを削減する</li> \n</ul> \n<h2>アップグレードオプション</h2> \n<p>DC2 から RA3 または Redshift Serverless へのクラスターのリサイズまたはアップグレードには、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/working-with-snapshots.html\">スナップショットの復元</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/resizing-cluster.html#classic-resize-faster\">Classic resize</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/resizing-cluster.html#elastic-resize\">Elastic resize</a> の3つの方法から選択できます。</p> \n<h3>スナップショットの復元</h3> \n<p>スナップショット復元方式は、既存の（ソース）クラスターのスナップショットを取得することから始まる順次的なプロセスに従います。このスナップショットは、希望する性能で新しいターゲットクラスターを作成するために使用されます。作成後、データがターゲットクラスターに正しく転送されたことを確認して、データの整合性を検証することが不可欠です。重要な考慮事項として、最初のスナップショット後にソースクラスターに書き込まれたデータは、同期を維持するために手動で転送する必要があります。</p> \n<p>この方式には以下の利点があります：</p> \n<ul> \n <li>既存の DC2 クラスターに影響を与えることなく、新しい RA3 または Serverless セットアップの検証が可能</li> \n <li>異なる AWS リージョンまたはアベイラビリティーゾーンへの復元の柔軟性を提供</li> \n <li>移行中の書き込み操作に対するクラスターのダウンタイムを最小限に抑える</li> \n</ul> \n<p>ただし、以下の考慮事項に留意してください：</p> \n<ul> \n <li>セットアップとデータの復元は、Elastic resize よりも時間がかかる場合があります。</li> \n <li>スナップショット作成後にソースクラスターに書き込まれた新しいデータは、ターゲットへの手動コピーが必要になるため、データ同期の課題に直面する可能性があります。このプロセスは完全な同期を達成するために複数回の反復が必要になる場合があり、カットオフ前にダウンタイムが必要になることがあります。</li> \n <li>新しい Redshift エンドポイントが生成されるため、接続の更新が必要になります。元のエンドポイントを維持するため、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/rs-mgmt-rename-cluster.html\">両方のクラスターの名前変更</a>を検討してください（新しいターゲットクラスターが元のソースクラスターの名前を採用するようにしてください）。</li> \n</ul> \n<h3>Classic resize</h3> \n<p>Amazon Redshift はターゲットクラスターを作成し、バックアップおよび復元を使用してソースクラスターからデータとメタデータを移行します。データベーススキーマやユーザー設定を含むすべてのデータは、新しいクラスターに正確に転送されます。ソースクラスターは最初に再起動し、数分間使用できなくなるため、ダウンタイムは最小限に抑えることができます。すぐに再開され、バックグラウンドでリサイズが継続される間、読み取りと書き込みの両方の操作が可能になります。<br> Classic resize は2段階のプロセスです：</p> \n<ul> \n <li>ステージ1（クリティカルパス）： このステージでは、ソースとターゲットの構成間でメタデータの移行が行われ、ソースクラスターが一時的に読み取り専用モードになります。この初期フェーズは通常、短時間で完了します。このフェーズが完了すると、クラスターは読み取りおよび書き込みクエリで使用可能になります。KEY 分散スタイルで最初に構成されたテーブルは一時的に EVEN 分散を使用して保存されますが、プロセスのステージ2でオリジナルの KEY 分散に再分散されます。</li> \n <li>ステージ2（バックグラウンド操作）：このステージは、データを元の分散パターンに復元することに焦点を当てています。この操作は、主要な移行プロセスに影響を与えることなく、低優先度でバックグラウンドで実行されます。このステージの期間は、再分散されるデータ量、進行中のクラスターワークロード、使用されているターゲット構成など、複数の要因によって異なります。</li> \n</ul> \n<p>全体的なリサイズ期間は、主に処理されるデータ量によって決まります。Amazon Redshift コンソールで進行状況を監視するか、変換中のテーブルの完了率を表示する <a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/SYS_RESTORE_STATE.html\">SYS_RESTORE_STATE</a> システムビューを使用して監視できます（このビューへのアクセスにはスーパーユーザー権限が必要です）。<br> Classic resize アプローチには、以下の利点があります：</p> \n<ul> \n <li>すべての可能なターゲットノード構成がサポートされています</li> \n <li>ソースクラスターの包括的な再構成により、データスライスがノードごとのデフォルトに再バランスされ、ノード間でデータが均等に分散されます</li> \n</ul> \n<p>ただし、以下の点に留意してください：</p> \n<ul> \n <li>ステージ2 では、最適なパフォーマンスのためにデータを再分散します。しかし、ステージ2 は低い優先度で実行され、ビジーなクラスターでは完了までに長時間かかることがあります。プロセスを高速化するには、KEY DISTSTYLE を持つテーブルに対して ALTER TABLE DISTSTYLE コマンドを手動で実行できます。このコマンドを実行することで、データの再配布を優先的に実行でき、進行中のステージ2 プロセスによる潜在的なパフォーマンス低下を軽減できます。</li> \n <li>ステージ2 のバックグラウンド再分散プロセスのため、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/resizing-cluster.html#classic-resize-faster\">リサイズ操作</a>中はクエリの完了に時間がかかることがあります。軽減策として同時実行スケーリングの有効化を検討してください。</li> \n <li>データ分散を高速化するため、リサイズを開始する前に不要で使用されていないテーブルを削除してください。</li> \n <li>リサイズ操作に使用されるスナップショットは、この操作専用になります。そのため、テーブルの復元やその他の目的には使用できません。</li> \n <li>クラスターは仮想プライベートクラウド（VPC）内で動作する必要があります。</li> \n <li>このアプローチでは、Classic resize を開始する前に取得した新しいまたは最近の手動スナップショットが必要です。</li> \n <li>ビジネスへの影響を最小限に抑えるため、オフピーク時間またはメンテナンスウィンドウ中に操作をスケジュールすることをお勧めします。</li> \n</ul> \n<h3>Elastic resize</h3> \n<p>Elastic resize を使用してノードタイプを変更する場合、Amazon Redshift は順次プロセスに従います。まず既存のクラスターのスナップショットを作成し、そのスナップショットの最新データを使用して新しいターゲットクラスターをプロビジョニングします。バックグラウンドでデータが新しいクラスターに転送される間、システムは読み取り専用モードのままです。リサイズ操作が完了に近づくと、Amazon Redshift は自動的にエンドポイントを新しいクラスターにリダイレクトし、元のクラスターへのすべての接続を停止します。このプロセス中に問題が発生した場合、システムは通常、手動介入を必要とせずに自動ロールバックを実行しますが、そのような障害は稀です。<br> Elastic resize にはいくつかの利点があります：</p> \n<ul> \n <li>平均 10 ～ 15 分で完了する迅速なプロセスです</li> \n <li>ユーザーはプロセス中もデータへの読み取りアクセスを維持でき、中断は最小限に抑えられます</li> \n <li>クラスターエンドポイントは操作中および操作後も変更されません</li> \n</ul> \n<p>このアプローチを検討する際は、以下の点に留意してください：</p> \n<ul> \n <li>Elastic resize 操作は、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms\">EC2-VPC プラットフォーム</a>を使用するクラスターでのみ実行できます。そのため、Redshift Serverless では利用できません。</li> \n <li>ターゲットノード構成は、既存のデータに対して十分なストレージ容量を提供する必要があります。</li> \n <li>すべてのターゲットクラスター構成が Elastic resize をサポートしているわけではありません。そのような場合は、Classic resize またはスナップショット復元を検討してください。</li> \n <li>プロセスが開始された後、Elastic resize を停止することはできません。</li> \n <li>データスライスは変更されません。これにより、データまたは CPU の偏りが発生する可能性があります。</li> \n</ul> \n<h2>アップグレード推奨事項</h2> \n<p>次のフローチャートは、適切な Amazon Redshift アップグレード方法を選択するための意思決定プロセスを視覚的にガイドします。</p> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture3.jpeg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167684\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture3.jpeg\" alt=\"\" width=\"314\" height=\"462\"></a></p> \n<p>Amazon Redshift をアップグレードする際、その方法はターゲット構成と運用上の制約によって異なります。Redshift Serverless の場合は、常にスナップショット復元方式を使用します。RA3 プロビジョニングクラスターにアップグレードする場合は、2つのオプションから選択できます。ダウンタイムを伴う完全なメンテナンスウィンドウが許容できる場合はスナップショット復元を使用し、ダウンタイムを最小限に抑えたい場合は Classic resize を選択します。Classic resize は、データスライスをノードごとのデフォルトにリバランスし、ノード間でデータを均等に分散させるためです。特定の範囲内での特定のノードタイプの変更（例：DC2 から RA3）には Elastic resize を使用できますが、Elastic resize はスライス数を変更しないため、データや CPU の偏りが生じる可能性があり、後で Redshift クラスターのパフォーマンスに影響を与える可能性があるため、推奨されません。ただし、既存のクラスターでノードを追加または削減する必要がある場合は、Elastic resize が引き続き主要な推奨事項となります。</p> \n<h2>移行のベストプラクティス</h2> \n<p>移行を計画する際は、以下のベストプラクティスを検討してください：</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/advisor-recommendations.html\">Amazon Redshift Advisor</a> または <a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch</a> を使用して、移行前の評価を実施する。</li> \n <li>ユースケースとワークロードに基づいて、適切なターゲットアーキテクチャを選択する。Redshift Test Drive を使用して、適切なターゲットアーキテクチャを決定する。</li> \n <li>手動スナップショットを使用してバックアップを作成し、自動ロールバックを有効にする。</li> \n <li>ステークホルダーにタイムライン、ダウンタイム、変更内容を伝える。</li> \n <li>新しいアーキテクチャの詳細とエンドポイントでランブックを更新する。</li> \n <li>ベンチマークとデータチェックサムを使用してワークロードを検証する。</li> \n <li>最終同期と切り替えにはメンテナンスウィンドウを使用する。</li> \n</ul> \n<p>これらのプラクティスに従うことで、パフォーマンス、コスト、運用の継続性のバランスを取りながら、低リスクな移行を実現できます。</p> \n<h2>結論</h2> \n<p>Redshift DC2 ノードから RA3 ノードまたは Redshift Serverless への移行には、パフォーマンス、コスト効率、および最小限の中断をサポートするための構造化されたアプローチが必要です。ワークロードに適したアーキテクチャを選択し、移行後のデータとワークロードを検証することで、組織はデータプラットフォームをシームレスに最新化できます。このアップグレードにより長期的な成功が促進され、チームは RA3 のスケーラブルストレージまたは Redshift Serverless の自動スケーリング機能を最大限に活用しながら、コストとパフォーマンスを最適化できるようになります。</p> \n<hr> \n<h3>著者について</h3> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Ziad-1.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167702 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Ziad-1.jpg\" alt=\"\" width=\"120\" height=\"180\"></a><strong>Ziad Wali</strong> は、AWS のアナリティクススペシャリストソリューションアーキテクトです。データベースとデータウェアハウジングにおいて10年以上の経験を持ち、信頼性が高く、スケーラブルで効率的なソリューションの構築を得意としています。仕事以外では、スポーツや自然の中で過ごすことを楽しんでいます。</p> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/omamapic-1.jpeg\"><img loading=\"lazy\" class=\"size-full wp-image-167700 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/omamapic-1.jpeg\" alt=\"\" width=\"120\" height=\"160\"></a><strong>Omama Khurshid</strong> は、Amazon Web Services のアナリティクスソリューションアーキテクトです。彼女は、さまざまな業界のお客様が信頼性、拡張性、効率性に優れたソリューションを構築できるよう支援することに注力しています。仕事以外では、家族との時間を過ごしたり、映画鑑賞、音楽鑑賞、新しい技術の学習を楽しんでいます。</p> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Srikant-1.png\"><img loading=\"lazy\" class=\"size-full wp-image-167701 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Srikant-1.png\" alt=\"\" width=\"120\" height=\"128\"></a><strong>Srikant Das</strong> は、Amazon Web Services のアナリティクス スペシャリスト ソリューションアーキテクトとして、アナリティクスと AI においてスケーラブルで堅牢なクラウドソリューションを設計しています。技術的な専門知識に加えて、魅力的なブログを通じて旅行の冒険やデータインサイトを共有し、ソーシャルメディア上で分析的な厳密さとストーリーテリングを融合させています。</p> \n<p>翻訳は、ソリューションアーキテクトの駒野が担当しました。原文は<a href=\"https://aws.amazon.com/jp/blogs/big-data/best-practices-for-upgrading-from-amazon-redshift-dc2-to-ra3-and-amazon-redshift-serverless/\">こちら</a>です。</p>"
  },
  {
    "title": "株式会社クリエイティブ・ウェブ様の AWS 生成 AI 事例「Amazon Bedrock を活用したコールセンターお問い合わせ管理システムの実現」のご紹介",
    "date": "2025-10-22T10:31:29.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-creative-web/",
    "content": "<p><em>本ブログは <a href=\"https://www.creative-web.co.jp/\">株式会社クリエイティブ・ウェブ様</a> と <a href=\"https://aws.amazon.com/jp/\">アマゾン ウェブ サービス ジャパン合同会社</a> が共同で執筆いたしました。</em></p> \n<p>みなさん、こんにちは。AWS ソリューションアーキテクトの齋藤です。<br> 最近、多くのお客様から「コールセンター業務の効率化」や「問い合わせ対応の品質向上」についてのご相談をいただく機会が増えています。特に、生成 AI を活用した業務改善への関心が高まっており、実際の導入事例を求める声を多く耳にします。</p> \n<p>その一方で、「生成 AI をコールセンター業務にどう活用すればいいのかわからない」「過去のナレッジをうまく活用できていない」といった課題をお持ちの方も多いのではないでしょうか？</p> \n<p>今回ご紹介する事例は、株式会社クリエイティブ・ウェブ様が Amazon Bedrock をはじめとしたマネージドサービスを活用して開発された、コールセンターお問い合わせ管理システムです。RAG (Retrieval-Augmented Generation) 技術を用いることで、過去の対応履歴を活用した対応サジェスト機能を実現し、問い合わせ対応の効率化と品質向上を同時に達成された事例となります。</p> \n<h2>お客様の状況と課題</h2> \n<p>株式会社クリエイティブ・ウェブ様は、システム・PC サポート・Web サイト・EC 関連の問い合わせ対応サービスを提供しており、日々多様な問い合わせに対応されています。<br> 従来のコールセンター業務では、以下のような課題を抱えていらっしゃいました：</p> \n<h3>業務効率面での課題</h3> \n<ul> \n <li>手作業による情報管理: 問い合わせ内容や対応方法の記録・管理が属人的で、情報の一元化ができていない</li> \n <li>対応品質のばらつき: 担当者によって対応方法が異なり、サービス品質に差が生じている</li> \n <li>ナレッジ活用の困難: 過去の対応事例が蓄積されているものの、類似ケースを検索・参照するのに時間がかかる</li> \n</ul> \n<h3>業務管理面での課題</h3> \n<ul> \n <li>進捗状況の把握困難: 受電から完了までのステータス管理が不十分で、対応漏れや遅延が発生するリスク</li> \n <li>引き継ぎ作業の非効率: 担当者が変わる際の情報共有に時間がかかる</li> \n <li>対応データの活用不足: 蓄積された対応履歴を分析して改善に活かせていない</li> \n</ul> \n<h2>ソリューション・構成内容</h2> \n<p>これらの課題を解決するため、株式会社クリエイティブ・ウェブ様は AWS の生成 AI サービスを活用して「コールトラック」システムを開発されました。</p> \n<h3>システムアーキテクチャ</h3> \n<p>システムは AWS のマネージドサービスを中心としたサーバーレス構成で設計されています：</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_architecture.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167531\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_architecture.png\" alt=\"\" width=\"5587\" height=\"4694\"></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_summarize_architecture.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-167515 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_summarize_architecture.jpg\" alt=\"\" width=\"2560\" height=\"1306\"></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AmazonConnect_integration_architecture.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-167517 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AmazonConnect_integration_architecture.jpg\" alt=\"\" width=\"2560\" height=\"1306\"></a></p> \n<ul> \n <li>Amazon Bedrock: RAG 機能による過去対応履歴の検索</li> \n <li>Amazon OpenSearch Service: 過去の対応履歴データの検索・インデックス化</li> \n <li>AWS Lambda: 各種処理の実行基盤</li> \n <li>Amazon Relational Database Service (Amazon RDS): 問い合わせ情報と対応履歴の管理</li> \n <li>Amazon Simple Storage Service (Amazon S3): 対応関連ドキュメントの保存</li> \n <li>Amazon API Gateway: フロントエンドとバックエンドの連携</li> \n</ul> \n<h3>主要機能</h3> \n<h4>1. 問い合わせ情報管理機能</h4> \n<ul> \n <li>受電、保留、対応中、完了といったステータス管理</li> \n <li>担当者、顧客情報、問い合わせ内容、対応方法の詳細記録</li> \n <li>リアルタイムでの進捗状況可視化</li> \n</ul> \n<h4>2. RAG による過去対応履歴の検索</h4> \n<ul> \n <li>Amazon Bedrock の基盤モデルを活用し、過去の対応事例から最適な対応方法をサジェスト</li> \n <li>Amazon OpenSearch Service による高速な類似事例検索</li> \n <li>文脈を理解した自然な日本語での回答生成</li> \n</ul> \n<h4>3. 自動要約機能</h4> \n<ul> \n <li>問い合わせ内容を箇条書きで入力すると、AI が自動的に要約</li> \n <li>対応記録の標準化と効率化を実現</li> \n</ul> \n<h4>4. ナレッジの自動蓄積・学習機能</h4> \n<ul> \n <li>全ての対応履歴を自動でデータ化</li> \n <li>定期的な RAG への取り込みによる継続的な学習</li> \n <li>蓄積されたナレッジの品質向上</li> \n</ul> \n<h2>実際の画面</h2> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_screen.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167522\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_screen.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>オペレーターが受電・架電時に使用するメイン画面です。対応者の状況 (対応可能・対応中・離席中) が一目でわかり、ワンクリックでステータスを変更できるため、スムーズな電話対応業務をサポートします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_history.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167521\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_history.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>「言った言わない」の確認や、対応内容の振り返りが簡単に行えます。通話音声の再生に加え、文字起こしデータと AI の要約が確認できます。さらに、電話対応を自動評価するため、教育にも利用可能です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_evaluation.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167520\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_evaluation.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>質の高い対応履歴は、AI の精度向上に不可欠です。この機能は、履歴の内容を AI が評価し、「より良いナレッジ」となるように文章を自動で校正。手間をかけずにナレッジの品質を維持できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_title_generation.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167516\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_title_generation.jpg\" alt=\"\" width=\"1494\" height=\"1266\"></a></p> \n<p>対応履歴の作成時間を大幅に短縮します。箇条書きで入力したキーワードやメモを元に、AI が状況説明から対応内容までを瞬時に文章化。対応者は、文章作成の負担から解放されます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_visualization.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167524\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_visualization.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>日々の頑張りが「見える化」され、モチベーションアップに繋がります。受電数や対応件数などの成果がポイントとして貯まり、そのポイントでバーチャルペットを育てて楽しむことができます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_visualization.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167525\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_visualization.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>全体の業務状況をダッシュボードで可視化します。月・日・時間別の対応件数、カテゴリ別の割合など多角的に分析し、データに基づいた最適な人員配置や育成計画を支援します。</p> \n<h2>導入効果</h2> \n<p>お問い合わせ管理システムの導入により、以下の大きな効果を実現されました：</p> \n<h3>1. 対応効率の大幅向上</h3> \n<ul> \n <li>初回解決率の向上: RAG による過去対応履歴の検索により、一回目の対応で解決するケースが約 30% 増加</li> \n <li>対応時間の短縮: 平均対応時間を従来比で約 40% 削減</li> \n <li>情報検索時間の短縮: 過去事例の検索時間を従来の 5 分から 1 分以下に短縮</li> \n</ul> \n<h3>2. サービス品質の標準化</h3> \n<ul> \n <li>対応品質の均質化: 全担当者が同等レベルの対応サジェストにアクセスできるため、サービス品質が標準化</li> \n <li>新人教育期間の短縮: 蓄積されたナレッジを活用することで、新人でも早期に高品質な対応が可能</li> \n</ul> \n<h3>3. データ活用による継続改善</h3> \n<ul> \n <li>対応パフォーマンスの可視化: 対応件数、時間、解決率などの KPI を自動集計・分析</li> \n <li>改善点の特定: データ分析により、頻出する問い合わせパターンや対応改善点を特定</li> \n <li>ナレッジの品質向上: 継続的な学習により、サジェストの精度が徐々に向上</li> \n</ul> \n<h3>4. コスト削減効果</h3> \n<ul> \n <li>人件費の最適化: 対応効率向上により、同じ人員でより多くの問い合わせに対応可能</li> \n <li>教育コストの削減: 標準化されたナレッジにより、新人教育にかかる時間とコストを削減</li> \n</ul> \n<h2>技術的なポイント</h2> \n<h3>RAG の実装における工夫</h3> \n<p>株式会社クリエイティブ・ウェブ様では、RAG システムの精度向上のために以下の工夫を実装されました：</p> \n<ul> \n <li>多層的な検索戦略: キーワード検索とセマンティック検索を組み合わせた高精度な類似事例抽出</li> \n <li>文脈理解の強化: 問い合わせの背景情報も含めて分析し、より適切なサジェストを生成</li> \n <li>フィードバックループ: 実際の対応結果をフィードバックとして活用し、継続的にモデルの精度を向上</li> \n</ul> \n<h3>コスト最適化の取り組み</h3> \n<ul> \n <li>適切なモデル選択: 問い合わせの複雑さに応じて、Amazon Nova、Claude 3 Sonnet と Haiku などを使い分け</li> \n <li>サーバーレス構成: 必要な時だけリソースを使用するため、運用コストを最小化</li> \n <li>段階的なスケーリング: 問い合わせ量に応じた自動スケーリングにより、効率的なリソース利用を実現</li> \n</ul> \n<h2>今後の展望</h2> \n<p>株式会社クリエイティブ・ウェブ様では、お問い合わせ管理システムのさらなる発展を計画されています:</p> \n<h3>短期的な改善計画</h3> \n<ul> \n <li>音声認識機能の追加: 電話内容の自動文字起こしによる記録作業の完全自動化</li> \n <li>多言語対応: グローバル展開を見据えた多言語サポート機能</li> \n <li>リアルタイム分析: 対応中のリアルタイムサジェストとエスカレーション判定</li> \n</ul> \n<h3>長期的なビジョン</h3> \n<ul> \n <li>予測分析機能: 問い合わせ内容から将来のトラブルを予測し、事前対応を可能にする機能</li> \n <li>顧客感情分析: 音声や文章から顧客の感情を分析し、適切な対応トーンを提案</li> \n <li>業界特化型展開: 特定業界のナレッジベースを構築し、より専門的な対応を支援</li> \n</ul> \n<h2>お客様の声（株式会社クリエイティブ・ウェブ様）</h2> \n<p>Amazon Bedrock を活用した RAG システムの導入により、これまで活用しきれていなかった過去の対応履歴が貴重な資産として生まれ変わりました。新人スタッフでもベテランと同等の対応品質を提供できるようになり、お客様満足度の向上と業務効率化を同時に実現できています。</p> \n<p>AWS のマネージドサービスを活用することで、インフラ運用の負担を最小限に抑えながら、高度な AI 機能を短期間で実装することができました。特に Amazon Bedrock の多様なモデル選択肢により、コストと性能のバランスを最適化できた点が大きなメリットでした。</p> \n<p>今後は、このシステムをベースにさらなる機能拡張を計画しており、コールセンター業務の完全自動化に向けて取り組んでいきます。</p> \n<h2>まとめ</h2> \n<p>今回は、Amazon Bedrock を活用した RAG システムにより、コールセンター業務の効率化と品質向上を同時に実現された株式会社クリエイティブ・ウェブ様の事例をご紹介しました。</p> \n<p>特に注目すべきは、単なる AI ツールの導入ではなく、業務プロセス全体を見直し、データ駆動型の改善サイクルを構築された点です。これにより、継続的にサービス品質が向上する仕組みを実現されています。</p> \n<p>同様の課題をお持ちのお客様、特に「コールセンター業務の効率化を図りたい」「過去のナレッジを有効活用したい」「問い合わせ対応の品質を標準化したい」といったニーズをお持ちの方には、非常に参考になる事例だと思います。</p> \n<p>また、AWS では、生成 AI を活用したソリューション開発を支援するさまざまなイベントやプログラムを定期的に開催しております。技術セッションやハンズオンを通じて実際に技術に触れることができますので、ぜひご参加ください。<br> <a href=\"https://aws.amazon.com/jp/events/\">https://aws.amazon.com/jp/events/</a></p> \n<p>ご関心のあるお客様は、ぜひ AWS までお問い合わせください。</p> \n<p>\n <!-- 写真と説明 --></p> \n<div style=\"align-items: center;margin-bottom: 30px\"> \n <div style=\"flex: 0 0 60%;max-width: 600px;margin-right: 20px\">\n  <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_picture.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167529\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_picture.png\" alt=\"\" width=\"847\" height=\"529\"></a>\n  <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/creative-web-team.jpg\"><br> </a>\n </div> \n <div style=\"flex: 1\"> \n  <p><strong>株式会社クリエイティブ・ウェブ</strong>: 片桐 翼様 (左)、大皿 綾馬様 (中央)、藤井 龍生様 (右)</p> \n </div> \n</div> \n<h2>著者について</h2> \n<div class=\"blog-author-box\"> \n <div class=\"blog-author-image\"> \n  <img loading=\"lazy\" class=\"aligncenter size-full wp-image-4921\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/takuaizu_raw.jpeg\" alt=\"\" width=\"10%\" height=\"auto\"> \n </div> \n <h3 class=\"lb-h4\">齋藤 拓巳</h3> \n <p>ソリューションアーキテクトとして幅広いお客様の AWS 導入支援を担当しています。AWS Lambda や Amaozn API Gateway などのサーバレスのサービスが好きです。</p> \n</div>"
  },
  {
    "title": "Amazon CloudFrontリクエストのライフサイクルを図解する",
    "date": "2025-10-22T08:05:52.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/charting-the-life-of-an-amazon-cloudfront-request/",
    "content": "<p>本稿は、2025 年 10 月 17 日に公開された “<a href=\"https://aws.amazon.com/jp/blogs/networking-and-content-delivery/charting-the-life-of-an-amazon-cloudfront-request/\" target=\"_blank\" rel=\"noopener\">Charting the life of an Amazon CloudFront request</a>” を翻訳したものです。</p> \n<p><a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"noopener\">Amazon CloudFront</a> は、AWS ネイティブの Content Delivery Network (CDN) サービスです。CDN は、エンドユーザーにより近い世界中のエッジロケーションのネットワークを使用し、エッジでコンテンツをキャッシュすることで、Web アクセラレーションを提供します。しかし、CloudFront はそれ以上のことができます。エッジでの機能として、地理的フィルタリング、関数の実行、<a href=\"https://aws.amazon.com/waf/\" target=\"_blank\" rel=\"noopener\">AWS Web Application Firewall (WAF)</a> フィルタリングの実行など、さまざまな機能を備えています。この投稿では、CloudFront ディストリビューションへのクライアントリクエストのライフサイクルを探求し、特にこれらの機能の実行順序に注目します。この理解は、Web アプリケーションの配信最適化、Web アプリケーションのセキュリティ保護、および CDN 設定のトラブルシューティングにおいて不可欠です。</p> \n<p>リクエストのライフサイクルを見ていく前に、CloudFront クライアントリクエストに関わるインフラストラクチャの構成要素を探ってみましょう。</p> \n<div id=\"attachment_167608\" style=\"width: 854px\" class=\"wp-caption aligncenter\">\n <img aria-describedby=\"caption-attachment-167608\" loading=\"lazy\" class=\"wp-image-167608 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/cf-request-jp1.jpg\" alt=\"\" width=\"844\" height=\"514\">\n <p id=\"caption-attachment-167608\" class=\"wp-caption-text\">図 1: CloudFront エッジロケーションと リージョン別エッジキャッシュ</p>\n</div> \n<h2>エッジキャッシングの概要</h2> \n<p>CloudFront の Point of Presence (POP)、別名エッジロケーションは、リクエストが最初に到達するサーバーグループです。エッジロケーションは、リクエストに対して応答する(コンテンツがキャッシュされている場合)か、次のレイヤーに転送するかを判断します。エッジロケーションは世界中に分散配置されており、通常の <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\" target=\"_blank\" rel=\"noopener\">AWS リージョン</a>よりも小規模です。説明を分かりやすくするため、POP を 1 つの単位として考えることができます。図 1(公式 CloudFront ドキュメントより引用)は、この構成を示しています。</p> \n<p>この概要説明で十分なケースもありますが、実際には CDN 設定のトラブルシューティング、キャッシング最適化、動的コンテンツ配信のパフォーマンス改善などのために、リクエスト-レスポンスの流れをより詳細に理解する必要があります。注目すべき点は、ビューワーからのリクエストとレスポンスが CloudFront ネットワーク内の複数のレイヤーを通過することです。POP では初期接続処理、負荷分散、キャッシング、<a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html\" target=\"_blank\" rel=\"noopener\">CloudFront Functions</a> の実行が行われ、リージョン別エッジキャッシュ (REC) では高度なキャッシュ最適化、<a href=\"https://aws.amazon.com/lambda/edge/\" target=\"_blank\" rel=\"noopener\">Lambda@Edge</a> の実行、オリジンサーバーへの接続、リクエストの折りたたみ、オリジンタイムアウト設定などが処理されます。また、キャッシュ効率をさらに向上させるオプション機能として Origin Shield を有効化できます。</p> \n<p>HTTP(s) プロトコルに加えて、CloudFront はプロトコルの拡張機能もサポートしています。例えば、HTTP/2 上に構築されたオープンソースの Remote Procedure Call (RPC) フレームワークである <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-using-grpc.html\" target=\"_blank\" rel=\"noopener\">gRPC</a> や、TCP ベースのプロトコルである <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.websockets.html\" target=\"_blank\" rel=\"noopener\">WebSocket</a> があります。WebSocket は、リアルタイムアプリケーションで永続的な接続が必要な場合に、クライアントとサーバー間で長時間持続する双方向通信を実現するのに適しています。</p> \n<p>本記事では HTTP(s) のリクエストとレスポンス処理に絞って解説し、gRPC と WebSocket 接続については別の記事で詳しく説明する予定です。</p> \n<h2>DNS 名前解決と POP</h2> \n<p>ユーザーが CloudFront 経由で Web サイトにアクセスするところから始まります(次の図を参照)。通常、Web サイトは<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/LinkFormat.html#LinkFormat_OwnDomain\" target=\"_blank\" rel=\"noopener\">カスタムドメイン名</a>を CloudFront のドメイン名に紐付けて設定されています。CloudFront は DNS リクエストからユーザーの位置情報を判断し、そのリクエストを処理するのに最適なエッジロケーションの情報を DNS レスポンスとして返します。この際、CloudFront はインターネットネットワークの健全性、ネットワーク負荷など複数の要素を考慮して、ビューワーに最適な POP の IP アドレス(複数)を提供します。エンドユーザーの所在地に応じて、リクエストに応答するインフラを制限することで、コスト削減と異なる価格クラスの活用が可能です。CloudFront ディストリビューションで選択した価格クラスによって、ユーザーが利用できる POP が限定されます。また、<a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Network-Monitoring-Sections.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Network Monitor</a> と <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-InternetMonitor.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Internet Monitor</a> を利用することで、AWS 上でホストされているアプリケーションのネットワークおよびインターネットのパフォーマンスと可用性について、運用上の可視性を得ることができます。</p> \n<p>CloudFront で <a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/request-static-ips.html\" target=\"_blank\" rel=\"noopener\">エニーキャスト</a>静的 IP を使用している場合、DNS 解決によって最適な CloudFront POP を決定するプロセスは異なります。本記事では エニーキャスト IP を使用しないケースを想定しています。</p> \n<div id=\"attachment_167610\" style=\"width: 732px\" class=\"wp-caption aligncenter\">\n <img aria-describedby=\"caption-attachment-167610\" loading=\"lazy\" class=\"wp-image-167610 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/cf-request-jp2.png\" alt=\"\" width=\"722\" height=\"1512\">\n <p id=\"caption-attachment-167610\" class=\"wp-caption-text\">図 2: CloudFront リクエストの経路</p>\n</div> \n<h3>接続確立と TLS ネゴシエーション</h3> \n<p>DNS 名前解決が完了すると、クライアントアプリケーション(Web ブラウザやモバイルアプリなど、ビューワーと呼ばれます)は、最適な POP の IP アドレスリストを受け取ります。クライアントアプリケーションは、これらの IP のいずれかを使用して POP への接続を確立し、必要に応じて別の IP を使ってフェイルオーバーすることができます。CloudFront は IETF 標準に準拠し、ポート 80/443 で HTTP、HTTPS、WebSocket を<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesGeneral.html#DownloadDistValuesSupportedHTTPVersions\" target=\"_blank\" rel=\"noopener\">受け付けます</a>。すべての POP は <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/ddos-standard-summary.html\" target=\"_blank\" rel=\"noopener\">AWS Shield Standard</a> によって保護されており、UDP フラッドや SYN フラッドなどの一般的な DDoS ボリューメトリック攻撃から守られています。次のレイヤーでは、Secure Sockets Layer (SSL)/Transport Layer Security (TLS) 接続が正しく確立されているかを確認します。CloudFront ディストリビューションに設定された<a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesGeneral.html#DownloadDistValues-security-policy\" target=\"_blank\" rel=\"noopener\">セキュリティポリシー</a>によって、使用可能なプロトコルと暗号スイートが定義されます。</p> \n<h3>リクエストルーティングと検証</h3> \n<p>リクエストはリクエストルーターに引き渡されます。POP のリクエストルーターは、クライアント接続を複数のキャッシュサーバーに負荷分散します。ここには重要なセキュリティレイヤーも存在し、クライアントからのリクエストが<a href=\"https://www.ietf.org/process/rfcs/\" target=\"_blank\" rel=\"noopener\"> Request for Comments</a> (RFC) に準拠しているか、不正または曖昧な構文による脅威が含まれていないかを確認することで、キャッシュサーバーを監視・保護しています。このレイヤーによって、キャッシュレイヤーに転送されるリクエストが適切なフォーマットで HTTP 仕様に準拠していることが保証されます。この段階で、CloudFront ディストリビューションの設定に基づき、許可されるプロトコル、HTTP メソッド、地理的制限が評価されます。</p> \n<h3>AWS WAF</h3> \n<p>リクエストの負荷分散とアクセス前のセキュリティチェックの後、CloudFront ディストリビューションで AWS WAF が有効化されている場合は、リクエストは AWS WAF のウェブアクセスコントロールリスト (ウェブ ACL) に設定されたルールによって処理されます。AWS WAF は Web アプリケーションファイアウォールであり、SQL インジェクション、クロスサイトスクリプティング、ボット攻撃、DDoS 攻撃などのアプリケーションレイヤーの攻撃からアプリケーションを守るために、リクエストを監視します。AWS WAF は、キャッシュビヘイビア、リクエスト/レスポンスヘッダーポリシー、CloudFront Functions や Lambda@Edge といったエッジコンピューティング関数などのコンテンツ処理ルールよりも必ず先に実行されます。</p> \n<h3>ビヘイビア</h3> \n<p>この段階で、ユーザーはビヘイビアセクションにて、CloudFront がリクエストをどのように処理するかを定義できます。ビヘイビアは URL のパスパターンごとに異なる設定を持つことができます。ビヘイビア設定では、使用するオリジン、許可する HTTP メソッド、キャッシュポリシー、関数の紐付け、そしてオリジンリクエストポリシーを指定します。オリジンリクエストポリシーでは、どのパラメータ(ヘッダー、クエリ文字列、Cookie)をオリジンに転送するかを定義します。また、機密情報を保護するためのフィールドレベル暗号化も設定可能です。</p> \n<h3>CloudFront キャッシング</h3> \n<p>CloudFront は、CloudFront Functions の Viewer Request 関数(設定されている場合)の実行後、POP のキャッシュに問い合わせを行います。POP 内には、キャッシュヒット率を最大化するための複数レイヤーのキャッシュが存在します。最初のレイヤーにオブジェクトがキャッシュされていない場合、リクエストは次のレイヤーへ、さらに次へと順次転送されていきます。ただし、無限にレイヤーを増やすことはできないため、各キャッシュスタック内のキャッシュサーバー数や、最初のレイヤーが参照できるピアの数には上限があります。POP 内のすべてのキャッシュレイヤーでオブジェクトが見つからない場合、リクエストは REC に転送されます。</p> \n<h3>REC</h3> \n<p>REC には POP と同様のキャッシュレイヤーがあり、キャッシュ容量の拡大と Lambda@Edge 関数の実行に必要なコンピューティングインフラを提供しています。REC は POP とオリジンサーバーの間に位置する大容量のキャッシュレイヤーとして機能し、キャッシュヒット率のさらなる向上、オリジンへのリクエスト削減、そして Lambda@Edge の実行基盤としての役割を果たします。</p> \n<p>Lambda@Edge の ビューワーリクエスト関数を定義している場合、CloudFront が REC のキャッシュを確認する前に、この段階で実行されます。その後、REC のキャッシュにオブジェクトが存在しない場合、Lambda@Edge のオリジンリクエスト関数が実行されます。</p> \n<p>CloudFront ディストリビューションで <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html\" target=\"_blank\" rel=\"noopener\">Origin Shield</a> を有効化している場合、すべての REC はオリジンサーバーへリクエストを送る前に Origin Shield を経由するため、オリジンサーバーへの負荷を削減できます。Origin Shield はユーザーのオリジンサーバーに近い場所に配置され、オリジンへのトラフィック帯域幅とリクエスト数を減らすことで、キャッシング効率を高めます。</p> \n<p>オリジン接続側の最終レイヤー (REC または Origin Shield) は、コンテンツオリジンとの間で永続的な接続を維持し、効率的なデータ転送を実現します。<a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesOrigin.html#origin-connection-timeout\" target=\"_blank\" rel=\"noopener\">オリジンタイムアウト設定</a> (カスタムオリジンの場合) では、ユーザーは以下の値を調整することができます:</p> \n<ol> \n <li>接続試行回数: CloudFront がオリジンサーバーへの接続を試みる回数を設定します。</li> \n <li>接続タイムアウト: CloudFront がオリジンサーバーへの接続確立を試みる際の待機時間(秒)を指定します。</li> \n <li>レスポンスタイムアウト: CloudFront がオリジンにリクエストを転送してからレスポンスを待つ時間、およびオリジンからレスポンスパケットを受信した後、次のパケットを受信するまでの待機時間を設定します。</li> \n</ol> \n<p><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesGeneral.html#DownloadDistValues-security-policy\" target=\"_blank\" rel=\"noopener\">オリジンリクエストポリシー</a>では、エッジからオリジンサーバーへ接続する際に使用する最小 SSL バージョンも定義されます。</p> \n<h3>オリジンからのレスポンス</h3> \n<p>リクエストがすべてのキャッシュレイヤー、REC、Origin Shield のいずれにも存在しない場合、オリジンサーバーから取得されます。オリジンはパブリック IP でアクセス可能なリソースですが、<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/private-content-vpc-origins.html\" target=\"_blank\" rel=\"noopener\">VPC オリジン</a>と組み合わせることでプライベートリソースにすることも可能です。オリジンが URL で指定されている場合、この段階で DNS 名前解決が実行されます。これにより、<a href=\"https://aws.amazon.com/route53/\" target=\"_blank\" rel=\"noopener\">Amazon Route 53</a> のレイテンシーベースルーティングや地理的位置情報ルーティングといったルーティングポリシーを活用して、最適なオリジンの場所を決定できます。</p> \n<p>レスポンスは、リクエストとは逆の経路をたどって戻ります。オリジンサーバーからのレスポンスは REC に返されます。リクエストがキャッシュ可能で圧縮が有効な場合、レスポンスは圧縮されます。キャッシュの保持期間は CloudFront ビヘイビアのキャッシュポリシーで管理されます。Lambda@Edge のオリジンレスポンス関数が定義されている場合は、この段階で実行され、その結果が REC にキャッシュされます。Lambda@Edge のビューワーレスポンス関数が定義されている場合も実行されます。セキュリティ上の理由から、レスポンスに対して実行される関数はレスポンスボディの読み取りはできませんが、置き換えることは可能です。処理は POP へと続きます。CloudFront Functions の ビューワーレスポンス関数が定義されている場合は POP で実行され、最終的なコンテンツがクライアントに配信されます。図 2 は、このリクエスト/レスポンスの流れにおける主要なステップをまとめたものです。</p> \n<h2>まとめ</h2> \n<p>本記事では、ビューワーから Amazon CloudFront を経由してオリジンサーバーへと至る単一のリクエスト、そしてオリジンサーバーからビューワーへ戻るレスポンスの流れを追いながら、CloudFront が提供する様々なレイヤーと機能について解説しました。</p> \n<p>各機能の実行順序と、それぞれがどのレイヤーで動作するかについて理解が深まったことと思います。ぜひこの知識を活かして、お使いの CloudFront 設定(キャッシュ設定、エッジ関数、AWS WAF、AWS Shield など)を見直し、CloudFront CDN の持つすべての力を最大限に活用してください。</p> \n<h2>著者について</h2> \n<p>\n <!-- First Author --></p> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <p class=\"sanchkan_square-e1758312914318.png\"><img loading=\"lazy\" class=\"alignleft wp-image-1288 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/5b384ce32d8cdef02bc3a139d4cac0a22bb029e8/2025/09/19/sanchkan_square-e1758312914318.png\" alt=\"Sanchith Kandaka\" width=\"125\" height=\"125\"></p> \n <h3 class=\"lb-h4\">Sanchith Kandaka</h3> \n <p style=\"color: #879196;font-size: 1rem\"><span style=\"color: #000000\">Sanchith は、コンテンツデリバリとアプリケーションセキュリティの分野で 15 年以上の経験を持ち、エッジ関連のあらゆる技術に情熱を注いでいます。ソリューションアーキテクトおよびソリューションエンジニアを経て、現在は AWS のスペシャリストソリューションアーキテクトとして、Amazon CloudFront、AWS WAF、AWS Shield などの AWS Edge Services および境界保護サービスを専門としています。</span></p> \n</div> \n<p>\n <!-- Second Author --></p> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <p class=\"Jorge-125x125-1.jpg\"><img loading=\"lazy\" class=\"alignleft wp-image-1288 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/5b384ce32d8cdef02bc3a139d4cac0a22bb029e8/2023/11/22/Jorge-125x125-1.jpg\" alt=\"Jorge Prado\" width=\"125\" height=\"125\"></p> \n <h3 class=\"lb-h4\">Jorge Prado</h3> \n <p style=\"color: #879196;font-size: 1rem\"><span style=\"color: #000000\">Jorge は、ノースカロライナの AWS でシニアテクニカルアカウントマネージャーを務めています。エンタープライズサポートのお客様が最適なソリューションを見つけ、運用面での優れた成果を達成できるよう支援することに情熱を持っています。専門分野はネットワーキング技術です。プライベートでは、読書や映画鑑賞、お子さんとのゲームを楽しんでいます。</span></p> \n</div> \n<p>翻訳は Solutions Architect の長谷川 純也が担当しました。</p>"
  },
  {
    "title": "複数の並行開発におけるDocker Composeのポート競合を何とかする（Mac）",
    "date": "2025-10-22T04:43:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/shinoyu/articles/6a79758070df88",
    "content": "\n とにかく競合しがちな3000と8000\n複数の開発のお仕事を頂いて対応していると、このポート競合に悩まされてしまうということがよくあります。まあその時立ち上げるcomposeの環境を一つだけに限定すればいい、という話ではあるのですが、AIコーディングが常用化された今の環境化では平行に開発できないと辛いというのが実情なわけです。\n大体の現場は、並行で開発をしないといけないタイプのエンジニアのことは特に考慮してくれません。故に3000番ポートというある意味Web開発デファクトみたいなポートはくっっっっっそ被ります。8000番も同じくよく使われるものなので、これをまあ被る。いちいちcomp..."
  },
  {
    "title": "株式会社ファイン様のAWS 生成AI活用事例：建築AIパース生成サービスにレコメンドAI機能を実装。担当者の商品検索時間を75%削減し、顧客満足度も向上。",
    "date": "2025-10-22T04:29:26.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-fine-d/",
    "content": "<p><em>本ブログは株式会社ファイン様と Amazon Web Services Japan 合同会社が共同で執筆いたしました。</em></p> \n<p>皆様こんにちは。AWSジャパン アカウントマネージャーの松家です。</p> \n<p>近年、多くのお客様が生成AIの検証段階から本番環境への適用に移行されています。また、開発現場にも生成AIが活用される時代になり、アイデアから実装に至るまでのスピードも劇的に早くなっていることを実感しています。</p> \n<p>「建築CGのデジタル素材」という市場において高品質なデジタル商品、サービスを提供されている<strong><a href=\"https://www.fine-d.co.jp/\">株式会社ファイン様</a></strong>は実際のビジネス課題を解決する機能をAWS上で開発するハッカソンイベント AWS DEVCRAFTに参加。Amazon SageMakerやAmazon Bedrockを通じてAmazon Titan Multimodal Embeddings を活用し、設計からわずか1か月半で生成された建築AIパースのイメージに近い商品をレコメンドする機能を開発されました。<br> 本記事では生成AIを活用した業務効率化、および顧客満足度向上の取り組みについてご紹介いたします。</p> \n<p><strong>お客様の状況と検証に至る経緯</strong></p> \n<p>株式会社ファイン様は施主の要望と設計者の見識から建築パース画像を生成するサービス「AI PERS（AIパース）」を提供されています。このサービスはお客様に大変好評だったものの、いくつか運用面で課題が残っていました。</p> \n<p>• 施主のイメージは具体化出来るが、実際の商品とのマッチングや検索に時間がかかってしまう。</p> \n<p>• 営業や設計の商談に差が出てしまい、お客様の検討の温度感が高い間に提案が出来ずに至ってしまう。</p> \n<p>そこで、生成AIを活用してこれらの課題を解決できないかと考えました。</p> \n<p><strong>ソリューション / 構成</strong><br> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/image-13-4.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167590 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/image-13-4.png\" alt=\"\" width=\"1225\" height=\"686\"></a></p> \n<p>施主が選択したプランから、理想のお部屋イメージを入力すると入力内容に基づき建築AIパースが生成されます。その生成されたAIパースのイメージと、実際に販売している商品とをベクトル検索を通じておすすめ度の1-5位を表示します。</p> \n<p><strong>機能全体のフロー</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/image-14-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167461 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/image-14-1.png\" alt=\"\" width=\"1233\" height=\"689\"></a></p> \n<p>• 生成された画像の中から検索をかけたい部位を検出します。今回は床を想定しています。</p> \n<p>• その床部分だけをAWS Lambdaを用いて切り抜きます。</p> \n<p>• 切り抜かれた画像をAmazon Bedrock に渡し、ベクトル化モデルのAmazon Titan Multimodal Embeddings を活用し、ベクトル化を実施します。</p> \n<p>• Amazon RDS PostgreSQLでベクトル検索を行い、類似品を検索します。</p> \n<p><strong><br> 導入効果</strong></p> \n<p>ファイン様の「レコメンド AI」により、以下の効果が期待されています。</p> \n<p>• 出力されたAIパースのイメージに近い商品を探す時間を75% 削減し、担当者の工数削減に寄与する。</p> \n<p>• ベクトル検索を通じて、おすすめ度合いに応じて1-5位まで瞬時に表示できるため、顧客体験の標準化や向上を図る。</p> \n<p><strong><br> 今後の展望</strong></p> \n<p>今後の展開について、ファイン様は次のように意欲を示しています。</p> \n<p>• AIパースサービスからの連携だけでなくSNSなどの写真画像を入力としての機能拡張</p> \n<p>• 自社のパース制作アプリケーションの自動仕様設定機能として組み込み</p> \n<p>• 自社のコンテンツ配信サービス（データステーション）の検索機能としての組み込み</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/画像1.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-167462 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/画像1.jpg\" alt=\"\" width=\"1430\" height=\"1024\"></a></p> \n<p>AWS DEVCRAFTでの取り組み内容発表時の様子<br> 株式会社ファイン 開発部 ゼネラルマネージャー 雑賀 崇 氏</p>"
  },
  {
    "title": "株式会社ギフティ様「giftee Reward Suite」における Amazon EKS Auto Mode の導入事例のご紹介",
    "date": "2025-10-22T02:21:26.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/giftee-amazon-eks-auto-mode/",
    "content": "<p>このブログ記事は、株式会社ギフティ様が執筆し、Amazon Web Services Japan が監修しています。</p> \n<h2>はじめに</h2> \n<p>株式会社ギフティ (以下、ギフティ) は「eギフトを軸として、人、企業、街の間に、さまざまな縁を育むサービスを提供する」をビジョンに掲げ、カジュアルギフトサービス「giftee」や、法人・自治体向けにeギフトを活用したソリューションを提供する「giftee for Business」などを展開しています。</p> \n<p>本稿では、弊社の「giftee for Business」のソリューションのうちの一つであり、2025年4月1日より提供を開始したキャンペーン基盤「giftee Reward Suite」のインフラ構築事例を紹介いたします。<a href=\"https://giftee.biz/giftee-reward-suite/\">giftee Reward Suite</a> は、企業の会員サービスと連携し、既存会員向けの効果的なキャンペーン施策やリワードプログラムの実装を継続して実現するための SaaS です。ユーザー認証から条件判定、抽選、ギフト配布までを一括で提供することで、企業が手軽にキャンペーンを実施できます。</p> \n<p>giftee Reward Suite では、主に <a href=\"https://aws.amazon.com/jp/eks/\">Amazon Elastic Kubernetes Service</a> (以下、EKS) クラスタの運用管理がよりシンプルになる点に魅力を感じて、<a href=\"https://aws.amazon.com/jp/eks/auto-mode/?trk=769a1a2b-8c19-4976-9c45-b6b1226c7d20&amp;sc_channel=el\">Amazon EKS Auto Mode</a> (以下、EKS Auto Mode) を採用しています。EKS Auto Mode は2024年12月の AWS re:Invent において一般提供が開始されました。これは、Kubernetes クラスタのコンピューティング、ストレージ、およびネットワーキングの管理を自動化する新機能です。この機能により、クラスターを迅速に構築し、パフォーマンスを向上させ、Kubernetes の実行や管理を簡素化することができます。クラスタ管理を AWS に任せることで、アプリケーションの構築に集中してイノベーションの推進により注力することが可能です。本稿では、「giftee for Business」における EKS Auto Mode の導入に至った経緯、採用したアーキテクチャ、導入効果、そして今後の展望についてご説明します。</p> \n<h2>プロジェクトの概要</h2> \n<p>本プロジェクトの開発は2024年1月頃にスタートし、2025年4月1日に<a href=\"https://prtimes.jp/main/html/rd/p/000000559.000004529.html\">日本生命保険相互会社をクライアントとしてサービスインを迎えること</a>が決定していました。開発体制としては、フロントエンド主担当1名、バックエンド主担当2名、そしてインフラ担当1名（筆者）の計4名で開発を進めました。</p> \n<p>プロジェクト期間は長く見えるかもしれませんが、法人向け SaaS システムとしての要件定義や設計をゼロベースで検討する必要があるため、インフラ構築にかけられる実質的な期間は限られていました。このため、短期間での効率的な構築が求められる状況でした。</p> \n<h2>EKS Auto Mode を採用した経緯</h2> \n<p>アーキテクチャとしては、マイクロサービス的な構想があることや、インフラ側でも複雑な要件が発生する可能性が高い状況であったので Kubernetes の採用も積極的に視野に入れて検討していました。開発当初は EKS on EC2 のマネージドノードで構築を進めていましたが、プロジェクト体制や兼務の問題があり、その運用負荷の高さが大きな課題でした。</p> \n<p>そうした最中、2024年12月に EKS Auto Mode が発表され、アドオン等の AWS マネージドな領域が大きく広がり、EKS クラスタの運用管理がよりシンプルになる点に魅力を感じ、すぐに検証を開始しました。その後、採用を決定し2025年4月より本番環境でサービス稼働しています。</p> \n<p>採用する上で大変だった点については後述しますが、今回の対象のワークロードは一般的な Web サーバー等のステートレスの構成が多く、EKS Auto Mode や Karpenter などの採用の際に注意が必要な長時間実行されるバッチ処理やステートフルなリソースも少ない構成でした。これが短期間での検証から採用に踏み切れた決め手のうちの一つと考えています。</p> \n<p>なお、補足しておくと、EKS Auto Mode は長期実行のワークロードでも利用可能です。その場合の注意点や設定については、AWS ブログ「<a href=\"https://aws.amazon.com/jp/builders-flash/202504/dive-deep-eks-node-automated-update/\">Amazon EKS Auto Mode のノード自動更新を Deep Dive する ~ 長期実行ワークロードを正しく取り扱う</a>」が大変参考になります。</p> \n<h2>アーキテクチャ概要</h2> \n<p>特徴として、EKS Auto Mode のデータプレーン側の EC2 ノードは、高可用性のため 3AZ に冗長化されています。また本記事に直接関連しない箇所については、一部表記を省略しております。</p> \n<div id=\"attachment_167400\" style=\"width: 768px\" class=\"wp-caption aligncenter\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/20/gifteeeks.png\"><img aria-describedby=\"caption-attachment-167400\" loading=\"lazy\" class=\"wp-image-167400\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/20/gifteeeks.png\" alt=\"\" width=\"758\" height=\"550\"></a>\n <p id=\"caption-attachment-167400\" class=\"wp-caption-text\">図 1 giftee Reward Suite アーキテクチャ概略図</p>\n</div> \n<h2>導入の効果</h2> \n<p>EKS Auto Mode の導入により、運用負荷が大幅に軽減されたのが最大のメリットであると感じています。具体的な効果は以下の3点です。</p> \n<ul> \n <li>クラスタ管理の簡素化：従来、EKS クラスタでは、AWS Load Balancer Controller や Kube proxy などの各種アドオンを自分たちで管理する必要がありました。EKS Auto Mode はこれらを AWS の責任範囲で自動的に管理してくれるため、バージョンアップといった運用タスクの負荷が軽減されました。</li> \n <li>ノード管理の効率化：開発当初は、EKS Managed ノードで Auto Scaling Group を利用して EC2 インスタンスのノードを管理していました。EKS Auto Mode では Karpenter をベースとしたクラスターオートスケーラーを含めて AWS の責任で管理されるため、自身で管理する必要がない点もメリットだと感じています。</li> \n <li>セキュリティ：EKS Auto Mode のノードでは、Bottlerocket と呼ばれるコンテナの実行に最適化された OS が利用され、セキュリティアップデートやパッチなどが AWS の責任で自動的に適用されることにより、セキュリティの安全性が確保されています。また、ノードの最大存続期間が21日に設定されており、自動的に新しいノードに置き換えられるため、セキュリティのベストプラクティスである定期的なノードの定期的な入れ替えが運用負荷なしに実現できています。</li> \n</ul> \n<h2>導入時の検討と課題</h2> \n<p>EKS Auto Mode は、従来の EKS に比べて AWS マネージドな領域が広がり、ユーザの運用がシンプルになる一方で、ユーザー側で設定できる範囲は狭まるというトレードオフがあると言えます。このため、導入にあたっては下記の事項について検討しましたが、今回のワークロード特性上、結果的に大きな制約とはなりませんでした。</p> \n<ul> \n <li>ノードの自動更新：EKS Auto Mode では、セキュリティの観点から最大21日ごとにノードが自動的に置き換えられます。これは、ホストサーバーにデータを保存するようなステートフルなワークロードや、長時間実行されるバッチ処理などがある場合は検討すべきポイントになります。ただ今回のワークロードは、データベースとして RDS や Valkey などのサービスを活用し、アプリケーション自体はステートレスな設計にしていました。また、バッチ処理もいくつか存在するものの、短時間で処理が終了するものであり、かつ冪等性も考慮していたため、制約にはなりませんでした。</li> \n <li>カスタム AMI の利用制限：EKS Auto Mode ではカスタム AMI を持ち込むことができません。これも、特定のソフトウェアをホストサーバーに事前にインストールしておく必要があるようなケースでは課題となり得ますが、今回のアプリケーションはホストサーバーに依存しない設計になっていたため、この点も制約とはなりませんでした。</li> \n <li>Security Group per Pod (SGPP) の非サポート：EKS Auto Mode では、Pod 単位でセキュリティグループを付与する Security Group per Pod (SGPP) が現時点ではサポートされていません。しかし、今回のアプリケーションで、Pod 単位でセキュリティ分離を行うモチベーションは強くありませんでした。また、将来的に特定のアプリケーションからのみ、ある AWS サービスへのアクセスを許可する要件が発生しても、NodeClass を利用して NodePool ごとに異なる Security Group を適用することで、一定のセキュリティ分離は達成できると見込んでいたため、大きな制約とは判断しませんでした。とはいえ、他アプリケーションでも EKS Auto Mode を利用することを想定すれば、pod レベルで Security Group が付与できる方がより良いと考えているため、今後 SGPP 相当の機能がリリースされることを期待しています。</li> \n</ul> \n<p>一方で、Karpenter や EC2 ノードの管理等、AWS がマネージドで提供する機能の挙動を理解する必要があるという点は大変だったかもしれません。上記で述べた通り、EKS Auto Mode では今までユーザーが担う必要があった部分も AWS の責務範囲になっていますが、これらの機能が AWS マネージドになったからといって、もちろんその挙動を理解しなくても良いわけではなく、同様に理解する必要があります。</p> \n<p>今回、キャッチアップに苦労した部分もありましたが、<a href=\"https://catalog.workshops.aws/eks-auto-mode/ja-JP\">EKS Auto Mode のワークショップ</a>やコミュニティ勉強会の中で、AWS のプロフェッショナルの方々や、EKS を運用している事業会社のコミュニティメンバーとのディスカッションを通じて、理解を深めることができたと感じています。</p> \n<h2>今後の展望</h2> \n<p>「giftee Reward Suite 」を、今後より多くのお客様にご利用いただくための機能開発と、サービスの安定運用に引き続き注力していきます。</p> \n<p>特にインフラ面では Karpenter の設定最適化を進めることでインフラコストの効率化をはかりたいと考えています。具体的には、スポットインスタンスの活用等を行う予定です。</p> \n<h2>まとめ</h2> \n<p>本稿では、「giftee Reward Suite」 における Amazon EKS Auto Mode の導入事例をご紹介いたしました。</p> \n<p>EKS Auto Mode を採用することで、Kubernetes の優れたアーキテクチャを活用しつつ、クラスターの運用管理をシンプルにすることができました。Kubernetes の採用をご検討されており、運用負荷に懸念をお持ちの方々にとって、本事例が参考になれば幸いです。</p> \n<h2>著者について</h2> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/SDIM0246-1.jpg\" alt=\" \" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\">牧 純平</h3> \n  <p>SIer でのキャリアを経て、2022年に株式会社ギフティへ入社。 法人向けギフトキャンペーンサービスの開発に従事し、現在はプラットフォームエンジニアリング組織の立ち上げを推進。 </p>\n </div> \n</footer> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/nice_low-1.jpg\" alt=\" \" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\">Rui Lee (リー) </h3> \n  <p>AWS Japan のソリューションアーキテクトとして、Web 業界のお客様を中心にアーキテクチャの設計・構築を支援しています。 </p>\n </div> \n</footer>"
  },
  {
    "title": "vercel/next.js – v16.0.0",
    "date": "2025-10-22T00:35:18.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0",
    "content": "> [!TIP]  \r\n> **Check out our Next v16 [Blog Post](https://nextjs.org/blog/next-16) to learn more about this release.**\r\n\r\n### Core Changes\r\n\r\n- Development: Don't import app-router / hot-reloader through next/link in application code: #83656\r\n- Remove clientParamParsing requirement from RDC for Navigations: #83661\r\n- Upgrade React from `6b70072c-20250909` to `886b3d36-20250910`: #83650\r\n- Turbopack: Use readFileSync / writeFileSync for manifest writing: #83694\r\n- Upgrade React from `886b3d36-20250910` to `f3a80361-20250911`: #83696\r\n- Don't create client-side debug channel if the feature is disabled: #83699\r\n- fix: dev should produce the correct default fallback regex to match builds/Turbopack: #83701\r\n- [devtool] fix overlay styles are missing: #83721\r\n- Revert \"Remove clientParamParsing requirement from RDC for Navigations\": #83725\r\n- Only enable unhandledRejection filtering when opted in: #83726\r\n- Fix index data route for adapter build-complete: #83730\r\n- Remove leading underscore for unhandledRejection envvar: #83732\r\n- Upgrade React from `f3a80361-20250911` to `93d7aa69-20250912`: #83729\r\n- Upgrade React from `93d7aa69-20250912` to `8a8e9a7e-20250912`: #83742\r\n- Fix reentrancy of unhandledRejection filtering: #83741\r\n- Fix type for unhandled rejection handler process.removeListener: #83748\r\n- [OTel] fix: Root span name should not include high cardinality URL: #75416\r\n- Turbopack: Remove matchers.reload() call on each request: #83720\r\n- [Breaking] Flat config as default in `@next/eslint-plugin-next`: #83763\r\n- fix: Rspack splitChunks.chunks regex: #83670\r\n- Revert \"Turbopack: Remove matchers.reload() call on each request\": #83819\r\n- fix: unstable_cache should perform blocking revalidation during ISR revalidation: #83820\r\n- fix(Rspack): resolve HMR unresponsiveness or unexpected full reload & update dev snapshot: #83480\r\n- Allow `next.config.mts` for Node.js native TS resolver: #83556\r\n- chore: Ensure Import Trace starts in a newline: #83638\r\n- Development: Remove matchers.reload() on each request: #83829\r\n- Upgrade React from `8a8e9a7e-20250912` to `5e0c951b-20250916`: #83850\r\n- Bump typescript 5.9.2: #83833\r\n- Allow headers, rewrites and redirects to be defined as sync functions: #83743\r\n- Turbopack: Optimize addedRoutes and removedRoutes calculation: #83840\r\n- [next-config-ts] Set Node.js native TS loader fallback flag to process.env: #83832\r\n- Development: Clarify TypescriptStatus in watcher: #83857\r\n- Upgrade sharp dependency to version ^0.34.4: #83892\r\n- Upgrade React from `5e0c951b-20250916` to `128abcfa-20250917`: #83906\r\n- Add native ts resolver docs link to transpile-config: #83914\r\n- OTel: use `srcPage` for templates when `next.route` is unavailable: #83911\r\n- Remove inline CSS sourcemaps from next-devtools: #83917\r\n- Development: Move all TypeScript related work in watcher together: #83912\r\n- [Cache Components] Allow sync IO inside console methods : #83843\r\n- Upgrade React from `128abcfa-20250917` to `84af9085-20250917`: #83959\r\n- Build: Add .next/trace-build with high level trace: #83949\r\n- Remove force writing **/*.mts to tsconfig: #83967\r\n- feat: Isolate dev build from prod: #83961\r\n- Remove JS size reporting from next build: #83815\r\n- Docs/workspace setup: #83490\r\n- Turbopack: support `import ... with {type: \"bytes\"}`: #83896\r\n- fix: error overlay not closing when backdrop clicked: #83981\r\n- Upgrade React from `84af9085-20250917` to `d415fd3e-20250919`: #84003\r\n- fix: worker logs should still support color: #84024\r\n- Update font data: #84005\r\n- Allow passing port to `next internal trace`: #83907\r\n- Turbopack: error when importing Typescript in node_modules: #83990\r\n- Turbopack: Deterministic builds (prerender-manifest, .next/package.json, ./next/postcss.js): #84081\r\n- Turbopack: Fix babel-loader (allowing built-in or manual configuration): #82676\r\n- [Cache Components] allow using headers() in runtime prefetches: #83838\r\n- [Breaking] Remove deprecated `publicRuntimeConfig` and `serverRuntimeConfig`: #83944\r\n- Turbopack: mode to disable tracing: #83683\r\n- babel-loader: Fix a few issues with config caching: #83973\r\n- Turbopack: Merge babel-loader and react-compiler configuration logic to avoid running babel twice: #83502\r\n- [breaking]: enable router scroll optimization by default: #84102\r\n- Fix layout for `ssgPageRoutes` in the file tree: #84104\r\n- Turbopack: Remove useless 'default' built-in webpack loader condition: #84111\r\n- Fix: Client should auto reload after server restarts: #83971\r\n- trace-build: Add missing spans: #84080\r\n- Development: Remove TypeScript from the hot path during bootup: #84090\r\n- Guide users to `experimental.cacheComponents` config: #84121\r\n- Development: Only load webpack when used: #84123\r\n- Turbopack: Skip loading webpack plugin: #84125\r\n- Development: Only load createEnvDefinitions when used: #83935\r\n- BREAKING CHANGE!: bump default `images.minimumCacheTTL` from 1 min to 4 hours: #84105\r\n- Feat: Add Model Context Protocol (MCP) server to Next.js dev server: #84100\r\n- Upgrade React from `d415fd3e-20250919` to `1eca9a27-20250922`: #84093\r\n- Turbopack: Remove the deprecated `.turbo` config object: #84109\r\n- Flag excess properties in Next.js config with TypeScript: #84069\r\n- docs: update Security section to direct disclosures : #84156\r\n- ci: Enable `experimental.isolatedDevBuild` for `test-experimental-dev`: #84099\r\n- [turbopack] Ensure React Compiler options are based dev vs prod: #84062\r\n- Enable anonymous function naming in React Compiler: #84070\r\n- Revert \"[Breaking] Remove deprecated `publicRuntimeConfig` and `serverRuntimeConfig` (#83944)\": #84167\r\n- Fix double comma in build manifest: #84131\r\n- [turbopack] set app dir only to true when no pages entries detected: #84144\r\n- Split code-frame into separate compiled package: #84174\r\n- refactor: separate forward browser logs utils: #84151\r\n- Upgrade React from `1eca9a27-20250922` to `e2332183-20250924`: #84189\r\n- [Cache Components] default to filtering unhandledRejection after abort: #84192\r\n- fix: prevent URL mutation in router rewrites: #83963\r\n- fix(server): fix pages router resume router matching: #84158\r\n- Feat: `get_errors` MCP endpoint: #84161\r\n- Add internal environment variable for enabling React Compiler: #84176\r\n- [devtools] Disable React's default Transition indicator: #84202\r\n- Upgrade React from `e2332183-20250924` to `b0c1dc01-20250925`: #84248\r\n- Feat: `get_page_metadata` MCP endpoint: #84211\r\n- feat: capture logs into logging file during development: #84183\r\n- babel-loader: Avoid calling expensive `isReactCompilerRequired` check when we must run Babel anyways: #84103\r\n- [mcp] expose logging: #84226\r\n- Move `config.turbopack.moduleIds` to `config.experimental.turbopackModuleIds`: #84230\r\n- Show invalid default export errors during prerendering: #84242\r\n- fix: make sure caller exists in babel preset: #84154\r\n- [mcp] allow to enable mcp server through env var: #84278\r\n- fix(metadata): make formatDetection respect true/false properly: #83924\r\n- Upgrade React from `b0c1dc01-20250925` to `df38ac9a-20250926`: #84276\r\n- Add a --webpack flag and default --turbopack to true: #84216\r\n- fix: Update URL resolution logic to handle search parameters on root path /?foo=bar: #78262\r\n- [Breaking] Remove deprecated sync access to Dynamic APIs: #84179\r\n- Move `config.turbopack.moduleIds` to `config.experimental.turbopackModuleIds`: #84230\r\n- Show invalid default export errors during prerendering: #84242\r\n- fix: make sure caller exists in babel preset: #84154\r\n- [mcp] allow to enable mcp server through env var: #84278\r\n- fix(metadata): make formatDetection respect true/false properly: #83924\r\n- Upgrade React from `b0c1dc01-20250925` to `df38ac9a-20250926`: #84276\r\n- Add a --webpack flag and default --turbopack to true: #84216\r\n- fix: Update URL resolution logic to handle search parameters on root path /?foo=bar: #78262\r\n- [Breaking] Remove deprecated sync access to Dynamic APIs: #84179\r\n- Turbopack: only write merged manifests when they have been changed: #84261\r\n- Turbopack: add separate turbopackPersistentCachingForBuild/ForDev flags: #84215\r\n- Revert \"Add a --webpack flag and default --turbopack to true (#84216)\": #84348\r\n- Upgrade React from `df38ac9a-20250926` to `d15d7fd7-20250929`: #84347\r\n- Mark React Compiler integration as stable: #84220\r\n- [cna] Add `reactCompiler` option: #82251\r\n- Turbopack: remove canary version check for turbopackPersistentCachingForDev: #84277\r\n- [turbopack] Add support for debug_ids: #84319\r\n- Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\": #84351\r\n- [Breaking] Remove AMP codemod: #84356\r\n- [Breaking] Remove deprecated built-in AMP: #84312\r\n- auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents: #84250\r\n- [mcp] get server action tool: #84382\r\n- Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\": #84389\r\n- Update otel test assertions and pages span_name: #84393\r\n- [Breaking] Bump minimum TypeScript version to 5.1.0: #84384\r\n- Upgrade React from `d15d7fd7-20250929` to `ef889445-20250930`: #84383\r\n- [Breaking] Remove deprecated `unstable_rootParams`: #84373\r\n- [metadata] remove falsy dynamicParams approach: #84405\r\n- fix: next rspack binding NextExternalsPlugin: #84303\r\n- Development: Skip route matching when there is an existing match: #84227\r\n- Revert \"auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents\": #84419\r\n- Upgrade React from `ef889445-20250930` to `548235db-20251001`: #84416\r\n- [Breaking] Update default browserslist config: #84401\r\n- Upgrade React from `548235db-20251001` to `1bd1f01f-20251001`: #84417\r\n- Allow `metadataBase` to be a string URL in addition to `URL` instance: #84297\r\n- Upgrade React from `1bd1f01f-20251001` to `86181134-20251001`: #84427\r\n- [mcp] logging file should be reset for each session: #84425\r\n- Revert \"Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\"\": #84394\r\n- Optimize isMetadataRoute function: #84409\r\n- [ci]: split clientSegmentCache test runners off from experimental: #84440\r\n- [Cache Components] Fix caching in `generateMetadata`/`generateViewport`: #84228\r\n- Upgrade React from `86181134-20251001` to `a757cb76-20251002`: #84463\r\n- [segment cache]: fix trailingSlash handling with output: export: #84465\r\n- perf: Use a more aggressive retry loop for `recursiveDelete`: #84444\r\n- [Cache Components] Dim logs after prerender aborts: #84153\r\n- telemetry track mcp server usage: #84471\r\n- simplify the way we check for turbopack config to ensure we support an empty turbopack object: #84494\r\n- perf: Use synchronous IO when cleaning `distDir` in `next dev` and `next build`: #84472\r\n- Make turbopack the default bundler for custom servers: #84281\r\n- [segment cache]: fix interception route handling: #84497\r\n- Upgrade React from `a757cb76-20251002` to `85c427d8-20251003`: #84496\r\n- [segment cache]: collectSegmentData should respect experimental.staleTime config: #84520\r\n- Fix potential race condition with request ID in dev mode: #84532\r\n- [test] Enable `reactDebugChannel` for experimental test shards: #84533\r\n- Simplify Metadata components: #84527\r\n- Implement the updated prerender API shape: #84254\r\n- Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003`: #84499\r\n- Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006`: #84573\r\n- fix(Turbopack): Add better error messaging for when we can't determine Next.js root: #83918\r\n- Allow silencing unhandled rejection filter warnings and improve debugging: #84572\r\n- [MCP] Fix: Do not dedup by URL for MCP get_page_metadata: #84564\r\n- Guard `createDebugChannel` import by feature flag: #84604\r\n- Build: Add time to logline of every step: #84602\r\n- Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006`: #84589\r\n- [Cache Components] Schedule work on timeouts: #84344\r\n- [dev] Define request ID for RSC requests on the client: #84605\r\n- fix(cache-tags): add `/index` to implicit tags and adjust `revalidatePath()`: #84586\r\n- Build: Highlight TypeScript and ESLint being run clearer: #84606\r\n- [Breaking] Bump sass-loader to v16: #84387\r\n- Update cases for build complete with adapters: #84361\r\n- Turbopack: delete .next folder before throwing due to \"pages/app directory must be in the same folder\": #84553\r\n- [mcp] change get-project-path to get-project-metadata: #84619\r\n- feat(next/image)!: deprecate and warn on `images.domains` config: #84625\r\n- feat(next/legacy/image)!: deprecate and warn on `next/legacy/image` usage: #84622\r\n- Turbopack: improve errors/warnings for turbopack messages: #84552\r\n- Turbopack: rename turbopackPersistentCachingForXXX to turbopackFileSystemCacheForXXX: #84632\r\n- [Segment Cache] Add refresh URL to reused default segments: #84627\r\n- [Segment Cache] Fix tests related to optimistic loading state reuse: #84498\r\n- Upgrade React from `a4eb2dfa-20251006` to `3025aa39-20251007`: #84613\r\n- [breaking]: enable clientSegmentCache by default: #84643\r\n- feat: Acquire a lockfile on `distDir` in `next dev` and `next build`: #84428\r\n- Add deprecation warning to Runtime config: #84168\r\n- [middleware]: add upper bound to cloneBodyStream: #84539\r\n- Remove automatic linting from build: #83136\r\n- Re-enable legacyBehavior and passHref on Link: #84500\r\n- [cna] Use stable React Compiler: #84660\r\n- Add codemod for `middleware` to `proxy`: #84127\r\n- Fix dynamic catchall parameter interpolation in parallel routes: #84279\r\n- feat(breaking): Hard Deprecate PPR Configuration: #84280\r\n- Deprecate `middleware` and recommend `proxy`: #84119\r\n- Put native TS resolver for next config under `--experimental-next-config-strip-types` flag: #84675\r\n- Fix interception route rewrites for nested dynamic routes: #84413\r\n- fix: strip _NEXTSEP_ from interpolated pathnames: #84430\r\n- chore: Remove useless symlink resolution logic in `recursive-delete.js`: #84582\r\n- breaking(next/image)!: remove 16px from default `images.imageSizes` config: #84647\r\n- add Statsig Node Core package to Server External Packages: #84157\r\n- Remove bailed out SSG routes from the list of SSG: #83861\r\n- Revert \"[Breaking] Skip Next.js internal routes `/_next` in middleware\": #84697\r\n- Bump eslint-plugin-react-hooks to v7: #84669\r\n- Add refresh API to next/cache: #84666\r\n- [Breaking] Require `images.localPatterns` for query in Image src: #84406\r\n- [Breaking] feat(next/image)!: add support for `images.dangerouslyAllowLocalIP` and `images.maximumRedirects`: #84676\r\n- Add new updateTag API and new signature for revalidateTag: #83822\r\n- Add validation for missing default.js in parallel routes: #84702\r\n- misc: allow beta to be triggered: #84713\r\n- Fix tags check for expired/stale: #84717\r\n- tweak middlewareClientMaxBodySize handling: #84712\r\n- docs: Add more details to `useLightningcss` docs: #84581\r\n- Version gate migration docs link: #84740\r\n- [Cache Components] Allow hiding logs after abort: #84579\r\n- Log `Compiled proxy in ...`: #84746\r\n- Upgrade React from `3025aa39-20251007` to `9724e3e6-20251008`: #84642\r\n- Remove unused `eslint-disable` directives: #84797\r\n- Use ESLint Flat Config: #84800\r\n- fix missing flight-router-state-tree header normalization: #84718\r\n- Write `.next/dev/types/**/*.d.ts` to default tsconfig: #84747\r\n- Upgrade React from `9724e3e6-20251008` to `ead92181-20251010`: #84793\r\n- [mcp] capture next config schema errors: #84832\r\n- feat: using @next/rspack-core: #84221\r\n- Upgrade React from `ead92181-20251010` to `d7215b49-20251013`: #84850\r\n- Turbopack build: Switch to using workerthreads for process: #84818\r\n- [Cache Components] Dev - restart render on cache miss: #84088\r\n- Update font data: #84785\r\n- Fix build compile mode if pages dir does not exist in Next.js 16: #84783\r\n- improve next config schema validation errors: #84847\r\n- Upgrade React from `d7215b49-20251013` to `56e84692-20251014`: #84860\r\n- warnOnce for Middleware deprecation: #84862\r\n- Add codemod for Middleware API to Proxy API: #84824\r\n- Deprecate Middleware API and add Proxy API: #84764\r\n- remove `clientParamParsing` configuration & bundle it with `cacheComponents`: #84763\r\n- remove dynamicIO flag: #84872\r\n- Bump eslint-plugin-react to 7.37.0: #84876\r\n- Add nextjs condition when cacheComponents is enabled: #84843\r\n- remove rdcForNavigations configuration & bundle with cacheComponents: #84870\r\n- Convert eslint-config-next project to TypeScript: #84839\r\n- [eslint-config] [Breaking] Use Flat config by default: #84874\r\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheLife`: #84877\r\n- fix: always use the safe stable stringify: #84909\r\n- [Cache Components] Fix cacheSignal in dev render: #84846\r\n- [dev-overlay] Never dedupe errors with different names or messages: #84908\r\n- Remove deprecated experimental_ppr route-level configuration: #84871\r\n- Include server latency in debug info: #84580\r\n- Fix parallel routes ignoring generateStaticParams from primary route: #84889\r\n- Revert \"Include server latency in debug info\": #84932\r\n- Development: Use process.hrtime for request time calculation: #84905\r\n- Use correct JSX runtime for library-owned JSX in React Server: #84869\r\n- Development: Implement request log time details: #84906\r\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheTag`: #84880\r\n- [Cache Components] separate runtime stage in dev render: #84644\r\n- Reland \"Include server latency in debug info\": #84950\r\n- Update  codemod ESLint template to Flat config: #84919\r\n- Upgrade React from `56e84692-20251014` to `93f85932-20251016`: #84963\r\n- [dev] Fix Middleware and Proxy file conflict: #84965\r\n- stabilize experimental.enablePrerenderSourcemaps: #84916\r\n- Stop manually setting stacktrace limit: #84968\r\n- Turbopack: respect `--profile` CLI param: #84920\r\n- Relax default.tsx validation for parallel routes leaf segments: #84767\r\n- Add codemod for removing `unstable_` prefix: #84974\r\n- Interception routes match from nested route navigation: #84898\r\n- [Cache Components] Allow unstable prefix for cacheLife and cacheTag: #84934\r\n- Relax default.tsx validation for parallel routes leaf segments: #84767\r\n- Add codemod for removing `unstable_` prefix: #84974\r\n- Interception routes match from nested route navigation: #84898\r\n- [Cache Components] Allow unstable prefix for cacheLife and cacheTag: #84934\r\n- Add codemod for removing `experimental_ppr`: #84979\r\n- fix: throw error during build when invalid export for Proxy: #84886\r\n- [cache components]: prevent expired entries from being served: #84975\r\n- Delete old prefetch cache related code: #84977\r\n- docs: Deprecation of Middleware: #84710\r\n- Add rendered search to router state: #84983\r\n- [segment cache]: delay revalidation prefetch pings 300ms: #84981\r\n- Show relative path from cwd for Proxy Middleware file conflict error: #84993\r\n- [Cache Components] fix docs for cacheLife(\"seconds\"): #85004\r\n- Rename MiddlewareMatcher to ProxyMatcher: #85005\r\n- [Breaking] Rename instrumentation onRequestError `context.routeType` from `middleware` to `proxy`: #85006\r\n- [turbopack] Prevent accidental access to `.next`: #84714\r\n- fix: incorrect canonicalUrl set when using output: export: #85019\r\n- Add Activity name to route layouts and pages: #85011\r\n- Update next-lint-to-eslint-cli to support `FlatCompat.config`: #85026\r\n- [cache components]: move flag out of experimental: #85035\r\n- [Cache Components] When caches are disabled in dev skip the cache warmup: #85014\r\n- [Cache Components] Use canary React when only Cache Components is enabled: #85042\r\n- Turbopack: Remove unneeded warning for telemetry: #85039\r\n- [cache components] stabilize cacheLife profiles: #85050\r\n- [cache components] show when cache components is enabled in the CLI: #85047\r\n- [cache components]: show cache components enabled in DevTools: #85048\r\n- [Cache Components] correctly label IO promises in devtools: #84928\r\n- Plumbing for cache indicator: #84955\r\n- Upgrade React from `93f85932-20251016` to `1324e1bb-20251016`: #84999\r\n- enable mcp server by default: #85058\r\n- Add comment that we expect the function passed to bind to be anonymous: #85070\r\n- Development: Addres comments on request log PR: #84945\r\n- Development: Implement request time for Pages Router: #85012\r\n- [cache components] add cache components indicator to dev start: #85069\r\n- cli: build partial entries --debug-build-paths arg: #85052\r\n- Turbopack: Better error for sassOptions.functions as it's unsupported: #85073\r\n- Upgrade React from `58bdc0bb-20251019` to `f6a48828-20251019`: #85081\r\n- [devtools]: instrument client navigation hooks for suspense devtools: #85007\r\n- Remove Segment from CacheNodeSeedData: #85080\r\n- label as Prefetch/Prefetchable depending on prefetch config: #85076\r\n- [cache components]: add 'bypass' cache indicator status: #85082\r\n- Upgrade React from `f6a48828-20251019` to `2bcbf254-20251020`: #85112\r\n- [cache components]: guard against setCacheStatus since its conditionally defined: #85125\r\n- warn: add deprecation warning of eslint config: #85122\r\n- add new devtools indicator loading state: #85083\r\n- Await initial Flight response before hydrating: #85124\r\n- fix(experimental.lockDistDir): Acquire the lock in dev earlier: #85116\r\n- telemetry: mcp tool call: #85120\r\n- [Turbopack] dedupe build errors: #85062\r\n- Fix subtree layout alignment for route summary in `next build`: #85137\r\n- [codemod] Remove runtime config when running `middleware-to-proxy`: #85075\r\n- [turbopack] Improve the multiple bundler flags messge to note that perhaps your `package.json` is the problem: #85118\r\n- Add Learn more docs to Middleware deprecation warning: #84711\r\n- [BF Cache]: skip lazyData fetch logic for inactive segments: #85142\r\n- Pass `startTime` to initial RSC payload stream: #85144\r\n- guard navigation `use` hooks for React 18: #85151\r\n- [turbopack] Don't warn on the lightning css experimental option: #84913\r\n- Turbopack: Remove redundant log line, increase delay for compiling log message: #85133\r\n- Make params and searchParams new Promises: #85158\r\n- Name \"cache\" streams for React DevTools: #85159\r\n- Use cacheMaxMemorySize config in default cache handler: #85153\r\n- Omit params to from client segments: #84883\r\n- enable experimental.routerBfCache behind cacheComponents: #84923\r\n- [Cache Components] Allow stale longer than expire in cacheLife: #85115\r\n- Update Activity names given to routes: #85155\r\n- use port zero for --inspect when forking, if used by parent: #85128\r\n- Update blocking prerender error message: #85087\r\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\r\n- Update routes generation for build-complete: #85017\r\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\r\n- Don't assign displayName to the internal Promises: #85178\r\n- Assign name to hydration stream: #85179\r\n- fix: add backwards compat for middleware → proxy field renames: #85183\r\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\r\n- Improve Proxy invalid export error message: #84887\r\n- Fix Activity boundary names: #85185\r\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\r\n- [upgrade] Version gate adding `--turbopack` flag: #85180\r\n- Tweaks to blocking route error message: #85191\r\n- Remove layout-router sticky/fixed debug warning: #85193\r\n- [cache components] persist cache bypass UI until it's disabled: #85190\r\n- Only allow node runtime in proxy: #85139\r\n- logger: skip logging full element: #85194\r\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\r\n- Update routes generation for build-complete: #85017\r\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\r\n- Don't assign displayName to the internal Promises: #85178\r\n- Assign name to hydration stream: #85179\r\n- fix: add backwards compat for middleware → proxy field renames: #85183\r\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\r\n- Improve Proxy invalid export error message: #84887\r\n- Fix Activity boundary names: #85185\r\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\r\n- [upgrade] Version gate adding `--turbopack` flag: #85180\r\n- Tweaks to blocking route error message: #85191\r\n- Remove layout-router sticky/fixed debug warning: #85193\r\n- [cache components] persist cache bypass UI until it's disabled: #85190\r\n- Only allow node runtime in proxy: #85139\r\n- logger: skip logging full element: #85194\r\n\r\n### Example Changes\r\n\r\n- docs: Convert relative imports to @ aliases in examples: #83813\r\n- chore: add example with oxlint: #83842\r\n- fix: correct typo 'incomming' to 'incoming' in with-mqtt-js example: #83887\r\n- chore: improve oxlint example: #83898\r\n- docs: update Dockerfile to use node:lts-alpine instead of node:18-alpine: #84229\r\n- Use Array.from to avoid @ts-ignore when copying i18n.locales: #82148\r\n- examples: Remove AMP example: #84355\r\n- [docs] fix(with-supabase): Update README env variables: #84745\r\n\r\n### Misc Changes\r\n\r\n- Turbopack: remove `css_environment` from `Environment`: #83487\r\n- Turbopack: Don't add client_runtime_entries to Route Handler compilation: #83655\r\n- Turbopack: Only load capsize-font-metrics once: #83654\r\n- [CI] Fix GitHub Actions matrix configuration for React versions: #83677\r\n- fix(Turbopack): Enable scope hoisting for large files or module counts: #83399\r\n- [turbopack] Lazily construct `resolved::Requests` for `EsmAssetReference`: #83662\r\n- Update content-security-policy.mdx, fix development environment error: #83665\r\n- tests: disable flaky deployment test while investigating upstream: #83705\r\n- [test] Update snapshots for Rspack + React 18: #83712\r\n- Docs/sep paper cuts: #83689\r\n- [Turbopack] Remove `ssr-data` module context: #83626\r\n- CI: use KV for test timing data: #83745\r\n- Emit build error when `'use cache'` directive is misspelled: #83756\r\n- docs(metadata): align default function export name with file name: #83796\r\n- [turbopack] Remove the `should_track_children` parameter of the turbo tasks backend: #83258\r\n- docs(data-security): add bun package manager example: #83735\r\n- Update next-intlayer reference in i18n doc: #83761\r\n- Update Rspack production test manifest: #83790\r\n- Update Rspack development test manifest: #83791\r\n- Turbopack: chunking debugging utilities: #83801\r\n- Removed link to maintain text consistency: #83644\r\n- Turbopack: rename some fields in fs: #83808\r\n- Turbopack: validate CSS without computing all paths: #83810\r\n- [test] Disable flaky navigation test: #83828\r\n- docs: Type narrowing using LayoutProps, PageProps: #83692\r\n- docs: implications of mutating cookies in server actions: #83691\r\n- Only retry if canary fails on required jobs: #83851\r\n- docs: Fix self-referential link to Middleware in middleware.mdx: #83854\r\n- Update Rspack production test manifest: #83826\r\n- Update generate-metadata.mdx: #81853\r\n- Turbopack: remove lazy invalidated tasks: #83845\r\n- Turbopack: remove Backend TaskState: #83846\r\n- Turbopack: don't recompute empty parse results: #83883\r\n- Turbopack: delete broken hmr benchmark: #83882\r\n- Turbopack: only generate error string in error case: #83884\r\n- docs: the as prop is still available in Pages Router: #83864\r\n- Turbopack: map_module_batch: #83885\r\n- Turbopack: Change run once signature to avoid exposing TaskId: #83844\r\n- docs: Update command to use `npx` for tracing files: #83903\r\n- Turbopack: ModuleGraphRef: #83890\r\n- Update Rspack development test manifest: #83876\r\n- Turbopack: make graph traversal sync: #83891\r\n- chore: Fix test snapshot: #83901\r\n- Update Rspack production test manifest: #83877\r\n- docs: add `next.config.ts` Node.js native resolver: #83561\r\n- Turbopack: add turbo_tasks::run to run in turbo tasks scope without a task: #83847\r\n- Turbopack: fix double codegen of some merged modules: #83886\r\n- Turbopack: add traces to merged module computation: #83908\r\n- Turbopack: RuleCondition support resourceQuery contains: #83468\r\n- fix: add the missing comma in the document example: #83932\r\n- Turbopack: Document the reasons for the current design of `parse_segment_config_from_source`: #83919\r\n- Turbopack: extract parse_source_map_comment: #83938\r\n- Turbopack: enable nodelay for node.js pool socket: #83942\r\n- feat: next-rspack-binding: #82811\r\n- Only send notification if canary fails on required jobs: #83953\r\n- Turbopack: allow to read State from turbo_tasks::run: #83955\r\n- Fix conclusion check for retry_test workflow: #83960\r\n- Add Descope to Auth libraries list: #83968\r\n- [turbopack] Track task durations in the task_statistics file: #83522\r\n- [turbopack] Remove the `issue_path` feature and related functionality: #83920\r\n- Turbopack: use turbo_tasks::run in next.js to avoid task memory leak: #83848\r\n- Update Rspack production test manifest: #83934\r\n- Update Rspack development test manifest: #83933\r\n- Turbopack: add test case that checks memory leak: #83849\r\n- Turbopack: read project strongly consistent in project_update: #83974\r\n- Fix output comparison when checking conclusion of required jobs: #83986\r\n- Turbopack: JsAnalyzer parse AssignExpr: #83962\r\n- Turbopack: less eager manifest generation: #83736\r\n- Turbopack: use depth as priority for merged module info: #83909\r\n- Turbopack: \"connect\" tasks in turbo_tasks::run too: #83975\r\n- Update Rspack production test manifest: #83979\r\n- Update Rspack development test manifest: #83980\r\n- Turbopack: Make transient tasks root tasks too when called in turbo_tasks::run: #83976\r\n- Turbopack: trace state changes: #83977\r\n- [turbopack] cleanup analyzer: #83983\r\n- [Turbopack] Fix AST traversal for `this` in function default parameters: #83746\r\n- [turbopack] Consolodate logic for visiting functions to simplify state management: #82763\r\n- [turbopack] Track the scope in which variables are assigned: #82845\r\n- [turbopack] Set `liveness` of exports based on assignment analysis: #82802\r\n- Turbopack: trace all state changes: #84053\r\n- docs: We have dropped the CORS example linked: #84065\r\n- docs: add pageExtensions note to Middleware and clarify default filename: #84045\r\n- Fix TypeScript type error in example code: #84041\r\n- Turbopack: fix test case and update project_update to turbo_tasks::run too: #83978\r\n- Turbopack: run tests with multiple threads: #84074\r\n- Turbopack: flush Node.js worker IPC on error: #84077\r\n- Turbopack: parallelize scope hoisting computation: #83904\r\n- Add test for JS resource size on navigation: #83731\r\n- Update Rspack development test manifest: #84061\r\n- Update Rspack production test manifest: #84060\r\n- Turbopack: Document automatic Babel config support: #84002\r\n- docs: Fix the title/path of the turbopack page on pages router: #84001\r\n- Turbopack: remove references from ChunkData: #84076\r\n- Turbopack: include availability hash in the ident of evaluated chunks groups: #84082\r\n- [turbopack] s/analyse/analyze/g: #84112\r\n- [Turbopack] avoid attaching referenced output assets to chunks: #75933\r\n- fix(docs): Fix links in UPGRADING.md: #84114\r\n- docs: improve dynamic routes example in project structure page: #84086\r\n- docs: onRequestError request header type: #83988\r\n- Turbopack: Improve persistent caching test case: #83205\r\n- Turbopack: add more details to the graph panic: #84126\r\n- docs: Cookies store access is async: #83987\r\n- Bump Rust to nightly-2025-09-21: #83415\r\n- Upgrade CodSpeed action and add analyzer benchmarks: #84135\r\n- Turbopack: fix run_once when returning error: #84142\r\n- [turbopack] Conditionally collect affecting sources: #83921\r\n- Turbopack: slightly improve resolve_source_map_sources: #84147\r\n- Turbopack: RawEcmascriptModule: #81806\r\n- Turbopack: add more details to the graph panic: #84143\r\n- test: split app-middleware test per describe: #84130\r\n- Update Rspack development test manifest: #84117\r\n- script: improve release log generation: #83686\r\n- Turbopack: split task_execution_completed into multiple methods: #84170\r\n- Turbopack: only generate field if spans are enabled: #84184\r\n- Turbopack: support more dynamic request with import map: #84178\r\n- [turbopack] defer a `value_to_string` operation until we need it: #84188\r\n- Update Rspack production test manifest: #84165\r\n- Revert \"[turbopack] Set `liveness` of exports based on assignment ana…: #84207\r\n- Turbopack: increase retry duration, reduce busy looping when there is other work: #84171\r\n- Turbopack: Try to avoid block_in_place in scope: #84172\r\n- [turbopack] Remove some bitmap clones: #84193\r\n- Turbopack: lazier manifests, part deux: #84191\r\n- Turbopack: avoid panic on updating output when a task was cancelled: #84214\r\n- docs: nav_title for long unbroken words: #84233\r\n- Turbopack: Use `RawValue` for `mappings` inside `SourceMapJson`: #84208\r\n- Update Rspack development test manifest: #84218\r\n- Turbopack: fix NFT of readFileSync of relative path: #84155\r\n- Turbopack: improve references benchmark: #84223\r\n- Update Rspack production test manifest: #84217\r\n- Turbopack: drop ASTs when only tracing: #84185\r\n- docs: Include more detailed instructions on excluding from common AV solutions, including macOS Gatekeeper: #84206\r\n- Turbopack: trace fs-extra calls: #84246\r\n- [test] Overhaul `Undefined default export` test suite: #84235\r\n- Turbopack: Scope with work queue: #84225\r\n- [test] Make `Undefined default export` an e2e test suite: #84240\r\n- [turbopack] Conditionally create pages router data endpoints.: #84194\r\n- Turbopack: parallel connect children: #84173\r\n- Turbopack: count turbo_tasks::run as foreground tasks to avoid being idle: #84245\r\n- Turbopack: make persistent caching log line more clear: #84262\r\n- Turbopack: make tracing nicer: #84263\r\n- docs:Small improvement on the contribution guide for clarity: #84200\r\n- Turbopack: Remove not-very-useful \"Finished writing to disk in\" log line: #84244\r\n- Turbopack: follow up changes from parallel children: #84219\r\n- [turbopack] Simplify take_issues and peek issues: #84199\r\n- Update Rspack development test manifest: #84260\r\n- Update Rspack production test manifest: #84259\r\n- Turbopack: Scope with work queue: #84225\r\n- [test] Make `Undefined default export` an e2e test suite: #84240\r\n- [turbopack] Conditionally create pages router data endpoints.: #84194\r\n- Turbopack: parallel connect children: #84173\r\n- Turbopack: count turbo_tasks::run as foreground tasks to avoid being idle: #84245\r\n- Turbopack: make persistent caching log line more clear: #84262\r\n- Turbopack: make tracing nicer: #84263\r\n- docs:Small improvement on the contribution guide for clarity: #84200\r\n- Turbopack: Remove not-very-useful \"Finished writing to disk in\" log line: #84244\r\n- Turbopack: follow up changes from parallel children: #84219\r\n- [turbopack] Simplify take_issues and peek issues: #84199\r\n- Update Rspack development test manifest: #84260\r\n- Update Rspack production test manifest: #84259\r\n- [test] Ignore pnpm update notifier: #84328\r\n- [test] Stop downloading unused test browsers when generating PR stats: #84329\r\n- docs: remove repeated to: #84325\r\n- Turbopack: Use more robust logic for absolute and percent-encoded URLs in source maps received from loaders: #84255\r\n- Turbopack: only replace edge dynamic calls in dev: #84354\r\n- [turbopack] Remove a bunch of dead code from the source map implementation: #84318\r\n- Turbopack: prevent duplicate NFT modules: #84369\r\n- docs: Remove AMP docs: #84357\r\n- docs: Type helpers don't need to be imported: #84265\r\n- Turbopack: Add docs for debugIds option: #84375\r\n- Remove references to size metrics in next build from our docs: #83823\r\n- Bump to swc v42: #83477\r\n- Turbopack: skip invalidating a task on cell/output change when the dependency is outdated: #84376\r\n- Turbopack: trace module.createRequire: #84335\r\n- Update failing e2e deploy tests: #84395\r\n- Turbopack: Webpack loader `this.fs.readFile`: #83313\r\n- Improve tests: #84374\r\n- Revamp Next.js boilerplate: #81945\r\n- Add test for twoslash: #84267\r\n- Docs/project structure polish: #84386\r\n- Bump to swc v44: #84420\r\n- Turbopack: don't fail for parse errors in tracing: #84408\r\n- Update Rspack development test manifest: #84365\r\n- Update Rspack production test manifest: #84366\r\n- [ci]: remove PPR-specific CI jobs: #84439\r\n- docs: Verbose troubleshooting for unconfigured hosts: #84271\r\n- Update Rspack production test manifest: #84398\r\n- Add gt-next to i18n list: #84396\r\n- [ci]: fix build-output-prerender to support segment cache env: #84467\r\n- [ci]: fix app-static snapshots with clientSegmentCache: #84468\r\n- Turbopack: Only benchmark file IO on `next dev`: #84474\r\n- Turbopack: improve incremental build performance when deployment id changes: #84460\r\n- fix: Missing link in Lazy Loading docs: #84473\r\n- docs: simplify streaming metadata: #84253\r\n- make withRspack idempotent: #84482\r\n- Turbopack: Use strongly consistent reads in `random_change` unit test: #84505\r\n- Update Rspack development test manifest: #84480\r\n- Update Rspack production test manifest: #84481\r\n- [ci]: remove test from segment cache manifest: #84507\r\n- [ci]: de-flake client cache test: #84517\r\n- Revert \"Turbopack: skip invalidating a task on cell/output change when the dependency is outdated\": #84526\r\n- next mcp router\r\n- Revert \"next mcp router\"\r\n- test: Use nextTestSetup in scss tests: #84501\r\n- [turbopack[ Use the configured hasher to implementh Hash for AutoMap and AutoSet: #84542\r\n- Turbopack: debug ids for server chunks: #84557\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-unit`: #84559\r\n- [test]: convert prefetching tests to be segmentCache compatible: #84521\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-prod`: #84556\r\n- Add `.next/dev/types` to CNA templates tsconfig include: #84566\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-integration`: #84558\r\n- Update Rspack development test manifest: #84548\r\n- Add a webpack flag to create next app.  Ensure that if you set it or decline turbopack we set the --webpack flag on the generated project: #84476\r\n- Update Rspack production test manifest: #84549\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-dev`: #84562\r\n- [test] Unflake static image test: #84535\r\n- Turbopack: Lower the IO concurrency limit in CI tests: #84508\r\n- Add documentation for experimental adapters handling: #83737\r\n- Turbopack: improve next/dynamic eventual consistentcy: #84560\r\n- fix hidden errors in router-act: #84603\r\n- fix(cna): use correct postcss plugins syntax: #79949\r\n- Turbopack: absolute requests in webpack loader: #84575\r\n- Update Rspack development test manifest: #84592\r\n- Update Rspack production test manifest: #84593\r\n- Turbopack: Remove workaround in hyper for rustc miscompilation bug on macos intel: #84578\r\n- Turbopack: add manual worker count override: #84454\r\n- Turbopack: don't ignore TS parse errors: #84597\r\n- Add middleware to routes order doc: #84618\r\n- [create-next-app]: prompt to use recommended options: #84570\r\n- Update labeler: #84623\r\n- Turbopack: use mmap advise to help the OS preloading: #84379\r\n- Turbopack: skip invalidating a task on cell/output change when the dependency is outdated: #84551\r\n- Turbopack: follow-up changes from untracked tracing: #84629\r\n- Turbopack: sourcemaps for JSON modules: #84611\r\n- Turbopack: avoid race condition when updating cells: #84598\r\n- docs: update core documentation for Turbopack as default bundler: #84282\r\n- Update Rspack development test manifest: #84631\r\n- [turbopack] Only send the filesystem caching timing messages for slow events: #84646\r\n- docs: `experimental.isolatedDevBuild`: #84656\r\n- docs: add note clarifying project root in monorepo: #84628\r\n- Fix flakey overlay feedback test: #84662\r\n- [ci]: update flake detection to only run in Turbopack: #84659\r\n- [ci]: move router-act to top level testing utils: #84653\r\n- [tests]: de-flake client-cache.parallel-routes.test.ts: #84655\r\n- [create-next-app]: add eslint to default template: #84661\r\n- Update Rspack production test manifest: #84630\r\n- [test] Assert on stable error codes: #84671\r\n- Turbopack: convert HashMap to IndexMap for deterministic tasks: #84641\r\n- Add note about $ACTION_ properties, remove reference to .entries(): #84459\r\n- Fix typo on welcome page: #84715\r\n- Rspack: Fix lockfile test on rspack: #84707\r\n- [turbopack] Emit a warning when there are too many matches from a FileSourceReference: #84701\r\n- Update beta tag: #84725\r\n- [next-codemod] fix: Set codemod version to the first introduced version: #84726\r\n- [next-upgrade] misc: update comment: #84727\r\n- Turbopack: use vector instead of hash map: #84696\r\n- Revert \"docs: nav_title for long unbroken words (#84233)\": #84346\r\n- [turbopack] tweak the doc on the inner graph optimization: #84752\r\n- [turbopack] Fix a few references to caching configuration as it is no longer canary guarded: #84761\r\n- Add 16.0.0-beta.0 to next/third-parties peerDeps: #84741\r\n- [eslint-plugin] Remove `eslint-v8` testing: #84721\r\n- Update Rspack production test manifest: #84729\r\n- Update Rspack development test manifest: #84730\r\n- fix: release next-rspack ci: #84673\r\n- [cna] Preserve existing config option when enabling React Compiler: #84663\r\n- Prevent failing `types-and-precompiled` from corrupting terminal output: #84799\r\n- Update test/CNA templates React version to 19.2.0: #84736\r\n- Turbopack: use the same serialization method for lookup as for storing: #84765\r\n- Turbopack: update petgraph: #84757\r\n- [turbopack] Issue 'too many matches' warning for DirAssets also: #84768\r\n- Revert \"Fix flakey overlay feedback test\": #84819\r\n- [test]: de-flake client-cache.original.test.ts: #84831\r\n- [ci]: set NEXT_TEST_VERSION to release tag for deploy tests: #84840\r\n- docs: soft 404's, Suspense and loading.tsx: #83867\r\n- [turbopack] Discuss Core Web vitals in our bundle size gap docs: #84837\r\n- [turbopack] document missing webpack loader features: #84849\r\n- [turbopack] fix typo in docs: #84868\r\n- [turbopack] Remove the implementation of `TaskInput` from `AutoSet`: #84867\r\n- Update turborepo env in workflows: #84879\r\n- Turbopack: take task cache log before starting snapshot: #84755\r\n- Turbopack: allow gzip compression on trace files: #84685\r\n- Turbopack: process task result as part of the task completion: #84638\r\n- Add test for eslint-config-next: #84838\r\n- Turbopack: lower level drop collectibles: #84895\r\n- docs: next/dynamic headings: #84492\r\n- Turbopack: expose client static assets correctly: #84695\r\n- Turbopack: better errors for strip_prefix_len: #84882\r\n- Turbopack: improve missing factory message: #84881\r\n- CNA: Update template to use ESLint Flat config: #84917\r\n- fix: process.env.TURBOPACK maybe undefined: #84885\r\n- Turbopack: fix spacing on EcmascriptModuleAssetType: #84915\r\n- Update Rspack development test manifest: #84890\r\n- Update Rspack production test manifest: #84891\r\n- Fix url-imports test: #84922\r\n- Turbopack: fix pageExtensions precedence: #84926\r\n- Turbopack: fix client reference order for shared references: #84760\r\n- Turbopack: turn panic into bail: #84927\r\n- Docs/sync with new features 0: #84861\r\n- Turbopack: transpile runtime with swc: #84931\r\n- docs: x-nextjs-stale-time header: #84901\r\n- docs: Templates on navigation: #84493\r\n- Docs/sync with new features 0: #84861\r\n- Turbopack: transpile runtime with swc: #84931\r\n- docs: x-nextjs-stale-time header: #84901\r\n- docs: Templates on navigation: #84493\r\n- chore: Attempt to fix ppr-partial-hydration flakiness: #84672\r\n- Update Rspack production test manifest: #84939\r\n- Turbopack: rename Persistent Caching: #84896\r\n- Turbopack: Add ChunkedVec test case: #84756\r\n- docs: Add missing codemod docs: #84980\r\n- Update prefetching.mdx providing more clarity on the usage of `router.prefetch()`: #84903\r\n- docs: getting started installation and next lint removal: #84781\r\n- docs: Split \"Get Started: Route Handlers and Middleware\" to Route Handlers and Proxy: #84708\r\n- docs: Replace Middleware docs to Proxy: #84709\r\n- chore: Remove redundant copy of rust reqwest crate: #84982\r\n- [turbopack] Allow withRspack to work even if you already have NEXT_RSPACK set: #84987\r\n- Turbopack: Track errored tasks as dependency when using untracked(): #84914\r\n- Turbopack: shard amount need to grow quadratic to cpu count to keep propability of conflicts constant: #84921\r\n- Turbopack: fix race condition when adding dependencies: #84946\r\n- Turbopack: make tracing warning not fail build: #85032\r\n- [ci]: increase number of runners for test jobs: #85049\r\n- add a message about Turbopack tracing: #85044\r\n- Turbopack: Implement next/font/local declarations option: #85051\r\n- docs: experimentalClientMaxBodySize: #85105\r\n- Docs: Add `--debug-build-paths` next build option: #85097\r\n- Docs: Add note on tag limits for `cacheTag`: #85106\r\n- docs: no switcher for TS only examples: #85109\r\n- fix: Handle non-directory files in cache folder when performing cleanup: #84930\r\n- Turbopack: Suggest using system certs when a TLS error occurs: #85009\r\n- [turbopack] Try to fix v8 crashes on github actions: #85114\r\n- docs: Update to Zod v4 syntax: #84807\r\n- Docs: Add version history for `next lint` deprecation and update error message: #85100\r\n- Turbopack: improve module evaluation name: #84633\r\n- [test] Current behavior of dynamic APIs integration with React DevTools: #85111\r\n- [Cache Components] fix env labels in perf track test: #85132\r\n- Turbopack: Disable LightningCSS MediaRangeSyntax feature: #85086\r\n- Don't expliclitly set the `--turbopack` flag in Create Next App, it is no longer necessary: #85117\r\n- [turbopack] Remove the canary icon from the cache components docs: #85149\r\n- Bump swc to v45: #85143\r\n- [test] Fix test-dev with --projects: #85167\r\n- [test] Update snapshots: #85171\r\n- docs: mcp: #85010\r\n- Docs: Explain Sass tilde import difference: #85041\r\n- Turbopack: don't fail on export type in use server: #85054\r\n- Turbopack: speedup module merging: #85043\r\n- docs: remove experimental_ppr route segment config: #85188\r\n- Rename \"blocking route\" error docs page: #85189\r\n- docs: upgrade from 15 to 16: #85176\r\n- Docs: Explain Sass tilde import difference: #85041\r\n- Turbopack: don't fail on export type in use server: #85054\r\n- Turbopack: speedup module merging: #85043\r\n- docs: remove experimental_ppr route segment config: #85188\r\n- Rename \"blocking route\" error docs page: #85189\r\n- docs: upgrade from 15 to 16: #85176\r\n\r\n### Credits\r\n\r\nHuge thanks to @mischnic, @timneutkens, @unstubbable, @wyattjoh, @Cy-Tek, @lukesandberg, @OoMNoO, @ztanner, @icyJoseph, @huozhi, @gnoff, @ijjk, @povilasv, @dwrth, @obendev, @aymericzip, @devjiwonchoi, @SyMind, @vercel-release-bot, @Shireee, @eps1lon, @dharun36, @kachkaev, @bgw, @yousefdawood7, @TheAlexLichter, @sokra, @ericx0099, @leerob, @Copilot, @fireairforce, @fufuShih, @anvibanga, @hayes, @Milancen123, @martinfrancois, @lubieowoce, @gaojude, @lachlanjc, @liketiger, @styfle, @aaronbrown-vercel, @Samii2383, @FelipeChicaiza, @kevva, @m1abdullahh, @F7b5, @Anshuman71, @RobertFent, @poteto, @chloe-yan, @sireesha-siri, @brian-lou, @joao4xz, @stefanprobst, @samselikoff, @acdlite, @gwkline, @bgub, @brock-statsig, @karlhorky, @feedthejim, @CarloQuick, @greguintow, @hallucinogenizer, @sebmarkbage, @delbaoliveira, @makandrr, @seeplusplus, and @serhalp for helping!"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.18",
    "date": "2025-10-21T23:44:31.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.18",
    "content": "### Core Changes\n\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\n- Update routes generation for build-complete: #85017\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\n- Don't assign displayName to the internal Promises: #85178\n- Assign name to hydration stream: #85179\n- fix: add backwards compat for middleware → proxy field renames: #85183\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\n- Improve Proxy invalid export error message: #84887\n- Fix Activity boundary names: #85185\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\n- [upgrade] Version gate adding `--turbopack` flag: #85180\n- Tweaks to blocking route error message: #85191\n- Remove layout-router sticky/fixed debug warning: #85193\n- [cache components] persist cache bypass UI until it's disabled: #85190\n- Only allow node runtime in proxy: #85139\n- logger: skip logging full element: #85194\n\n### Misc Changes\n\n- Docs: Explain Sass tilde import difference: #85041\n- Turbopack: don't fail on export type in use server: #85054\n- Turbopack: speedup module merging: #85043\n- docs: remove experimental_ppr route segment config: #85188\n- Rename \"blocking route\" error docs page: #85189\n- docs: upgrade from 15 to 16: #85176\n\n### Credits \n\nHuge thanks to @timneutkens, @gaojude, @ijjk, @ztanner, @sebmarkbage, @mischnic, @icyJoseph, @acdlite, @serhalp, @lukesandberg, @devjiwonchoi, and @huozhi for helping!\n"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.19",
    "date": "2025-10-21T23:39:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.19",
    "content": "### Core Changes\n\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\n- Update routes generation for build-complete: #85017\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\n- Don't assign displayName to the internal Promises: #85178\n- Assign name to hydration stream: #85179\n- fix: add backwards compat for middleware → proxy field renames: #85183\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\n- Improve Proxy invalid export error message: #84887\n- Fix Activity boundary names: #85185\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\n- [upgrade] Version gate adding `--turbopack` flag: #85180\n- Tweaks to blocking route error message: #85191\n- Remove layout-router sticky/fixed debug warning: #85193\n- [cache components] persist cache bypass UI until it's disabled: #85190\n- Only allow node runtime in proxy: #85139\n- logger: skip logging full element: #85194\n\n### Misc Changes\n\n- Docs: Explain Sass tilde import difference: #85041\n- Turbopack: don't fail on export type in use server: #85054\n- Turbopack: speedup module merging: #85043\n- docs: remove experimental_ppr route segment config: #85188\n- Rename \"blocking route\" error docs page: #85189\n- docs: upgrade from 15 to 16: #85176\n\n### Credits \n\nHuge thanks to @timneutkens, @gaojude, @ijjk, @ztanner, @sebmarkbage, @mischnic, @icyJoseph, @acdlite, @serhalp, @lukesandberg, @devjiwonchoi, and @huozhi for helping!\n"
  },
  {
    "title": "SnowCamp 2025 Autumn のすごくすごい進化",
    "date": "2025-10-21T23:24:06.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/dataheroes/articles/c5bf0e52cadff7",
    "content": "\n 前置き\nこんにちは。さすらいのデータエンジニアのこみぃです。\n暑すぎた夏がようやく終わりつつあり、季節は秋へと移ろう昨今ですが、皆様いかがお過ごしでしょうか？\nさて、前回大盛況だったリアルキャンプイベント、名付けてSnowCampの第二回が10/17-19に行われたので今回はそんな話をしましょう。\n\n 前回の様子\n前回のイベントの様子はこちらです。写真をばらっと眺めていただくだけでも楽しさが伝わるかと思います。\nhttps://zenn.dev/dataheroes/articles/5e5f6306fee20f\n\n 今回のすごくすごいポイント\n今回は第一回の反省を踏まえて様々な改善..."
  },
  {
    "title": "Claude Skills × GitHub Actions でバグ修正の自動化を試す！",
    "date": "2025-10-21T23:08:25.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kis9a/articles/claude-skills-pr-auto-fix",
    "content": "\n はじめに\n2025年10月、Anthropicから立て続けに2つの発表がありました。\n\n\n10月16日: Agent Skills - AIが自律的に使える「スキル」の仕組み\n\n10月20日: Claude Code on the web - ブラウザでコーディングエージェントを動かせる WebUI\n\n正直なところ、最初は「また新しい機能か」程度の印象でした。しかし、公式ドキュメントやコミュニティの反応を調べていくうちに、これが単なる機能追加ではないことに気づきました。\n特に興味を引かれたのは、 「Claude Skills がユーザーからの要求とスキルの説明に基づいて自律的に使用を..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.17",
    "date": "2025-10-21T16:38:00.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.17",
    "content": "### Core Changes\n\n- Fix subtree layout alignment for route summary in `next build`: #85137\n- [codemod] Remove runtime config when running `middleware-to-proxy`: #85075\n- [turbopack] Improve the multiple bundler flags messge to note that perhaps your `package.json` is the problem: #85118\n- Add Learn more docs to Middleware deprecation warning: #84711\n- [BF Cache]: skip lazyData fetch logic for inactive segments: #85142\n- Pass `startTime` to initial RSC payload stream: #85144\n- guard navigation `use` hooks for React 18: #85151\n- [turbopack] Don't warn on the lightning css experimental option: #84913\n- Turbopack: Remove redundant log line, increase delay for compiling log message: #85133\n- Make params and searchParams new Promises: #85158\n- Name \"cache\" streams for React DevTools: #85159\n- Use cacheMaxMemorySize config in default cache handler: #85153\n- Omit params to from client segments: #84883\n- enable experimental.routerBfCache behind cacheComponents: #84923\n- [Cache Components] Allow stale longer than expire in cacheLife: #85115\n- Update Activity names given to routes: #85155\n- use port zero for --inspect when forking, if used by parent: #85128\n- Update blocking prerender error message: #85087\n\n### Misc Changes\n\n- Turbopack: Disable LightningCSS MediaRangeSyntax feature: #85086\n- Don't expliclitly set the `--turbopack` flag in Create Next App, it is no longer necessary: #85117\n- [turbopack] Remove the canary icon from the cache components docs: #85149\n- Bump swc to v45: #85143\n- [test] Fix test-dev with --projects: #85167\n- [test] Update snapshots: #85171\n- docs: mcp: #85010\n\n### Credits \n\nHuge thanks to @eps1lon, @devjiwonchoi, @lukesandberg, @timneutkens, @ztanner, @acdlite, @mischnic, @bgw, @sebmarkbage, @wyattjoh, @gnoff, @huozhi, and @seeplusplus for helping!\n"
  },
  {
    "title": "†二分探索†で怠惰なカーソル移動をしよう",
    "date": "2025-10-21T15:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kamecha/articles/de680018133636",
    "content": "\n まえがき\nvim のカーソル移動…面倒臭いですよね…\n特に縦移動\nこれを補助するプラグイン等はあるのですが、ラベルを付けてそれを認知する必要があったりと、なかなかしっくり来るものが無い印象です\nそれもそのはずで、大体のものは明確な行き先があり、それに対して最小のキー数で移動する事を目標としてるんですよね\n自分の場合はそういうのではなくて、\nざっくりこの辺りに移動したいなぁ〜ってのがあって、そこへ大雑把に移動してから微調整みたいな感じなのが多いです\nマクロとか繰り返しを意識した場合ならまだしも通常時のカーソル移動なんぞ適当でいいし、脳のリソースを使いたくないぜ！のお気持ちです。\n特に文..."
  },
  {
    "title": "AWS DMS 3.5.4 におけるデータマスキングとパフォーマンス向上",
    "date": "2025-10-21T09:05:27.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-dms-data-masking-performance/",
    "content": "<p><em>本投稿は、Suchindranath Hegde と Mahesh Kansaraと Leonid Slepukhinと Sridhar Ramasubramanian による記事 「<a href=\"https://aws.amazon.com/jp/blogs/database/data-masking-and-performance-improvements-in-aws-dms-3-5-4/\" target=\"_blank\" rel=\"noopener\">Data masking and performance improvements in AWS DMS 3.5.4</a>」を翻訳したものです。</em></p> \n<p><a href=\"https://aws.amazon.com/dms/\" target=\"_blank\" rel=\"noopener\">AWS Database Migration Service (AWS DMS)</a> のレプリケーションエンジンバージョン 3.5.4 で新機能が利用可能になったことをお知らせできることを嬉しく思います。<br> このリリースには、セキュリティ強化のためのデータマスキングと、データ検証時のパフォーマンス向上という 2 つの主要な機能強化が含まれています。</p> \n<p>この投稿では、これら 2 つの機能について詳しく説明します。この新バージョンで利用可能なすべての新機能のリストは、<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReleaseNotes.html#CHAP_ReleaseNotes.DMS354\" target=\"_blank\" rel=\"noopener\">リリースノート</a>を参照してください。</p> \n<h2>セキュリティ強化のためのデータマスキング</h2> \n<p>データ保護を強化するため、お客様からデータマスキング機能のリクエストがありました。これにより、移行中にカラムレベルで機密データを変換し、GDPR などのデータ保護規制への準拠を支援します。AWS DMS を使用することで、カラムレベルで保護が必要な情報を編集したデータのコピーを作成できるようになりました。</p> \n<p>データベース移行中のお客様にとって最大の懸念事項の 1 つは、口座番号、電話番号、メールアドレスなどの機密情報の安全な取り扱いです。AWS DMS 3.5.4 では、3 つの柔軟な<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.SelectionTransformation.Masking.html\" target=\"_blank\" rel=\"noopener\">データ変換ルール</a>を実装しました：</p> \n<ul> \n <li>数字マスク</li> \n <li>数字のランダム化</li> \n <li>ハッシュマスク</li> \n</ul> \n<p>これらの変換ルールを説明するために、「EMPLOYEES」というテーブルを <a href=\"https://aws.amazon.com/rds/oracle/\" target=\"_blank\" rel=\"noopener\">Amazon RDS for Oracle インスタンス</a>から <a href=\"https://aws.amazon.com/rds/postgresql/\" target=\"_blank\" rel=\"noopener\">Amazon RDS for PostgreSQL</a> インスタンスに移行します。<br> 以下の手順を完了してください：</p> \n<ol start=\"1\"> \n <li>ソース (Oracle) インスタンスで以下のテーブル DDL を使用して EMPLOYEES テーブルを作成します：</li> \n</ol> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-bash\">CREATE TABLE EMPLOYEES (\n    EMPLOYEE_ID NUMBER(6) PRIMARY KEY,\n    FIRST_NAME VARCHAR2(50) NOT NULL,\n    LAST_NAME VARCHAR2(50) NOT NULL,\n    EMAIL VARCHAR2(100) UNIQUE,\n    PHONE_NUMBER VARCHAR2(20),\n    HIRE_DATE DATE NOT NULL,\n    JOB_TITLE VARCHAR2(50),\n    SALARY NUMBER(10,2),\n    DEPARTMENT_ID NUMBER(4),\n    MANAGER_ID NUMBER(6),\n    ACCOUNT_NUMBER VARCHAR2(20),\n    CREATED_DATE DATE DEFAULT SYSDATE \n  \n);\n CREATE SEQUENCE emp_seq \n    START WITH 1 \n    INCREMENT BY 1 \n    NOCACHE \n    NOCYCLE ;\n</code></pre> \n</div> \n<ol start=\"2\"> \n <li>EMPLOYEES テーブルにいくつかのレコードを挿入します。</li> \n</ol> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-bash\">INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_TITLE, SALARY, DEPARTMENT_ID, MANAGER_ID,ACCOUNT_NUMBER)\n VALUES (emp_seq.NEXTVAL, 'John', 'Smith', 'john.smith@company.com', '555-0101', DATE '2020-01-15', 'CEO', 150000, 10, NULL,'456-123-456-789');\n\n INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_TITLE, SALARY, DEPARTMENT_ID, MANAGER_ID,ACCOUNT_NUMBER)\n VALUES (emp_seq.NEXTVAL, 'Sarah', 'Johnson', 'sarah.johnson@company.com', '555-0102', DATE '2020-03-20', 'IT Director', 120000, 20, 1,'666-000-111-222');\n\n INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_TITLE, SALARY, DEPARTMENT_ID, MANAGER_ID,ACCOUNT_NUMBER)\n VALUES (emp_seq.NEXTVAL, 'Michael', 'Brown', 'michael.brown@company.com', '555-0103', DATE '2021-02-10', 'Software Engineer', 85000, 20, 2,'777-333-444-555');\n\n INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_TITLE, SALARY, DEPARTMENT_ID, MANAGER_ID,ACCOUNT_NUMBER)\n VALUES (emp_seq.NEXTVAL, 'Emily', 'Davis', 'emily.davis@company.com', '555-0104', DATE '2021-06-15', 'HR Manager', 75000, 30, 1,'899-987-654-321');\n\n INSERT INTO EMPLOYEES (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_TITLE, SALARY, DEPARTMENT_ID, MANAGER_ID,ACCOUNT_NUMBER)\n VALUES (emp_seq.NEXTVAL, 'David', 'Wilson', 'david.wilson@company.com', '555-0105', DATE '2022-01-20', 'Software Engineer', 80000, 20, 2,'567-111-222-333');</code></pre> \n</div> \n<ol start=\"3\"> \n <li>「移行のみ」または「移行および複製」オプションを使用して <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.Creating.html\" target=\"_blank\" rel=\"noopener\">AWS DMS タスクを作成</a> します。</li> \n</ol> \n<ol start=\"4\"> \n <li>次のテーブルマッピングルール JSON を使用して AWS DMS タスクを設定します。<code>ACCOUNT_NUMBER</code> 列には文字 <code>#</code>で、<code>PHONE_NUMBER</code>列には乱数で、<code>EMAIL</code>列にはハッシュでマスキングします。また、変換ルールを使用してすべての文字を小文字に変換するなど一部の文字を変換していますが、これはオプションです。</li> \n</ol> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-bash\">{\n&nbsp;&nbsp; &nbsp;\"rules\": [ \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"transformation\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"171087779\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"171087779\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-target\": \"column\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"ADMIN\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table-name\": \"EMPLOYEES\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"column-name\": \"ACCOUNT_NUMBER\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"data-masking-digits-mask\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"value\": \"*\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"old-value\": null \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"transformation\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"171057753\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"171057753\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-target\": \"column\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"ADMIN\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table-name\": \"EMPLOYEES\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"column-name\": \"PHONE_NUMBER\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"data-masking-digits-randomize\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"value\": null,\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"old-value\": null \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"transformation\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"169940283\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"169940283\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-target\": \"column\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"ADMIN\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table-name\": \"EMPLOYEES\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"column-name\": \"EMAIL\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"data-masking-hash-mask\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"value\": null,\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"old-value\": null \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"transformation\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"169926638\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"169926638\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-target\": \"column\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"%\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table-name\": \"%\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"column-name\": \"%\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"convert-lowercase\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"value\": null,\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"old-value\": null \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"transformation\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"169918368\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"169918368\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-target\": \"table\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"%\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table-name\": \"%\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"convert-lowercase\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"value\": null,\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"old-value\": null \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"transformation\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"169908300\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"169908300\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-target\": \"schema\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"%\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"convert-lowercase\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"value\": null,\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"old-value\": null \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-type\": \"selection\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-id\": \"169895493\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-name\": \"169895493\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"object-locator\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"schema-name\": \"ADMIN\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table-name\": \"EMPLOYEES\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"rule-action\": \"include\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"filters\": [] \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; ] \n}</code></pre> \n</div> \n<p>次の出力例では、データマスキングを適用した PostgreSQL インスタンスの出力を確認することができます:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-bash\">dmsdb=&gt; select employee_id,phone_number,email,account_number from admin.employees ;\n&nbsp; employee_id | phone_number | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; email &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | account_number \n-------------+--------------+------------------------------------------------------------------+-----------------\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 20 | 685-9897 &nbsp; &nbsp; | FDC2A4ABC53872D0F934B5614DDC312DAA165895065BB00A5986849AADE8C322 | ***-***-***-***\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 21 | 579-3441 &nbsp; &nbsp; | 3A4FA9FE0AA0A2B468EDF13A29A75C4E3A20650243143D834D7898D40AA0FA2F | ***-***-***-***\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 22 | 156-9277 &nbsp; &nbsp; | 0985B1D142A4067E397DF5AB56B03E3BF4857FB1F229CB39B49CE06E46B7AA98 | ***-***-***-***\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 23 | 238-5321 &nbsp; &nbsp; | D07EAB207F4F1366C1E35B35E33F7842FF3EEB2C80E47FDAEB0900B49EE77697 | ***-***-***-***\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 24 | 536-1233 &nbsp; &nbsp; | 3D438AF13A839ACDC24FD0CE8EB8C8C45083B90A31DF3583A88131614086C3B9 | ***-***-***-***\n(5 rows)</code></pre> \n</div> \n<p>以下の画像は、比較のために Oracle での出力例を示しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-61544 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-1.jpg\" alt=\"Oracle output for comparison\" width=\"844\" height=\"266\"></p> \n<p>前述の例では、データマスキング機能を使用して機密情報をマスキングする方法を示しました。詳細については、<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.SelectionTransformation.Masking.html\" target=\"_blank\" rel=\"noopener\">データマスキングを使用して機密情報を隠す</a>を参照してください。</p> \n<h2>データ検証パフォーマンスの強化</h2> \n<p>データの整合性を維持することは、どのデータベース移行においても重要ですが、多くの場合、時間とリソースを大量に消費するプロセスです。AWS DMS 3.5.4では、高速パーティション検証などの革新的な手法を使用して検証プロセスを合理化する<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.html#CHAP_Validating_Enhanced\" target=\"_blank\" rel=\"noopener\">拡張データ検証機能</a>によってこの課題に対処しています。</p> \n<p>強化されたデータ検証の主な利点には、以下のようなものがあります：</p> \n<ul> \n <li>レプリケーションインスタンスから AWS DMS のソースおよびターゲットエンドポイントへのリソース使用量の再分配</li> \n <li>潜在的なネットワーク使用量の減少</li> \n <li>LOB データ型を含まない幅広いテーブルに効率的</li> \n</ul> \n<p>拡張データ検証機能は、Oracle から PostgreSQL、SQL Server から PostgreSQL、Oracle から Oracle、SQL Server から SQL Server など、特定の AWS DMS による移行パスで利用できるようになりました。この機能を使用するには、環境が<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.html#CHAP_Validating_Enhanced\" target=\"_blank\" rel=\"noopener\">前提条件</a>を満たしていることを確認してください。</p> \n<p>AWS DMS が拡張データ検証を使用しているかどうかは、<a href=\"http://aws.amazon.com/cloudwatch\" target=\"_blank\" rel=\"noopener\">Amazon CloudWatch</a> ログを見れば確認できます。次のようなメッセージが表示されます:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-bash\">2025-02-12T21:23:26 [VALIDATOR ]I: Fast validation of table 'dbo'.'customer' : partition : 178 (partition_validator.c:1001)</code></pre> \n</div> \n<p>パフォーマンスの向上を定量化するために、以下のスクリーンショットに示す設定で <a href=\"https://www.hammerdb.com/benchmarks.html\" target=\"_blank\" rel=\"noopener\">HammerDB</a> を使用してベンチマークを実施しました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-2.png\"><img loading=\"lazy\" class=\"alignnone wp-image-61570 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-2.png\" alt=\"HammerDB 設定\" width=\"576\" height=\"328\"></a></p> \n<p>ベースラインとして、検証を無効にしたフルロードと変更データキャプチャ (CDC) タスクを作成し、約 9,300 万レコード (サイズ 15 GB) を <a href=\"https://aws.amazon.com/rds/sqlserver/\" target=\"_blank\" rel=\"noopener\">Amazon RDS for SQL Server</a> から <a href=\"https://aws.amazon.com/rds/aurora/\" target=\"_blank\" rel=\"noopener\">Amazon Aurora PostgreSQL 互換エディション</a> へ、合計 9 つのテーブルにわたって移行しました。</p> \n<p>次に、2 つの<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.html#CHAP_Validating.ValidationOnly\" target=\"_blank\" rel=\"noopener\">検証のみ</a>タスクを実行しました。1 つは AWS DMS 3.5.3 で、もう 1 つは AWS DMS 3.5.4 で、どちらも r6i.xlarge インスタンスを使用しました。<br> 検証を高速化するために、<code>PartitionSize</code> を 100,000 に、<code>ThreadCount</code> を 15 に増やしました：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-bash\">\"ValidationSettings\": {\n\"PartitionSize\": 100000,\n\"ThreadCount\": 15,\n\"ValidationOnly\": true \n}</code></pre> \n</div> \n<p>次のスクリーンショットは、エンジンバージョン 3.5.4 で実行されている AWS DMS レプリケーションインスタンスのリソース消費量を示しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-61547 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-3.jpg\" alt=\"エンジンバージョン 3.5.4 での CPU 使用率\" width=\"1292\" height=\"473\"></p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-61548 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-4.jpg\" alt=\"エンジンバージョン 3.5.4 におけるタスクメモリ使用量\" width=\"1292\" height=\"473\"></p> \n<p>次のスクリーンショットは、エンジンバージョン 3.5.3 で実行されている AWS DMS レプリケーションインスタンスのリソース消費量を示しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-61549 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-5.jpg\" alt=\"CPU utilization on engine version 3.5.3\" width=\"1292\" height=\"473\"></p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-61550 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-6.jpg\" alt=\"Task memory usage on engine version 3.5.3\" width=\"1292\" height=\"473\"></p> \n<p>AWS DMS 3.5.3 と比較して、AWS DMS 3.5.4 で実行した場合、検証のみのタスクの TaskMemoryUsage が 91% 減少し、基盤となるAWS DMS レプリケーションインスタンスの CPU 使用率が 95% 削減されることがわかります。検証のみのタスクを別に実行したいお客様は、この機能を使用して、AWS DMS レプリケーションインスタンスのコンピューティングとメモリをより有効に活用できます。</p> \n<h2>まとめ</h2> \n<p>この投稿では、AWS DMS 3.5.4 におけるデータマスキングと強化されたデータ検証の変換ルールについて説明しました。<br> データマスキング機能を実装することで、データベース移行プロセス全体を通じて機密情報を確実に保護できます。<br> 拡張データ検証機能により、DMS レプリケーションインスタンスのリソース消費を抑えながら、検証を実行するすべての利点を得ることができます。<br> これらの機能を試してみて、あなたのユースケースにどのように役立ったかをコメント欄でお聞かせください。</p> \n<h3><strong>著者について</strong></h3> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-61551 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-7-100x132.jpg\" alt=\"Suchindranath Hegde\" width=\"100\" height=\"132\"><strong>Suchindranath Hegde</strong> は Amazon Web Services のシニアデータ移行スペシャリストソリューションアーキテクトです。彼はお客様と協力して、AWS DMS を使用した AWS へのデータ移行に関するガイダンスと技術支援を提供しています。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-61552 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-8-100x132.jpg\" alt=\"Mahesh Kansara\" width=\"100\" height=\"132\"><strong>Mahesh Kansara</strong> は、Amazon Web Services のデータベースエンジニアリングマネージャーです。<br> 彼は開発およびエンジニアリングチームと密接に協力して、移行およびレプリケーションサービスの改善に取り組んでいます。<br> また、お客様と協力して、さまざまなデータベースおよび分析プロジェクトに関するガイダンスと技術支援を提供し、AWS を使用する際のソリューションの価値向上を支援しています。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-61553 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-9-100x130.jpg\" alt=\"Leonid Slepukhin\" width=\"100\" height=\"130\"><strong>Leonid Slepukhin</strong> は、Amazon Web Services の Database Migration Service (DMS) チームのシニアデータベースエンジニアです。<br> AWS DMS のコア機能の開発に取り組み、社内外の顧客が複雑なデータベース移行とレプリケーションの課題を解決するのを支援することを専門としています。<br> DMS の機能強化と、AWS クラウドへのデータベース移行を成功させるための技術的専門知識の提供に重点を置いています。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-61554 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/18/DBBBLOG-4611-10-100x132.jpg\" alt=\"Sridhar Ramasubramanian\" width=\"100\" height=\"132\"><strong>Sridhar Ramasubramanian</strong> は、AWS Database Migration Service チームのデータベースエンジニアです。<br> AWS のお客様のニーズにより適合するよう、DMS サービスの改善に取り組んでいます。</p>"
  },
  {
    "title": "PostgreSQL のアップグレード中に AWS DMS タスクを処理するためのベストプラクティス",
    "date": "2025-10-21T09:00:36.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-dms-upgrade-bestpractice/",
    "content": "<p><em>本投稿は、Veeramani A と Manoj Ponnurangam による記事 「<a href=\"https://aws.amazon.com/jp/blogs/database/best-practices-to-handle-aws-dms-tasks-during-postgresql-upgrades/\" target=\"_blank\" rel=\"noopener\">Best practices to handle AWS DMS tasks during PostgreSQL upgrades</a>」を翻訳したものです。</em></p> \n<p><a href=\"https://aws.amazon.com/dms/\" target=\"_blank\" rel=\"noopener\">AWS Database Migration Service</a> は、データのセキュリティとデータの整合性を提供しながら、データベースを Amazon Web Services (AWS) に移行およびレプリケーションするためのマネージドソリューションを提供します。AWS DMS は、ソースとターゲットのデータベースが同じエンジンを使用する <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/dm-migrating-data-postgresql.html\" target=\"_blank\" rel=\"noopener\">同種の移行</a>と、異なるデータベース環境間の <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\" target=\"_blank\" rel=\"noopener\">異種の移行</a>の両方に対応しています。</p> \n<p>AWS DMS は、PostgreSQL データベースから<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.Targets.html\" target=\"_blank\" rel=\"noopener\">サポートされているターゲット</a>へのデータ移行を容易にし、また<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.Sources.html\" target=\"_blank\" rel=\"noopener\">サポートされているソース</a>から PostgreSQL データベースへの移行も可能にします。これにより、企業がデータインフラストラクチャをクラウドに移行するための堅牢な経路を提供します。</p> \n<h2><strong>ソリューションの概要</strong></h2> \n<p>オープンソースの PostgreSQL は、頻繁に発生するバグ、セキュリティ問題、データ破損の問題の修正を含む<a href=\"https://www.postgresql.org/support/versioning/\" target=\"_blank\" rel=\"noopener\">新しいマイナーバージョンとメジャーバージョンをリリース</a>することがあります。一般的に、Amazon RDS は、<a href=\"https://aws.amazon.com/rds/faqs/#awt-content-topics\" target=\"_blank\" rel=\"noopener\">新しいエンジンバージョンが利用可能になってから 5 か月以内にサポート</a>することを目指しています。特定のバージョンがサポートされなくなった場合には PostgreSQL インスタンスをアップグレードする必要があります。問題の解決や新しい改善の導入、あるいはコンプライアンスの遵守やデータ保護のためにも PostgreSQL インスタンスをアップグレードする必要があります。</p> \n<p>進行中の AWS DMS タスクのソースまたはターゲットとして設定されている PostgreSQL データベースをアップグレードする場合は、これをアップグレード計画に組み込むことが重要です。</p> \n<p>この記事では、PostgreSQL のマイナーバージョンまたはメジャーバージョンへのアップグレード中に AWS DMS タスクを処理するためのベストプラクティスについて説明します。</p> \n<h2><strong>前提条件</strong></h2> \n<p>この記事のソリューションをテストするには、以下のリソースが必要です：</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Creating.html\" target=\"_blank\" rel=\"noopener\">AWS DMS レプリケーションインスタンス</a></li> \n <li><a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.CreatingConnecting.PostgreSQL.html\" target=\"_blank\" rel=\"noopener\">RDS for PostgreSQL または Amazon Elastic Compute Cloud（Amazon EC2）かオンプレミスで実行されている PostgreSQL</a></li> \n <li><a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Endpoints.Creating.html\" target=\"_blank\" rel=\"noopener\">ソースとターゲットのエンドポイント</a></li> \n <li>ソースまたはターゲットでPostgreSQLを指定する <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.Creating.html\" target=\"_blank\" rel=\"noopener\">AWS DMS タスク</a></li> \n</ul> \n<h2><strong>PostgreSQL のバージョンアップグレードの理解</strong></h2> \n<p>PostgreSQL のアップグレードが AWS DMS タスクにどのように影響するかを詳しく見る前に、PostgreSQL におけるメジャーバージョンとマイナーバージョンのアップグレードについて明確に理解しておきましょう。</p> \n<p>マイナーバージョンは、セキュリティの脆弱性を修正し、バグを修正し、一般的に新機能を追加しません。<br> マイナーリリースは内部ストレージ形式を変更せず、常に同じメジャーバージョン番号の前後のマイナーリリースと互換性があります。<br> 例えば、バージョン 14.10 は、バージョン 14.9 およびバージョン 14.16 と互換性があります。</p> \n<p>PostgreSQL のメジャーリリースでは、システムテーブル、データファイル、内部データストレージ形式も変更される可能性があります。RDS for PostgreSQL は、ネイティブの <a href=\"https://www.postgresql.org/docs/current/pgupgrade.html\" target=\"_blank\" rel=\"noopener\">pg_upgrade</a> ユーティリティを使用して、インスタンスを新しいメジャーバージョンにアップグレードします。アップグレードの詳細については、<a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html\" target=\"_blank\" rel=\"noopener\">Amazon RDS の PostgreSQL DB エンジンのアップグレード</a>をご参照ください。</p> \n<p>マイナーリリースとメジャーリリース、またはバージョンアップグレードのいずれもダウンタイムが発生するため、適切なメンテナンスウィンドウ内で実施する必要があります。できればデータベースへのクエリが最も少ない時間帯にスケジュールされたメンテナンスウィンドウをこのアップグレード作業のために計画することをお勧めします。</p> \n<h2><strong>AWS DMS と PostgreSQL の連携</strong></h2> \n<p>AWS DMS を使用して PostgreSQL ソースから PostgreSQL ターゲットにデータを移行する場合を想定しましょう。</p> \n<p>フルロード中、AWS DMS はソースの PostgreSQL データベースに接続し、テーブルマッピングで定義されたテーブルで <code>select *</code> を実行してデータをアンロードします。ソースから取得したデータは、PostgreSQL ターゲットに向けてレプリケーションインスタンスの CSV ファイルに書き込まれます。PostgreSQL ターゲットの場合、AWS DMS は <code>COPY</code> コマンドを使用して、CSV ファイルのデータをターゲットの PostgreSQL テーブルにロードします。</p> \n<p>移行中の継続的な変更を取り込むために、AWS DMS はソースの PostgreSQL データベースに論理レプリケーションスロットを作成します。スロットは、変更のストリームを表し、ソースの PostgreSQL データベースで実行された順序でクライアントに再生することができます。DMS は、レプリケーションスロットからの変更のロジカルデコーディングに <a href=\"https://aws.amazon.com/blogs/database/comparison-of-test_decoding-and-pglogical-plugins-in-amazon-aurora-postgresql-for-data-migration-using-aws-dms/\" target=\"_blank\" rel=\"noopener\">test_decoding または pglogical プラグイン</a> のいずれかを使用します。ソースの PostgreSQL データベースで <code>pglogical</code> プラグインが利用可能な場合、DMS は <code>pglogical</code> を使用してレプリケーションスロットを作成します。そうでない場合は、<code>test_decoding</code> プラグインが使用されます。ソースから読み取られた変更は、レプリケーションインスタンス上のソーターコンポーネントに渡されます。ソーターコンポーネントはトランザクションをコミット順にソートし、その後、DMS タスクの設定に基づいて、順次またはバッチモードでこれらの変更をターゲットデータベースに適用します。</p> \n<p>レプリケーションスロットは、フルロード + CDC および CDC のみのタスクにおいて重要な役割を果たします。<br> これは、ソースの PostgreSQL データベース上で必要なログ先行書き込み (WAL) ファイルを保持する役割を担っています。<br> ソースデータベース上でレプリケーションスロットが削除されると、DMS はソースデータベースからの継続的な変更を処理できなくなります。</p> \n<h2><strong>PostgreSQL のアップグレードが AWS DMS タスクに与える影響</strong></h2> \n<p>以下のセクションでは、ソースまたはターゲットの PostgreSQL データベースのマイナーバージョンまたはメジャーバージョンのアップグレード中に、DMS タスクをどのように扱うかについて説明します。</p> \n<h3><strong>ソース PostgreSQL データベースのアップグレード時</strong></h3> \n<p>フルロードのみの DMS タスクは、1 回限りのデータ移行用に設計されています。<br> これらのタスクは、ソースの PostgreSQL データベースのマイナーバージョンまたはメジャーバージョンのアップグレード後に安全に再開できます。</p> \n<p>フルロード + CDC および CDC のみの DMS タスクは、進行中の変更をターゲットデータベースに継続的に複製します。PostgreSQL のアップグレード中に、フルロード + CDC および CDC のみの DMS タスクを処理する場合、次のセクションのベストプラクティスに従ってください。</p> \n<h4><strong>マイナーリリースまたはバージョンアップグレード</strong></h4> \n<p>マイナーバージョンのアップグレードを行う前に、実行中の AWS DMS レプリケーションタスクを停止してください。マイナーバージョンのアップグレードが完了したら、DMS タスクを再開できます。</p> \n<h4><strong>メジャーバージョンアップグレード</strong></h4> \n<p>執筆時点で、DMS は PostgreSQL バージョン 9.4 以降 (9.x バージョン)、10.x、11.x、12.x、13.x、14.x、15.x、および 16.x をサポートしています。<br> メジャーバージョンアップグレードを実行する際は、レプリケーションインスタンスが新しい PostgreSQL バージョンをサポートしていることを確認してください。</p> \n<p><code>pg_upgrade</code> を使用してメジャーバージョンアップグレードを進めるには、ソースの PostgreSQL データベース上のレプリケーションスロットを削除する必要があります。これらのスロットを削除しないと、アップグレードプロセスに影響を与える可能性があります。レプリケーションスロットを削除せずにアップグレードを試みると、<code>pg_upgrade_precheck.log</code> に 1 つ以上の論理レプリケーションスロットによってブロックされたためインスタンスをアップグレードできなかったというメッセージが表示され、アップグレードは失敗します。ただし、レプリケーションスロットを削除すると AWS DMS タスクが無効になり、進行中のレプリケーションタスクを再開できなくなります。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61434\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_1.png\" alt=\"\" width=\"904\" height=\"150\"></p> \n<p>この問題に対処し、メジャーバージョンアップグレード中に進行中のレプリケーションタスクを管理するには、以下の手順を使用します：</p> \n<ol> \n <li>PostgreSQL データベースへのすべてのアプリケーション接続を停止します。以下を使用してアクティブな接続を監視します：</li> \n</ol> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-xml\">select * from pg_stat_activity where datname = 'database_name';</code></pre> \n</div> \n<p>必要に応じて、残りの接続を以下のコマンドで終了します：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-xml\">select pg_terminate_backend(pid) from pg_stat_activity where datname = 'database_name'and pid &lt;&gt; pg_backend_pid();</code></pre> \n</div> \n<ol start=\"2\"> \n <li>AWS DMS タスクのメトリクスを監視して、<code>CDCLatencySource</code>と<code>CDCLatencyTarget</code>の両方がゼロに近いことを確認します。これにより、DMS タスクが変更を遅延なく複製していることを確認できます。ターゲットで<code>awsdms_txn_state</code>を使用してタスクステータスを取得することもできます（タスク設定「<code>TaskRecoveryTableEnabled = True</code>」で有効にできます）。次の画像は、<code>CDCLatencySource</code>と<code>CDCLatencyTarget</code>の Cloudwatch メトリクスを示しています。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61435\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_2.png\" alt=\"\" width=\"1384\" height=\"479\"></p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61436\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_3.png\" alt=\"\" width=\"1384\" height=\"473\"></p> \n<ol start=\"3\"> \n <li>レイテンシーがゼロに近づいたら、実行中のアクティブなレプリケーション DMS タスクをすべて停止してください。</li> \n</ol> \n<ol start=\"4\"> \n <li>ソースの PostgreSQL データベースから既存のレプリケーションスロットを削除します。 \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-sql\">postgres=&gt; select * from pg_replication_slots ;\n slot_name | plugin | slot_type | datoid | database | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn | wal_status | safe_wal_size \n-----------------+-------------+-----------+--------+----------+-----------+--------+------------+------+-------------+-------------+-------------------+------------+---------------\n bb6jw1f3enambi4z_00014405_e3972613_00e2_4960_ae4c_fe267b1cfcde | test_decoding | logical | 14405 | postgres | f | f | | | 898 | 0/5936F798 | 0/5F1A3440 | reserved |\n\n(1 row)\n postgres=&gt; SELECT pg_drop_replication_slot('bb6jw1f3enambi4z_00014405_e3972613_00e2_4960_ae4c_fe267b1cfcde'); \n pg_drop_replication_slot \n--------------------------\n \n(1 row)</code></pre> \n  </div> </li> \n</ol> \n<ol start=\"5\"> \n <li>レプリケーションスロットがないことを確認してください。 \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-sql\">postgres=&gt; select * from pg_replication_slots ;\n slot_name | plugin | slot_type | datoid | database | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn | wal_status | safe_wal_size \n-----------+--------+-----------+--------+----------+-----------+--------+------------+------+-------------+-------------+-------------------+------------+---------------\n(0 rows)</code></pre> \n  </div> </li> \n</ol> \n<ol start=\"6\"> \n <li>PostgreSQLデータベースのインプレイスアップグレードを完了してください。</li> \n</ol> \n<ol start=\"7\"> \n <li>アップグレードプロセスが正常に完了したことを確認します。データベースレベルの検証チェックを実行して、アップグレード後にデータベースが期待通りに動作していることを確認します。アプリケーションを開始する前に、DMS タスクを処理するために <code>step 8</code> または <code>step 9</code> のいずれかに従ってください。</li> \n</ol> \n<ol start=\"8\"> \n <li>CDC のみのタスクを新しく作成してください。タスク設定で、<strong>ソーストランザクションの CDC 開始モード</strong>の<strong>カスタム CDC 開始モードを無効にする</strong>を選択します。古いタスクと同様に、他のタスク設定とテーブルマッピングを定義します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61437\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_4.png\" alt=\"\" width=\"904\" height=\"274\"></p> \n<p>タスクが作成されたら、CDC のみのタスクを開始します。これにより、ソースの PostgreSQL データベースに新しいレプリケーションスロットが作成され、レプリケーションスロットが作成された時点からの変更の移行が開始されます。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61438\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_5.png\" alt=\"\" width=\"904\" height=\"142\"></p> \n<ol start=\"9\"> \n <li>または、指定されたログシーケンス番号 (LSN) から開始する DMS CDC のみのタスクを使用して、ソース PostgreSQL データベースにレプリケーションスロットを手動で作成することもできます。ソースにレプリケーションスロットを作成し、<code>confirmed_flush_lsn</code> を記録してください。</li> \n</ol> \n<p><code>confirmed_flush_lsn</code> は、論理スロットのコンシューマーが PostgreSQL エンジンにデータを受信したことを確認した最後の LSN を表します。<br> この <code>LSN</code> より前にコミットされたトランザクションに対応するデータは、もはや利用できません。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61439\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_6.png\" alt=\"\" width=\"904\" height=\"188\"></p> \n<p>a. ソースエンドポイントの設定を変更し、ソース PostgreSQL データベースで作成した目的のスロットを <code>SlotName</code> として追加します。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61440\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_7.png\" alt=\"\" width=\"808\" height=\"366\"></p> \n<p>b. タスク設定を変更してください。<strong>カスタム CDC 開始モードを有効にする</strong>を選択し、<strong>ログシーケンス番号を指定する </strong>(訳者注 : DMS マネジメントコンソールの新しいナビゲーションの場合 「ネイティブな CDC 開始点」) を選択して、<code>confirmed_flush_lsn</code>から LSN を入力します。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-61441\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_8.png\" alt=\"\" width=\"830\" height=\"436\"></p> \n<ol start=\"10\"> \n <li>DMS タスクを開始し、変更が問題なくターゲットデータベースに移行されていることを確認します。</li> \n</ol> \n<ol start=\"11\"> \n <li>アプリケーションを起動し、DMS CDC レプリケーションを監視します。</li> \n</ol> \n<h3><strong>ターゲットの PostgreSQL データベースをアップグレードする時</strong></h3> \n<p>AWS DMS CDC は、ターゲットの PostgreSQL データベースのマイナーバージョンアップグレードの影響を受けません。<br> DMS のターゲットとして設定された PostgreSQL データベースをアップグレードする前に、DMS タスクを停止し、マイナーバージョンアップグレードが成功した後に再開してください。</p> \n<p>DMS のターゲットとして設定された PostgreSQL データベースでメジャーバージョンアップグレードを実行する場合：</p> \n<ul> \n <li>現在のレプリケーションインスタンスエンジンのバージョンが新しい PostgreSQL バージョンをサポートしていることを確認してください。</li> \n <li>新しいエンジンバージョンが現在のレプリケーションインスタンスバージョンでサポートされている場合は、AWS DMS タスクを停止し、メジャーバージョンのアップグレードを完了してから DMS タスクを再開できます。</li> \n <li>新しいエンジンバージョンが現在のレプリケーションインスタンスバージョンでサポートされていない場合は、DMS タスクを停止して、ターゲットの PostgreSQL データベースでメジャーバージョンのアップグレードを完了する必要があります。また、レプリケーションインスタンスを、ターゲットの PostgreSQL データベースの現在のバージョンをサポートするバージョンにアップグレードする必要があります。ターゲットデータベースとソースデータベースの両方が互換性のあるメジャーバージョンに更新されたら、DMSタスクを再開できます。</li> \n</ul> \n<h2><strong>クリーンアップ</strong></h2> \n<p>この投稿で作成したリソースを削除することで、変更を元に戻し、継続的な料金の発生を避けることができます：</p> \n<ol> \n <li>このソリューションのテストのために作成され、不要となった <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html\" target=\"_blank\" rel=\"noopener\">RDS for PostgreSQL インスタンス</a>と<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html\" target=\"_blank\" rel=\"noopener\">EC2 インスタンス</a>を削除します。</li> \n <li>このソリューションのテストのために作成された <a href=\"https://docs.aws.amazon.com/cli/latest/reference/dms/delete-replication-task.html\" target=\"_blank\" rel=\"noopener\">AWS DMS タスクを削除します</a>。</li> \n <li><a href=\"https://docs.aws.amazon.com/cli/latest/reference/dms/delete-endpoint.html\" target=\"_blank\" rel=\"noopener\">AWS DMS のソースエンドポイントとターゲットエンドポイントを削除します</a>。</li> \n <li><a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Deleting.html\" target=\"_blank\" rel=\"noopener\">AWS DMS レプリケーションインスタンスを削除します</a>。</li> \n</ol> \n<h2><strong>まとめ</strong></h2> \n<p>この投稿では、PostgreSQL データベースを AWS DMS のソースまたはターゲットとして構成している場合に、アップグレード時に DMS タスクをどのように扱うかについて説明しました。</p> \n<p>このソリューションを試してみて、フィードバックや質問をコメントで共有してください。</p> \n<h3>About the Authors</h3> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignnone size-thumbnail wp-image-61448 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_author_1-100x127.jpg\" alt=\"\" width=\"100\" height=\"127\"><strong>Veeramani A</strong> は Amazon Web Services のクラウドデータベースエンジニアで、AWS Database Migration Service とAmazon RDS for PostgreSQL で SME(Subject Matter Expert)を務めています。15 年以上にわたる多様なデータベーステクノロジーの経験を持つ彼は、AWS へのデータベース移行を進めるお客様に戦略的ガイダンスと技術的専門知識を提供しています。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-61449 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/04/15/DMS_blog_author_2.png\" alt=\"\" width=\"100\" height=\"130\"><strong>Manoj Ponnurangam</strong> は、Amazon Web Services のクラウドデータベースエンジニアとして働いています。彼はAmazon RDS for Oracle、Amazon RDS for PostgreSQL、AWS DMS の SME(Subject Matter Expert) です。Manoj はリレーショナルデータベースを15 年扱ってきた経験があります。彼はお客様と協力して、さまざまなデータベースや移行プロジェクトに関する指導や技術支援を提供しています。</p>"
  },
  {
    "title": "Claude Skills (Agent Skills) 入門",
    "date": "2025-10-21T07:25:00.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/explaza/articles/b3dde4451aa249",
    "content": "\n はじめに\nこんにちは、エクスプラザの@_mkazutakaです。\n今回は、10/16にAnthropicが発表した、Claude Skills(Agent Skills)について入門と題して紹介したいと思います。\nClaude SkillsなのかAgent Skillsなのか少し不明瞭なのですが、公式ニュースのTitleタグ以外にClaude Skillsというワードは見つけられなかったので、本記事ではClaude Skillsではなく、Agent Skillsというワードをつかっていきたいと思います。\n\n 公式リンク集\nとはいえ、この記事で書く内容自体はほぼ公式ドキュメントにかいて..."
  },
  {
    "title": "あなたは5年後必要な人材ですか？",
    "date": "2025-10-21T06:36:45.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/coconala/articles/c33e04818367b5",
    "content": "\n はじめに\nはじめまして、hibikiです。株式会社ココナラでプロダクト開発のエンジニアとして働いており、今年で3年目になります。\n直近では、開発エディタ「Cursor」の全社導入や「Claude Code」の活用推進といった、AIで開発組織全体の生産性を向上させる取り組みを担当しています。\nこうしたAI推進の業務に携わる中で、「AIを中心とした世界で、エンジニアとしての自分の価値、人材としてのポジショニングはどうあるべきか」を深く考えるようになりました。\nそんな問題意識を抱えていたタイミングで、すてぃおさんのClaude Code時代のソフトウェアエンジニア生存戦略という記事を拝見し..."
  },
  {
    "title": "OpenTelemetry が拡げる Gemini CLI の可観測性",
    "date": "2025-10-21T05:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/t_hayashi/articles/0fce56bbba5b6f",
    "content": "2025 年 10 月 20 日行われた Jagu'e'r クラウドネイティブ分科会 Meetup#20 に登壇させていただきました。\n「クラウドネイティブ × Gemini CLI」 をテーマに Long Session × 2 本・LT × 4 本が行われました。私は LT として、Gemini CLI のオブザーバビリティにフォーカスしてお話させていただきました。\nここでは、LT の中で話きれなかったこととして「AI エージェント × オブザーバビリティ」や「Semantic conventions for generative AI systems」の深掘りについてまとめていこう..."
  },
  {
    "title": "最新のNext.js15 / React19における実践的な設計方針とベストプラクティスを体系的にまとめました",
    "date": "2025-10-21T02:50:20.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/assign/articles/482e93693773e5",
    "content": "\n はじめに\nNext.js 15とReact 19が登場し、App Routerを中心とした新しい開発体験が標準となってきました。Server ComponentとClient Componentを意識したコンポーネント設計、データハンドリング、状態管理、キャッシュ戦略など、実務で求められる設計判断は多岐にわたります。\n筆者は、2023年7月のApp Routerリリース直後から現在まで、約2年に渡りNext.js（v13~15）を使った開発に携わってきました。 実際にApp Routerを使った開発では、情報が少ない中で様々な課題に直面し、最初に挙げたような複数観点での設計や実装判断..."
  },
  {
    "title": "uv × DockerでのPython開発環境構築方法",
    "date": "2025-10-21T02:50:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mkj/articles/3aaa36d6f35c08",
    "content": "松尾研究所では、Python開発における標準ツールとしてuvを推奨しています。uvはPythonのパッケージ管理ツールで、依存関係の管理や仮想環境の構築を自動化し、高速で再現性のある開発を可能にすることが特長です。\nPythonパッケージだけでなく、Node.jsやブラウザ周りのツールなど他の依存も扱うときには、uvとDockerを併用するケースもあるかと思います。Dockerのコンテナ上でuvを使用する方法について社内で話題になったとき、調べたところいくつか方法があることが分かったので、それぞれの方法の違いと松尾研究所推奨の環境構築方法についてまとめました。\n!\n本記事では、uv、Do..."
  },
  {
    "title": "Next.js 15 / React 19 実践設計ガイド 実装観点別のベストプラクティス",
    "date": "2025-10-21T02:44:31.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/k_mori/books/24320553af0956",
    "content": "Next.js 15とReact 19を使用したWebアプリケーション開発における、実践的な設計方針とベストプラクティスをまとめたガイドを作成しました。\n\n本書では、Next.js 15 / React 19を活用したモダンなWebアプリケーション開発における設計方針を、実装観点ごとに整理しています。App Routerを前提とし、ディレクトリ構成、コンポーネント設計、データ取得、データ更新、状態管理、キャッシュ戦略、エラーハンドリングといった各テーマについて、具体的なユースケースと実装手段を紹介します。"
  },
  {
    "title": "0からフロントエンドにテストを導入した話",
    "date": "2025-10-21T01:07:58.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/eversteel_tech/articles/c510e3f036b2bf",
    "content": "こんにちは。株式会社EVERSTEELで業務委託のソフトウェアエンジニアとして参画している日野原です。\n主にフロントエンドを担当しており、技術としてはNext.jsを使用しています。（詳しい技術内容はこちらを参照）\n少し前の話になりますが、ゼロからテストを導入したので、その過程や戦略について話していこうと思います。\nフロントエンドのテストを検討している方や、テストの運用方法を迷っている方の参考になるかと思います。\n\n Reactアプリにおけるテスト戦略と実践ガイド\n一昔前はフロントエンド開発においてテストはあまり重要視されていませんでした。\nしかし、フロントエンドの複雑さが増したため、最..."
  },
  {
    "title": "【イベント開催告知】企業の生成 AI 活用を加速する Dify Enterprise on AWS 〜セキュアなデータの活用とパートナー導入事例〜 (2025/11/21)",
    "date": "2025-10-21T00:43:19.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/dify-enterprise-on-aws-event-20251121/",
    "content": "<p>こんにちは！ アマゾン ウェブ サービス ジャパンのソリューションアーキテクト馬渕です。</p> \n<p>2025 年 11 月 21 日 (金) 15:30-17:00 、AWS Japan の目黒オフィスにて、Dify と AWS に関するイベント「<strong><a href=\"https://d2e7mz4alxgx8z.cloudfront.net/?TrafficSource=awsblog\">企業の生成 AI 活用を加速する Dify Enterprise on AWS 〜セキュアなデータの活用とパートナー導入事例〜</a></strong>」の開催が決定しました。社内の生成 AI 活用を加速するために Dify を利用したいお客様、すでに Dify を利用していてさらにセキュアなデータも扱いたいお客様、Dify Enterprise を利用したいものの導入・運用に不安をお持ちのお客様に、今後のさらなる活用のためのヒントをご提供します。</p> \n<p><span id=\"more-166796\"></span></p> \n<h2>Dify のご紹介と、 AWS とのシナジーのご紹介</h2> \n<p><a href=\"https://dify.ai/jp\">Dify</a> は、生成 AI アプリをノーコードで開発できるプラットフォームです。技術者以外でも AI アプリが作れる使いやすさから多くのお客様の注目を集めており、社内の生成 AI 基盤として PoC ・本番導入しているお客様が増えてきています。Dify には SaaS 利用するか自社の環境にセルフホストするかの 2 つの利用方法があり、後者のセルフホスト方式では多くのお客様が AWS 上で Dify をデプロイし、セキュアに社内の生成 AI 推進を実現しています。なお、前者の <a href=\"https://docs.dify.ai/en/getting-started/cloud#faqs\">Dify Cloud も AWS 上で稼働しており</a>、AWS 上での Dify の稼働実績を十分に裏付けるものになっています。</p> \n<p>また、AWS では、AWS 上に Dify をスケーラブルかつマネージドな環境でセルフホストするための <a href=\"https://github.com/aws-samples/dify-self-hosted-on-aws\">AWS CDK サンプル</a>や、それをワンクリックでデプロイするための <a href=\"https://aws-samples.github.io/sample-one-click-generative-ai-solutions/solutions/dify/\">AWS Generative AI Solution Box</a> を公開しています。また、<a href=\"https://catalog.us-east-1.prod.workshops.aws/workshops/95a3c231-2064-4a33-9a3d-624b7c11aaa6/ja-JP\">AWS 上に簡易な構成で Dify 環境を構築し、その上で AI アプリケーションを構築する方法を学ぶワークショップ</a>も公開しており、Dify を通じたお客様の生成 AI 活用をご支援しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/image-5-6.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166798\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/image-5-6.png\" alt=\"\" width=\"926\" height=\"590\"></a></p> \n<p style=\"text-align: center\">GitHub 上で公開している <a href=\"https://github.com/aws-samples/dify-self-hosted-on-aws\">Dify on AWS with CDK</a> サンプルのアーキテクチャ</p> \n<h2>Dify Enterprise のメリットとユースケース</h2> \n<p>そして、 Dify をエンタープライズ規模でセキュアに社内利用するのに役立つのが <a href=\"https://dify.ai/jp/enterprise\">Dify Enterprise</a> です。OSS 版 Dify の機能に加えて、自社 IdP とのシングルサインイン機能や、マルチワークスペースによるアプリケーション利用の細かい権限管理など、社内利用に役立つガバナンス向上のための機能を備えています。<a href=\"https://aws.amazon.com/marketplace/pp/prodview-vhluia2quhiuu\">Dify Enterprise のライセンスは AWS Marketplace 上でも購入可能</a>になっており、これを用いて AWS 上にデプロイすればセルフホスト時の基盤の費用とライセンス費用を効率的に管理することが可能です。</p> \n<p>Dify Enterprise を利用することで特にメリットのあるユースケースの 1 つが、セキュアなデータソースとの連携です。Dify には様々な SaaS やアプリケーションと連携できるプラグインのエコシステムがあり、例えば企業のデータウェアハウスと連携して社内データを活用した生成 AI アプリケーションを構築できます。Dify Enterprise の権限管理機能では、アプリケーションやプラグインへの細やかなアクセス可否を制御できるため、公開範囲が厳密なデータソースを連携するアプリケーションであっても安心して組み込むことが可能になります。</p> \n<h2>11/21(金) のイベントの詳細</h2> \n<p>今回のイベントでは、企業で社内の生成 AI 活用を推進する方を対象に、Dify Enterprise をご活用いただくための情報をご提供いたします。Dify の最新情報アップデートや、 Dify Enterprise ならではのセキュアなデータを扱うユースケースのご紹介に加えて、Dify の Eliter Partner でもあり AWS パートナーでもある株式会社リコー様にもご登壇いただき、Dify Enterprise の構築・運用のナレッジについてご共有いただきます。</p> \n<h3>開催概要</h3> \n<ul> \n <li>タイトル : <a href=\"https://d2e7mz4alxgx8z.cloudfront.net/?TrafficSource=awsblog\"><strong>企業の生成 AI 活用を加速する Dify Enterprise on AWS 〜セキュアなデータの活用とパートナー導入事例〜</strong></a></li> \n <li>日時 : 2025年11月21日（金）15:30-17:00 (15:00 開場) \n  <ul> \n   <li>終了後、懇親会あり</li> \n  </ul> </li> \n <li>参加費 : 無料</li> \n <li>お申し込み方法 : イベントの<a href=\"https://d2e7mz4alxgx8z.cloudfront.net/?TrafficSource=awsblog\">ランディングページ</a>よりフォームにアクセスしてお申し込みください</li> \n <li>開催場所 : 〒153-0064 東京都目黒区下目黒1-8-1 ARCO TOWER 19 F \n  <ul> \n   <li>JR線・東急目黒線・東京メトロ南北線・都営地下鉄三田線 目黒駅より徒歩約5分</li> \n   <li>[<a href=\"https://maps.app.goo.gl/uQK4JpGpmbs48Vhy6\">google map</a>] [<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/Japanese_AccessMAP_ArcoTower.pdf\">ARCO TOWERへのアクセス方法</a>]</li> \n  </ul> </li> \n</ul> \n<h3>アジェンダ</h3> \n<table border=\"1\" cellspacing=\"1\" cellpadding=\"10\"> \n <tbody> \n  <tr> \n   <td>開始</td> \n   <td>終了</td> \n   <td>コンテンツ</td> \n   <td>プレゼンター</td> \n  </tr> \n  <tr> \n   <td>15:30</td> \n   <td>15:35</td> \n   <td>オープニング</td> \n   <td>アマゾン ウェブ サービス ジャパン 合同会社</td> \n  </tr> \n  <tr> \n   <td>15:35</td> \n   <td>15:55</td> \n   <td>Dify Updates : RAG 2.0, MCP</td> \n   <td>株式会社 LangGenius</td> \n  </tr> \n  <tr> \n   <td>15:55</td> \n   <td>16:15</td> \n   <td>Dify Enterprise でセキュアなデータを扱おう<br> 〜Snowflake と連携してインサイトを生む〜</td> \n   <td>株式会社 LangGenius<br> アマゾン ウェブ サービス ジャパン 合同会社</td> \n  </tr> \n  <tr> \n   <td>16:15</td> \n   <td>16:30</td> \n   <td>Dify on AWS の選択肢と、AWS で Dify を使う理由</td> \n   <td>アマゾン ウェブ サービス ジャパン 合同会社</td> \n  </tr> \n  <tr> \n   <td>16:30</td> \n   <td>16:50</td> \n   <td>パートナーと進める Dify 活用</td> \n   <td>株式会社リコー</td> \n  </tr> \n  <tr> \n   <td>16:50</td> \n   <td>17:00</td> \n   <td>Q&amp;A / クロージング</td> \n   <td>アマゾン ウェブ サービス ジャパン 合同会社</td> \n  </tr> \n  <tr> \n   <td>17:00</td> \n   <td>18:00</td> \n   <td>懇親会</td> \n   <td>–</td> \n  </tr> \n </tbody> \n</table> \n<p>※ アジェンダやスピーカーは変更となる可能性がございます。</p> \n<h3>こんな課題をお持ちのお客様に</h3> \n<ul> \n <li>機密性の高いシステムと生成 AI の安全な連携方法を模索している</li> \n <li>部門やプロジェクトごとに異なるセキュリティレベルでの AI 活用を検討している</li> \n <li>コンプライアンスを確保しながら生成 AI の全社展開を進めたい</li> \n <li>Dify を活用したいが、その導入・運用のナレッジやリソースに不安がある</li> \n</ul> \n<h3>お申し込み方法</h3> \n<p>イベントの<a href=\"https://d2e7mz4alxgx8z.cloudfront.net/?TrafficSource=awsblog\">ランディングページ</a>よりフォームにアクセスしてお申し込みください。会場の定員の都合上、抽選とさせていただく場合がございますのでご了承ください。ご不安・ご不明点がある場合は、 AWS の担当営業にお声がけください。</p>"
  },
  {
    "title": "RAGが苦手な「ぬるっとした日本語」と戦う",
    "date": "2025-10-21T00:01:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/knowledgesense/articles/83c89503b6531b",
    "content": "本記事では、RAGの性能を高めるための「DualCSE」という手法について、ざっくり理解します。\n株式会社ナレッジセンスは、生成AIやRAGを使ったプロダクトを、エンタープライズ企業向けに開発しているスタートアップです。\n\n この記事は何\nこの記事は、日本語特有の「あいまいな婉曲表現」（=ぬるっとした日本語）を含む文章でもRAGの精度を上げるための手法「DualCSE」の論文[1]について、日本語で簡単にまとめたものです。\nhttps://arxiv.org/abs/2510.09293\n今回も「そもそもRAGとは？」については、知っている前提で進みます。確認する場合は、こちらの記事もご..."
  },
  {
    "title": "nodejs/node – 2025-10-20, Version 22.21.0 'Jod' (LTS), @aduh95",
    "date": "2025-10-20T23:56:15.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v22.21.0",
    "content": "\n\n\n### Notable Changes\n\n* \\[[`1486fedea1`](https://github.com/nodejs/node/commit/1486fedea1)] - **(SEMVER-MINOR)** **cli**: add `--use-env-proxy` (Joyee Cheung) [#59151](https://github.com/nodejs/node/pull/59151)\n* \\[[`bedaaa11fc`](https://github.com/nodejs/node/commit/bedaaa11fc)] - **(SEMVER-MINOR)** **http**: support http proxy for fetch under `NODE_USE_ENV_PROXY` (Joyee Cheung) [#57165](https://github.com/nodejs/node/pull/57165)\n* \\[[`af8b5fa29d`](https://github.com/nodejs/node/commit/af8b5fa29d)] - **(SEMVER-MINOR)** **http**: add `shouldUpgradeCallback` to let servers control HTTP upgrades (Tim Perry) [#59824](https://github.com/nodejs/node/pull/59824)\n* \\[[`42102594b1`](https://github.com/nodejs/node/commit/42102594b1)] - **(SEMVER-MINOR)** **http,https**: add built-in proxy support in `http`/`https.request` and `Agent` (Joyee Cheung) [#58980](https://github.com/nodejs/node/pull/58980)\n* \\[[`686ac49b82`](https://github.com/nodejs/node/commit/686ac49b82)] - **(SEMVER-MINOR)** **src**: add percentage support to `--max-old-space-size` (Asaf Federman) [#59082](https://github.com/nodejs/node/pull/59082)\n\n### Commits\n\n* \\[[`a71dd592e3`](https://github.com/nodejs/node/commit/a71dd592e3)] - **benchmark**: calibrate config dgram multi-buffer (Bruno Rodrigues) [#59696](https://github.com/nodejs/node/pull/59696)\n* \\[[`16c4b466f4`](https://github.com/nodejs/node/commit/16c4b466f4)] - **benchmark**: calibrate config cluster/echo.js (Nam Yooseong) [#59836](https://github.com/nodejs/node/pull/59836)\n* \\[[`53cb9f3b6c`](https://github.com/nodejs/node/commit/53cb9f3b6c)] - **build**: add the missing macro definitions for OpenHarmony (hqzing) [#59804](https://github.com/nodejs/node/pull/59804)\n* \\[[`ec5290fe01`](https://github.com/nodejs/node/commit/ec5290fe01)] - **build**: do not include custom ESLint rules testing in tarball (Antoine du Hamel) [#59809](https://github.com/nodejs/node/pull/59809)\n* \\[[`1486fedea1`](https://github.com/nodejs/node/commit/1486fedea1)] - **(SEMVER-MINOR)** **cli**: add --use-env-proxy (Joyee Cheung) [#59151](https://github.com/nodejs/node/pull/59151)\n* \\[[`1f93913446`](https://github.com/nodejs/node/commit/1f93913446)] - **crypto**: use `return await` when returning Promises from async functions (Renegade334) [#59841](https://github.com/nodejs/node/pull/59841)\n* \\[[`f488b2ff73`](https://github.com/nodejs/node/commit/f488b2ff73)] - **crypto**: use async functions for non-stub Promise-returning functions (Renegade334) [#59841](https://github.com/nodejs/node/pull/59841)\n* \\[[`aed9fd5ac4`](https://github.com/nodejs/node/commit/aed9fd5ac4)] - **crypto**: avoid calls to `promise.catch()` (Renegade334) [#59841](https://github.com/nodejs/node/pull/59841)\n* \\[[`37c2d186f0`](https://github.com/nodejs/node/commit/37c2d186f0)] - **deps**: update amaro to 1.1.4 (pmarchini) [#60044](https://github.com/nodejs/node/pull/60044)\n* \\[[`28aea13419`](https://github.com/nodejs/node/commit/28aea13419)] - **deps**: update archs files for openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\n* \\[[`ddbc1aa0bb`](https://github.com/nodejs/node/commit/ddbc1aa0bb)] - **deps**: upgrade openssl sources to openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\n* \\[[`badbba2da9`](https://github.com/nodejs/node/commit/badbba2da9)] - **deps**: update googletest to 50b8600 (Node.js GitHub Bot) [#59955](https://github.com/nodejs/node/pull/59955)\n* \\[[`48aaf98a08`](https://github.com/nodejs/node/commit/48aaf98a08)] - **deps**: update archs files for openssl-3.5.3 (Node.js GitHub Bot) [#59901](https://github.com/nodejs/node/pull/59901)\n* \\[[`e02a562ea6`](https://github.com/nodejs/node/commit/e02a562ea6)] - **deps**: upgrade openssl sources to openssl-3.5.3 (Node.js GitHub Bot) [#59901](https://github.com/nodejs/node/pull/59901)\n* \\[[`7e0e86cb92`](https://github.com/nodejs/node/commit/7e0e86cb92)] - **deps**: upgrade npm to 10.9.4 (npm team) [#60074](https://github.com/nodejs/node/pull/60074)\n* \\[[`91dda5facf`](https://github.com/nodejs/node/commit/91dda5facf)] - **deps**: update undici to 6.22.0 (Matteo Collina) [#60112](https://github.com/nodejs/node/pull/60112)\n* \\[[`3a3220a2f0`](https://github.com/nodejs/node/commit/3a3220a2f0)] - **dgram**: restore buffer optimization in fixBufferList (Yoo) [#59934](https://github.com/nodejs/node/pull/59934)\n* \\[[`09bdcce6b8`](https://github.com/nodejs/node/commit/09bdcce6b8)] - **diagnostics\\_channel**: fix race condition with diagnostics\\_channel and GC (Ugaitz Urien) [#59910](https://github.com/nodejs/node/pull/59910)\n* \\[[`b3eeb3bd13`](https://github.com/nodejs/node/commit/b3eeb3bd13)] - **doc**: provide alternative to `url.parse()` using WHATWG URL (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\n* \\[[`1ddaab1904`](https://github.com/nodejs/node/commit/1ddaab1904)] - **doc**: mention reverse proxy and include simple example (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\n* \\[[`3b3b71e99c`](https://github.com/nodejs/node/commit/3b3b71e99c)] - **doc**: mark `.env` files support as stable (Santeri Hiltunen) [#59925](https://github.com/nodejs/node/pull/59925)\n* \\[[`d37f67d1bd`](https://github.com/nodejs/node/commit/d37f67d1bd)] - **doc**: remove optional title prefixes (Aviv Keller) [#60087](https://github.com/nodejs/node/pull/60087)\n* \\[[`ca2dff63f9`](https://github.com/nodejs/node/commit/ca2dff63f9)] - **doc**: fix typo on child\\_process.md (Angelo Gazzola) [#60114](https://github.com/nodejs/node/pull/60114)\n* \\[[`3fca564a05`](https://github.com/nodejs/node/commit/3fca564a05)] - **doc**: add automated migration info to deprecations (Augustin Mauroy) [#60022](https://github.com/nodejs/node/pull/60022)\n* \\[[`4bc366fc16`](https://github.com/nodejs/node/commit/4bc366fc16)] - **doc**: use \"WebAssembly\" instead of \"Web Assembly\" (Tobias Nießen) [#59954](https://github.com/nodejs/node/pull/59954)\n* \\[[`4808dbdd9a`](https://github.com/nodejs/node/commit/4808dbdd9a)] - **doc**: fix typo in section on microtask order (Tobias Nießen) [#59932](https://github.com/nodejs/node/pull/59932)\n* \\[[`d6e303d645`](https://github.com/nodejs/node/commit/d6e303d645)] - **doc**: update V8 fast API guidance (René) [#58999](https://github.com/nodejs/node/pull/58999)\n* \\[[`0a3a3f729e`](https://github.com/nodejs/node/commit/0a3a3f729e)] - **doc**: add security escalation policy (Ulises Gascón) [#59806](https://github.com/nodejs/node/pull/59806)\n* \\[[`8fd669c70d`](https://github.com/nodejs/node/commit/8fd669c70d)] - **doc**: type improvement of file `http.md` (yusheng chen) [#58189](https://github.com/nodejs/node/pull/58189)\n* \\[[`9833dc6060`](https://github.com/nodejs/node/commit/9833dc6060)] - **doc**: rephrase dynamic import() description (Nam Yooseong) [#59224](https://github.com/nodejs/node/pull/59224)\n* \\[[`2870a73681`](https://github.com/nodejs/node/commit/2870a73681)] - **doc,crypto**: update subtle.generateKey and subtle.importKey (Filip Skokan) [#59851](https://github.com/nodejs/node/pull/59851)\n* \\[[`85818db93c`](https://github.com/nodejs/node/commit/85818db93c)] - **fs,win**: do not add a second trailing slash in readdir (Gerhard Stöbich) [#59847](https://github.com/nodejs/node/pull/59847)\n* \\[[`bedaaa11fc`](https://github.com/nodejs/node/commit/bedaaa11fc)] - **(SEMVER-MINOR)** **http**: support http proxy for fetch under NODE\\_USE\\_ENV\\_PROXY (Joyee Cheung) [#57165](https://github.com/nodejs/node/pull/57165)\n* \\[[`af8b5fa29d`](https://github.com/nodejs/node/commit/af8b5fa29d)] - **(SEMVER-MINOR)** **http**: add shouldUpgradeCallback to let servers control HTTP upgrades (Tim Perry) [#59824](https://github.com/nodejs/node/pull/59824)\n* \\[[`758271ae66`](https://github.com/nodejs/node/commit/758271ae66)] - **http**: optimize checkIsHttpToken for short strings (방진혁) [#59832](https://github.com/nodejs/node/pull/59832)\n* \\[[`42102594b1`](https://github.com/nodejs/node/commit/42102594b1)] - **(SEMVER-MINOR)** **http,https**: add built-in proxy support in http/https.request and Agent (Joyee Cheung) [#58980](https://github.com/nodejs/node/pull/58980)\n* \\[[`a33ed9bf96`](https://github.com/nodejs/node/commit/a33ed9bf96)] - **inspector**: ensure adequate memory allocation for `Binary::toBase64` (René) [#59870](https://github.com/nodejs/node/pull/59870)\n* \\[[`34c686be2b`](https://github.com/nodejs/node/commit/34c686be2b)] - **lib**: update inspect output format for subclasses (Miguel Marcondes Filho) [#59687](https://github.com/nodejs/node/pull/59687)\n* \\[[`12e553529c`](https://github.com/nodejs/node/commit/12e553529c)] - **lib**: add source map support for assert messages (Chengzhong Wu) [#59751](https://github.com/nodejs/node/pull/59751)\n* \\[[`d2a70571f8`](https://github.com/nodejs/node/commit/d2a70571f8)] - **lib,src**: refactor assert to load error source from memory (Chengzhong Wu) [#59751](https://github.com/nodejs/node/pull/59751)\n* \\[[`20a9e86b5d`](https://github.com/nodejs/node/commit/20a9e86b5d)] - **meta**: move Michael to emeritus (Michael Dawson) [#60070](https://github.com/nodejs/node/pull/60070)\n* \\[[`c591cca15c`](https://github.com/nodejs/node/commit/c591cca15c)] - **meta**: bump github/codeql-action from 3.30.0 to 3.30.5 (dependabot\\[bot]) [#60089](https://github.com/nodejs/node/pull/60089)\n* \\[[`090ba141b1`](https://github.com/nodejs/node/commit/090ba141b1)] - **meta**: bump codecov/codecov-action from 5.5.0 to 5.5.1 (dependabot\\[bot]) [#60091](https://github.com/nodejs/node/pull/60091)\n* \\[[`a0ba6884a5`](https://github.com/nodejs/node/commit/a0ba6884a5)] - **meta**: bump actions/stale from 9.1.0 to 10.0.0 (dependabot\\[bot]) [#60092](https://github.com/nodejs/node/pull/60092)\n* \\[[`0feca0c541`](https://github.com/nodejs/node/commit/0feca0c541)] - **meta**: bump actions/setup-node from 4.4.0 to 5.0.0 (dependabot\\[bot]) [#60093](https://github.com/nodejs/node/pull/60093)\n* \\[[`7cd2b42d18`](https://github.com/nodejs/node/commit/7cd2b42d18)] - **meta**: bump step-security/harden-runner from 2.12.2 to 2.13.1 (dependabot\\[bot]) [#60094](https://github.com/nodejs/node/pull/60094)\n* \\[[`1f3b9d66ac`](https://github.com/nodejs/node/commit/1f3b9d66ac)] - **meta**: bump actions/cache from 4.2.4 to 4.3.0 (dependabot\\[bot]) [#60095](https://github.com/nodejs/node/pull/60095)\n* \\[[`0fedbb3de7`](https://github.com/nodejs/node/commit/0fedbb3de7)] - **meta**: bump ossf/scorecard-action from 2.4.2 to 2.4.3 (dependabot\\[bot]) [#60096](https://github.com/nodejs/node/pull/60096)\n* \\[[`04590b8267`](https://github.com/nodejs/node/commit/04590b8267)] - **meta**: bump actions/setup-python from 5.6.0 to 6.0.0 (dependabot\\[bot]) [#60090](https://github.com/nodejs/node/pull/60090)\n* \\[[`2bf0a9318f`](https://github.com/nodejs/node/commit/2bf0a9318f)] - **meta**: add .npmrc with ignore-scripts=true (Joyee Cheung) [#59914](https://github.com/nodejs/node/pull/59914)\n* \\[[`e10dc7b81c`](https://github.com/nodejs/node/commit/e10dc7b81c)] - **module**: allow overriding linked requests for a ModuleWrap (Chengzhong Wu) [#59527](https://github.com/nodejs/node/pull/59527)\n* \\[[`2237142369`](https://github.com/nodejs/node/commit/2237142369)] - **module**: link module with a module request record (Chengzhong Wu) [#58886](https://github.com/nodejs/node/pull/58886)\n* \\[[`6d24b88fbc`](https://github.com/nodejs/node/commit/6d24b88fbc)] - **node-api**: added SharedArrayBuffer api (Mert Can Altin) [#59071](https://github.com/nodejs/node/pull/59071)\n* \\[[`4cc84c96f4`](https://github.com/nodejs/node/commit/4cc84c96f4)] - **node-api**: make napi\\_delete\\_reference use node\\_api\\_basic\\_env (Jeetu Suthar) [#59684](https://github.com/nodejs/node/pull/59684)\n* \\[[`e790eb6b50`](https://github.com/nodejs/node/commit/e790eb6b50)] - **repl**: fix cpu overhead pasting big strings to the REPL (Ruben Bridgewater) [#59857](https://github.com/nodejs/node/pull/59857)\n* \\[[`99ea08dc43`](https://github.com/nodejs/node/commit/99ea08dc43)] - **repl**: add isValidParentheses check before wrap input (Xuguang Mei) [#59607](https://github.com/nodejs/node/pull/59607)\n* \\[[`e4a4f63019`](https://github.com/nodejs/node/commit/e4a4f63019)] - **sqlite**: fix crash session extension callbacks with workers (Bart Louwers) [#59848](https://github.com/nodejs/node/pull/59848)\n* \\[[`42c5544b97`](https://github.com/nodejs/node/commit/42c5544b97)] - **src**: assert memory calc for max-old-space-size-percentage (Asaf Federman) [#59460](https://github.com/nodejs/node/pull/59460)\n* \\[[`686ac49b82`](https://github.com/nodejs/node/commit/686ac49b82)] - **(SEMVER-MINOR)** **src**: add percentage support to --max-old-space-size (Asaf Federman) [#59082](https://github.com/nodejs/node/pull/59082)\n* \\[[`84701ff668`](https://github.com/nodejs/node/commit/84701ff668)] - **src**: clear all linked module caches once instantiated (Chengzhong Wu) [#59117](https://github.com/nodejs/node/pull/59117)\n* \\[[`8e182e561f`](https://github.com/nodejs/node/commit/8e182e561f)] - **src**: remove unnecessary `Environment::GetCurrent()` calls (Moonki Choi) [#59814](https://github.com/nodejs/node/pull/59814)\n* \\[[`c9cde35c4d`](https://github.com/nodejs/node/commit/c9cde35c4d)] - **src**: simplify is\\_callable by making it a concept (Tobias Nießen) [#58169](https://github.com/nodejs/node/pull/58169)\n* \\[[`892b425ee1`](https://github.com/nodejs/node/commit/892b425ee1)] - **src**: rename private fields to follow naming convention (Moonki Choi) [#59923](https://github.com/nodejs/node/pull/59923)\n* \\[[`36b68db7f5`](https://github.com/nodejs/node/commit/36b68db7f5)] - **src**: reduce the nearest parent package JSON cache size (Michael Smith) [#59888](https://github.com/nodejs/node/pull/59888)\n* \\[[`26b40bad02`](https://github.com/nodejs/node/commit/26b40bad02)] - **src**: replace FIXED\\_ONE\\_BYTE\\_STRING with Environment-cached strings (Moonki Choi) [#59891](https://github.com/nodejs/node/pull/59891)\n* \\[[`34dcb7dc32`](https://github.com/nodejs/node/commit/34dcb7dc32)] - **src**: create strings in `FIXED_ONE_BYTE_STRING` as internalized (Anna Henningsen) [#59826](https://github.com/nodejs/node/pull/59826)\n* \\[[`4d748add05`](https://github.com/nodejs/node/commit/4d748add05)] - **src**: remove `std::array` overload of `FIXED_ONE_BYTE_STRING` (Anna Henningsen) [#59826](https://github.com/nodejs/node/pull/59826)\n* \\[[`bb6fd7c2d1`](https://github.com/nodejs/node/commit/bb6fd7c2d1)] - **src**: ensure `v8::Eternal` is empty before setting it (Anna Henningsen) [#59825](https://github.com/nodejs/node/pull/59825)\n* \\[[`7a91282bf9`](https://github.com/nodejs/node/commit/7a91282bf9)] - **src**: use simdjson::pad (0hm☘️) [#59391](https://github.com/nodejs/node/pull/59391)\n* \\[[`ba00875f01`](https://github.com/nodejs/node/commit/ba00875f01)] - **stream**: use new AsyncResource instead of bind (Matteo Collina) [#59867](https://github.com/nodejs/node/pull/59867)\n* \\[[`ebec3ef68b`](https://github.com/nodejs/node/commit/ebec3ef68b)] - **(SEMVER-MINOR)** **test**: move http proxy tests to test/client-proxy (Joyee Cheung) [#58980](https://github.com/nodejs/node/pull/58980)\n* \\[[`7067d79fb3`](https://github.com/nodejs/node/commit/7067d79fb3)] - **test**: mark sea tests flaky on macOS x64 (Richard Lau) [#60068](https://github.com/nodejs/node/pull/60068)\n* \\[[`ca1942c9d5`](https://github.com/nodejs/node/commit/ca1942c9d5)] - **test**: testcase demonstrating issue 59541 (Eric Rannaud) [#59801](https://github.com/nodejs/node/pull/59801)\n* \\[[`660d57355e`](https://github.com/nodejs/node/commit/660d57355e)] - **test,doc**: skip --max-old-space-size-percentage on 32-bit platforms (Asaf Federman) [#60144](https://github.com/nodejs/node/pull/60144)\n* \\[[`19a7b1ef26`](https://github.com/nodejs/node/commit/19a7b1ef26)] - **tls**: load bundled and extra certificates off-thread (Joyee Cheung) [#59856](https://github.com/nodejs/node/pull/59856)\n* \\[[`095e7a81fc`](https://github.com/nodejs/node/commit/095e7a81fc)] - **tls**: only do off-thread certificate loading on loading tls (Joyee Cheung) [#59856](https://github.com/nodejs/node/pull/59856)\n* \\[[`c42c1204c7`](https://github.com/nodejs/node/commit/c42c1204c7)] - **tools**: fix `tools/make-v8.sh` for clang (Richard Lau) [#59893](https://github.com/nodejs/node/pull/59893)\n* \\[[`b632a1d98d`](https://github.com/nodejs/node/commit/b632a1d98d)] - **tools**: skip test-internet workflow for draft PRs (Michaël Zasso) [#59817](https://github.com/nodejs/node/pull/59817)\n* \\[[`6021c3ac76`](https://github.com/nodejs/node/commit/6021c3ac76)] - **tools**: copyedit `build-tarball.yml` (Antoine du Hamel) [#59808](https://github.com/nodejs/node/pull/59808)\n* \\[[`ef005d0c9b`](https://github.com/nodejs/node/commit/ef005d0c9b)] - **typings**: update 'types' binding (René) [#59692](https://github.com/nodejs/node/pull/59692)\n* \\[[`28ef564ecd`](https://github.com/nodejs/node/commit/28ef564ecd)] - **typings**: remove unused imports (Nam Yooseong) [#59880](https://github.com/nodejs/node/pull/59880)\n* \\[[`f88752ddb6`](https://github.com/nodejs/node/commit/f88752ddb6)] - **url**: replaced slice with at (Mikhail) [#59181](https://github.com/nodejs/node/pull/59181)\n* \\[[`24c224960c`](https://github.com/nodejs/node/commit/24c224960c)] - **url**: add type checking to urlToHttpOptions() (simon-id) [#59753](https://github.com/nodejs/node/pull/59753)\n* \\[[`f2fbcc576d`](https://github.com/nodejs/node/commit/f2fbcc576d)] - **util**: fix debuglog.enabled not being present with callback logger (Ruben Bridgewater) [#59858](https://github.com/nodejs/node/pull/59858)\n* \\[[`6277058e43`](https://github.com/nodejs/node/commit/6277058e43)] - **vm**: sync-ify SourceTextModule linkage (Chengzhong Wu) [#59000](https://github.com/nodejs/node/pull/59000)\n* \\[[`5bf21a4309`](https://github.com/nodejs/node/commit/5bf21a4309)] - **vm**: explain how to share promises between contexts w/ afterEvaluate (Eric Rannaud) [#59801](https://github.com/nodejs/node/pull/59801)\n* \\[[`312b33a083`](https://github.com/nodejs/node/commit/312b33a083)] - **vm**: \"afterEvaluate\", evaluate() return a promise from the outer context (Eric Rannaud) [#59801](https://github.com/nodejs/node/pull/59801)\n* \\[[`1eadab863c`](https://github.com/nodejs/node/commit/1eadab863c)] - **win,tools**: add description to signature (Martin Costello) [#59877](https://github.com/nodejs/node/pull/59877)\n* \\[[`816e1befb1`](https://github.com/nodejs/node/commit/816e1befb1)] - **zlib**: reduce code duplication (jhofstee) [#57810](https://github.com/nodejs/node/pull/57810)\n\n"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.16",
    "date": "2025-10-20T23:37:15.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.16",
    "content": "### Core Changes\n\n- Upgrade React from `58bdc0bb-20251019` to `f6a48828-20251019`: #85081\n- [devtools]: instrument client navigation hooks for suspense devtools: #85007\n- Remove Segment from CacheNodeSeedData: #85080\n- label as Prefetch/Prefetchable depending on prefetch config: #85076\n- [cache components]: add 'bypass' cache indicator status: #85082\n- Upgrade React from `f6a48828-20251019` to `2bcbf254-20251020`: #85112\n- [cache components]: guard against setCacheStatus since its conditionally defined: #85125\n- warn: add deprecation warning of eslint config: #85122\n- add new devtools indicator loading state: #85083\n- Await initial Flight response before hydrating: #85124\n- fix(experimental.lockDistDir): Acquire the lock in dev earlier: #85116\n- telemetry: mcp tool call: #85120\n- [Turbopack] dedupe build errors: #85062\n\n### Misc Changes\n\n- docs: experimentalClientMaxBodySize: #85105\n- Docs: Add `--debug-build-paths` next build option: #85097\n- Docs: Add note on tag limits for `cacheTag`: #85106\n- docs: no switcher for TS only examples: #85109\n- fix: Handle non-directory files in cache folder when performing cleanup: #84930\n- Turbopack: Suggest using system certs when a TLS error occurs: #85009\n- [turbopack] Try to fix v8 crashes on github actions: #85114\n- docs: Update to Zod v4 syntax: #84807\n- Docs: Add version history for `next lint` deprecation and update error message: #85100\n- Turbopack: improve module evaluation name: #84633\n- [test] Current behavior of dynamic APIs integration with React DevTools: #85111\n- [Cache Components] fix env labels in perf track test: #85132\n\n### Credits \n\nHuge thanks to @ztanner, @icyJoseph, @delbaoliveira, @acdlite, @lubieowoce, @bgw, @lukesandberg, @huozhi, @makandrr, @sokra, and @eps1lon for helping!\n"
  },
  {
    "title": "【個人開発】マッチング型サービスの技術選定",
    "date": "2025-10-20T23:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yosashusaku/articles/perdev-matching-techselect",
    "content": "\n はじめに\nマッチング型の求人サービス「おためし転職」を個人開発しました。本記事では、求職者向け（toC）と企業向け（toB）の2つのプラットフォームを構築する上での技術選定と、その理由について解説します。\n求職者向けサイト（toC）: https://otame4.work/\n企業向けサイト（toB）: https://employer.otame4.work/\n\n 技術スタック\nインフラ：Cloudflare, Supabase\nフロント：Next.js(toC,toB共に)\nORM：Drizzle\n\n 認証（工夫した点）\nSupabase Auth: 求職者向け（toC）\nBet..."
  },
  {
    "title": "タスク管理に「AIに依頼」機能をつけたら開発体験がめちゃ向上した話",
    "date": "2025-10-20T10:43:32.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/himara2/articles/03fbe80334b86d",
    "content": "個人開発でタスク管理サービスを作っています。\nそのサービスに 「このタスクをAIに進めてもらう」 機能をつけたらめちゃ体験が良くなったので紹介させてください。\n\n 作ってるもの\ntone（トーン）というWebサービスを作っています。\nコンセプトは「人とAIのためのチームタスク管理」。人が使いやすいインターフェースに加え、MCP経由でAIからも使えるのが特徴のタスク管理サービスです。\nhttps://tone-task.com/\n今回、このtoneのタスクから直接AIに依頼できる機能をつけてみました。\n\n AIにタスクを依頼する\nAIにタスクを依頼する流れを紹介します。\nまずは普通にタスク..."
  },
  {
    "title": "Amazon Q Developer で Audible のユニットテスト自動化を強化",
    "date": "2025-10-20T05:44:48.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/boosting-unit-test-automation-at-audible-with-amazon-q-developer/",
    "content": "<p>本記事は 2025 年 10 月 10 日に公開された “<a href=\"https://aws.amazon.com/jp/blogs/devops/boosting-unit-test-automation-at-audible-with-amazon-q-developer/\" target=\"_blank\" rel=\"noopener\">Boosting Unit Test Automation at Audible with Amazon Q Developer</a>” を翻訳したものです。</p> \n<p>Amazon の子会社である <a href=\"https://www.audible.co.jp/?ref=Adbl_ip_rdr_from_US&amp;source_code=ADBANON002061821003I&amp;ipRedirectFrom=US&amp;ipRedirectOriginalURL=\" target=\"_blank\" rel=\"noopener\">Audible</a> は、オーディオストーリーテリングの大手プロデューサーかつプロバイダーです。オーディオブック、ポッドキャスト、特別にキュレーションされた Audible Originals を含む 100 万タイトル以上の膨大なライブラリを持っています。Audible は没入感のあるオーディオ体験で、日常を学習や想像力、エンターテイメントの機会に変えています。数百万のエンドユーザーがデバイス間でシームレスな体験を楽しめるよう、堅牢なテストが重要です。</p> \n<p>テストカバレッジが不十分なコードベースを引き継いだ経験はありませんか？あるいは、締切に間に合わせるために急いでコードを書き、「後で」テストを追加すると約束したことは？私たちは皆そのような経験があります。テストは重要ですが、締切が迫ると優先度が下がりがちです。そこで <a href=\"https://aws.amazon.com/jp/q/developer/build/\" target=\"_blank\" rel=\"noopener\">Amazon Q Developer</a> のエージェント機能が登場し、開発者のテスト生成アプローチを変革しています。このブログでは、Audible が Amazon Q Developer を活用してユニットテストカバレッジを向上させた方法を紹介します。</p> \n<h2>ソフトウェアテストのビジネスユースケース</h2> \n<p>ベロシティの高い開発環境では、厳しい締切の下でテストサイクルが圧縮されることが多く、品質に問題が生じやすくなります。Amazon Q Developer は包括的な基準を維持しながらテストを加速し、この状況を変えます。自動テスト生成、エッジケースの特定、修正提案により、チームは短い時間で徹底的なテストを実行できます。これにより迅速なリリース、QA リソースの最適化、本番環境への準備強化を実現します。</p> \n<p>適切なテストが実装されていない各関数は、作り直し、バグ、メンテナンスの課題につながる可能性があります。さらに、引き継いだコードベースは特別な課題を提示します。開発者は既存機能のテストを書くのに数週間を費やすか、テストなしでの開発を続けるかという難しい選択を迫られます。</p> \n<p>Amazon Q Developer は適切なテストカバレッジに必要な時間と労力を削減し、これらの課題に対処します。テストを面倒な作業から効率的なプロセスに変え、チームがコード品質を確保しながら新機能の提供に集中できるようにします。</p> \n<h2>Amazon Q Developer：コードベースのテストカバレッジ拡張</h2> \n<p>Amazon Q Developer のエージェント機能は、ソフトウェアテスト生成に高度なアプローチを提供します。汎用的なテストを生成する従来ツールとは異なり、Amazon Q Developer はコードの意図、ビジネスロジック、エッジケースを分析します。単にテストを生成するだけでなく、コードの動作を包括的に検証する意味のあるテストスイートを作成します。</p> \n<p>今回紹介する専用のテスト生成機能以外にも、Amazon Q Developer はテストを支援するさまざまな方法を提供します。テスト計画生成のための会話型プロンプトの使用、既存コードのテスト改善要求、テスト作成時の Amazon Q Developer とのペアプログラミングなどが可能です。テスト開発プロセス全体に AI アシスタンスを統合する柔軟性により、Amazon Q Developer は開発者にとって多用途なパートナーとなります。</p> \n<h3>Amazon Q Developer のワークフローアーキテクチャ</h3> \n<p>以下のアーキテクチャ図は、Audible がテスト生成とコード変換の両方で Amazon Q Developer を活用した方法を示しています。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2025/10/10/Q-developer-workflow.png\"></p> \n<p>Amazon Q Developer の開発プロセスは、2つの主要な機能を実証します。</p> \n<ul> \n <li><span style=\"text-decoration: underline\"><strong>テスト生成：</strong></span>Amazon Q Developer は Java クラスを分析し、ユニットテスト、エッジケーステスト、例外処理テストを含む包括的なテストスイートを作成します。</li> \n <li><span style=\"text-decoration: underline\"><strong>コード変換：</strong></span>Amazon Q Developer は自動移行タスクを実行します。これには <code>JDK 8</code> から <code>JDK 17/21</code> へのアップグレード、言語バージョン互換性の処理、<code>JUnit 4</code> から <code>JUnit 5</code> への変換、テストフレームワークの構文とアノテーションのモダナイゼーション、非推奨 API とコードパターンの更新が含まれます。</li> \n</ul> \n<p>この開発プロセスがとくに強力なのは、AI 機能と人間の専門知識を組み合わせる点です。エキスパート開発者が日常の開発プロセスで AI を活用できるようにします。Amazon Q Developer はコードベースを分析してコンテキストとして使用し、エッジケースを特定し、自動変換を実行します。一方で開発者はドメイン知識を適用し、出力がビジネス要件と期待される動作に合致することを確保します。</p> \n<h2>Amazon Q Developer の可能性を活用する Audible のアプローチ</h2> \n<p>Audible チームは、Amazon Q Developer を活用してテストカバレッジを向上させるために以下のステップに従いました。</p> \n<p><span style=\"text-decoration: underline\"><strong>コード生成：</strong></span>Audible チームは Amazon Q Developer を活用し、Java クラスの追加ユニットテストを生成してテストカバレッジを強化しました。対象には静的メソッドや既存のテストケースを持つメソッドも含まれます。このアプローチは彼らの堅牢なテスト戦略を補完しました。Amazon Q Developer はクラス、メソッド、パラメータ、戻り値の型、例外を調べる能力を持っています。null 入力チェックや空文字列チェックなど、見落としやすいエッジケースをカバーするユニットテストを自動的に特定します。</p> \n<p><span style=\"text-decoration: underline\"><strong>対象を絞った要求：</strong></span>Audible チームは Amazon Q Developer に以下を提供するよう具体的に依頼しました。</p> \n<ul> \n <li>Java クラス内の指定されたメソッドをカバーするユニットテストの提案</li> \n <li>テストされていないエッジケースを対象とするユニットテストの推奨事項</li> \n <li>エラー処理と例外シナリオに対処するテストケースの推奨事項</li> \n</ul> \n<p>Audible チームはテスト生成とコード変換の両方で Amazon Q Developer を使用し、大幅な改善を達成しました。成功の鍵は体系的な開発プロセスで、対象を絞ったプロンプトとともに豊富なコンテキストを提供することでした。</p> \n<h3>開発者の作業の流れ</h3> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2025/10/10/developer-workflow.png\"></p> \n<p>Audible は自動化ツールからの出力をレビューするため、人間参加型のアプローチを採用しています。上記の開発プロセスは完全なプロセスを示しています。：（1）IDE でクラスファイルを開く、（2）特定のメソッドを選択してプロンプトを追加する、（3）この組み合わされたコンテキストを Amazon Q Developer に送信する、（4）生成されたテストを受け取る、（5）テストをレビューしてコードベースに統合する。</p> \n<h2>効果的なプロンプトとアプローチ</h2> \n<p>Audible チームは Amazon Q Developer が対応できる対象を絞った要求を使用し、構造化されたアプローチに従いました。</p> \n<p><span style=\"text-decoration: underline\"><strong>コード生成：</strong></span>チームは Java クラスを Amazon Q Developer に提供し、個々のメソッドのテストを生成しました。対象には静的メソッドや、既にいくつかのテストがあるが完全なカバレッジが不足しているメソッドも含まれます。Amazon Q Developer はクラス、メソッド、パラメータ、戻り値の型、例外を調べ、null 入力チェックや空文字列チェックなどのエッジケースをカバーするユニットテストを自動的に特定しました。</p> \n<h3>特定のリクエストのための汎用サンプルプロンプト</h3> \n<p><em>基本的なテスト生成：</em></p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-text\">以下の Java メソッドのユニットテストを生成してください。すべての可能な入力シナリオとエッジケースをカバーすることに焦点を当ててください：\n\n[メソッドコードをここに]\n\n以下のテストを含めてください：\n- 有効な入力シナリオ\n- Null 入力チェック\n- 空文字列検証\n- 例外処理</code></pre> \n</div> \n<p><em>エッジケースフォーカス：</em></p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-text\">ユーザー入力を処理するこのメソッドがあります。見落としている可能性のあるエッジケースをカバーするユニットテストを提案してもらえますか？境界条件とエラーシナリオにとくに注意してください：\n\n[メソッドコードをここに]</code></pre> \n</div> \n<p><em>手動フレームワーク移行（Q Developer Chat 経由）：</em></p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-text\">この JUnit 4 テストを JUnit 5 形式に変換してください。アノテーションを更新し、適切な場合は最新の JUnit 5 機能を使用するようにしてください：\n\n[JUnit 4 テストコードをここに]</code></pre> \n</div> \n<blockquote>\n <p>注意：Amazon Q Developer のコード変換機能は、コードベース全体で JUnit4 から JUnit5 への移行を自動的に処理できますが、Audible は上記のように手動でターゲット化された変換のために会話型インターフェイスも使用しました。両方のアプローチが利用可能です。自動変換の詳細については<a href=\"https://docs.aws.amazon.com/ja_jp/amazonq/latest/qdeveloper-ug/transform-in-IDE.html\" target=\"_blank\" rel=\"noopener\">ドキュメント</a>を参照してください。</p>\n</blockquote> \n<p><span style=\"text-decoration: underline\"><strong>テスト生成：</strong></span>チームのリクエストに基づいて、Amazon Q Developer は適切なアサーションとテストメソッドでこれらの領域に対処する特定のテスト提案を生成しました。</p> \n<p><span style=\"text-decoration: underline\"><strong>実装：</strong></span>開発チームは、レビュー後に提案されたテストを実装しました。</p> \n<p><span style=\"text-decoration: underline\"><strong>ドキュメント：</strong></span>Amazon Q Developer は、テストの目的、テストがカバーしている機能の領域を説明するコメントを追加する能力を持っています。さらに、Amazon Q Developer は、readme ファイルやプロジェクトドキュメントなど、他の側面に関連するドキュメントを生成する能力も持っています。</p> \n<h2>定量化可能な結果</h2> \n<p>Amazon Q Developer を活用することで、Audible チームは以下を達成しました。</p> \n<ul> \n <li><span style=\"text-decoration: underline\"><strong>10 以上の主要パッケージ</strong></span>が包括的なユニットテストカバレッジを受けました</li> \n <li><strong><span style=\"text-decoration: underline\">テストクラスあたり約 1 時間</span></strong>の節約（通常 8-10 の個別テストを含む）</li> \n <li><span style=\"text-decoration: underline\"><strong>5,000 以上のテストケース</strong></span>が Amazon Q Developer のコード変換と手動での会話支援の両方を使用して<code>JUnit4</code> から <code>JUnit5</code> に正常に移行されました</li> \n <li>Amazon Q Developer のコード変換を使用し、<code>JDK8</code> から <code>JDK17</code> への移行にて&nbsp;<span style=\"text-decoration: underline\"><strong>50 時間以上の手作業を節約</strong></span></li> \n <li>AI 支援変換による人的エラーの削減</li> \n</ul> \n<h2>主要機能の実証結果</h2> \n<p>Amazon Q Developer は、手動テストで見落とされがちないくつかの領域で優れていました。</p> \n<p><strong><span style=\"text-decoration: underline\">包括的な例外テスト：</span></strong>標準的な null 入力チェックと空文字列検証を超えて、<code>IllegalArgumentException</code>、<code>NullPointerException</code>、カスタムビジネス例外のテストを自動的に提案しました。例外の投げ方と特定のエラーメッセージの両方の検証を含みます。この体系的なアプローチによりテストカバレッジがより完全になり、エラー処理がより堅牢になりました。</p> \n<p><span style=\"text-decoration: underline\"><strong>自動エッジケース検出：</strong></span>Amazon Q Developer はプロンプトなしで null ポインタ例外処理のインライン提案を行い、プロセスをよりスムーズで高速にしました。</p> \n<p><span style=\"text-decoration: underline\"><strong>AI 支援による手動フレームワーク移行：</strong></span>Amazon Q Developer のパターン認識は会話支援を通じて移行プロセスを加速しました。チームはチャットを通じて Amazon Q Developer に <code>JUnit4</code> から <code>JUnit5</code> へのテスト構文を手動で変換するよう依頼できました。たとえば、以前のセットアップには <code>@UseDataProvider</code> と <code>@DataProvider</code>アノテーションを持つ <code>JUnit4</code> 構文がありました。必要な作業はコードブロックをハイライトし、Send to Prompt して、Amazon Q Developer にテストを <code>JUnit5</code> 互換にするよう依頼することだけでした。数秒以内に ParameterizedTest アノテーションと Stream of Arguments を持つ信頼性の高い JUnit5 テストを生成し、手動で実装できました。</p> \n<p><span style=\"text-decoration: underline\"><strong>コンテキスト分析：</strong></span>Amazon Q Developer は既存のコードベースを分析してパターンを認識し、チームのコーディングスタイルとテスト規約に一致するテストを生成しました。</p> \n<h2>まとめ</h2> \n<p>Amazon Q Developer はテスト生成プロセスを時間のかかる作業から効率的な開発プロセスに変換し、チームが最小限の労力で包括的なテストカバレッジを達成できるようにします。これにより開発者はコード品質と信頼性を向上させながら、より価値の高い活動に集中できます。</p> \n<p>ビジネスへの影響は大きく、テストが負担でなくなるとチームは自然により良いテスト手法を採用します。全体的なコード品質が向上し、より高速な開発サイクルとメンテナンス時間の削減という好循環を作り出します。</p> \n<p>Amazon Q Developer の機能と価格の詳細については、<a href=\"https://aws.amazon.com/jp/q/developer/\" target=\"_blank\" rel=\"noopener\">Amazon Q Developer 製品ページ</a>をご覧ください。</p> \n<p>翻訳はApp Dev Consultantの宇賀神が担当しました。</p> \n<h2>著者について</h2> \n<p><img loading=\"lazy\" class=\"wp-image-1533 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2018/10/08/kirankumar.jpeg\" alt=\"kirankumar.jpeg\" width=\"218\" height=\"294\"></p> \n<p>Kirankumar Chandrashekar は AWS の Generative AI Specialist Solutions Architect で、Q Developer、Kiro、AI を使用した Developer Productivity などの次世代開発者体験ツールに焦点を当てています。AWS クラウドサービス、DevOps、モダナイゼーション、Infrastructure as Code の深い専門知識を持ち、革新的な AI 駆動ソリューションを通じて顧客の開発サイクルを加速し、開発者の生産性を向上させることを支援しています。Amazon Q Developer を活用することで、チームがアプリケーションをより高速に構築し、日常的なタスクを自動化し、開発作業の流れを合理化できるようにしています。Kirankumar は、複雑な顧客の課題を解決しながら開発者の効率を向上させることに専念しており、音楽、料理、旅行を楽しんでいます。</p> \n<p>&nbsp;</p> \n<p><img loading=\"lazy\" class=\"wp-image-1533 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2025/10/10/alex-torres-1.jpg\" alt=\"alex-torres.jpeg\" width=\"218\" height=\"294\" data-wp-editing=\"1\"></p> \n<p>Alex Torres は AWS の Senior Solutions Architect で、AWS 上でのアプリケーションのアーキテクチャ設計、設計、構築において <a href=\"https://amazon.com\" target=\"_blank\" rel=\"noopener\">Amazon.com</a> をサポートしています。セキュリティ、ガバナンス、開発者向けエージェント AI の深い専門知識を持ち、顧客が最先端のクラウド技術を活用して人々の生活を形作る製品を作成することを支援しています。革新的な AWS ソリューションを通じて複雑な課題を解決するチームの支援に情熱を注ぎ、Alex は最高水準のセキュリティとガバナンスを維持しながら顧客の成功を推進することに専念しています。仕事以外では、料理とハイキングを楽しんでいます。</p> \n<p>&nbsp;</p> \n<p><img loading=\"lazy\" class=\"wp-image-1533 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2025/10/10/GK_Profile_Picture-1.jpg\" width=\"218\" height=\"294\" data-wp-editing=\"1\"></p> \n<p>GK は Senior Customer Solutions Manager で、AWS の顧客としての Amazon をサポートする戦略的顧客アドバイザーです。AWS での 4 年間で、開発者の生産性向上と AWS サービス全体での Amazon のニーズの擁護に焦点を当て、ユーザー体験を向上させ、2つの組織間のより深い連携を推進してきました。高度な Amazon チームとの彼女の仕事は、最終的に内部と外部の両方の AWS 顧客に利益をもたらすソリューションの提供を支援しています。GK は、GenAI が開発者と非開発者の間のギャップをどのように埋めているかにとくに関心があり、GenAI とセキュリティの課題解決に多くの時間を費やしています。彼女はサンフランシスコベイエリアを拠点とし、ハイキングとキャンプを楽しんでいます。</p> \n<p>&nbsp;</p> \n<p><img loading=\"lazy\" class=\"wp-image-1533 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2025/10/10/aditi-linkedin.jpeg\" width=\"218\" height=\"294\" data-wp-editing=\"1\"></p> \n<p>Aditi Joshi は Audible のソフトウェアエンジニアで、Amazon プラットフォーム全体での Audible の存在拡大に取り組んでいます。フルスタック開発者として、主に Web 技術、クラウドサービス、JavaScript と Java などのプログラミング言語を使用して、Amazon iOS アプリでの Audible 購入機能の導入などの最近のプロジェクトを含む、クロスプラットフォーム統合機能を構築・強化しています。ユーザーインターフェイス開発、レスポンシブデザイン、Web 技術の専門知識を持ち、Audible オファーの紹介と Amazon エコシステム全体での Audible の可視性向上に焦点を当てています。Aditi は、クリーンで効率的なコードでスケーラブルなシステムを構築することに焦点を当てたソフトウェアアーキテクチャとユーザー体験に情熱を注いでいます。コーディング以外では、旅行、ヨガ、音楽鑑賞を楽しんでいます。</p> \n<p>&nbsp;</p> \n<p><img loading=\"lazy\" class=\"wp-image-1533 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2025/10/10/SP-headshot.jpeg\" width=\"218\" height=\"294\" data-wp-editing=\"1\"></p> \n<p>Sam Park は Audible のソフトウェア開発エンジニアで、Amazon プラットフォーム全体での Audible 機能の構築に焦点を当てています。Amazon Cart を通じた Audible 購入の有効化、および Amazon iOS と Android アプリ内での Audible の可視性拡大において重要な役割を果たしてきました。彼の仕事は、検索、商品ページ、チェックアウト、カート体験を含む Amazon エコシステム内の複数のタッチポイントにわたっています。Sam は、直感的な顧客体験を創出するソリューションの開発と、開発効率と生産性を向上させるための GenAI の活用に情熱を注いでいます。仕事以外では、旅行、バスケットボール、クリーブランド・キャバリアーズの応援を楽しんでいます。</p>"
  },
  {
    "title": "vitejs/vite – v5.4.21",
    "date": "2025-10-20T05:30:37.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v5.4.21",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v5.4.21/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v6.4.1",
    "date": "2025-10-20T05:25:55.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.4.1",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.4.1/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v7.0.8",
    "date": "2025-10-20T05:20:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.0.8",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.0.8/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v7.1.11",
    "date": "2025-10-20T05:09:01.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.11",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.11/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "[資料公開 & 開催報告] Amazon Q Developer Meetup #3 を開催しました",
    "date": "2025-10-20T02:57:22.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-q-developer-meetup-3-report/",
    "content": "<p>2025 年 9 月 30 日に AWS Startup Loft Tokyo (目黒) で開催された「<a href=\"https://aws-experience.com/apj/smb/event/a9fb2855-8aae-43ed-b8bd-3e5cb537682c\">Amazon Q Developer Meetup #3 生成AIの利用を中心としたソフトウェア開発の新しいアプローチであるAI-DLCおよびその活用実績のご紹介</a>」のイベントの様子をレポートします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167073\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-1024x573.png\" alt=\"\" width=\"1024\" height=\"573\"></a></p> \n<p>このイベントは、生成 AI を中心としたソフトウェア開発に対する新たなアプローチである、<strong>AI 駆動開発ライフサイクル (AI-DLC)</strong> をテーマに実施しました。まず Developer Specialist SA の金森から AI-DLC が必要とされる背景と、AI-DLC の概要、進め方をご紹介しました。続いて、すでに AI-DLC を体験していただいた LINE ヤフー株式会社様、株式会社サイバーエージェント様、東京海上日動システムズ株式会社様に、実際の進め方や学び、今後の展望などについて発表していただきました。</p> \n<p>現地参加・オンライン参加合わせて 200 名以上の方にご登録いただきました。参加者の方からは「実際に AI-DLC を実施した結果としての良い点、課題点が聞けたことが良かったです。」とのご感想をいただきました。AI-DLC を始めて知った方、これから AI-DLC の実施を検討されている方、すでに AI-DLC を体験されて改善に取り組まれている方、それぞれの皆様にご参考いただける情報をお届けしました。</p> \n<p>現地参加の方のみ、ケータリングをご用意し、ネットワーキングのための懇親会を実施しました。<br> 登壇者の方への質問や、参加者同士の意見交換、AWS メンバーへの相談が活発におこなわれていました。</p> \n<h2>イベント概要</h2> \n<ul> \n <li>開催日時: 2025年9月30日</li> \n <li>会場: AWS Startup Loft Tokyo (目黒)、オンライン配信</li> \n <li>スピーカー \n  <ul> \n   <li>LINE ヤフー株式会社様「AI-DLC を活用した、 負荷試験環境の構築」</li> \n   <li>株式会社サイバーエージェント様「CA 流、現場と伴走する AI 駆動開発 (AI-DLC)」</li> \n   <li>東京海上日動システムズ株式会社様「AI-DLC 体験記」</li> \n   <li>Developer Specialist SA 金森政雄, Amazon Web Services Japan G.K. 「AI 駆動開発ライフサイクル (AI-DLC) ソフトウェアエンジニアリングの再構築」</li> \n  </ul> </li> \n <li>登壇資料: <a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/qdev-meetup3.zip\">こちらからダウンロード (zip)</a></li> \n</ul> \n<h2>AI 駆動開発ライフサイクル(AI-DLC)ソフトウェアエンジニアリングの再構築</h2> \n<p>スピーカー: Developer Specialist SA 金森政雄, Amazon Web Services Japan G.K.</p> \n<p>はじめに、Developer スペシャリストソリューションアーキテクトの金森より、AI-DLC をご紹介しました。<br> まず、ソフトウェア開発における生成 AI 利用に対する既存のアプローチの課題を挙げ、AI-DLC が必要とされる背景について述べました。続いて、開発プロセスを生成 AI が制御し、開発者が最終的な責任を保持するという AI-DLC のコンセプトを示し、AI-DLC を構成する各ステップの詳細についてご説明しました。そして AI-DLC を実践するためのアプローチであり、ご登壇いただいた各社様にご体験いただいた、AI-DLC Unicorn Gym についてケーススタディに基づいて仕組みや期待される成果についてご説明しました。<br> AI-DLC についてさらに詳しく知りたい方は、添付資料と併せてブログ「<a href=\"https://aws.amazon.com/jp/blogs/news/ai-driven-development-life-cycle/\">AI 駆動開発ライフサイクル:ソフトウェアエンジニアリングの再構築</a>」をご覧ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-1.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167074\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-1-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a><img loading=\"lazy\" class=\"alignnone size-large wp-image-167075\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-2-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-3.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167076\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-3-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-4.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167077\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/intro-4-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a></p> \n<h2>LINEヤフー株式会社 様「AI-DLC を活用した、 負荷試験環境の構築」</h2> \n<p>LINE ヤフー株式会社様からは「AI-DLC を活用した、 負荷試験環境の構築」と題して、負荷試験環境の構築に AI-DLC を実践した事例についてご紹介いただきました。負荷試験ツールである Locust の設定や API、DB 初期化スクリプト等を AI-DLC を応用して作成した際の留意事項や実際の手順、工夫や今後の展望についてご説明いただきました。<br> 一次情報は社員が普段から利用しているツールから MCP Server 経由で取得していることや、AI-DLC のアウトプットを新規担当者のキャッチアップ資料などに活用していること、AI-DLC を軽量にカスタマイズして取り入れていることをご紹介いただきました。AI エージェントとの対話内容の例や実際のアウトプットについてもご共有いただきました。これからの展望として、アウトプットであるドキュメントの更新・メンテナンスの仕組みについても検討されていることをご紹介いただきました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-1.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167079\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-1-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-2.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167080\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-2-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-3.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167081\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-3-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-4.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167082\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ly-4-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a></p> \n<h2>株式会社サイバーエージェント様 「CA 流、現場と伴走する AI 駆動開発 (AI-DLC)」</h2> \n<p>株式会社サイバーエージェント様からは「CA 流、現場と伴走する AI 駆動開発」と題して、AI 駆動開発の全社展開を目指す背景とその実践についてお話しいただきました。AI 駆動開発の浸透・普及により AI 活用を強化し、競争力のあるプロダクトを作ることの重要性や、AI を前提とした開発文化の定着には全社への浸透、行動様式や意思決定プロセスの変革も必要である、と言う方針についてご紹介いただきました。既存プロジェクトへの AI-DLC の適用においてはドメイン知識に関するコンテキストの不足や、伝達の難しさについてお話しいただいたのち、Code を Single source of truth とすることや、ドメインごとに独立したコンテキストを与えるという AI へのドメイン知識の伝達方法をご説明いただきました。最後に、AI 活用の普及には継続的に開発チームとコミュニケーションし、二人三脚で進めていくことが重要であるとも述べていただきました。</p> \n<p>AI-DLC Unicorn Gym 実施内容の詳細はブログ「<a href=\"https://note.com/ca_ai_ope/n/n23e13ccf2c8d\">既存開発フローに AI-DLCを適用する</a> 」と「<a href=\"https://note.com/ca_ai_ope/n/n14ba20754a53\">AWS 発「AI-DLC」ワークショップレポート！現場に適用するには？ </a>」も併せてご覧ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-1.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167083\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-1-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-2.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167084\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-2-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-3.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167085\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-3-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-4.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-167086\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/ca-4-1024x575.png\" alt=\"\" width=\"1024\" height=\"575\"></a></p> \n<h2>東京海上日動システムズ株式会社様 「AI-DLC 体験記」</h2> \n<p>東京海上日動システムズ株式会社様からは「AI-DLC 体験記」というタイトルで、AI-DLC ワークショップにご参加いただいた背景や準備、当日の様子や今後の展望についてご紹介いただきました。要件定義から実装フェーズの効率化の検証のため、既存システム改修と新規システム構築を対象とし、さまざまな部門・役割のメンバーが参加されたという背景をお話しいただきました。ワークショップ当日の成果物の例や完成したアプリケーションもご紹介いただきました。最後に各参加者からのフィードバックや、今後の AI-DLC を広く導入するための取り組みについてご説明いただきました。</p> \n<p>AI-DLC Unicorn Gym 実施内容の詳細はブログ「<a href=\"https://aws.amazon.com/jp/blogs/news/tokio-marine-ai-dlc/\">東京海上日動システムズ株式会社様の AWS 生成 AI 事例：金融業界初 AI-DLC Unicorn Gym による開発変革への挑戦</a>」も併せてご覧ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.30.14.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-166133\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.30.14-1024x577.png\" alt=\"\" width=\"1024\" height=\"577\"></a><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.30.38.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-166132\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.30.38-1024x578.png\" alt=\"\" width=\"1024\" height=\"578\"></a><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.31.06.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-166131\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.31.06-1024x578.png\" alt=\"\" width=\"1024\" height=\"578\"></a><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.31.20.png\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-166130\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/Screenshot-2025-10-01-at-17.31.20-1024x578.png\" alt=\"\" width=\"1024\" height=\"578\"></a></p> \n<h2>おわりに</h2> \n<p>今回の Amazon Q Developer Meetup #3 では、AI 駆動開発ライフサイクル (AI-DLC) をテーマとしてその概要と実際に体験されたお客様からの事例をご紹介いただきました。LINE ヤフー株式会社様、株式会社サイバーエージェント様、東京海上日動システムズ株式会社様にご登壇いただき、実施の背景や体験していただいた内容、学びや今後の展望についてお話しいただきました。今後も、開発者の皆様が生成 AI をより有効に活用していただくための AI-DLC をはじめとしたプラクティスや Amazon Q Developer や Kiro といったツールについて発信・アップデートをお届けします。</p> \n<h2>次回予告: Amazon Q Developer &amp; Kiro Meetup #4 AWS サポートが語るよくある問い合わせ紹介とKiroのユースケース紹介</h2> \n<p>次回から Amazon Q Developer &amp; Kiro Meetup にシリーズ名をアップデートします！</p> \n<p>Amazon Q Developer &amp; Kiro Meetup #4 では AWS サポートエンジニアから Amazon Q Developer に関するよくあるお問い合わせとその回答を、株式会社アド・ダイセン様から Kiro のユースケースをご紹介いただきます。皆様のご登録をお待ちしています。</p> \n<ul> \n <li>参加登録: <a href=\"https://aws-experience.com/apj/smb/event/fd28de00-3189-49c4-909f-eb4c57a1ec3c\">Amazon Q Developer Meetup &amp; Kiro #4 AWS サポートが語るよくある問い合わせ紹介とKiroのユースケース紹介</a></li> \n <li>開催日時: 2025年10月31日 (金) 19:00-21:00</li> \n <li>会場: AWS Startup Loft Tokyo (目黒)、オンライン配信</li> \n <li>お客様登壇 \n  <ul> \n   <li>株式会社アド・ダイセン ソリューション部 部長 吉田 和弘 様「非エンジニアが生成AIでチームのイノベーション文化を創った実践事例」</li> \n  </ul> </li> \n</ul> \n<div></div> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\"> \n   <div id=\"attachment_164799\" style=\"width: 310px\" class=\"wp-caption alignnone\">\n    <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/profile-20250806.jpg\"><img aria-describedby=\"caption-attachment-164799\" loading=\"lazy\" class=\"size-medium wp-image-164799\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/profile-20250806-300x296.jpg\" alt=\"\" width=\"300\" height=\"296\"></a>\n    <p id=\"caption-attachment-164799\" class=\"wp-caption-text\">yamazaki hiroki profile-20250806</p>\n   </div> \n  </div> \n  <h4 class=\"lb-h4\"><a href=\"https://x.com/yh1roki\" target=\"_blank\" rel=\"noopener\">山崎 宏紀 (Hiroki Yamazaki)</a></h4> \n  <p>山崎宏紀 は Amazon Web Services Japan G.K. のソリューションアーキテクトとして、ISV/SaaS 業界のお客様を中心にアーキテクチャ設計や構築、生成 AI の活用をご支援しています。Amazon Q Developer や AWS CDK を好みます。(より良いご支援のために) AI エージェントに代わりに働いてもらおうと画策しています。</p> \n </div> \n</footer>"
  },
  {
    "title": "2025/10/20時点で最良のAIコーディングプロセス",
    "date": "2025-10-20T02:09:26.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/erukiti/articles/2510-ai-coding",
    "content": "2025年10月20日の僕が考えるAIコーディング（バイブコーディング）プロセスです。\n個人的な結論としては、1ミリでも気に食わないコードを生成してきたら、そのタスクは最終的には破棄すべきというものです。「このコード気に食わない」「この設計気に食わない」の直感がAIコーディングで品質を維持する生命線です。\n\n\nバイブコーディング時代ではコードレビューのお局ビリティが鍵です。\nレビューに全時間を割こう。レビューに時間がかかりすぎるというより、レビューに時間をもっとかけるくらい\n1ミリでも知らないことをなくそう\n\n断片的なAIコーディングでいえば1年弱、本格的なコーディングエージェントを使い..."
  },
  {
    "title": "なぜResult型ライブラリを再発明したのか",
    "date": "2025-10-20T02:00:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/praha/articles/9d24390b869499",
    "content": "\n はじめに\nTypeScriptでエラーハンドリングを型安全に行いたいと考えたとき、皆さんはどのようなアプローチを取るでしょうか。\nJavaScript/TypeScriptの標準的なエラーハンドリング手法であるtry/catchは、型安全性に欠け、エラーが発生する可能性のあるコードを追跡するのが難しいという問題があります。\nそんな課題を解決するために、よく用いられるのがResult型を用いたエラーハンドリングです。\nResult型とは、成功時の値と失敗時のエラーを明示的に表現する型です。\nTypeScriptにおけるResult型ライブラリといえば、neverthrowが最も有名で広..."
  },
  {
    "title": "2025年版 スタートアップエンジニアが考えるWebアプリの技術選定",
    "date": "2025-10-20T01:30:00.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/m_noto/articles/5e4c9f705f500b",
    "content": "はじめまして、_minoです！\nこの記事では、最近公開されたムーザルちゃんねるさんの動画「2025年版「Webアプリ作るなら技術どれにする？」」を見て、私も今年を振り返り採用してよかった技術や、トレンドから見た来年以降流行りそうな技術についてまとめました。\n「その技術いいよね！」「この技術よかった!」などのご意見がありましたら、コメントで教えていただけると嬉しいです!\n!\n筆者がフロントエンドメインということもあり、フロントエンド目線での技術構成になっています。\n\n\n 🧩 言語・フレームワーク\n\n TypeScript\nJavaScriptに静的型付けを追加し、開発時の型安全性とツールサ..."
  },
  {
    "title": "【Claude Code】Serenaの導入でAI活用を加速！",
    "date": "2025-10-20T00:30:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/hacobell_dev/articles/claude-code-serena-mcp-experience",
    "content": "\n 3行まとめ\n\nClaude Codeの出力精度を安定させるための設定ファイル整備に苦労していた\nSerena導入で、コードベース全体の一貫性を保持しつつ、暗黙知の言語化コストを大幅削減\nLSPとIndexingによりToken使用量が削減され、APIコストを低減\n\n\n はじめに\nClaude Codeを導入してみたものの、期待した効果が得られずに悩んでいる方も多いのではないでしょうか。私もその一人でした。具体的には、コードベース全体との一貫性や、チーム固有の設計思想を踏まえた生成がうまくいかず、そのたびにCLAUDE.mdやプロンプトで補足情報を足すのですが、暗黙知を毎回言語化して投..."
  },
  {
    "title": "GitHub Copilot Coding Agent に実装を任せて、作業を並行化する",
    "date": "2025-10-19T22:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/shintaro/articles/48c0abd59a6088",
    "content": "\n GitHub Copilot Coding Agent とは\nGitHub Copilot Coding Agent は、GitHub が提供する Copilot 関連機能のひとつで、開発者の指示に応じて コードの変更や Pull Request（PR） の作成を自動で実行する自律エージェント です。\nhttps://docs.github.com/ja/copilot/concepts/agents/coding-agent\nCoding Agent は、チャット上や GitHub の UI から自然言語で依頼を受けると、その内容をもとにブランチを作成し、コードを変更し、PR を生..."
  },
  {
    "title": "【結論】TypeScriptの型定義はtypeよりinterfaceを使うべき理由",
    "date": "2025-10-19T15:32:46.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/bmth/articles/interface-props-extends",
    "content": "\n はじめに\nTypeScriptでコンポーネントのPropsやオブジェクトの型を定義するとき、typeとinterfaceのどちらを使うべきか、一度は悩んだことがあるのではないでしょうか。\n巷では「どちらでも良い」「チームで統一されていればOK」といった意見もよく見かけます。\nしかし、私は 明確な理由をもって「基本的にはinterfaceを使うべき」 だと主張します。\nこの記事では私の実体験で遭遇したReactのPropsの深刻なパフォーマンス問題を例に交えながら、なぜinterfaceが優れているのか、そしてtypeはどのような場面で使うべきなのかを解説します。\n\n type ali..."
  }
]