[
  {
    "title": "vercel/next.js – v16.0.0-canary.9",
    "date": "2025-10-16T18:24:51.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.9",
    "content": "### Core Changes\n\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheTag`: #84880\n- [Cache Components] separate runtime stage in dev render: #84644\n- Reland \"Include server latency in debug info\": #84950\n- Update  codemod ESLint template to Flat config: #84919\n- Upgrade React from `56e84692-20251014` to `93f85932-20251016`: #84963\n- [dev] Fix Middleware and Proxy file conflict: #84965\n\n### Credits \n\nHuge thanks to @gnoff, @lubieowoce, @eps1lon, and @devjiwonchoi for helping!\n"
  },
  {
    "title": "Perforce × FSx for ONTAP で実現する、大規模開発環境のストレージ効率化とコスト削減",
    "date": "2025-10-16T12:31:45.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/perforce-and-fsxn-deliver-storage-efficiency-for-large-scale-development/",
    "content": "<p>このブログ記事は、ネットアップ合同会社 ソリューションアーキテクト 井谷寛と AWS シニアソリューションアーキテクト 長田義広が共同で執筆し、株式会社東陽テクニカ テクニカルサポート 村吉翔大とネットアップ合同会社 シニアクラウドソリューションアーキテクト 藤原善基が監修しています。</p> \n<h2></h2> \n<h2>はじめに</h2> \n<p>ソフトウェア開発で利用される VCS ( Version Control System ) には、Git / Git LFS や Subversion、そしてUnity Version Control ( 旧名 Plastic SCM ) などがあります。しかしゲーム開発や映像制作で広く利用されるゲームエンジンである Unreal Engine と連携してよく使われるのが Perforce P4 ( 旧名 Helix Core、以降 Perforce と表記 ) です。<br> 本記事では AWS 上で Perforce と NetApp ONTAP を組み合わせるメリットとして、大規模なソフトウェア開発に使えるストレージの効率化とコスト削減を実現する手法について説明します。</p> \n<p>※ Perforce に関する解説は<a href=\"https://aws.amazon.com/jp/blogs/news/tag/perforce/\" target=\"_blank\" rel=\"noopener\">こちら</a>の AWS ブログにも記載があります</p> \n<h2></h2> \n<h2>Perforce と NetApp ONTAP を組み合わせるメリット</h2> \n<h3>1. データ量の削減とストレージコストの削減</h3> \n<p>Perforce で管理するデジタルアセット ( 3DCG コンテンツや映像コンテンツ、ソースコードなど ) はプロジェクト間で流用や共有されることが多く、プロジェクト終了時にシステム管理者が削除を要請してもすぐに削除が可能になる訳ではありません。ソースコードであればデータ量は極端に大きくなることはありませんが、映像コンテンツはファイルサイズが大きい為サーバやストレージを圧迫します。どのデータを残してどれを削除するのかを選別するのは時間のかかる作業であり、また「あの時のあのバージョンが欲しい」という状況が将来発生することを考えると、プロジェクト終了時に過去のバージョンは全て捨てて最新バージョンだけ残すと割り切れないケースもあります。</p> \n<p>このように多くのデータを保持する為に、重複排除機能を持ったストレージを活用してデータの保持コストを削減するアプローチがあります。バージョン管理システムには差分の少ない異なるデータが複数世代格納されることが多い為、一般的に重複排除が効きやすいです。NetApp ONTAP には重複排除機能があり、このボリュームを Perforce のリポジトリとして設定するだけでストレージコストを削減できます。</p> \n<p>AWS 上で Perforce を利用する場合は <a href=\"https://aws.amazon.com/jp/fsx/netapp-ontap/\" target=\"_blank\" rel=\"noopener\">Amazon FSx for NetApp ONTAP</a> ( FSx for ONTAP ) を活用できます。マネジメントコンソールや AWS CLI を用いてユーザの VPC に NFS / CIFS / iSCSI プロトコルで接続可能なストレージを提供できます。<a href=\"https://aws.amazon.com/jp/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Compute Cloud</a> ( Amazon EC2 ) インスタンスにインストールした Perforce サーバが FSx for ONTAP を NFS プロトコルなどでマウントし、そのパスを Perforce サーバ上でリポジトリとして定義すれば設定は完了です。</p> \n<p>重複排除に加えて、FSx for ONTAP の階層化設定を追加するとアクセス頻度の低いデータは SSD 層から GB 単価の安いキャパシティ層にデータを透過的に移動するようになります。これにより同容量の <a href=\"https://aws.amazon.com/jp/ebs/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Block Store</a> (Amazon EBS) を Perforce サーバに割り当てるのに比べ半分以下のコストで運用できるようになります。</p> \n<p>※ FSx for ONTAP のコストは <a href=\"https://calculator.aws/#/createCalculator/FSxForNetAppOntap\">AWS Pricing Calculator</a> から算出できます</p> \n<p><img class=\"aligncenter size-full wp-image-167100\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/fsxn-cost-1.png\" alt=\"FSxN Cost\" width=\"1400\" height=\"784\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 1: EBS と FSx for ONTAP のコスト比較 ( 2025 年 7 月時点 )</em></p> \n<p>これら FSx for ONTAP の機能を活用することでデータの管理コストを下げることが可能です。AWS の<a href=\"https://aws.amazon.com/jp/solutions/guidance/building-perforce-helix-core-on-aws/\">ガイダンス</a>では 16TB 未満は EBS の GP3 ボリュームタイプの利用を推奨していますが、Perforce で扱うデータ量がそれ以下であっても、16TB 以上に容量が増えていく想定であれば FSx for ONTAP の利用を検討できます。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166919\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/perforce-guidance.png\" alt=\"Perforce Guidance\" width=\"1433\" height=\"811\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 2: Guidance for Building Perforce Helix Core on AWS</em></p> \n<h3></h3> \n<h3>2. Perforce サーバの負荷軽減 ( ストレージオフロード )</h3> \n<p>開発規模の大きいプロジェクトであったり、複数拠点で大容量のデータ連携をする必要がある場合、そのデータ転送処理にPerforce サーバのリソースがとられることがあります。他の VCS と異なり Perforce では Perforce プロキシサーバや転送レプリカ、エッジサーバなどを立てて分散処理することが可能です。それでもパッチ適用やエラーログ調査などの運用コストが増えることを鑑みるとサーバ台数は最小限にすべきです。</p> \n<p>以下の処理を NetApp ONTAP に任せることで、Perforce サーバの負荷を下げることができます。<br> A. ファイルの圧縮・解凍処理<br> B. ファイルのサーバ間ネットワーク転送</p> \n<h4></h4> \n<h4>A. ファイルの圧縮・解凍処理</h4> \n<p>通常ファイルを受け取った Perforce サーバは、そのデータを圧縮した上でディポ ( リポジトリ ) に格納します。しかし大量のファイルを同時に処理するとこの圧縮処理でサーバの CPU 負荷が 100% になることがあります。また CPU コアが多い環境では、仮に空いているコアがあったとしても、圧縮のオーバーヘッドによりネットワーク帯域に余裕があるにもかかわらず転送レートが低い状態になることがあります。読み出し時にも解凍に CPU を使うため、大量のデータをダウンロードする際同様に Perforce サーバがボトルネックになることがあります。これらはプロキシサーバやエッジサーバで負荷分散していても、特定のサーバで発生し得ます。</p> \n<p>※圧縮のオーバーヘッド : Perforce サーバがクライアントから受信したデータは Perforce サーバの CPU を使って圧縮します。もし圧縮が無効であれば Perforce サーバは受信したデータをそのままディポに格納するため、サーバプロセスが圧縮することによる処理遅延 ( = データ転送を低下させる要素 ) が削減されます。</p> \n<p>※近年では VCS にデータを格納する前に圧縮をしてしまうアプリケーションも増えています。Unity などのゲームエンジンでは圧縮した状態で VCS にデータを渡すこともあり、VCS 側の圧縮設定をどうするかは注意すべき設計要素になりつつあります</p> \n<p>このような時は Perforce によるデータ圧縮を無効にして圧縮処理は外部のストレージに委ねます。NetApp ONTAP ストレージにはハードウェア圧縮・解凍するためのアクセラレータが搭載されています。ネットアップ合同会社のテスト環境では、圧縮済みのデータをサブミットする際に Perforce の gz 圧縮を無効化することで、ネットワーク転送スピードが 3 ～ 8 倍程度高速化することを確認しています。</p> \n<p>Perforce で圧縮を無効にする方法は <code>lbr.autocompress</code> と <code>p4 typemap</code> の 2 種類があります。すべてのファイルタイプを非圧縮にするには後者の設定が有効です。</p> \n<p><strong>設定 (1) lbr.autocompress</strong></p> \n<p>1. 既存の設定を確認 ( <code>p4 configure show</code> )</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure show allservers</code></pre> \n<p>以下のような行があれば、次の手順に進みます。<br> <code>any: lbr.autocompress = 1</code><br> <code>edge: lbr.autocompress = 1</code><br> <code>master: lbr.autocompress = 1</code></p> \n<p>2. 圧縮設定の解除 ( <code>p4 configure unset</code> )</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure unset any#lbr.autocompress\nLinux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure unset edge#lbr.autocompress\nLinux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure unset master#lbr.autocompress</code></pre> \n<p>3. 明示的な非圧縮の設定 ( <code>p4 configure set</code> )</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure set any#lbr.autocompress=0</code></pre> \n<p><code>edge</code> や <code>commit</code> ではなく <code>any</code> を指定することで、Perforce 全体に設定が反映されます。</p> \n<p><strong>設定 (2) p4 typemap</strong></p> \n<p>1. <code>p4 typemap</code> ですべてのディポのすべてのファイルを非圧縮に指定</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT typemap</code></pre> \n<p>エディタが起動するので、すべてのディポ <code>( //... )</code> のすべてのファイル <code>( * )</code> を非圧縮 <code>( binary+F )</code> として扱うように設定します。</p> \n<pre><code class=\"lang-bash\">TypeMap:\nbinary+F //...*</code></pre> \n<p>エディタを保存して終了すれば、設定完了です。</p> \n<p>※ Perforce のバージョン2022.1 以降、<code>lbr.autocompress</code> は “1” がデフォルト値になっています。古いバージョンを使用しているユーザは、現在の設定値を事前にご確認ください</p> \n<p>※ Perforce に設定可能なパラメータの一覧は<a href=\"https://help.perforce.com/helix-core/server-apps/cmdref/current/Content/CmdRef/configurables.alphabetical.html\" target=\"_blank\" rel=\"noopener\">公式サイト</a>に記載があります</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166925\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/lbr.png\" alt=\"lbr設定\" width=\"1007\" height=\"470\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 3: lbr.autocompress の設定</em></p> \n<h4>B. バージョン化ファイルの Perforce サーバ間ネットワーク転送</h4> \n<p>このオフロードは Perforce を分散サーバ構成にしたときに有効です。Perforce の分散アーキテクチャ ( 7 種類 ) はこちらの<a href=\"https://help.perforce.com/helix-core/server-apps/p4sag/current/Content/P4SAG/deployment-architecture.html\" target=\"_blank\" rel=\"noopener\">ドキュメント</a>に記載があります。</p> \n<p>※ Perforce の中心となるサーバにはセントラルサーバやマスタサーバ、コミットサーバなどいくつかの呼び方がありますが、本ブログでは「コミットサーバ」と表記を統一します</p> \n<p>プロキシサーバやエッジサーバがコミットサーバから離れている場所に存在する場合、通常 Perforce クライアントがプロキシサーバなどにデータをリクエストするとプロキシサーバはコミットサーバにファイルを要求し、そのデータをプロキシサーバのキャッシュ領域に保存しつつ Perforce クライアントにデータを渡します。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166926\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/perforce-proxy.png\" alt=\"Perforce Proxy\" width=\"1126\" height=\"634\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 4: 通常の Perforce サーバ間データ同期</em></p> \n<p>これに対して、NetApp ONTAP の機能と連携してデータを同期する場合は以下の様になります。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167104\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/perforce-proxy-with-ontap-1.png\" alt=\"perforce-proxy-with-ontap\" width=\"1400\" height=\"778\"></p> \n<p style=\"text-align: center\"><em>図 5: NetApp ONTAP の機能を使った Perforce サーバ間データ同期</em></p> \n<p>サーバ間のファイル転送は NetApp ONTAP の FlexCache という機能を使い、Perforce の機能とは別でデータを転送します。。FlexCache が設定された NetApp ONTAP ストレージをプロキシサーバやエッジサーバがマウントすると、キャッシュストレージにはオリジンストレージのファイルシステムのメタデータのみを転送・保存するため、実体データがキャッシュに存在しなくてもコミットサーバ上のすべてのディポのデータにプロキシサーバが直接アクセスできる状態になり、Perforce サーバ間のバージョン化ファイルの転送が不要になります。<br> ※実データの転送は Perforce 間で行われませんが、Perforce 内部でメタデータを管理するデータベースへのアクセスは引き続き Perforce 間で行われます</p> \n<p>FSx for ONTAP でもこの FlexCache を使えるため、AWS に立てた Perforce サーバもこの機能の恩恵を受けることができます。</p> \n<p>※データを二重持ちするわけではなく、NetApp ONTAP のキャッシュ機能を活用するため、キャッシュ側のストレージコストは最小限となります<br> ※キャッシュストレージの容量が溢れそうになると、ストレージが自動的にアクセス頻度の低いデータをキャッシュから削除して空きスペースを確保します</p> \n<h3></h3> \n<h3>3. リモート拠点やクラウドとのデータ連携作業の簡易化</h3> \n<p>Perforce は分散アーキテクチャを採用しているため、2.B. で説明したサーバ間転送を用いなくても利用することは可能です。しかし特に距離の離れた拠点との通信ではネットワークの遅延が大きいことによる性能低下が発生するため、Perforce サーバのチューニングだけでなくその下で動く Linux OS のチューニングも必要になることがあります。</p> \n<p>自社の環境にあわせてこれらを適切に設定するには幅広い知識とスキル・経験が必要になりますが、NetApp ONTAP のストレージキャッシュ技術を組み合わせることでそのハードルを下げることができます。リモート拠点のプロキシサーバやエッジサーバはその拠点に設置されたキャッシュ用の NetApp ONTAP、AWS 上では FSx for ONTAP をマウントするだけで、高速なデータ連携が可能になります。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167105\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/perforce-edge-1.png\" alt=\"perforce-edge\" width=\"1400\" height=\"782\"></p> \n<p style=\"text-align: center\"><em>図 6: エッジサーバと組み合わせた場合の構成例</em></p> \n<h2></h2> \n<h2>まとめ</h2> \n<p>ネットアップ合同会社には日本のお客様向けに Perforce と AWS を連携させて検証できる環境があります。また海外リージョンの FSx for ONTAP と接続して性能検証を行う設備もそろっています。バージョン管理システムの運用管理にお困りの方はご相談ください。</p> \n<p>AWS では多くのゲーム会社様が AWS のクラウドサービスを使ってゲームを開発・運用するための技術支援をしています。またこのブログの様に AWS パートナー企業と共同でゲーム会社様に役立つ情報をご紹介したり、CEDEC や GDC などのゲーム業界イベントや AWS 主催のイベントでも情報を発信しています。私たちの活動がゲーム業界の発展に貢献できる様、今後も技術とビジネスの両面から全力でお客様をサポートしていく所存です。</p> \n<h2></h2> \n<h2>著者 ( 敬称略 )</h2> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/netapp-itani.png\" alt=\"NetApp Itani\" width=\"293\" height=\"353\">\n </div> \n <h3 class=\"lb-h4\">井谷 寛</h3> \n <p>ネットアップ合同会社 ソリューションアーキテクト部 ソリューションアーキテクト</p> \n <p>ハイブリッド・マルチクラウドの提案を得意とするエンジニア。様々な技術を組み合わせて検証し、ソリューション化して、販売から事例化までトータルでお客様をサポートしている。お客様やパートナー様と一緒に手を動かして現実的な提案をするのが得意。</p> \n</div> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img src=\"https://a0.awsstatic.com/main/images/blogs/avatars/aws-avatar-default.png\" alt=\"Murayoshi\" width=\"125\">\n </div> \n <h3 class=\"lb-h4\">村吉 翔大</h3> \n <p>株式会社東陽テクニカ</p> \n <p>ソフトウェア・ソリューション</p> \n <p>テクニカルサポート</p> \n</div> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/netapp-fujiwara-296x300.jpg\" alt=\"NetApp Fujiwara\" width=\"296\" height=\"300\">\n </div> \n <h3 class=\"lb-h4\">藤原 善基</h3> \n <p>ネットアップ合同会社 AWS SE Support シニアクラウドソリューションアーキテクト</p> \n <p>Amazon FSx for NetApp ONTAPの技術支援を担当するエンジニア。NetAppが持つONTAPのナレッジと、AWSとFSx for ONTAPの共同開発・共同営業を通して積み上げた実績と経験に基づくTIPSを資料として公開・トレーニングや案件支援などを行なっている。新卒で国際物流業の物理コンテナを扱う営業になった後、現職まで複数の業種・職種を経験。</p> \n</div> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2024/08/07/REEngine_Nagata.png\" alt=\"\" width=\"192\" height=\"256\">\n </div> \n <h3 class=\"lb-h4\">長田 義広</h3> \n <p>アマゾンウェブサービスジャパン合同会社 ゲームスペシャリスト シニアソリューションアーキテクト</p> \n <p>ゲーム会社でインフラエンジニア、ゲームプログラマなどを務めた後 AWS Japan に入社。ゲーム業界のお客様だけでなくゲームエンジンを使ったストリーミング配信やメタバースなどノンゲーム分野も支援している。社内ではゲーム・ストレージ・メディアの3つの技術コミュニティで活動中。</p> \n</div>"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.8",
    "date": "2025-10-16T10:03:26.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.8",
    "content": "### Core Changes\n\n- Revert \"Include server latency in debug info\": #84932\n- Development: Use process.hrtime for request time calculation: #84905\n- Use correct JSX runtime for library-owned JSX in React Server: #84869\n- Development: Implement request log time details: #84906\n\n### Credits \n\nHuge thanks to @ztanner, @timneutkens, and @eps1lon for helping!\n"
  },
  {
    "title": "Amazon Bedrock で日本国内に閉じた Anthropic Claude 4.5 の推論が可能に！日本国内クロスリージョン推論のご紹介",
    "date": "2025-10-16T08:35:07.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-bedrock-now-supports-japan-cross-region-inference/",
    "content": "<p>世界中の組織が、お客様体験の向上、業務の効率化、イノベーションの推進を目的として、生成 AI の機能をアプリケーションに統合しています。生成 AI ワークロードの規模と重要性が増すにつれ、AI を活用したアプリケーションの一貫したパフォーマンス、信頼性、可用性を維持することが新たな課題となっています。同時に、多くの日本企業では、データレジデンシー要件やコンプライアンス規制により、データ処理を国内に限定する必要があります。</p> \n<p>このニーズに応えるため、<a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a> では <a href=\"https://www.anthropic.com/\">Anthropic</a> の最新モデル <strong><a href=\"https://aws.amazon.com/jp/blogs/news/introducing-claude-sonnet-4-5-in-amazon-bedrock-anthropics-most-intelligent-model-best-for-coding-and-complex-agents/\">Claude Sonnet 4.5</a> / Claude Haiku 4.5</strong> と共に、<strong><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html\">日本国内クロスリージョン推論</a> (Japan Cross Region Inference)</strong> を導入しました。このマネージドな機能により、推論リクエストを日本国内のリージョンに限定自動的にルーティングし、開発者が需要の変動を予測したり、複雑な負荷分散メカニズムを実装したりすることなく、トラフィックバーストをシームレスに処理できるようになります。</p> \n<p>本記事では、日本国内クロスリージョン推論の仕組み、そして Claude 4.5 シリーズと組み合わせることで、コンプライアンス要件を満たしながら生成 AI アプリケーションのパフォーマンスと信頼性を向上させる方法について解説します。</p> \n<h2>日本国内クロスリージョン推論のコア機能</h2> \n<p>日本国内クロスリージョン推論は、データを日本国内に留めながら、東京リージョンと大阪リージョンの計算リソースを活用することで、予期しないトラフィックバーストに対応します。このセクションでは、この機能の動作原理と、その基盤となる技術メカニズムについて説明します。</p> \n<h3>推論プロファイルの理解</h3> \n<p>Amazon Bedrock における<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles.html\">推論プロファイル</a>は、基盤モデルと、モデル呼び出しリクエストをルーティング可能なひとつ以上のリージョンのセットを定義します。Claude 4.5 の日本国内クロスリージョン推論プロファイルは、この概念を地理的境界内で適用し、リクエストを日本国内のリージョン (東京リージョンもしくは大阪リージョン) のいずれかにルーティングすることで、データレジデンシー要件を満たしながら、予期しないトラフィックバーストに備えて複数リージョンにトラフィックを分散できます。</p> \n<p>推論プロファイルについて理解するために重要な概念として以下のふたつがあります。</p> \n<ul> \n <li><strong>ソースリージョン</strong> – API リクエストが発行されるリージョン</li> \n <li><strong>デスティネーションリージョン</strong> – Amazon Bedrock が推論のためにリクエストをルーティングできるリージョン</li> \n</ul> \n<p>日本国内クロスリージョン推論では、デスティネーションリージョンは以下の日本国内のリージョンに限定されます。</p> \n<ul> \n <li><strong>ap-northeast-1</strong> (東京リージョン)</li> \n <li><strong>ap-northeast-3</strong> (大阪リージョン)</li> \n</ul> \n<p>これにより、すべての推論処理が日本国内で完結し、データが国外に出ることはありません。</p> \n<p>かつ、クロスリージョン推論では、モデルの可用性、キャパシティ、レイテンシーなど複数の要素を考慮して、最適なリージョンにリクエストをルーティングします。リクエストの割り振りには手動設定を必要とせず、自動的に最適な利用可能リージョンを選択します。</p> \n<h3>モニタリングとロギング</h3> \n<p>クロスリージョン推論を使用する場合、<a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch</a> と <a href=\"https://aws.amazon.com/jp/cloudtrail/\">AWS CloudTrail</a> は、リクエストが発生したソースリージョンにのみログを記録します。これにより、推論リクエストが最終的にどこで処理されるかに関係なく、すべてのレコードを単一のリージョンに維持することで、モニタリングとロギングが簡素化されます。</p> \n<p>どのリージョンがリクエストを処理したかを追跡するためには CloudTrail の記録を参照できます。CloudTrail イベントには、デスティネーションリージョンを指定する <code>inferenceRegion</code> キーを持つ <code>additionalEventData</code> フィールドが含まれています。これにより、日本国内の AWS インフラストラクチャー全体での推論リクエストの分散を監視および分析できます。</p> \n<h3>データセキュリティとコンプライアンス</h3> \n<p>Amazon Bedrock の通常のオンデマンド推論と同様に、クロスリージョン推論においても、データセキュリティの高い基準を維持します。クロスリージョン推論中に送信されるデータは、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html\">暗号化され、安全な AWS ネットワーク内に留まります</a>。機密情報は、どのリージョンがリクエストを処理するかに関係なく、推論プロセス全体を通じて保護されます。</p> \n<p><a href=\"https://aws.amazon.com/jp/compliance/shared-responsibility-model/\">セキュリティとコンプライアンスは AWS とお客様の間における共同責任</a>であるため、異なる地理的場所での推論リクエスト処理に伴う法的またはコンプライアンス要件も考慮する必要があります。日本国内クロスリージョン推論では、リクエストは日本国内のリージョンのみにルーティングされるため、データレジデンシー要件を満たしながら、高可用性とスループットのメリットを享受できます。</p> \n<h2>日本国内クロスリージョン推論の実装</h2> \n<p>Claude 4.5 で日本国内クロスリージョン推論は以下のステップで使用できます。</p> \n<ol> \n <li><strong>日本国内クロスリージョン推論プロファイル ID を使用</strong> – Amazon Bedrock への API 呼び出しを行う際、リージョン固有のモデル ID の代わりに、日本国内クロスリージョン推論プロファイル ID (Claude Sonnet 4.5 の場合は <code>jp.anthropic.claude-sonnet-4-5-20250929-v1:0</code>、Claude Haiku 4.5 の場合は <code>jp.anthropic.claude-haiku-4-5-20251001-v1:0</code>) を指定する。これは <code>InvokeModel</code> API と <code>Converse</code> API の両方で機能する。</li> \n <li><strong>IAM 権限の設定</strong> – 推論プロファイルと、デスティネーションリージョンの基盤モデルにアクセスするための適切な <a href=\"https://aws.amazon.com/jp/iam/\">AWS Identity and Access Management</a> (IAM) 権限を付与する。</li> \n</ol> \n<p>適切な IAM 権限の詳細な設定方法と前提条件については、以下の公式ドキュメントをご参照ください。</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-prereq.html\">推論プロファイルの前提条件</a></li> \n <li><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html\">推論プロファイルをモデル呼び出しで使用する</a></li> \n</ul> \n<h3>サービスクォータの管理</h3> \n<p>日本国内クロスリージョン推論のサービスクォータ増加を申請する場合、それぞれのソースリージョン (日本の場合は東京もしくは大阪) の <a href=\"https://console.aws.amazon.com/servicequotas\">AWS Service Quotas コンソール</a>を使用します。例えば Claude Sonnet 4.5 モデルのクォータ増加をリクエストする際には、以下の画像のように関連する特定のクォータを検索し、特定のリージョンでのワークロード要件に基づいて増加申請を提出できます。詳しくは <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/quotas.html\">Amazon Bedrock のクォータ管理ドキュメント</a>をご参照ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/Screenshot-2025-10-07-at-4.18.03 pm.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167090\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/Screenshot-2025-10-07-at-4.18.03 pm.png\" alt=\"\" width=\"2784\" height=\"1482\"></a></p> \n<h2>日本国内クロスリージョン推論の料金</h2> \n<p>グローバル全体分散のクロスリージョン推論に比べて、日本国内クロスリージョン推論では 10% 上乗せの料金設定になっています。以下は Claude Sonnet 4.5 および Claude Haiku 4.5 の料金表です。その他のモデルも含めた詳しい料金は <a href=\"https://aws.amazon.com/jp/bedrock/pricing/\">Amazon Bedrock 料金ページ</a>をご参照ください。</p> \n<table style=\"height: 153px\" border=\"1\" width=\"765\"> \n <tbody> \n  <tr> \n   <td><strong>モデル</strong></td> \n   <td><strong>ゾーン</strong></td> \n   <td><strong>入力 (100万トークン当たり)</strong></td> \n   <td><strong>出力 (100万トークン当たり)</strong></td> \n   <td><strong>プロンプトキャッシュ書き込み (100万トークン当たり)</strong></td> \n   <td><strong>プロンプトキャッシュ読み込み (100万トークン当たり)</strong></td> \n  </tr> \n  <tr> \n   <td>Claude Sonnet 4.5</td> \n   <td>グローバル</td> \n   <td>$3</td> \n   <td>$15</td> \n   <td>$3.75</td> \n   <td>$0.3</td> \n  </tr> \n  <tr> \n   <td>Claude Sonnet 4.5</td> \n   <td>日本 (US/EU/オーストラリアも同様)</td> \n   <td>$3.3</td> \n   <td>$16.5</td> \n   <td>$4.125</td> \n   <td>$0.33</td> \n  </tr> \n  <tr> \n   <td>Claude Haiku 4.5</td> \n   <td>グローバル</td> \n   <td>$1</td> \n   <td>$5</td> \n   <td>$1.25</td> \n   <td>$0.1</td> \n  </tr> \n  <tr> \n   <td>Claude Haiku 4.5</td> \n   <td>日本 (US/EU/オーストラリアも同様)</td> \n   <td>$1.1</td> \n   <td>$5.5</td> \n   <td>$1.375</td> \n   <td>$0.11</td> \n  </tr> \n </tbody> \n</table> \n<h3>日本国内とグローバルのクロスリージョン推論の選択</h3> \n<p>現在 Amazon Bedrock で Anthropic の従来モデルを使用している場合、Claude Sonnet/Haiku 4.5へアップグレードすることで生成 AI アプリケーションの性能を強化することができるでしょう。従来の Claude 3/3.5/3.7/4 といったシリーズのモデルから切り替えるべき主な理由としては、<a href=\"https://www.anthropic.com/news/claude-haiku-4-5\">Sonnet 4.5</a>/<a href=\"https://www.anthropic.com/news/claude-haiku-4-5\">Haiku 4.5</a> のさまざまなドメインにおける優れたパフォーマンスが挙げられます。エージェント型ツール利用、コンピュータ利用といったエージェント構築における汎用な能力の向上だけでなく、特にコーディングや金融分析といった領域においても最先端のパフォーマンスを持つことが示されています。Claude Haiku 4.5 に関しては Sonnet シリーズの 1/3 のコストで利用でき、かつコード生成能力としても従来の Sonnet 4 よりも高いベンチマークスコアを達成するなど、コストパフォーマンスに優れたモデルであることも注目に値します。</p> \n<p>また、<a href=\"https://docs.aws.amazon.com/ja_jp/bedrock/latest/userguide/model-lifecycle.html\">発表から時間が経過した旧来のモデル</a>は、最新のモデルよりも信頼性が低い可能性があることにご注意ください。最高レベルのサポートと信頼性を維持するために、ワークロードを最新なモデルに移行することを強くお勧めします。</p> \n<p><strong>グローバル分散のクロスリージョン推論を選択すべきケース</strong></p> \n<ul> \n <li>データレジデンシー要件がない、または柔軟に対応できる</li> \n <li>世界中の Amazon Bedrock 対応リージョンのリソースプールを活用して、最大限のスループットを確保したい</li> \n <li>グローバルに展開するアプリケーションで、世界中どこからでも同等のパフォーマンスを提供したい</li> \n</ul> \n<p><strong>日本国内クロスリージョン推論を選択すべきケース</strong></p> \n<ul> \n <li>データレジデンシー要件があり、データを日本国内に留める必要がある</li> \n <li>金融、医療、政府などの規制業界で、国内完結のデータ処理が求められる</li> \n <li>コンプライアンス規制により、データの国外転送が制限されている</li> \n <li>ビジネス要件として、データ処理場所を明確に特定・管理する必要がある</li> \n <li>10%上乗せのプレミアム料金を許容できる</li> \n</ul> \n<p>これまでデータレジデンシー要件により、東京リージョンで利用可能な Claude 3.5 Sonnet 等のモデルを利用されていたお客様も、ぜひ日本国内に閉じて推論処理を実行できる Claude Haiku 4.5 もしくは Claude Sonnet 4.5 の利用をご検討ください。</p> \n<h2>まとめ</h2> \n<p>Amazon Bedrock で新しく利用できるようになった Claude Sonnet/Haiku 4.5 では、日本国内クロスリージョン推論の機能により、日本に閉じたデータ処理が可能です。簡単な実装と、CloudTrail および CloudWatch による包括的なモニタリングにより、コンプライアンス要件を満たしながら、最先端の生成 AI モデルを活用できます。</p> \n<p>Claude Sonnet/Haiku 4.5 の日本国内クロスリージョン推論をお試しいただく際には、Amazon Bedrock のマネジメントコンソールの「チャット/テキストのプレイグラウンド」において、そのメリットを直接体験することをお勧めします。また、皆様のアプリケーションにおいても、日本国内クロスリージョン推論プロファイル ID (Claude Sonnet 4.5 の場合は <code>jp.anthropic.claude-sonnet-4-5-20250929-v1:0</code>、Claude Haiku 4.5 の場合は <code>jp.anthropic.claude-haiku-4-5-20251001-v1:0</code>) を使用するようにコードを更新し、適切な IAM 権限を設定し、アプリケーションが日本国内の AWS インフラストラクチャーを活用して推論を実行する様子を監視してください。</p> \n<p>Amazon Bedrock の日本国内クロスリージョン推論の詳細については、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html\">クロスリージョン推論によるスループットの向上</a>、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html\">推論プロファイルのサポートされるリージョンとモデル</a>、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html\">モデル呼び出しでの推論プロファイルの使用</a>を参照してください。</p> \n<hr> \n<h3>著者について</h3> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-167069 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/kazmot-1.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>本橋 和貴</strong> (Motohashi, Kazuki) は、AWS Japan の機械学習ソリューションアーキテクトです。AI/ML 領域には8年ほど携わっており、AWS の生成 AI/ML サービスを利用する日本のお客様や AWS パートナー企業をサポートしています。最近購入したファイナルファンタジータクティクスを子育ての傍らプレイする時間を探していますが、まだ起動すらできていません。博士 (理学)。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-167070 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/takaaktk-1.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>菊地 貴彰</strong>（Kikuchi, Takaaki）は、AWS Japan で通信業界のお客様を担当するソリューションアーキテクトです。最近は学生時代の専攻である機械学習の知見を活かし、ビジネスにおける AI/ML の活用に関するご支援を多く行っています。趣味は音楽鑑賞であり、ライブ参加後は首が筋肉痛になります。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-167071 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/katayohe-1.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>片山 洋平</strong> (Katayama, Yohei) は AWS Japan のパブリックセクターのソリューションアーキテクトです。主に医療機関をはじめとしたヘルスケア業界のお客様のソリューション構築の支援を行なっています。週末は登山を嗜んでいます。</p>"
  },
  {
    "title": "株式会社マキタ様の AWS 生成 AI 事例「AWS 上の閉鎖型 AI 環境で労働災害報告書作成支援と経営ダッシュボードを内製開発。システム開発経験の少ないエンジニアが短期間でリリースを実現」のご紹介",
    "date": "2025-10-16T03:08:01.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-makita/",
    "content": "<p><em>本ブログは <a href=\"https://www.makita-corp.com/\">株式会社 マキタ様</a> と <a href=\"https://aws.amazon.com/jp/\">Amazon Web Services Japan 合同会社</a>&nbsp;が共同で執筆いたしました。</em></p> \n<p>みなさん、こんにちは。AWS ソリューションアーキテクトの森です。<br> 最近、製造業のお客様における生成 AI を活用した業務効率化の取り組みが加速しています。特に内製開発による AI 活用は、企業独自の課題に対応した柔軟なソリューションを低コストで実現できる点で注目されています。今回は、船舶用ディーゼルエンジンの製造・販売・アフターサービスを手がける株式会社マキタ様が AWS を用いて経営ダッシュボードと労働災害報告書作成支援 AI を「短期間」かつ「システム開発経験の少ないエンジニア主導の開発体制」で内製した事例をご紹介します。</p> \n<p>なお、本取り組みは、AWS ジャパンが 2025年7月15日に開催いたしました中堅・中小企業向け事業戦略説明会にて、株式会社マキタ 執行役員 情報企画部 部長 高山 百合子様よりご紹介いただきました。<br> なお、中堅・中小企業のお客様のビジネス成長や新たな価値創出に向けた、2025年度の新たな AWS の取り組み、生成 AI の事例の詳細については <a href=\"https://aws.amazon.com/jp/blogs/news/%E4%B8%AD%E5%A0%85%E3%83%BB%E4%B8%AD%E5%B0%8F%E4%BC%81%E6%A5%AD%E3%81%A7%E3%82%82%E5%BA%83%E3%81%8C%E3%82%8B%E7%94%9F%E6%88%90-ai%E3%80%82%E4%BC%81%E6%A5%AD%E3%81%AE%E6%88%90%E9%95%B7%E3%81%AB/\">こちら</a>&nbsp;をご参照ください。</p> \n<h2>株式会社マキタ様の状況と検証に至る経緯</h2> \n<p>株式会社マキタ様は、船舶用ディーゼルエンジンを製造する企業として、各種業務システムを AWS で運用しておりましたが、以下のような課題を抱えておりました。</p> \n<ul> \n <li>経営判断に必要なデータが社内の様々な部門に分散しており、迅速な意思決定を行う上でボトルネックとなることがあった。</li> \n <li>労働災害報告書の作成に多くの時間を要し、提出者ごとに記載および検討レベルにばらつきがある。また過去の類似事例や法令確認についても経験と知識が必要なため属人化しており、多面的な対策検討が不足しがちだった。</li> \n</ul> \n<p>そこで Amazon QuickSight (* 現 Amazon Quick Suite) や Amazon Bedrock をはじめとしたマネージドサービスを活用して、これらの課題を解決するソリューションの検証をすることになりました。</p> \n<p>生成 AI を活用して、以下2つのソリューションを情報システム部門にて内製開発しました。</p> \n<p>(*) Amazon QuickSight は先日リリースされた Amazon Quick Suite の一部に統合されました。詳細は <a href=\"https://aws.amazon.com/jp/blogs/news/reimagine-business-intelligence-amazon-quicksight-evolves-to-amazon-quick-suite/\">こちら</a> をご覧ください。</p> \n<h2>ソリューションと構成</h2> \n<h3>1. 経営ダッシュボード</h3> \n<p>本ソリューションは、クラウドストレージに取り込んだ情報ソース（就労、人材管理、会計データ）を基に、Amazon QuickSight を活用して可視化しています。</p> \n<ul> \n <li>AWS Lambda を活用した各種 SaaS やオンプレ環境からのデータを効率よく収集・整形</li> \n <li>AWS Glue DataBrew を活用した ETL 処理でデータを効率的に変換して Amazon S3 にて一元管理</li> \n <li>Amazon QuickSight を活用してデータを取り込み経営ダッシュボードとして可視化</li> \n</ul> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/makita_aws_architecture.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166882\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/makita_aws_architecture.png\" alt=\"\" width=\"608\" height=\"403\"></a></p> \n<h3>2.労働災害報告書作成支援 AI</h3> \n<p>本ソリューションでは、Amazon Bedrock を活用して労働災害報告書の作成・分析プロセスを効率化しました。</p> \n<ul> \n <li>AWS で構築していた既存の AI チャット基盤（Dify）のアーキテクチャを踏襲し、労働災害報告書作成支援 AI を Amazon Bedrockと Python で構築</li> \n <li>製造業で一般的なリスクアセスメント手法に沿った網羅的な AI 提案により、原因分析と対策立案時に関係者の議論を支援</li> \n <li>マルチエージェントコラボレーション機能により、使用目的に応じた柔軟に思考する AI を実現</li> \n <li>RAG (<a href=\"https://aws.amazon.com/jp/what-is/retrieval-augmented-generation/\">Retrieval Augmented Generation</a>) とデータベース（MCP : Model Context Protocol 経由での呼び出し）を使い分け、過去の災害情報や法令情報を効率的に検索・参照できる仕組みを実装</li> \n</ul> \n<p>AWS のセキュアなネットワーク内で、機密性の高い労働災害情報や社内データを外部に漏らすリスクを排除しながら、AI を活用した業務効率化を実現しました。</p> \n<p style=\"text-align: center\"></p> \n<h2>導入効果</h2> \n<p>上記のソリューションをリリースした結果、以下のような効果が得られました。</p> \n<h3>1. 経営ダッシュボード</h3> \n<ul> \n <li>統一された情報の見える化により各部門の自走的なデータ活用が促進</li> \n <li>7 つのダッシュボードで 231 の指標を可視化することに成功。更新頻度の上昇や視認性の向上、ドリルダウン機能の実装により、判断・意思決定スピードが向上</li> \n <li>ダッシュボード構築によりデータの共有や運用が標準化され、集計や分析の属人化リスクを軽減</li> \n</ul> \n<h3>2. 労働災害報告書作成支援 AI</h3> \n<ul> \n <li>過去事例を踏まえた多角的な分析により人間では見落としがちな災害要因を発見し、再発防止策の質が向上</li> \n <li>AIによる網羅的な原因分析やリスクアセスメント提案による検討漏れ防止</li> \n <li>過去 15 年分の自社災害 DB を AI が検索分析し、従来活用が難しかった過去データの有効活用を実現</li> \n</ul> \n<h2>お客様の声（株式会社マキタ様）</h2> \n<p>AWS はスモールスタートが容易で仕組みの再利用ができるため、内製のハードルが下がり、短期間での実装実現につながりました。安定した AWS 基盤上で完結する、多機能な AI 開発環境を使えることが、AWS 上で AI を使うメリットです。AWS の豊富なサービスを活用することによって、システム開発経験者の少ない状況でも、7カ月で経営ダッシュボードを、1.5 カ月で報告書作成支援 AI を内製開発できました。これは、潤沢にエンジニアを抱えることができない中堅・中小企業にとって、非常に魅力的な要素だと感じています。</p> \n<p>ダッシュボードも AI も、「蓄積されたデータを使い、人が判断したり、効率を上げたり、楽をしたりするためのツール」という意味でよく似ています。今後、より多くの社員が同時に利用したり、複雑な業務にも利用したいという要望が増えると考えています。実際、既に 200 近い AI とダッシュボード関連の活用案が、社内の全部門から寄せられています。それらの声に応えられるよう、私たちの部門で最新技術情報をキャッチしながら、更なるデータ活用と AI の高度利用を推進していきます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_aws_engine.jpg\"><br> <img loading=\"lazy\" class=\"wp-image-166106 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_aws_engine.jpg\" alt=\"\" width=\"460\" height=\"344\"><br> </a></p> \n<h2>まとめ</h2> \n<p>本事例は、製造業の企業が AWS の生成 AI サービスを活用することで、セキュリティを確保しつつ、業務効率化と安全対策の高度化を実現した好例です。株式会社マキタ様の内製化への積極的な姿勢と、AWS が提供する運用負荷の少ないマネージドサービス群が、経営ダッシュボードと労働災害報告書作成支援 AI の内製開発により、データ活用と業務プロセスの効率化を同時に達成しています。</p> \n<p>製造業における生成 AI の活用は、業務効率化だけでなく、生産性の向上や労働環境の安全性向上など様々な面で効果を発揮します。本事例が、様々な業種のお客様の AI 活用の参考になれば幸いです。AWS での生成 AI 活用や内製開発の推進にご興味をお持ちの方は、お気軽にご相談ください。</p> \n<p>\n <!-- 1枚目の写真と説明 --></p> \n<div style=\"align-items: center;margin-bottom: 30px\"> \n <div style=\"flex: 0 0 60%;max-width: 600px;margin-right: 20px\">\n  <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_awspic.jpg\"><br> <img loading=\"lazy\" width=\"1833\" height=\"1112\" class=\"alignnone wp-image-166107\" style=\"width: 100%;height: auto\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_awspic.jpg\" alt=\"\"><br> </a>\n </div> \n <div style=\"flex: 1\"> \n  <p><strong>株式会社マキタ</strong> (右から)<br> 執行役員 情報企画部 部長 高山 百合子 様<br> 情報企画部 宮﨑 凌大 様<br> 情報企画部 佐藤 功併 様<br> 情報企画部 岡 育美 様<br> 経営企画部 谷 かすみ 様</p> \n </div> \n</div> \n<div style=\"align-items: center;margin-bottom: 30px\"> \n <div style=\"flex: 0 0 60%;max-width: 600px;margin-right: 20px\"> \n  <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/makita_0715-scaled.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-166105\" style=\"width: 100%;height: auto\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_0715.jpg\" alt=\"\" width=\"4435\" height=\"3443\"></a></p> \n </div> \n <div style=\"flex: 1\"> \n  <p><strong>株式会社マキタ</strong> : 執行役員 情報企画部 部長 高山 百合子様（中央）<br> <strong>Amazon Web Services Japan</strong> : アカウントマネージャー 植木 輝（左）、ソリューションアーキテクト 森 瞭輔（右）</p> \n </div> \n</div> \n<p>ソリューションアーキテクト 森</p>"
  },
  {
    "title": "キャパシティの分割、移動、変更による Amazon EC2 オンデマンドキャパシティ予約の効率的な管理",
    "date": "2025-10-16T01:07:12.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/efficiently-manage-amazon-ec2-on-demand-capacity-reservations-odcrs-with-split-move-and-modify/",
    "content": "<section class=\"blog-post-content lb-rtxt\"> \n <p><em>本稿は、2025 年 3 月 11 日に公開された “<a href=\"https://aws.amazon.com/jp/blogs/compute/efficiently-manage-amazon-ec2-on-demand-capacity-reservations-odcrs-with-split-move-and-modify/\">Efficiently manage Amazon EC2 On-Demand Capacity Reservations (ODCRs) with split, move, and modify</a>” を翻訳したものです。</em></p> \n <h2>はじめに</h2> \n <p>今日のクラウドファーストの世界では、アプリケーションの可用性を確保しながらコンピューティング能力を効率的に管理することがビジネスにとって非常に重要です。<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\">Amazon EC2 オンデマンドキャパシティ予約（ODCR）</a>は、予約を管理したいが、複数のチームやアカウントにまたがる予約を管理するのは難しいと考える組織にとって有用なツールです。2024 年 8 月に、キャパシティ予約の管理に新しい機能（分割、移動、変更）が導入されました。このブログでは、これらの機能がどのように業務を変えることができるかご紹介します。 </p> \n <h2>ODCR に関するよくある課題</h2> \n <p>ODCR を活用する際、キャパシティ予約の管理についていくつか課題に直面することがあります。これらの課題には以下が含まれますが、これらがすべてではありません。</p> \n <ul> \n  <li>一部のアカウントで予約したキャパシティが十分に活用されていない</li> \n  <li>余剰キャパシティを効率的に再配分できていない</li> \n  <li>複数の AWS アカウントにわたる既存キャパシティの管理が難しい</li> \n  <li>キャパシティ予約後の変更が難しい</li> \n </ul> \n <p>複数の開発チームと様々なプロジェクトが同時に進行している場合、効率的なキャパシティ割り当てに苦労するかもしれません。また、あるチームではキャパシティが余っている一方で、別のチームではキャパシティが切実に必要になっているという状況に直面することもありえます。</p> \n <h3>ユースケース 1: チーム間でのキャパシティの再配分</h3> \n <h4>未使用キャパシティのジレンマ</h4> \n <p>機械学習（ML）チームが c5.2xlarge インスタンス 10 個分の ODCR を所有しているものの、実際に使用しているのは 5 個のみというシナリオを考えてみます。一方、分析チームは新しいプロジェクトのために、同じタイプの <a href=\"https://aws.amazon.com/jp/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> インスタンスを 3 個を必要としています。これまでであれば、分析チームは新しいキャパシティ予約を作成する必要があり、独自のキャパシティ予約を管理するという不要な作業が発生していました。一方、ML チームが所有する ODCR の未使用のキャパシティ 5 個分は、不要なコストを発生させています。</p> \n <h4>キャパシティの分割</h4> \n <p>キャパシティ予約の<a href=\"https://docs.aws.amazon.com/jp_ja/AWSEC2/latest/UserGuide/capacity-reservations-split.html\">分割機能</a>を使用すると、EC2 インスタンス 10 個分の ODCR （図 1 の ODCR-1）を分割し、未使用キャパシティ 3 個分を使用して新しい ODCR を作成できるようになります。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-1-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-1-1-1024x372.png\" alt=\"キャパシティ分割前の ODCR-1 のキャパシティ\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165574\"></a></p> \n <p style=\"text-align: center\">図 1: キャパシティ分割前の ODCR-1 のキャパシティ</p> \n <p>この機能により、2 つの ODCR が作成されます。</p> \n <ol> \n  <li>元の ODCR（ODCR-1）: ML チーム向けのインスタンス 7 個分のキャパシティ</li> \n  <li>新しい ODCR（ODCR-2）: 分析チーム向けのインスタンス 3 個分のキャパシティ</li> \n </ol> \n <p>分割されると次の図のようになります。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-2-1024x372.png\" alt=\"キャパシティ分割により更新された ODCR-1 と新しく作成された ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165599\"></a></p> \n <p style=\"text-align: center\">図 2: キャパシティ分割により更新された ODCR-1 と新しく作成された ODCR-2</p> \n <h4>アカウント間の共有</h4> \n <p>キャパシティ予約の分割機能により、同じ AWS アカウント内に新しい ODCR が作成できます。チームが同じ AWS アカウントで作業している場合は、分割は直接実行され、追加の作業は必要ありません。ただし、チームが異なる AWS アカウントを使用している場合は、分割後に新しく作成された ODCR を<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservation-sharing.html\">共有</a>するために、<a href=\"https://aws.amazon.com/jp/ram/\">AWS Resource Access Manager (AWS RAM)</a> を使用する必要があります。これにより、アカウント間で共有されたキャパシティ予約も一元管理できます。</p> \n <p>キャパシティを分割する場合の前提条件と考慮事項の詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-split.html\">AWS ドキュメント</a>を参照してください。</p> \n <p>また、パラメーターや例外、制限などの詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/APIReference/API_CreateCapacityReservationBySplitting.html\">API</a> および <a href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/reference/ec2/create-capacity-reservation-by-splitting.html\">CLI</a> のドキュメントを参照してください。</p> \n <h3>ユースケース 2: ODCR 間のキャパシティの移動</h3> \n <h4>成長に合わせたスケーリング</h4> \n <p>数日後、分析チームではプロジェクト拡大のためにさらにインスタンス 1 個分のキャパシティが必要になり、ODCR-2 にキャパシティをさらに追加する必要が出てきました。</p> \n <h4>キャパシティの移動</h4> \n <p>この目的のために新しい ODCR を作成するのではなく、未使用キャパシティの 1 つを ODCR-1 から ODCR-2 に<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-move.html\">移動</a>することができます。この柔軟性により、新しくキャパシティ予約を作成する手間が省かれ、既存のワークロードの実行も中断されず、ODCR の管理をシンプルにできます。キャパシティの移動により、追加の調達を行うことなく、最適なリソース使用率を確保できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-3.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-3-1024x372.png\" alt=\"キャパシティ移動前の ODCR-1 と ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165598\"></a></p> \n <p style=\"text-align: center\">図 3: キャパシティ移動前の ODCR-1 と ODCR-2</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-4.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-4-1024x372.png\" alt=\"キャパシティ移動によりキャパシティを減らした ODCR-1 とキャパシティが追加された ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165612\"></a></p> \n <p style=\"text-align: center\">図 4: キャパシティ移動によりキャパシティを減らした ODCR-1 とキャパシティが追加された ODCR-2</p> \n <p>キャパシティを移動する場合の前提条件と考慮事項の詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-move.html\">AWS ドキュメント</a>を参照してください。</p> \n <p>また、パラメーターや例外、制限などの詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/APIReference/API_MoveCapacityReservationInstances.html\">API</a> および <a href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/reference/ec2/move-capacity-reservation-instances.html\">CLI</a> のドキュメントを参照してください。</p> \n <h3>ユースケース 3: 変化するワークロードのパターンに合わせたキャパシティ予約属性の調整</h3> \n <h4>動的なワークロード要件</h4> \n <p>データ処理のワークロードパターンが大きく変化する場合は、それに適応する必要があります。最初は、ODCR を特定のインスタンスに限定する基準で作成し、予測可能なワークロードを対象としていました。ですが、より動的で即興的な分析プロジェクトを導入するにつれて、予約に対してインスタンスを起動する方法をより柔軟にする必要が出てきました。</p> \n <h4>キャパシティ予約の変更</h4> \n <p>キャパシティ予約の<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-modify.html\">変更</a>により、新しい予約を作成したり、実行中のワークロードを中断したりすることなく、予約の属性を変更できるようになりました。ODCR は以下の変更が可能です。</p> \n <ul> \n  <li>インスタンス数の変更</li> \n  <li>インスタンスの適格性の変更（ターゲットからオープンへ）</li> \n  <li>プロジェクトのタイムラインに合わせたキャパシティ予約の終了日の変更</li> \n </ul> \n <p>キャパシティ予約の変更により、以下のことができるようになります。</p> \n <ul> \n  <li>厳密なインスタンスの適格性がなくても、新しいインスタンスをより柔軟に起動可能</li> \n  <li>さまざまなプロジェクトにおけるキャパシティ予約の使用率向上</li> \n  <li>変化するビジネスニーズに適応しながら、コストの最適化</li> \n </ul> \n <p>この機能は、既存のワークロードが中断されることなく継続的に実行されることを保証しながら、柔軟性を確保できるため、動的なワークロードにとって非常に貴重なツールとなります。ODCR-2 のキャパシティを 4 から 6 に変更する例については、次の図をご覧ください。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-5.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-5-1024x372.png\" alt=\"キャパシティ予約変更前の ODCR-2（全体キャパシティは 4 でインスタンスの適格性はターゲット）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165611\"></a></p> \n <p style=\"text-align: center\">図 5: キャパシティ予約変更前の ODCR-2（全体キャパシティは 4 でインスタンスの適格性はターゲット）</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-6.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-6-1024x372.png\" alt=\"キャパシティ予約変更後の ODCR-2（全体キャパシティは 6 でインスタンスの適格性はオープン）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165610\"></a></p> \n <p style=\"text-align: center\">図 6: キャパシティ予約変更後の ODCR-2（全体キャパシティは 6 でインスタンスの適格性はオープン）</p> \n <p>ODCR の規模を拡大したり、新規に作成したりするには、Amazon EC2 オンデマンドインスタンスのキャパシティに空きがあることが条件となります。したがって、既存の ODCR に未使用のキャパシティがある場合は、ODCR を変更するよりも、その ODCR を移動または分割する方が適切な選択肢となる場合があります。</p> \n <p>キャパシティ予約を変更する場合の前提条件と考慮事項の詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-modify.html\">AWS ドキュメント</a>を参照してください。</p> \n <p>また、パラメーターや例外、制限などの詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/APIReference/API_ModifyCapacityReservation.html\">API</a> および <a href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/reference/ec2/modify-capacity-reservation.html\">CLI</a> のドキュメントを参照してください。</p> \n <h3>キャパシティ分割に関する特別な考慮事項</h3> \n <p>前のセクションでは、キャパシティ分割機能を使用して未使用の余剰キャパシティを切り離し、別のチームの ODCR を作成する方法について説明しました。また、この機能を使用して、使用済みキャパシティを分割して新しい ODCR を作成することもできます。この機能は、部分的に使用されている ODCR を分割して新しい ODCR を作成し、追跡と管理を容易にしたい場合に特に役立ちます。未使用や余剰キャパシティの分割に関する<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-split.html#capacity-reservations-split-considerations\">考慮事項</a>に加えて、使用済みキャパシティの分割には以下の考慮事項があります。</p> \n <ol> \n  <li>使用済みキャパシティは、どのアカウントとも共有されておらず、インスタンスの適格性がオープンである ODCR に対してのみ分割できる</li> \n  <li>キャパシティ予約内で実行されているインスタンスの適格性はオープンである</li> \n  <li>使用済みキャパシティを分割すると、適格性のあるインスタンスがランダムに選択される。分割対象のインスタンスを指定することはできず、数量を満たすのに十分な数の適格性のあるインスタンスが見つからない場合、キャパシティ分割は失敗する。分割するインスタンス数を指定すると、デフォルトでは未使用のキャパシティが最初に移動され、次に適格性のある実行中のインスタンス（予約内の使用済みキャパシティ）が移動される</li> \n </ol> \n <p>次のセクションでは、キャパシティ分割を使用できるシナリオと使用できないシナリオについて説明します。</p> \n <h4>シナリオ 1: 社内における ODCR の管理（他の AWS アカウントと共有されないキャパシティ予約）</h4> \n <p>社内プロジェクトで利用する ODCR が、他の AWS アカウントを持つ外部パートナーと共有せず、インスタンスの適格性がオープンであるシナリオとして、以下の条件を満たす ODCR-1 を考えてみます。</p> \n <ul> \n  <li>全体キャパシティが 10 個の c5.2xlarge インスタンス（インスタンスの適格性はすべてオープン）</li> \n  <li>現在 ML チームが使用しているインスタンスは 8 個</li> \n  <li>未使用のインスタンスは 2 個</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-7.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-7-1024x372.png\" alt=\"キャパシティ分割前の ODCR-1（キャパシティ予約の総容量は 10 で、そのうち未使用キャパシティは 2）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165609\"></a></p> \n <p style=\"text-align: center\">図 7: キャパシティ分割前の ODCR-1（全体キャパシティは 10 で未使用キャパシティは 2）</p> \n <p>この ODCR は他の AWS アカウントと共有されないため、キャパシティ予約を分割する際の柔軟性を最大限に高めることができます。現在使用中のインスタンス数に関わらず、最大 9 個のインスタンスを新しいキャパシティ予約（全体キャパシティから 1 を引いた数）として分割できます。このシナリオでは、使用済みキャパシティと未使用キャパシティの両方を共有できます。これにより、社内チームのキャパシティ割り当てを柔軟に再編成できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-8.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-8-1024x372.png\" alt=\"キャパシティ分割後の ODCR-1 と ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165608\"></a></p> \n <p style=\"text-align: center\">図 8: キャパシティ分割により更新された ODCR-1 と新しく作成された ODCR-2</p> \n <h4>シナリオ 2: 外部パートナーと共有する ODCR の管理（他の AWS アカウントと共有されるキャパシティ予約）</h4> \n <p>ODCR を外部パートナーの AWS アカウントと共有する必要があるシナリオとして、以下の条件を満たす ODCR-1 を考えてみます。</p> \n <ul> \n  <li>全体キャパシティが 10 個の c5.2xlarge インスタンス</li> \n  <li>現在チームとパートナーが使用しているインスタンスは 8 個</li> \n  <li>未使用のインスタンスは 2 個</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-9.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-9-1024x274.png\" alt=\"他の AWS アカウントと共有するキャパシティ分割前の ODCR-1\" width=\"1024\" height=\"274\" class=\"aligncenter size-large wp-image-165607\"></a></p> \n <p style=\"text-align: center\">図 9: 他の AWS アカウントと共有するキャパシティ分割前の ODCR-1</p> \n <p>この場合、選択肢は限定されます。ODCR-1 はパートナーの AWS アカウントと共有されるため、未使用のキャパシティ（最大 2 つのインスタンス）のみを分割できます。キャパシティ分割後、新しく作成された ODCR-2 は社内の AWS アカウントに残り、他の AWS アカウントと共有されることはありません。これにより、パートナーが実行中のワークロードへの中断を防ぎながら、キャパシティ管理の柔軟性を確保できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-10-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-10-1-1024x513.png\" alt=\"キャパシティ分割により他の AWS アカウントと共有される ODCR-1 と共有されない ODCR-2\" width=\"1024\" height=\"513\" class=\"aligncenter size-large wp-image-165614\"></a></p> \n <p style=\"text-align: center\">図 10: キャパシティ分割により他の AWS アカウントと共有される ODCR-1 と共有されない ODCR-2</p> \n <p>これらのシナリオは、社内環境および外部パートナーとの共有環境の両方におけるキャパシティ管理に関して重要なものです。キャパシティの分割や変更を計画する前に、ODCR の共有状況を慎重に検討し、社内チームと外部パートナーの両方にとって円滑な運用を確保する必要があります。</p> \n <h3>キャパシティ移動に関する特別な考慮事項</h3> \n <p>キャパシティ移動を行うと、利用可能な（または余剰の）キャパシティを ODCR 間で再配分できます。ただし、場合によっては、この機能を使用して使用済みインスタンスを ODCR 間で移動することもできます。この機能は、部分的に使用されている ODCR を 1 つに統合して追跡と管理を容易にしたい場合に特に役立ちます。<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-move.html#capacity-reservations-move-prereq\">未使用キャパシティの移動に関する考慮事項</a>に加えて、使用済みキャパシティの移動には以下の考慮事項があります。</p> \n <ol> \n  <li>移動元の ODCR と移動先の ODCR はどちらもインスタンスの適格性をオープンとして利用可能でアクティブ状態である</li> \n  <li>キャパシティ予約内で実行されているインスタンスはインスタンスの適格性をオープンとして利用可能である</li> \n  <li>移動元の ODCR と移動先の ODCR はどちらも同じ AWS アカウントが所有する</li> \n  <li>移動元の ODCR と移動先の ODCR は共有可能だが、使用済みインスタンスを移動する際に同じアカウントリストを使用する必要がある。また、同じアカウントへ共有するための条件は、ODCR の未使用部分には適用されない</li> \n </ol> \n <p>移動するインスタンス数を指定すると、デフォルトでは未使用キャパシティが最初に移動され、次に対象となる実行中のインスタンス（予約で使用されているキャパシティ）が移動されます。</p> \n <p>次のセクションでは、この機能が使用できる場面と使用できない場面を説明します。</p> \n <h4>シナリオ 1: 移動元と移動先の ODCR を他のアカウントと共有していない（チーム内でのキャパシティ移動）</h4> \n <p>同じ AWS アカウント（アカウント A）を使用して社内チーム間でキャパシティを管理する場合、プロセスは明確です。例えば、ML チームのリソースを統合するシナリオとして、以下の条件を満たす ODCR-1 と ODCR-2 を考えてみます。</p> \n <ul> \n  <li>ODCR-1（ML チーム A）：合計キャパシティ 10 個のうち、8 個は使用中で 2 個は未使用（インスタンスの適格性はすべてオープン）</li> \n  <li>ODCR-2（ML チーム B）：合計キャパシティ 5 個のすべてが使用中（インスタンスの適格性はすべてオープン）</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-11.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-11-1024x372.png\" alt=\"キャパシティ移動前の ODCR-1 と ODCR-2（どちらも同じ AWS アカウントであり、外部と共有されていない）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165605\"></a></p> \n <p style=\"text-align: center\">図 11: キャパシティ移動前の ODCR-1 と ODCR-2（どちらも同じ AWS アカウントで共有なし）</p> \n <p>両方の ODCR は同じアカウントに属しており、外部と共有されておらず、インスタンスの適格性はオープンです。そのため、ODCR-1 から ODCR-2 にすべてのキャパシティを自由に移動でき、統合 DevOps チーム向けに 15 個のインスタンスからなる統合プールを作成できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-12.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-12-1024x372.png\" alt=\"ODCR-1 からキャパシティが移動され、合計キャパシティが 15 になった ODCR-2（2 個は未使用）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165604\"></a></p> \n <p style=\"text-align: center\">図 12: ODCR-1 からキャパシティが移動され、合計キャパシティが 15 になった ODCR-2（2 個は未使用）</p> \n <h4>シナリオ 2: 移動元と移動先の ODCR が同じアカウントで共有される（外部パートナーとのコラボレーション）</h4> \n <p>ML チーム（ODCR-1）が外部の AI 研究パートナー（アカウント B）と連携するシナリオとして、以下の条件を満たす ODCR-1 と ODCR-2 を考えてみます。</p> \n <ul> \n  <li>ODCR-1: 合計キャパシティ 10 個（8 個が使用済み、2 個が未使用）のインスタンスの適格性はすべてオープンであり、AWS RAM を通じて研究パートナーと共有</li> \n  <li>ODCR-2: 社内分析チーム用の合計キャパシティ 5 個（すべて使用済み）のインスタンスの適格性はすべてオープン</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-13-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-13-1-1024x513.png\" alt=\"キャパシティ移動前の ODCR-1 と ODCR-2（ODCR-1 は他の AWS アカウントと共有）\" width=\"1024\" height=\"513\" class=\"aligncenter size-large wp-image-165619\"></a></p> \n <p style=\"text-align: center\">図 13: キャパシティ移動前の ODCR-1 と ODCR-2（ODCR-1 は他の AWS アカウントと共有）</p> \n <p>分析チームにさらに多くのキャパシティが必要になった場合、他の 8 個は外部パートナーとのコラボレーションで使用されているため、未使用のインスタンス 2 個だけを ODCR-1 から ODCR-2 に移動できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-14.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-14-1024x513.png\" alt=\": ODCR-1 の未使用キャパシティのみが移動されて拡張された ODCR-2\" width=\"1024\" height=\"513\" class=\"aligncenter size-large wp-image-165602\"></a></p> \n <p style=\"text-align: center\">図 14: ODCR-1 の未使用キャパシティのみが移動されて拡張された ODCR-2</p> \n <h4>シナリオ 3: 異なるアカウントで共有される移動元 ODCR と移動先 ODCR（複数の外部パートナーが参加するプロジェクト）</h4> \n <p>さまざまなパートナー契約にわたるキャパシティの管理を伴うこのシナリオでは、次のようになります。</p> \n <ul> \n  <li>ODCR-1: データベースパートナー（アカウント B）と共有される全体キャパシティ 10 個のインスタンス（使用済み 8 個、未使用 2 個）</li> \n  <li>ODCR-2: セキュリティパートナー（アカウント C）と共有される全体キャパシティ 5 個のインスタンス（すべて使用済み）</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-15.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-15-1024x553.png\" alt=\"異なる AWS アカウントで共有される ODCR-1 と ODCR-2\" width=\"1024\" height=\"553\" class=\"aligncenter size-large wp-image-165621\"></a></p> \n <p style=\"text-align: center\">図 15: 異なる AWS アカウントで共有される ODCR-1 と ODCR-2</p> \n <p>パートナー契約が異なる、つまり ODCR が他のアカウントと共有されているため、未使用の 2 つのキャパシティを ODCR-1 から ODCR-2 にのみ移動できます。これにより、データベースパートナーのワークロードに影響が出ることはありません。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-16-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-16-1-1024x553.png\" alt=\"共有されたキャパシティ予約により、未使用キャパシティのみが ODCR-2 に移動\" width=\"1024\" height=\"553\" class=\"aligncenter size-large wp-image-165620\"></a></p> \n <p style=\"text-align: center\">図 16: 共有されたキャパシティ予約により、ODCR-1 の未使用キャパシティが移動された ODCR-2</p> \n <p>これらのシナリオから、マルチアカウント環境におけるキャパシティ管理に関する貴重な教訓を得ることができます。柔軟性とパートナーのコミットメントのバランスを取った包括的な共有戦略を策定することで、強固なパートナー関係を維持しながらリソース使用率を最適化できます。</p> \n <h2>まとめ</h2> \n <p>AWS の新しい ODCR 機能（分割、移動、変更）は、クラウドキャパシティ管理において大きな進歩となりました。これらの機能は、組織におけるコンピューティングリソースの運用方法を変革し、より効率的な運用とコスト管理を実現します。キャパシティ予約を動的に調整・共有できる機能により、重要なワークロードに必要な安定性を維持しながら、必要な柔軟性が得られます。</p> \n <p>クラウドインフラストラクチャが進化を続ける中、これらの機能により、複雑なクラウド環境の管理で直面する現実的な課題へ対応できるようになりました。AWS インフラストラクチャの最適化に向けて、新しい ODCR 機能はキャパシティ管理とリソース利用を向上させる強力なツールとなります。</p> \n <p>これらの機能への理解を深めていただくために、実装用の API を含む <a href=\"https://github.com/aws-samples/amazon-odcr-management\">GitHub</a> リポジトリを作成しました。詳細については、キャパシティ予約の<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\">ドキュメント</a>をご覧ください。ご質問やご意見がございましたら、コメント欄にご記入いただくか、AWS サポートまでお気軽にお問い合わせください。</p> \n <p> 翻訳はソリューションアーキテクトの 阿部 純一郎 が担当しました。</p>\n</section>"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.7",
    "date": "2025-10-15T23:39:55.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.7",
    "content": "### Core Changes\n\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheLife`: #84877\n- fix: always use the safe stable stringify: #84909\n- [Cache Components] Fix cacheSignal in dev render: #84846\n- [dev-overlay] Never dedupe errors with different names or messages: #84908\n- Remove deprecated experimental_ppr route-level configuration: #84871\n- Include server latency in debug info: #84580\n- Fix parallel routes ignoring generateStaticParams from primary route: #84889\n\n### Misc Changes\n\n- Turbopack: expose client static assets correctly: #84695\n- Turbopack: better errors for strip_prefix_len: #84882\n- Turbopack: improve missing factory message: #84881\n- CNA: Update template to use ESLint Flat config: #84917\n- fix: process.env.TURBOPACK maybe undefined: #84885\n- Turbopack: fix spacing on EcmascriptModuleAssetType: #84915\n- Update Rspack development test manifest: #84890\n- Update Rspack production test manifest: #84891\n- Fix url-imports test: #84922\n\n### Credits \n\nHuge thanks to @gnoff, @huozhi, @mischnic, @lubieowoce, @eps1lon, @wyattjoh, @devjiwonchoi, @SyMind, @sokra, @acdlite, and @vercel-release-bot for helping!\n"
  },
  {
    "title": "nodejs/node – 2025-10-15, Version 25.0.0 (Current), @RafaelGSS",
    "date": "2025-10-15T17:20:43.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v25.0.0",
    "content": "Node.js 25 is here! We have upgraded V8 to **14.1**, bringing major `JSON.stringify`\r\nperformance improvements, built-in `Uint8Array` base64/hex conversion, and ongoing\r\nWebAssembly and JIT pipeline optimizations.\r\n\r\nThis release doubles down on secure-by-default apps and web-standard APIs: the permission\r\nmodel gains `--allow-net`, Web Storage is enabled by default, and `ErrorEvent` is now a global.\r\n\r\nWe’ve also removed or finalized long-deprecated APIs such as SlowBuffer,\r\nand added quality-of-life improvements like a portable compile cache and JSPI for WebAssembly.\r\n\r\n### Notable Changes\r\n\r\n* \\[[`8bc7dfd16f`](https://github.com/nodejs/node/commit/8bc7dfd16f)] - **build**: test on Python 3.14 release candidate 3 (Christian Clauss) [#59983](https://github.com/nodejs/node/pull/59983)\r\n* \\[[`663554abdf`](https://github.com/nodejs/node/commit/663554abdf)] - **(SEMVER-MAJOR)** **lib**: expose global ErrorEvent (Richie Bendall) [#58920](https://github.com/nodejs/node/pull/58920)\r\n* \\[[`3312e4e946`](https://github.com/nodejs/node/commit/3312e4e946)] - **(SEMVER-MAJOR)** **src**: unflag --experimental-webstorage by default (Daniel M Brasil) [#57666](https://github.com/nodejs/node/pull/57666)\r\n* \\[[`462c74181d`](https://github.com/nodejs/node/commit/462c74181d)] - **(SEMVER-MAJOR)** **src,permission**: add --allow-net permission (Rafael Gonzaga) [#58517](https://github.com/nodejs/node/pull/58517)\r\n\r\n### Deprecations and Removals\r\n\r\n* \\[[`d33f4b539a`](https://github.com/nodejs/node/commit/d33f4b539a)] - **(SEMVER-MAJOR)** **assert**: move assert.fail with multiple arguments to eol (James M Snell) [#58532](https://github.com/nodejs/node/pull/58532)\r\n* \\[[`b21574d63b`](https://github.com/nodejs/node/commit/b21574d63b)] - **(SEMVER-MAJOR)** **assert**: move CallTracker to EOL (James M Snell) [#58006](https://github.com/nodejs/node/pull/58006)\r\n* \\[[`308b6bc6de`](https://github.com/nodejs/node/commit/308b6bc6de)] - **(SEMVER-MAJOR)** **async\\_hooks**: move `asyncResource` property on bound function to EOL (James M Snell) [#58618](https://github.com/nodejs/node/pull/58618)\r\n* \\[[`daced4ab98`](https://github.com/nodejs/node/commit/daced4ab98)] - **(SEMVER-MAJOR)** **buffer**: move SlowBuffer to EOL (Filip Skokan) [#58220](https://github.com/nodejs/node/pull/58220)\r\n* \\[[`df16f0fd8d`](https://github.com/nodejs/node/commit/df16f0fd8d)] - **(SEMVER-MAJOR)** **child\\_process**: move \\_channel to end-of-life (James M Snell) [#58527](https://github.com/nodejs/node/pull/58527)\r\n* \\[[`a472745958`](https://github.com/nodejs/node/commit/a472745958)] - **(SEMVER-MAJOR)** **crypto**: runtime-deprecate default shake128/256 output lengths (Filip Skokan) [#59008](https://github.com/nodejs/node/pull/59008)\r\n* \\[[`c3b986853c`](https://github.com/nodejs/node/commit/c3b986853c)] - **(SEMVER-MAJOR)** **crypto**: move deprecated hash and mgf1Hash options to EOL (James M Snell) [#58706](https://github.com/nodejs/node/pull/58706)\r\n* \\[[`66632648ba`](https://github.com/nodejs/node/commit/66632648ba)] - **(SEMVER-MAJOR)** **crypto**: runtime deprecate ECDH.setPublicKey() (James M Snell) [#58620](https://github.com/nodejs/node/pull/58620)\r\n* \\[[`a5f9ca1f77`](https://github.com/nodejs/node/commit/a5f9ca1f77)] - **(SEMVER-MAJOR)** **dns**: move falsy hostname in lookup to end-of-life (James M Snell) [#58619](https://github.com/nodejs/node/pull/58619)\r\n* \\[[`2bb7667475`](https://github.com/nodejs/node/commit/2bb7667475)] - **(SEMVER-MAJOR)** **fs**: move FileHandle close on GC to EOL (James M Snell) [#58536](https://github.com/nodejs/node/pull/58536)\r\n* \\[[`eec0302088`](https://github.com/nodejs/node/commit/eec0302088)] - **(SEMVER-MAJOR)** **fs**: move rmdir recursive option to end-of-life (James M Snell) [#58616](https://github.com/nodejs/node/pull/58616)\r\n* \\[[`25dd206c29`](https://github.com/nodejs/node/commit/25dd206c29)] - **(SEMVER-MAJOR)** **fs**: remove `fs.F_OK`, `fs.R_OK`, `fs.W_OK`, `fs.X_OK` (Livia Medeiros) [#55862](https://github.com/nodejs/node/pull/55862)\r\n* \\[[`91dadf2897`](https://github.com/nodejs/node/commit/91dadf2897)] - **(SEMVER-MAJOR)** **http**: deprecate writeHeader (Sebastian Beltran) [#59060](https://github.com/nodejs/node/pull/59060)\r\n* \\[[`4e06a648ff`](https://github.com/nodejs/node/commit/4e06a648ff)] - **(SEMVER-MAJOR)** **perf\\_hooks**: move deprecated accessors to EOF (James M Snell) [#58531](https://github.com/nodejs/node/pull/58531)\r\n* \\[[`a3dfca90d1`](https://github.com/nodejs/node/commit/a3dfca90d1)] - **(SEMVER-MAJOR)** **process**: move multipleResolves event to EOL (James M Snell) [#58707](https://github.com/nodejs/node/pull/58707)\r\n* \\[[`790acc8689`](https://github.com/nodejs/node/commit/790acc8689)] - **(SEMVER-MAJOR)** **tls**: move IP-address servername deprecation to eol (James M Snell) [#58533](https://github.com/nodejs/node/pull/58533)\r\n* \\[[`3aaa2ebe19`](https://github.com/nodejs/node/commit/3aaa2ebe19)] - **(SEMVER-MAJOR)** **url**: move bad port deprecation in legacy url to end-of-life (James M Snell) [#58617](https://github.com/nodejs/node/pull/58617)\r\n\r\n### Semver-Major Commits\r\n\r\n* \\[[`7c9fbc15bc`](https://github.com/nodejs/node/commit/7c9fbc15bc)] - **(SEMVER-MAJOR)** **assert,util**: fail promise comparison in deep equal checks (Ruben Bridgewater) [#59448](https://github.com/nodejs/node/pull/59448)\r\n* \\[[`11222f1a27`](https://github.com/nodejs/node/commit/11222f1a27)] - **(SEMVER-MAJOR)** **assert,util**: handle invalid dates as equal in deep comparison (Ruben Bridgewater) [#57627](https://github.com/nodejs/node/pull/57627)\r\n* \\[[`acce2e8f87`](https://github.com/nodejs/node/commit/acce2e8f87)] - **(SEMVER-MAJOR)** **build**: reset embedder string to \"-node.0\" (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`8a87ba031b`](https://github.com/nodejs/node/commit/8a87ba031b)] - **(SEMVER-MAJOR)** **build**: bump minimum Clang version to 19 (Michaël Zasso) [#59048](https://github.com/nodejs/node/pull/59048)\r\n* \\[[`21b131e93a`](https://github.com/nodejs/node/commit/21b131e93a)] - **(SEMVER-MAJOR)** **build**: reset embedder string to \"-node.0\" (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`f31c88021b`](https://github.com/nodejs/node/commit/f31c88021b)] - **(SEMVER-MAJOR)** **build**: stop distributing Corepack (Antoine du Hamel) [#57617](https://github.com/nodejs/node/pull/57617)\r\n* \\[[`b3238442d8`](https://github.com/nodejs/node/commit/b3238442d8)] - **(SEMVER-MAJOR)** **deps**: patch V8 for illumos (Dan McDonald) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`2a1da3260d`](https://github.com/nodejs/node/commit/2a1da3260d)] - **(SEMVER-MAJOR)** **deps**: patch V8 to avoid duplicated zlib symbol (Michaël Zasso) [#54077](https://github.com/nodejs/node/pull/54077)\r\n* \\[[`7772a2df9d`](https://github.com/nodejs/node/commit/7772a2df9d)] - **(SEMVER-MAJOR)** **deps**: update V8 to 14.1.146.11 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`6d61175db0`](https://github.com/nodejs/node/commit/6d61175db0)] - **(SEMVER-MAJOR)** **deps**: V8: backport 1d3362c55396 (Shu-yu Guo) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`974773572e`](https://github.com/nodejs/node/commit/974773572e)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick 4f38995c8295 (Shu-yu Guo) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`70bfc398e9`](https://github.com/nodejs/node/commit/70bfc398e9)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick 044b9b6f589d (Rezvan Mahdavi Hezaveh) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`6bfc525cf0`](https://github.com/nodejs/node/commit/6bfc525cf0)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick d2ad518a0b57 (Joyee Cheung) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`754d28e34f`](https://github.com/nodejs/node/commit/754d28e34f)] - **(SEMVER-MAJOR)** **deps**: V8: revert 6d6c1e680c7b (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`8c508b9399`](https://github.com/nodejs/node/commit/8c508b9399)] - **(SEMVER-MAJOR)** **deps**: V8: revert e3cddbedb205 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`88ca8287b6`](https://github.com/nodejs/node/commit/88ca8287b6)] - **(SEMVER-MAJOR)** **deps**: use std::map in MSVC STL for EphemeronRememberedSet (Joyee Cheung) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`838e2332a5`](https://github.com/nodejs/node/commit/838e2332a5)] - **(SEMVER-MAJOR)** **deps**: patch V8 for illumos (Dan McDonald) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`3522731d9a`](https://github.com/nodejs/node/commit/3522731d9a)] - **(SEMVER-MAJOR)** **deps**: remove problematic comment from v8-internal (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`d234475a33`](https://github.com/nodejs/node/commit/d234475a33)] - **(SEMVER-MAJOR)** **deps**: define V8\\_PRESERVE\\_MOST as no-op on Windows (Stefan Stojanovic) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`a738eb4a7f`](https://github.com/nodejs/node/commit/a738eb4a7f)] - **(SEMVER-MAJOR)** **deps**: fix FP16 bitcasts.h (Stefan Stojanovic) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`1744c7d991`](https://github.com/nodejs/node/commit/1744c7d991)] - **(SEMVER-MAJOR)** **deps**: patch V8 to avoid duplicated zlib symbol (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`fff0d1554d`](https://github.com/nodejs/node/commit/fff0d1554d)] - **(SEMVER-MAJOR)** **deps**: update V8 to 13.7.152.9 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`968e2f47c8`](https://github.com/nodejs/node/commit/968e2f47c8)] - **(SEMVER-MAJOR)** **dgram**: move deprecated APIs to EOL (James M Snell) [#58474](https://github.com/nodejs/node/pull/58474)\r\n* \\[[`5623194a6b`](https://github.com/nodejs/node/commit/5623194a6b)] - **(SEMVER-MAJOR)** **doc,src,test**: replace use of deprecated `GetIsolate` (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`823ca6991f`](https://github.com/nodejs/node/commit/823ca6991f)] - **(SEMVER-MAJOR)** **fs**: make `processReadResult()` and `readSyncRecursive()` private (Livia Medeiros) [#58672](https://github.com/nodejs/node/pull/58672)\r\n* \\[[`a273674dee`](https://github.com/nodejs/node/commit/a273674dee)] - **(SEMVER-MAJOR)** **fs**: move fs stream open method to eol (James M Snell) [#58529](https://github.com/nodejs/node/pull/58529)\r\n* \\[[`39d73036e7`](https://github.com/nodejs/node/commit/39d73036e7)] - **(SEMVER-MAJOR)** **lib**: use validators for argument validation (Nam Yooseong) [#59416](https://github.com/nodejs/node/pull/59416)\r\n* \\[[`cd68e35704`](https://github.com/nodejs/node/commit/cd68e35704)] - **(SEMVER-MAJOR)** **lib**: deprecate `_stream_*` modules (Dario Piotrowicz) [#58337](https://github.com/nodejs/node/pull/58337)\r\n* \\[[`a822a1cbe7`](https://github.com/nodejs/node/commit/a822a1cbe7)] - **(SEMVER-MAJOR)** **lib**: deprecate \\_tls\\_common and \\_tls\\_wrap (Dario Piotrowicz) [#57643](https://github.com/nodejs/node/pull/57643)\r\n* \\[[`705bcc2a00`](https://github.com/nodejs/node/commit/705bcc2a00)] - **(SEMVER-MAJOR)** **module**: move Module.\\_debug to end-of-life (James M Snell) [#58473](https://github.com/nodejs/node/pull/58473)\r\n* \\[[`5fe7800683`](https://github.com/nodejs/node/commit/5fe7800683)] - **(SEMVER-MAJOR)** **node-api**: add warning for NAPI\\_EXPERIMENTAL (Miguel Marcondes Filho) [#58280](https://github.com/nodejs/node/pull/58280)\r\n* \\[[`e1d4d6ab49`](https://github.com/nodejs/node/commit/e1d4d6ab49)] - **(SEMVER-MAJOR)** **repl**: eol deprecate instantiating without new (Aviv Keller) [#59495](https://github.com/nodejs/node/pull/59495)\r\n* \\[[`ed94bc48f3`](https://github.com/nodejs/node/commit/ed94bc48f3)] - **(SEMVER-MAJOR)** **src**: update crypto.getCipherInfo() to use DictionaryTemplate (James M Snell) [#60036](https://github.com/nodejs/node/pull/60036)\r\n* \\[[`37a3df3556`](https://github.com/nodejs/node/commit/37a3df3556)] - **(SEMVER-MAJOR)** **src**: fix calls to v8::Object::wrap (Andreas Haas) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`801ae26fa3`](https://github.com/nodejs/node/commit/801ae26fa3)] - **(SEMVER-MAJOR)** **src**: update NODE\\_MODULE\\_VERSION to 141 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`10df38a38b`](https://github.com/nodejs/node/commit/10df38a38b)] - **(SEMVER-MAJOR)** **src**: improve performance of dotenv ToObject (James M Snell) [#60038](https://github.com/nodejs/node/pull/60038)\r\n* \\[[`075936b413`](https://github.com/nodejs/node/commit/075936b413)] - **(SEMVER-MAJOR)** **src**: use std::string\\_view from node\\_report (iknoom) [#60006](https://github.com/nodejs/node/pull/60006)\r\n* \\[[`234c26cca3`](https://github.com/nodejs/node/commit/234c26cca3)] - **(SEMVER-MAJOR)** **src**: store `Local` for `CallbackScope` on stack (Anna Henningsen) [#59705](https://github.com/nodejs/node/pull/59705)\r\n* \\[[`708fd1945b`](https://github.com/nodejs/node/commit/708fd1945b)] - **(SEMVER-MAJOR)** **src**: remove node.h APIs to make callback without an async context (Chengzhong Wu) [#58471](https://github.com/nodejs/node/pull/58471)\r\n* \\[[`56989d33f5`](https://github.com/nodejs/node/commit/56989d33f5)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::EmitBeforeExit and node::EmitExit (Chengzhong Wu) [#58469](https://github.com/nodejs/node/pull/58469)\r\n* \\[[`d429aa2d17`](https://github.com/nodejs/node/commit/d429aa2d17)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::CreatePlatform and node::FreePlatform (Chengzhong Wu) [#58470](https://github.com/nodejs/node/pull/58470)\r\n* \\[[`e0ae14ce73`](https://github.com/nodejs/node/commit/e0ae14ce73)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::InitializeNodeWithArgs (Chengzhong Wu) [#58470](https://github.com/nodejs/node/pull/58470)\r\n* \\[[`db1700e4b5`](https://github.com/nodejs/node/commit/db1700e4b5)] - **(SEMVER-MAJOR)** **src**: update NODE\\_MODULE\\_VERSION to 138 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`0a87084150`](https://github.com/nodejs/node/commit/0a87084150)] - **(SEMVER-MAJOR)** **test**: update cppgc-object addon config (StefanStojanovic) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`7dd49d7da4`](https://github.com/nodejs/node/commit/7dd49d7da4)] - **(SEMVER-MAJOR)** **test**: spin longer for sequential/test-worker-prof (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`faba50df96`](https://github.com/nodejs/node/commit/faba50df96)] - **(SEMVER-MAJOR)** **test**: remove `--always-turbofan` flag (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`496f12dec6`](https://github.com/nodejs/node/commit/496f12dec6)] - **(SEMVER-MAJOR)** **test**: update snapshot for V8 14.1 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`05aa3a1c70`](https://github.com/nodejs/node/commit/05aa3a1c70)] - **(SEMVER-MAJOR)** **test,win**: split addon tests (StefanStojanovic) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`308de27255`](https://github.com/nodejs/node/commit/308de27255)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 14.0 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`b736370c07`](https://github.com/nodejs/node/commit/b736370c07)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.9 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`085a94ac9b`](https://github.com/nodejs/node/commit/085a94ac9b)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.8 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`a71ae18ac8`](https://github.com/nodejs/node/commit/a71ae18ac8)] - **(SEMVER-MAJOR)** **tools**: enable leaptiering for aix/ibmi (Abdirahim Musse) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`a8217a9eb8`](https://github.com/nodejs/node/commit/a8217a9eb8)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.7 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`fdef0725de`](https://github.com/nodejs/node/commit/fdef0725de)] - **(SEMVER-MAJOR)** **util,console**: colorize regexp groups, character classes, etc (Ruben Bridgewater) [#59710](https://github.com/nodejs/node/pull/59710)\r\n* \\[[`411cc42d22`](https://github.com/nodejs/node/commit/411cc42d22)] - **(SEMVER-MAJOR)** **worker**: move terminate callback to end-of-life (James M Snell) [#58528](https://github.com/nodejs/node/pull/58528)\r\n\r\n### Semver-Minor Commits\r\n\r\n* \\[[`94422e8a40`](https://github.com/nodejs/node/commit/94422e8a40)] - **(SEMVER-MINOR)** **src**: add an option to make compile cache portable (Aditi) [#58797](https://github.com/nodejs/node/pull/58797)\r\n* \\[[`29738c7b42`](https://github.com/nodejs/node/commit/29738c7b42)] - **(SEMVER-MINOR)** **src,permission**: add --allow-inspector ability (Rafael Gonzaga) [#59711](https://github.com/nodejs/node/pull/59711)\r\n* \\[[`f9fcc746f3`](https://github.com/nodejs/node/commit/f9fcc746f3)] - **(SEMVER-MINOR)** **v8**: add cpu profile (theanarkh) [#59807](https://github.com/nodejs/node/pull/59807)\r\n* \\[[`4396cf2d45`](https://github.com/nodejs/node/commit/4396cf2d45)] - **(SEMVER-MINOR)** **wasm**: enable JSPI (Guy Bedford) [#59941](https://github.com/nodejs/node/pull/59941)\r\n\r\n### Semver-Patch Commits\r\n\r\n* \\[[`91f035e597`](https://github.com/nodejs/node/commit/91f035e597)] - **assert**: resolve TODO and rename function (Antoine du Hamel) [#59451](https://github.com/nodejs/node/pull/59451)\r\n* \\[[`2e675c4fa3`](https://github.com/nodejs/node/commit/2e675c4fa3)] - **benchmark**: use non-deprecated WriteUtf8V2 method (Michaël Zasso) [#60173](https://github.com/nodejs/node/pull/60173)\r\n* \\[[`0fb040603b`](https://github.com/nodejs/node/commit/0fb040603b)] - **build**: upgrade Python linter ruff, add rules ASYNC,PERF (Christian Clauss) [#59984](https://github.com/nodejs/node/pull/59984)\r\n* \\[[`f468b6c72b`](https://github.com/nodejs/node/commit/f468b6c72b)] - **build**: update minimum Xcode version to 16.4 (Michaël Zasso) [#60079](https://github.com/nodejs/node/pull/60079)\r\n* \\[[`0eda17ba20`](https://github.com/nodejs/node/commit/0eda17ba20)] - **build**: fix flags for ngtcp2 on IBM i (SRAVANI GUNDEPALLI) [#60073](https://github.com/nodejs/node/pull/60073)\r\n* \\[[`22a864a275`](https://github.com/nodejs/node/commit/22a864a275)] - **build**: remove corepack from release tarballs (Jordan Harband) [#59835](https://github.com/nodejs/node/pull/59835)\r\n* \\[[`7079041e0a`](https://github.com/nodejs/node/commit/7079041e0a)] - **build**: only mention Apple when on Apple (Michaël Zasso) [#59385](https://github.com/nodejs/node/pull/59385)\r\n* \\[[`954d3f44ef`](https://github.com/nodejs/node/commit/954d3f44ef)] - **build**: check Apple clang version in configure script (Michaël Zasso) [#59358](https://github.com/nodejs/node/pull/59358)\r\n* \\[[`2b4a09ef8b`](https://github.com/nodejs/node/commit/2b4a09ef8b)] - **build**: fix OpenSSL version detection (Richard Lau) [#59353](https://github.com/nodejs/node/pull/59353)\r\n* \\[[`af77e4bf2f`](https://github.com/nodejs/node/commit/af77e4bf2f)] - **build**: update macOS runner and Xcode (Michaël Zasso) [#59238](https://github.com/nodejs/node/pull/59238)\r\n* \\[[`86bfdb5528`](https://github.com/nodejs/node/commit/86bfdb5528)] - **build**: remove `nocorepack` `vcbuild` flag (Antoine du Hamel) [#57772](https://github.com/nodejs/node/pull/57772)\r\n* \\[[`b13f24c2da`](https://github.com/nodejs/node/commit/b13f24c2da)] - **build, src**: fix include paths for vtune files (Rahul) [#59999](https://github.com/nodejs/node/pull/59999)\r\n* \\[[`2216a3b1d5`](https://github.com/nodejs/node/commit/2216a3b1d5)] - **deps**: V8: cherry-pick 1e190bbb0396 (Richard Lau) [#60206](https://github.com/nodejs/node/pull/60206)\r\n* \\[[`1b22f6049a`](https://github.com/nodejs/node/commit/1b22f6049a)] - **deps**: upgrade npm to 11.6.2 (npm team) [#60168](https://github.com/nodejs/node/pull/60168)\r\n* \\[[`a1b73fe430`](https://github.com/nodejs/node/commit/a1b73fe430)] - **deps**: V8: cherry-pick 2abc61361dd4 (Richard Lau) [#60177](https://github.com/nodejs/node/pull/60177)\r\n* \\[[`4eb6e6fd79`](https://github.com/nodejs/node/commit/4eb6e6fd79)] - **deps**: V8: cherry-pick 87356585659b (Joyee Cheung) [#60069](https://github.com/nodejs/node/pull/60069)\r\n* \\[[`c0b8c80164`](https://github.com/nodejs/node/commit/c0b8c80164)] - **deps**: define V8\\_PRESERVE\\_MOST as no-op on Windows (Stefan Stojanovic) [#56238](https://github.com/nodejs/node/pull/56238)\r\n* \\[[`65a32bac18`](https://github.com/nodejs/node/commit/65a32bac18)] - **deps**: add ngtcp2 test binaries (James M Snell) [#59946](https://github.com/nodejs/node/pull/59946)\r\n* \\[[`ebfc28a037`](https://github.com/nodejs/node/commit/ebfc28a037)] - **deps**: update nghttp3 to 1.11.0 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`dceb1fca40`](https://github.com/nodejs/node/commit/dceb1fca40)] - **deps**: update ngtcp2 to 1.14.0 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`ee36b86ba3`](https://github.com/nodejs/node/commit/ee36b86ba3)] - **deps**: patch V8 to 13.7.152.19 (Node.js GitHub Bot) [#58713](https://github.com/nodejs/node/pull/58713)\r\n* \\[[`0b3fc0d7a8`](https://github.com/nodejs/node/commit/0b3fc0d7a8)] - **deps**: patch V8 to 13.7.152.14 (Node.js GitHub Bot) [#58631](https://github.com/nodejs/node/pull/58631)\r\n* \\[[`91b3bd3fe6`](https://github.com/nodejs/node/commit/91b3bd3fe6)] - **deps**: patch V8 to 13.7.152.13 (Node.js GitHub Bot) [#58539](https://github.com/nodejs/node/pull/58539)\r\n* \\[[`f77a96cd76`](https://github.com/nodejs/node/commit/f77a96cd76)] - **deps**: patch V8 to 13.7.152.10 (Node.js GitHub Bot) [#58446](https://github.com/nodejs/node/pull/58446)\r\n* \\[[`1cd16e5355`](https://github.com/nodejs/node/commit/1cd16e5355)] - **doc**: improve code snippet alternative of url.parse() using WHATWG URL (Steven) [#60209](https://github.com/nodejs/node/pull/60209)\r\n* \\[[`d54e6aec9e`](https://github.com/nodejs/node/commit/d54e6aec9e)] - **doc**: `createSQLTagStore` -> `createTagStore` (Aviv Keller) [#60182](https://github.com/nodejs/node/pull/60182)\r\n* \\[[`aef3fc37eb`](https://github.com/nodejs/node/commit/aef3fc37eb)] - **doc**: use markdown when branch-diff major release (Rafael Gonzaga) [#60179](https://github.com/nodejs/node/pull/60179)\r\n* \\[[`a2f088d516`](https://github.com/nodejs/node/commit/a2f088d516)] - **doc**: update teams in collaborator-guide.md and add links (Bart Louwers) [#60065](https://github.com/nodejs/node/pull/60065)\r\n* \\[[`75a6fff6be`](https://github.com/nodejs/node/commit/75a6fff6be)] - **doc**: disambiguate top-level `worker_threads` module exports (René) [#59890](https://github.com/nodejs/node/pull/59890)\r\n* \\[[`51df7b92bc`](https://github.com/nodejs/node/commit/51df7b92bc)] - **doc**: update macOS version used to build releases (Michaël Zasso) [#60080](https://github.com/nodejs/node/pull/60080)\r\n* \\[[`910c8796f9`](https://github.com/nodejs/node/commit/910c8796f9)] - **doc**: update BUILDING to reflect Clang 19 changes (Michaël Zasso) [#59782](https://github.com/nodejs/node/pull/59782)\r\n* \\[[`34f9b7eab9`](https://github.com/nodejs/node/commit/34f9b7eab9)] - **doc**: reserve NMV 140 for Electron 39 (David Sanders) [#59627](https://github.com/nodejs/node/pull/59627)\r\n* \\[[`3f6f6db43f`](https://github.com/nodejs/node/commit/3f6f6db43f)] - **doc**: update minimum Xcode and VS versions (Michaël Zasso) [#59358](https://github.com/nodejs/node/pull/59358)\r\n* \\[[`d9fe28bd6b`](https://github.com/nodejs/node/commit/d9fe28bd6b)] - **doc**: fix `CHANGELOG.md` version listing (Antoine du Hamel) [#59299](https://github.com/nodejs/node/pull/59299)\r\n* \\[[`0ab50c2768`](https://github.com/nodejs/node/commit/0ab50c2768)] - **doc**: reserve NMV 139 for Electron 38 (Calvin) [#58779](https://github.com/nodejs/node/pull/58779)\r\n* \\[[`516b4ebd3c`](https://github.com/nodejs/node/commit/516b4ebd3c)] - **doc**: mark Node.js 23 as End-of-Life (Antoine du Hamel) [#58563](https://github.com/nodejs/node/pull/58563)\r\n* \\[[`59b70e5fe3`](https://github.com/nodejs/node/commit/59b70e5fe3)] - **http**: fix http client leaky with double response (theanarkh) [#60062](https://github.com/nodejs/node/pull/60062)\r\n* \\[[`5cf3c3e24c`](https://github.com/nodejs/node/commit/5cf3c3e24c)] - **http2**: rename variable to additionalPseudoHeaders (Tobias Nießen) [#60208](https://github.com/nodejs/node/pull/60208)\r\n* \\[[`535efea962`](https://github.com/nodejs/node/commit/535efea962)] - **http2**: do not crash on mismatched ping buffer length (René) [#60135](https://github.com/nodejs/node/pull/60135)\r\n* \\[[`4bfa387f6d`](https://github.com/nodejs/node/commit/4bfa387f6d)] - **lib**: fix constructor in \\_errnoException stack tree (SeokHun) [#60156](https://github.com/nodejs/node/pull/60156)\r\n* \\[[`4daeec11b9`](https://github.com/nodejs/node/commit/4daeec11b9)] - **lib**: fix typo in QuicSessionStats (SeokHun) [#60155](https://github.com/nodejs/node/pull/60155)\r\n* \\[[`15278252bb`](https://github.com/nodejs/node/commit/15278252bb)] - **lib**: remove redundant destroyHook checks (Gürgün Dayıoğlu) [#60120](https://github.com/nodejs/node/pull/60120)\r\n* \\[[`83052ff9ad`](https://github.com/nodejs/node/commit/83052ff9ad)] - **lib**: add `node:` prefix in sys module deprecation warning (Dario Piotrowicz) [#58442](https://github.com/nodejs/node/pull/58442)\r\n* \\[[`d5abfbf582`](https://github.com/nodejs/node/commit/d5abfbf582)] - **lib**: add module to use in module deprecation warnings (Dario Piotrowicz) [#58442](https://github.com/nodejs/node/pull/58442)\r\n* \\[[`db0121bedd`](https://github.com/nodejs/node/commit/db0121bedd)] - **module**: fix directory option in the enableCompileCache() API (Joyee Cheung) [#59931](https://github.com/nodejs/node/pull/59931)\r\n* \\[[`822a8c3244`](https://github.com/nodejs/node/commit/822a8c3244)] - **perf\\_hooks**: fix stack overflow error (Antoine du Hamel) [#60084](https://github.com/nodejs/node/pull/60084)\r\n* \\[[`d52cd04591`](https://github.com/nodejs/node/commit/d52cd04591)] - **quic**: continue working on quic api bits (James M Snell) [#60123](https://github.com/nodejs/node/pull/60123)\r\n* \\[[`b4af647920`](https://github.com/nodejs/node/commit/b4af647920)] - **quic**: reduce boilerplate and other minor cleanups (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`cd9fd09a27`](https://github.com/nodejs/node/commit/cd9fd09a27)] - **quic**: multiple fixups and updates (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`a6c5d27739`](https://github.com/nodejs/node/commit/a6c5d27739)] - **quic**: update more of the quic to the new compile guard (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`ee7b8ab29c`](https://github.com/nodejs/node/commit/ee7b8ab29c)] - **quic**: few additional small comment edits in cid.h (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`c8b64bd023`](https://github.com/nodejs/node/commit/c8b64bd023)] - **quic**: fixup NO\\_ERROR macro conflict on windows (James M Snell) [#59381](https://github.com/nodejs/node/pull/59381)\r\n* \\[[`e2fefd78e2`](https://github.com/nodejs/node/commit/e2fefd78e2)] - **quic**: fixup windows coverage compile error (James M Snell) [#59381](https://github.com/nodejs/node/pull/59381)\r\n* \\[[`99c80e3a45`](https://github.com/nodejs/node/commit/99c80e3a45)] - **quic**: update the guard to check openssl version (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`0e754fa5d1`](https://github.com/nodejs/node/commit/0e754fa5d1)] - **quic**: start re-enabling quic with openssl 3.5 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`200fe9e7f4`](https://github.com/nodejs/node/commit/200fe9e7f4)] - **repl**: move completion logic to internal module (Dario Piotrowicz) [#59889](https://github.com/nodejs/node/pull/59889)\r\n* \\[[`3ac88a7a66`](https://github.com/nodejs/node/commit/3ac88a7a66)] - **src**: use string\\_view in `WriteReport()` (Anna Henningsen) [#60201](https://github.com/nodejs/node/pull/60201)\r\n* \\[[`a1244f04de`](https://github.com/nodejs/node/commit/a1244f04de)] - **src**: make additional cleanups in node locks impl (James M Snell) [#60061](https://github.com/nodejs/node/pull/60061)\r\n* \\[[`fdb6e66227`](https://github.com/nodejs/node/commit/fdb6e66227)] - **src**: update locks to use DictionaryTemplate (James M Snell) [#60061](https://github.com/nodejs/node/pull/60061)\r\n* \\[[`367bcce6a6`](https://github.com/nodejs/node/commit/367bcce6a6)] - **src**: fix usage of deprecated V8 API (Michaël Zasso) [#60174](https://github.com/nodejs/node/pull/60174)\r\n* \\[[`23fa18444f`](https://github.com/nodejs/node/commit/23fa18444f)] - **src**: fix small compile warning in quic/streams.cc (James M Snell) [#60118](https://github.com/nodejs/node/pull/60118)\r\n* \\[[`0ec1d186f4`](https://github.com/nodejs/node/commit/0ec1d186f4)] - **src**: always use strong reference to `napi_async_context` resource (Anna Henningsen) [#59828](https://github.com/nodejs/node/pull/59828)\r\n* \\[[`ce748f6cae`](https://github.com/nodejs/node/commit/ce748f6cae)] - **src**: use `Global` for storing resource in Node-API callback scope (Anna Henningsen) [#59828](https://github.com/nodejs/node/pull/59828)\r\n* \\[[`36256230b4`](https://github.com/nodejs/node/commit/36256230b4)] - **src**: cleanup quic TransportParams class (James M Snell) [#59884](https://github.com/nodejs/node/pull/59884)\r\n* \\[[`985e2fb383`](https://github.com/nodejs/node/commit/985e2fb383)] - _**Revert**_ \"**test**: ensure message event fires in worker message port test\" (Luigi Pinca) [#60126](https://github.com/nodejs/node/pull/60126)\r\n* \\[[`da9cd745c8`](https://github.com/nodejs/node/commit/da9cd745c8)] - **test**: ensure assertions are reachable in `test/client-proxy` (Antoine du Hamel) [#60175](https://github.com/nodejs/node/pull/60175)\r\n* \\[[`e105e821e9`](https://github.com/nodejs/node/commit/e105e821e9)] - **test**: skip quic tests that IBM i does not support (SRAVANI GUNDEPALLI) [#60160](https://github.com/nodejs/node/pull/60160)\r\n* \\[[`bfc81ca228`](https://github.com/nodejs/node/commit/bfc81ca228)] - **test**: ensure assertions are reachable in `test/async-hooks` (Antoine du Hamel) [#60150](https://github.com/nodejs/node/pull/60150)\r\n* \\[[`712cee951c`](https://github.com/nodejs/node/commit/712cee951c)] - **test**: skip tests that cause timeouts on IBM i (SRAVANI GUNDEPALLI) [#60148](https://github.com/nodejs/node/pull/60148)\r\n* \\[[`f8a43f6f34`](https://github.com/nodejs/node/commit/f8a43f6f34)] - **test**: deflake test-fs-promises-watch-iterator (Luigi Pinca) [#60060](https://github.com/nodejs/node/pull/60060)\r\n* \\[[`1f95d39997`](https://github.com/nodejs/node/commit/1f95d39997)] - **test**: prepare junit file attribute normalization (sangwook) [#59432](https://github.com/nodejs/node/pull/59432)\r\n* \\[[`eb159a8cfd`](https://github.com/nodejs/node/commit/eb159a8cfd)] - **test**: remove duplicated allocUnsafeSlow test (Michaël Zasso) [#58524](https://github.com/nodejs/node/pull/58524)\r\n* \\[[`d93cff5af3`](https://github.com/nodejs/node/commit/d93cff5af3)] - _**Revert**_ \"**test**: fix watch tests not including completion messages\" (Joyee Cheung) [#58190](https://github.com/nodejs/node/pull/58190)\r\n* \\[[`6102159fa1`](https://github.com/nodejs/node/commit/6102159fa1)] - **test**: fix watch tests not including completion messages (Dario Piotrowicz) [#58183](https://github.com/nodejs/node/pull/58183)\r\n* \\[[`ad2c1bf62e`](https://github.com/nodejs/node/commit/ad2c1bf62e)] - **test,doc**: skip --max-old-space-size-percentage on 32-bit platforms (Asaf Federman) [#60144](https://github.com/nodejs/node/pull/60144)\r\n* \\[[`6dbf7086bb`](https://github.com/nodejs/node/commit/6dbf7086bb)] - **test\\_runner**: fix suite timeout (Moshe Atlow) [#59853](https://github.com/nodejs/node/pull/59853)\r\n* \\[[`f0aa073907`](https://github.com/nodejs/node/commit/f0aa073907)] - **test\\_runner**: add junit file attribute support (sangwook) [#59432](https://github.com/nodejs/node/pull/59432)\r\n* \\[[`cff138c6b1`](https://github.com/nodejs/node/commit/cff138c6b1)] - **tests**: start adding quic test server utilities (James M Snell) [#59946](https://github.com/nodejs/node/pull/59946)\r\n* \\[[`20dc4b514a`](https://github.com/nodejs/node/commit/20dc4b514a)] - **tools**: use cooldown property correctly (Rafael Gonzaga) [#60134](https://github.com/nodejs/node/pull/60134)\r\n* \\[[`ec26b1c01a`](https://github.com/nodejs/node/commit/ec26b1c01a)] - **tools**: add lint rule to ensure assertions are reached (Antoine du Hamel) [#60125](https://github.com/nodejs/node/pull/60125)\r\n* \\[[`bab752d4db`](https://github.com/nodejs/node/commit/bab752d4db)] - **typings**: add buffer internalBinding typing (방진혁) [#60163](https://github.com/nodejs/node/pull/60163)\r\n* \\[[`1986ee4b65`](https://github.com/nodejs/node/commit/1986ee4b65)] - **vm**: hint module identifier in instantiate errors (Chengzhong Wu) [#60199](https://github.com/nodejs/node/pull/60199)\r\n* \\[[`23b834058c`](https://github.com/nodejs/node/commit/23b834058c)] - **wasm**: revert enable JSPI as already enabled (Guy Bedford) [#60014](https://github.com/nodejs/node/pull/60014)\r\n* \\[[`4bfcad1ac5`](https://github.com/nodejs/node/commit/4bfcad1ac5)] - _**Revert**_ \"**watch**: fix watch args not being properly filtered\" (Joyee Cheung) [#58190](https://github.com/nodejs/node/pull/58190)\r\n* \\[[`4acb854039`](https://github.com/nodejs/node/commit/4acb854039)] - **watch**: fix watch args not being properly filtered (Dario Piotrowicz) [#57936](https://github.com/nodejs/node/pull/57936)\r\n"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.6",
    "date": "2025-10-15T15:16:13.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.6",
    "content": "### Core Changes\n\n- Add nextjs condition when cacheComponents is enabled: #84843\n- remove rdcForNavigations configuration & bundle with cacheComponents: #84870\n- Convert eslint-config-next project to TypeScript: #84839\n- [eslint-config] [Breaking] Use Flat config by default: #84874\n\n### Misc Changes\n\n- Update turborepo env in workflows: #84879\n- Turbopack: take task cache log before starting snapshot: #84755\n- Turbopack: allow gzip compression on trace files: #84685\n- Turbopack: process task result as part of the task completion: #84638\n- Add test for eslint-config-next: #84838\n- Turbopack: lower level drop collectibles: #84895\n- docs: next/dynamic headings: #84492\n\n### Credits \n\nHuge thanks to @gnoff, @ijjk, @ztanner, @sokra, @devjiwonchoi, and @icyJoseph for helping!\n"
  },
  {
    "title": "4年目のソフトウェアエンジニアがSWE協会のコーディング練習会に参加して感じた変化",
    "date": "2025-10-15T14:40:21.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/akhmgc/articles/aa55dfd823d062",
    "content": "\n 概要\n4年目のソフトウェアエンジニアとして、一般社団法人 ソフトウェアエンジニア協会(以下SWE協会)のコーディング練習会に参加して感じた変化を共有します。\nなお、Google を含む外資系ソフトウェアエンジニアのコーディングテストを準備なしで解ける方にとっては、本記事の内容は役に立たないかもしれません。\n\n 自己紹介と参加の背景\n私は現在、主にマーケティングオートメーションツールを提供している会社で、ツール全体が使うデータパイプラインの構築や運用、機能開発に利用する共通基盤の開発等を行っています。\n扱うトラフィックはそれなりに大きく、馴染みの薄いミドルウェアを学ぶ場面も多いのですが..."
  },
  {
    "title": "Supabaseは個人開発の味方 - 煩わしいセットアップは不要・RLSによる宣言的な権限管理",
    "date": "2025-10-15T14:09:34.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kontaco/articles/1128b039d47dd0",
    "content": "こんにちは近藤です\n個人開発でサービスを構築する際、「認証どうしよう」「画像のストレージどこに置こう」「セキュリティ大丈夫かな」「テスト環境の構築が面倒」と悩むことはありませんか?\n私は子供向け画像認識学習アプリ「KORENANI」を開発する中で、Supabaseを採用しました。\n\nこの記事で伝えること:\n\nなぜSupabaseを選んだのか（メリット）\nどんな制約があるのか（デメリット）\nどんなプロジェクトに向いているのか（判断基準）\n\n実体験に基づいて共有します。\n\n TL;DR\nSupabaseの強み:\n\n無料プランが充実（50,000 MAU、500MB DB、1GB Storag..."
  },
  {
    "title": "アンマネージド Amazon EC2 ノードへの AWS Systems Manager エージェント自動インストール",
    "date": "2025-10-15T13:19:52.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/automate-installing-ssm-agent-on-unmanaged-ec2-instances-in-an-aws-organization/",
    "content": "<p>本記事は、2025 年 7 月 17 日に公開された <a href=\"https://aws.amazon.com/jp/blogs/mt/automate-installing-ssm-agent-on-unmanaged-ec2-instances-in-an-aws-organization/\">Automate installing AWS Systems Manager agent on unmanaged Amazon EC2 nodes</a> を翻訳したものです。</p> \n<p>大規模な AWS リソースのフリート（訳者注: EC2 インスタンス群）管理は困難な課題です。組織は、タスクの自動化、インベントリの収集、インスタンスのパッチ適用、セキュリティコンプライアンスの維持のために、複数のソリューションに依存しています。インバウンドポートを開いたり SSH キーを管理したりせずにインスタンスにアクセスしたいと思うこともあるでしょう。<a href=\"https://aws.amazon.com/systems-manager/\" target=\"_blank\" rel=\"noopener\">AWS Systems Manager (SSM)</a> は、これらすべてのニーズを大規模にサポートする一元管理ソリューションとして機能することで、この複雑さを簡素化します。</p> \n<p>Systems Manager の機能を使用するには、次の 3 要件を満たす必要があります:</p> \n<ol> \n <li>インスタンスに Systems Manager エージェント (<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/ssm-agent.html\" target=\"_blank\" rel=\"noopener\">SSM エージェント</a>) がインストールされている</li> \n <li>Systems Manager に必要な<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/setup-instance-permissions.html\" target=\"_blank\" rel=\"noopener\">インスタンスのアクセス許可が設定されている</a></li> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/general/latest/gr/ssm.html\" target=\"_blank\" rel=\"noopener\">AWS Systems Manager エンドポイント</a>へのネットワーク接続がある</li> \n</ol> \n<p><a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-unified-console.html\" target=\"_blank\" rel=\"noopener\">Systems Manager の統合コンソール</a>を使用すると、組織内のすべてのノードに対してインスタンスのアクセス許可を設定および付与できます。<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/diagnose-and-remediate.html\" target=\"_blank\" rel=\"noopener\">診断と修復</a>機能は、管理されていない AWS ノードを特定し、ネットワーク関連の問題を解決するのに役立ちます。これらの問題には、セキュリティグループの設定ミスや、<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/what-is-amazon-vpc.html\" target=\"_blank\" rel=\"noopener\">Amazon Virtual Private Cloud (Amazon VPC)</a> DNS（訳者注: DNS ホスト名と DNS 解決のこと）の無効化が含まれます。<br> AWS が提供する多くの Amazon Machine Image (AMI) には <a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/ami-preinstalled-agent.html\">Systems Manager エージェントがプリインストールされています</a>が、カスタム AMI または古い <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/AMIs.html\" target=\"_blank\" rel=\"noopener\">AMI</a> はエージェントのインストールが必要になる場合があります。大規模なフリートを管理する組織では、複数のサーバーとアカウントにわたって SSM エージェントを手動でインストールすると、運用上の負担が生じます。</p> \n<p>このブログでは、既存の <a href=\"https://aws.amazon.com/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon EC2</a> インスタンスに SSM エージェントをインストールする自動化ソリューションを紹介します。このソリューションは、複数のアカウントやリージョンに分散したノードのフリートに対して、SSM エージェントのインストールを効率化するように設計されています。これにより、AWS Organization 全体で Systems Manager の管理機能を素早く導入できます。</p> \n<h4>前提条件</h4> \n<p>ノードは以下の前提条件を満たす必要があります。:</p> \n<ol> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/operating-systems-and-machine-types.html\" target=\"_blank\" rel=\"noopener\">サポートされているオペレーティングシステム</a>: \n  <ul> \n   <li>Windows Server 2016-2025</li> \n   <li>Amazon Linux 2/2023</li> \n   <li>RHEL/CentOS 7.x-10.x</li> \n   <li>Ubuntu 18.04-24.04</li> \n   <li>SUSE Linux Enterprise 15.x</li> \n  </ul> </li> \n <li>Windows ノード用の <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2launch-v2.html\" target=\"_blank\" rel=\"noopener\">EC2Launch v2</a> エージェント</li> \n <li>Linux ノード用の <a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/user-data.html#user-data-cloud-init\" target=\"_blank\" rel=\"noopener\">Cloud-init</a></li> \n <li>SSM エージェントのインストールファイルのダウンロードおよびインストール後の実行ログのアップロードには、<a href=\"https://aws.amazon.com/s3/\">Amazon S3</a> (s3.amazonaws.com) へのネットワーク接続が必要です。<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/VPC_Internet_Gateway.html\" target=\"_blank\" rel=\"noopener\">インターネットゲートウェイ</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/vpc-nat-gateway.html\" target=\"_blank\" rel=\"noopener\">NAT ゲートウェイ</a>、プライベートサブネットの場合は、<a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/privatelink/vpc-endpoints-s3.html\" target=\"_blank\" rel=\"noopener\">S3 ゲートウェイエンドポイント</a>を使用して接続できます。</li> \n <li>Linux ベースのノードでは、SSM エージェントソフトウェアをダウンロードし、ログをアップロードするために、unzip、curl、awscli パッケージが必要です。これらのパッケージがない場合、自動的にシステムのパッケージリポジトリからインストールを試みます。その際、インストール中にインターネットアクセスが必要です。</li> \n <li>統合コンソールをセットアップ済みの場合は、セットアップ時に登録した<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-setting-up-organizations.html\" target=\"_blank\" rel=\"noopener\"> Systems Manager の委任管理者</a>アカウントを使用してください。 \n  <ul> \n   <li>統合コンソールをセットアップしていない場合は、組織の管理アカウントまたは <a href=\"https://aws.amazon.com/jp/blogs/mt/cloudformation-stacksets-delegated-administration/\">CloudFormation StackSets の委任管理者</a>アカウントを使用してください。</li> \n  </ul> </li> \n</ol> \n<h4>重要な注意事項</h4> \n<p>このソリューションは、ユーザーデータを使用して SSM エージェントをインストールし、プロセス中にノードの停止と起動を要求します。これにより、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/InstanceStorage.html\">一時ストレージ</a>がクリアされ、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses\">非 Elastic IP アドレス</a>が変更されることに注意が必要です。</p> \n<p>これらのノード上で実行中のアプリケーションはすべて中断されます。予期しない中断を避けるため、この作業は予定されたメンテナンス期間中に実行することをお勧めします。</p> \n<p>実行中、このソリューションはインスタンスから S3 へのログアップロードを可能にするために、一時的にインスタンスプロファイルをアタッチします。完了すると、この一時的なプロファイルは削除され、インスタンスは元の状態に戻ります。</p> \n<h2></h2> \n<h2>ソリューションの概要</h2> \n<p>このソリューションでは、<a href=\"https://aws.amazon.com/cloudformation/\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation</a> を使用した自動デプロイにより、必要なすべてのリソースをプロビジョニングします。これらのリソースには、S3 バケット、Systems Manager Automation ランブック、<a href=\"https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles.html\" target=\"_blank\" rel=\"noopener\">IAM ロール</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/access_policies.html\" target=\"_blank\" rel=\"noopener\">アクセス許可ポリシー</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\" target=\"_blank\" rel=\"noopener\">インスタンスプロファイル</a>が含まれます。デプロイ後、<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-automation.html\" target=\"_blank\" rel=\"noopener\">Systems Manager Automation</a> ランブックをオンデマンドで実行して、SSM エージェントをインストールできます。インストールは、EC2 フリート全体またはタグを使用して特定のノードを対象にすることができます。</p> \n<div id=\"attachment_61604\" class=\"wp-caption aligncenter\" style=\"width: 1178px\"> \n <p><img class=\"wp-image-61604 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/ArchitecturalDiagram.png\" alt=\"Architecture diagram showing automated SSM Agent installation workflow across an AWS Organization. The flow starts with CloudFormation deployment creating automation runbooks, which then orchestrate SSM Agent installation across multiple accounts and regions through three runbooks: Orchestrator, Primary, and Secondary.\" aria-describedby=\"caption-attachment-61604\"></p> \n <p id=\"caption-attachment-61604\" class=\"wp-caption-text\">図 1 – SSM エージェントインストールのデプロイメントワークフローのアーキテクチャ図</p> \n</div> \n<p>デプロイメントワークフローは、連携して動作する 3 つの相互接続された Systems Manager Automation ランブックで構成されています。プロセスは、中心的な調整役として機能する SSMAgentInstall-Orchestrator ランブックを実行することから始まります。この Orchestrator ランブックは最初にすべての入力パラメーターを検証し、次に指定されたターゲットアカウントごとに SSMAgentInstall-Primary ランブックを呼び出します。</p> \n<p>Primary ランブックは、ターゲットリージョンでの入力で指定されたノード (タグを使用するか、診断と修復の出力を使用するかのいずれか) に対して実行されます。各ターゲットノードに対して、SSMAgentInstall-Secondary ランブックを呼び出し、まずそのノードが既に SSM で管理されているかどうかを確認します。</p> \n<p>ノードが管理されていない場合、Secondary ランブックは、順序付けられた手順で慎重にインストールプロセスを進めます。ノードの適格性 (Auto Scaling グループのメンバーシップ、ルートボリュームのタイプ、ノードの状態) 検証した後、停止と開始のサイクルを実行します。このサイクルでは、ユーザーデータを介して SSM エージェントのインストールスクリプトを注入し、必要な IAM アクセス許可を一時的にアタッチし、エージェントが正常にインストールされたことを確認します。</p> \n<p>このプロセス全体を通して、実行ログが収集され、Central Account の S3 バケットに格納されます。最終的に、Orchestrator ランブックがすべての結果を集約して包括的な CSV レポートを作成し、組織全体の各インストール試行の成否を可視化します。</p> \n<h4>IAM アクセス許可について:</h4> \n<p>インストール後、SSM エージェントがノードを AWS Systems Manager に登録します。そのため、ノードが Systems Manager エンドポイントに接続でき、必要な <a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/setup-instance-permissions.html\">IAM アクセス許可</a>を持っていることを確認してください。<strong>注意</strong>: 統合コンソールを使用している場合、必要な IAM アクセス許可は自動的に設定されます。</p> \n<h2></h2> \n<h2>ウォークスルー</h2> \n<p>このソリューションをデプロイするには、<a href=\"https://aws.amazon.com/blogs/mt/cloudformation-stacksets-delegated-administration/\" target=\"_blank\" rel=\"noopener\">CloudFormation StackSets の委任管理者</a>アカウントを使用してください。</p> \n<h3></h3> \n<h3>Step1: CloudFormation テンプレートを使用したリソースのデプロイ</h3> \n<ol> \n <li><a href=\"https://github.com/aws-samples/sample_automate_installing_SSM_agent_on_unmanaged_EC2_instances/blob/main/Templates/CloudFormation/SSMAgentMultiAccountInstallation.yaml\" target=\"_blank\" rel=\"noopener\">&nbsp;CloudFormation テンプレート</a>をダウンロードします。</li> \n <li>適切な AWS アカウントにログインします。有効になっている場合は、統合コンソールのホームリージョンに切り替えます。</li> \n <li>AWS CloudFormation のコンソールに移動し、ナビゲーションペインのスタックをクリックした後スタックページで、右上の<strong>スタックの作成</strong>を選択し、<strong>新しいリソースを使用 (標準) </strong>を選択します。</li> \n <li><strong>前提条件 – テンプレートの準備</strong>で、<strong>既存のテンプレートを選択</strong>を選択します。</li> \n <li><strong>テンプレートソース</strong>で、<strong>テンプレートファイルのアップロード</strong>を選択し、<strong>ファイルの選択</strong>を選択して、ステップ 1 でダウンロードしたテンプレートを選択します。</li> \n <li><strong>次へ</strong>を選択します。</li> \n <li>スタック名を入力します (例: SSMAgentMultiAccountInstallation)。</li> \n <li>パラメータセクションで、パラメータの値を指定します: \n  <ul> \n   <li><strong>DeploymentTargetsOUs</strong> では、ターゲットインスタンスが存在する組織単位 (OU) の ID を指定します。CloudFormation は、Stacksets を使用してこれらのアカウントとリージョンにリソースを作成しようとします。</li> \n   <li><strong>OrganizationId</strong>では、<a href=\"https://docs.aws.amazon.com/ja_jp/organizations/latest/userguide/orgs_view_org.html#orgs_view_org\" target=\"_blank\" rel=\"noopener\">Organizations の組織 ID</a> を入力します。</li> \n   <li><strong>TargetRegions</strong>では、組織内のターゲットインスタンスが存在するリージョンを入力します。</li> \n  </ul> </li> \n <li><strong>スタックオプションの設定</strong>ページで、必要に応じてタグを適用します。</li> \n <li>機能セクションで、<strong>AWS CloudFormation によって IAM リソースがカスタム名で作成される場合があることを承認します。</strong>を選択し、<strong>次へ</strong>を選択します。</li> \n <li><strong>確認して作成ページ</strong>で<strong>送信</strong>を選択します。</li> \n</ol> \n<div id=\"attachment_61624\" class=\"wp-caption aligncenter\" style=\"width: 2019px\"> \n <p><img class=\"wp-image-61624 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Picture1-7-1.png\" alt=\"CloudFormation stack parameters configuration in the console console showing three input fields: 1. DeploymentTargetsOUs: For specifying Organizational Unit IDs where target instances are located. 2. OrganizationId: For entering the Organization ID. 3. TargetRegions: For entering the regions where target instances are located.\" aria-describedby=\"caption-attachment-61624\"></p> \n <p id=\"caption-attachment-61624\" class=\"wp-caption-text\">図 2 – AWS CloudFormation コンソール – スタックページ</p> \n</div> \n<h3></h3> \n<h3>Step2: Automation ランブックの実行</h3> \n<ol> \n <li>CloudFormation テンプレートのデプロイが完了したら、同じリージョンで Systems Manager コンソールを開きます。</li> \n <li>ナビゲーションペインで <strong>変更管理ツールカテゴリの自動化</strong>を選択し、<strong>Execute runbook</strong> を選択します。</li> \n <li><strong>Owned by me</strong> タブで、<strong>SSMAgentInstall-Orchestrator </strong>を選択し、<strong>Next</strong> を選択します。</li> \n <li><strong>Input parameters</strong> セクションで、必要な入力を指定します: \n  <ul> \n   <li><strong>AutomationAssumeRole</strong> に、SSMAgentInstall-MAMR-AutomationAdministrationRole を選択します</li> \n   <li><strong>UploadLogsToS3Bucket</strong> に、ログ用 S3 バケット <strong>ssm-agent-install-automation-logs-&lt;アカウント ID&gt;</strong> を選択します</li> \n  </ul> </li> \n <li>タグを使ってインスタンスをターゲットにする場合は、以下を指定します<strong>:</strong> \n  <ul> \n   <li><strong>TargetAccounts – </strong>アンマネージドインスタンスが実行されているアカウント ID または OU を入力します。</li> \n   <li><strong>TargetRegions – </strong>アンマネージドインスタンスを含むリージョンを入力します。</li> \n   <li><strong>TargetTagKey – </strong>ターゲットのタグキーを tag: として入力します (すべてのインスタンスをターゲットにする場合は InstanceIds を使用)。</li> \n   <li><strong>TargetTagValue – </strong>ターゲットのタグ値を入力します (すべてのインスタンスをターゲットにする場合は、InstanceIds と共に * を使用)。</li> \n  </ul> </li> \n <li>あるいは、以前に Systems Manager 統合コンソールで診断を実行した場合は、<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/running-diagnosis-execution-ec2.html\" target=\"_blank\" rel=\"noopener\">診断と修復</a> の出力を使用してCSV からアンマネージドインスタンスを取得できます: \n  <ul> \n   <li>ナビゲーションペインで<strong>診断および是正</strong>を選択します。</li> \n   <li><strong>View executions</strong> を選択します。</li> \n   <li>実行を選択し、<strong>Output</strong> セクションを展開します。</li> \n   <li><strong>AggregateOutput.ExportObjectUri</strong> から S3 パスをコピーします。</li> \n  </ul> </li> \n <li><strong>Execute</strong> を選択します。</li> \n <li>完了すると、 S3 バケットに集約レポートの CSV ファイルが作成され、出力サマリーにファイルパスを表示します。</li> \n</ol> \n<div id=\"attachment_61625\" class=\"wp-caption aligncenter\" style=\"width: 2158px\"> \n <p><img class=\"wp-image-61625 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Picture2-5-1.png\" alt=\"The image shows an example of the final output at the end of the Automation execution.\" aria-describedby=\"caption-attachment-61625\"></p> \n <p id=\"caption-attachment-61625\" class=\"wp-caption-text\">図 3 – AWS Systems Manager – オートメーション Output</p> \n</div> \n<p>レポート CSV ファイルには、インスタンスごとの詳細と実行ログが含まれています:</p> \n<div id=\"attachment_61626\" class=\"wp-caption aligncenter\" style=\"width: 2469px\"> \n <p><img class=\"wp-image-61626 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Picture3-5.png\" alt=\"The image shows an example of the report csv file generated by Orchestrator Automation runbook.\" aria-describedby=\"caption-attachment-61626\"></p> \n <p id=\"caption-attachment-61626\" class=\"wp-caption-text\">図 4 – インスタンスの詳細 CSV レポート</p> \n</div> \n<p>このソリューションは、CloudFormation StackSets を使用して必要なリソースを複数の AWS アカウントにデプロイし、その後 Systems Manager Automation ランブックを実行して SSM エージェントをインストールします。完了すると、S3 にインスタンスレベルの詳細と実行ログを含む包括的な CSV レポートを生成し、組織全体のデプロイ状況を可視化します。上記 Automation ランブックを使用した後に SSM エージェントがインストールされていない場合は、<a href=\"https://aws-samples.github.io/cloud-operations-best-practices/docs/guides/centralized-operations-management/node-management/managing-ssm-agent\" target=\"_blank\" rel=\"noopener\">ベストプラクティスとして紹介されている方法</a>のいずれかを使用するか、<a href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/manually-install-ssm-agent-linux.html\" target=\"_blank\" rel=\"noopener\">手動インストール</a>に切り替えることができます。</p> \n<h2></h2> \n<h2>クリーンアップ</h2> \n<p>ソリューションが不要になった場合は、プロビジョニングした AWS リソースを削除することを忘れないでください。これにより、継続的なコストを回避できます。クリーンアップするには:</p> \n<ol> \n <li>&nbsp;AWS CloudFormation コンソールに移動します。</li> \n <li>このソリューションで作成したスタックを選択します。</li> \n <li><strong>削除</strong>を選択し、確認画面が表示されたら削除をクリックします。</li> \n</ol> \n<p>削除プロセスでは、CloudFormation テンプレートと Automation ランブックの両方で作成されたすべてのリソース (S3 バケット、ログファイル、関連する IAM ロールとポリシー、その他の依存リソースなど) を削除します。</p> \n<h2></h2> \n<h2>まとめ</h2> \n<div> \n <p>このAWS Systems Manager のエージェントインストールの自動化ソリューションは、複雑な手動プロセスを効率的な運用に変革することを目的としています。手動でのエージェントインストールの手間を軽減することで、組織が Systems Manager のポテンシャルを最大限に活用できるよう設計されています。組織は AWS 基盤の運用の効率化、セキュリティコンプライアンスの確保、自動化された管理を実現できます。</p> \n <p>EC2インスタンスに SSM エージェントがインストールされたら、AWS Systems Manager の機能を深く活用してください。Patch Manager、Session Manager、Parameter Store、Automation などの機能を活用すると、AWS 運用をさらに強化できます。</p> \n</div> \n<ul class=\"p-rich_text_list p-rich_text_list__bullet p-rich_text_list--nested\" data-border=\"0\" data-indent=\"0\" data-list-tree=\"true\" data-stringify-type=\"unordered-list\"> \n <li data-stringify-border=\"0\" data-stringify-indent=\"0\"><a class=\"c-link\" href=\"https://aws.amazon.com/awstv/watch/5c64c6a2a17/\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://aws.amazon.com/awstv/watch/5c64c6a2a17/\">自動パッチ適用を実装する</a>: Patch Manager を使用して、EC2 インスタンスに定期的な自動パッチ適用スケジュールを設定し、システムを常に最新で安全な状態に維持します。</li> \n <li data-stringify-border=\"0\" data-stringify-indent=\"0\"><a class=\"c-link\" href=\"https://www.youtube.com/watch?v=O9DNLecCi90\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://www.youtube.com/watch?v=O9DNLecCi90\">Session Manager で セキュリティを強化する</a>: SSH アクセスを Session Manager に置き換え、インバウンドポートを開く必要なく、安全で監査可能なインスタンスアクセスを実現します。</li> \n <li data-stringify-border=\"0\" data-stringify-indent=\"0\"><a class=\"c-link\" href=\"https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/parameter-store-working-with.html\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-working-with.html\">Parameter Store による設定の効率化</a>: 構成データ、シークレット、その他の運用パラメータを Parameter Store に安全に保存します。</li> \n</ul> \n<div>\n ここで立ち止まらず、\n <a href=\"https://aws.amazon.com/systems-manager/features/\">AWS Systems Managerのさまざまな機能</a>を活用しましょう。\n <br> 自動パッチ管理からセキュアなリモートアクセス、パラメータストアからメンテナンスウィンドウまで、Systems Manager には多くの機能があります。これらを活用することで、AWS 基盤の管理を効率化し、運用の効率性を高めることができます。\n</div> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"wp-image-11636 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/aaalzand-400.jpg\" alt=\"\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Ali Alzand</h3> \n  <p>Ali は、Amazon Web Services のMicrosoft Specialist Solutions Architectです。Ali は、グローバルな顧客が Microsoft のワークロードをクラウドに移行、モダナイズ、最適化することを支援しています。Aliは、Systems Manager、Amazon EC2 Windows、EC2 Image Builder などの AWS サービスを活用したクラウド運用に特化しています。仕事以外では、アウトドアを探索したり、週末にグリルで友人とバーベキューを楽しんだり、さまざまな料理を味わうことを楽しんでいます。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"wp-image-11636 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/12/Justin-Thomas.jpg\" alt=\"\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Justin Thomas</h3> \n  <p>Justin Thomas は、AWS Premium Support のシニアクラウドサポートエンジニアです。Justin は、AWS Systems Manager、Linux、シェルスクリプティングに特に長けており、顧客のクラウドインフラストラクチャの移行、最適化、ナビゲーションに関する技術的なガイダンスを提供することに強い関心を持っています。仕事以外では、友人や家族と過ごす時間を大切にし、新しい料理を試したり映画を観たりするのが好きです。</p> \n </div> \n</footer> \n<p>翻訳は Partner Sales Solutions Architect 福井 敦が担当しました。</p>"
  },
  {
    "title": "AIを使う人は、AIをあまり使わない人から「怠惰で能力が低く、自立心に乏しい」と評価されやすい",
    "date": "2025-10-15T10:09:17.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/cloud_ace/articles/b172102d0163c2",
    "content": "こんにちは。クラウドエース株式会社 第四開発部の相原です。\n読者の皆さんは、普段の業務でどれくらい AI を活用していますか？\nおそらく、多くの方がコードの自動生成やデバッグ、ドキュメント作成といったさまざまな場面で、AI を頼れるアシスタントとして利用していることでしょう。\n今や AI は私たちの日常に欠かせないパートナーになりつつあります。\nしかし、その一方で、「AI を使っている」という事実が、私たちの仕事や能力に対する周りの評価にどのような影響を与えるのかについて考えたことはありますか？\n私たちは、AI という「賢いツール」を使いこなすことで、より高度な成果を出せると考えています..."
  },
  {
    "title": "vitejs/vite – v6.4.0",
    "date": "2025-10-15T09:42:05.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.4.0",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.4.0/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "AIエージェントPoCを育てる3ステップ：CursorからLangChainへ",
    "date": "2025-10-15T09:00:05.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/loglass/articles/797fe3fc60399a",
    "content": "!\nこの記事は毎週必ず記事がでるテックブログ Loglass Tech Blog Sprint の113週目の記事です！\n3年間連続達成まで残り46週となりました！\n\n\n はじめに\nAI Agentシステムを開発したいと考えたとき、「何から手をつければいいのか？」「どのツールをどの段階で使うべきか？」と悩むことはないでしょうか。\n私たちのチームでは、超初期のアイデア検証から実運用に向けた精度向上の検証に至るまで、プロジェクトの成熟度に合わせてツールを使い分けることで、開発をスムーズに進めてきました。\nこの記事では、ありもの（Cursor）から始め、Bedrock Agentを経て、最終的..."
  },
  {
    "title": "TypeScriptにResult型を導入するための妥協点はどこか？",
    "date": "2025-10-15T07:08:55.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/praha/articles/2eb151a891be16",
    "content": "\n現実のアプリケーションで発生するすべてのエラー・例外をResult型に変換するのは非現実的\nエラーハンドリングが不要なものはUnexpectedErrorとしてまとめてしまう\n\nという現実的な落とし所を提案する記事です。\n!\n\n記事内で使用されているResult型は@praha/byethrowが提供しているものです。\nカスタムエラーの定義には@praha/error-factoryを使用しています。\n\nライブラリ固有の知識がなくても理解できるように、最小限のAPIのみを使用しています。\n\n\n TypeScriptにResult型を導入したくなる理由\nTypeScriptのエラーハンド..."
  },
  {
    "title": "README ファイルの心配をやめた方法",
    "date": "2025-10-15T06:23:54.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/how-i-stopped-worrying-about-readme-files/",
    "content": "<p>本記事は 2025 年 10 月 9 日に公開された <a href=\"https://keerthi-sreenivas.github.io/Profile/?refresh=1\" target=\"_blank\" rel=\"noopener\">Keerthi Sreenivas</a> による “<a href=\"https://kiro.dev/blog/how-i-stopped-worrying-about-readme-files/\" target=\"_blank\" rel=\"noopener\">How I stopped worrying about ReadMe files</a>” を翻訳したものです。</p> \n<p>多くの開発者と同じように、私もこんな経験があります。：深夜 2 時に素晴らしい新機能をプッシュし、ビルドが通ってデプロイが成功したときの達成感。ところが 3 週間後に、新しいチームメンバーが私の古い README を見ながらオンボーディングしようとすると、そこに書かれているのはバージョン2.1の手順。一方で、実際に動いているのはバージョン3.2。セットアップコマンドは通らず、APIエンドポイントも変わっている。かつて頼りになっていたドキュメントが、今や足かせになっていたのです。</p> \n<p>開発チームにとって、ドキュメントを常に最新に保つのは大きな課題です。変化の早い開発環境において、コードの変更のたびに README を手動で更新するのは現実的ではありません。その結果、ドキュメントはすぐに古くなり、信頼できない情報源となってしまいます。これが新しいメンバーのオンボーディングを遅らせ、開発者同士が質問のために作業を中断しなければならない事態を引き起こします。こうした絶え間ない中断はシニアエンジニアの負担を増やし、燃え尽き症候群や離職を加速させます。そして彼らがチームを離れると、重要な組織の知識も一緒に失われてしまうのです。</p> \n<h2>ドキュメントが自動的に「魔法のように」更新されるとしたら？</h2> \n<p><a href=\"https://kiro.dev/docs/hooks/\" target=\"_blank\" rel=\"noopener\">Kiro のエージェントフック</a>がこの問題を解決します。エージェントフックとは、IDE 上で特定のイベントが発生したときに、あらかじめ定義されたエージェントのアクションを自動で実行するトリガーのことです。ドキュメントを手動で更新する代わりに、ファイルを保存した際に README を自動更新したり、エンドポイントの変更時に API ドキュメントを更新したり、コードの進化に応じて使用例を自動生成するようなフックを設定できます。</p> \n<h2>仕組み</h2> \n<p><strong>1. エージェントフックを定義する：</strong> ユーザーは、ドキュメント要件をエージェントフックとして自然言語で定義できます。<br> プロンプトの例：「このリポジトリ内のすべての Python ファイル（.py）において、新しく追加された API や削除された古い API を検出し、OpenAPI の YAML を更新してください。存在しなくなった API は削除してください。また、.py ファイルの更新内容に基づいて ReadMe ファイルも更新してください。」<br> 図 1 は、ユーザーがエージェントフックを作成している様子を示しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/1-How-I-stopped-worrying-about-ReadMe-files-1.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166891\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/1-How-I-stopped-worrying-about-ReadMe-files-1.png\" alt=\"\" width=\"1640\" height=\"1054\"></a></p> \n<p><strong>2. Kiro がエージェントフック設定を作成する：</strong> Kiro は、エージェントフック要件をタイトル、説明、イベント、監視するファイルパス、およびイベント発生時に Kiro に送信される指示を含んだ構成を自動作成します。詳細については、<a href=\"https://kiro.dev/docs/hooks/best-practices/\" target=\"_blank\" rel=\"noopener\">フック定義のベストプラクティス</a>をご参照ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/2-How-I-stopped-worrying-about-ReadMe-files.png\"><img loading=\"lazy\" class=\"alignnone wp-image-166888 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/2-How-I-stopped-worrying-about-ReadMe-files.png\" alt=\"\" width=\"1636\" height=\"1784\"></a></p> \n<p>この場合では、ステップ 1 のプロンプト例に基づいて、以下の構成（図 2）が作成されました。Kiro はタイトルを「API Documentation Sync」として構成を生成し、イベントを「File Saved」（他の<a href=\"https://kiro.dev/docs/hooks/types/\" target=\"_blank\" rel=\"noopener\">フックタイプ</a>も利用可能）として設定し、監視するパスをリポジトリ内のすべての .py ファイルに設定しました。エージェントフックの指示も、エージェントフック作成時にユーザーが提供した初期プロンプトに基づいて生成されます。</p> \n<h3>エージェントフック作成</h3> \n<div id=\"attachment_166895\" style=\"width: 1010px\" class=\"wp-caption alignnone\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-creation-How-I-stopped-worrying-about-ReadMe-files.gif\"><img aria-describedby=\"caption-attachment-166895\" loading=\"lazy\" class=\"wp-image-166895 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-creation-How-I-stopped-worrying-about-ReadMe-files.gif\" alt=\"\" width=\"1000\" height=\"650\"></a>\n <p id=\"caption-attachment-166895\" class=\"wp-caption-text\">エージェントフックの作成（ステップ 1 と 2 を表示）</p>\n</div> \n<p>エージェントフックが作成されると、json 設定が .kiro/hooks フォルダに .hook ファイルとして保存されることがわかります。私の場合、図 3 の以下の設定が保存されます。エージェントフックの設定は、UI または生成された .hook ファイルのいずれかの方法で変更できます。</p> \n<p>エージェントフック作成後に .kiro/hook/api-documentation-sync.kiro.hook に保存される設定：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-text\">{\n  \"enabled\": true,\n  \"name\": \"API Documentation Sync\",\n  \"description\": \"Watches for changes in Python files to detect new or removed API's, the nupdates OpenAPI YAML documentation and README files accordingly\",\n  \"version\": \"1\",\n  \"when\": {\n    \"type\": \"fileEdited\",\n    \"patterns\": [\n      \"**/*.py\"\n    ]\n  },\n  \"then\": {\n    \"type\": \"askAgent\",\n    \"prompt\": \"Analyze the changed Python files to identify any new API endpoints, modified endpoints, or removed endpoints. Then:\n\n\n1. Scan all Python files in the repository to build a complete inventory of current API endpoints\n2. Compare with existing OpenAPI YAML documentation to identify:\n - New APIs that need to be added\n - Removed APIs that need to be deleted\n - Modified APIs that need updates\n3. Update the OpenAPI YAML file with the detected changes\n4. Update README.md and any other relevant documentation files to reflect the API changes\n5. Provide a summary of what APIs were added, modified, or removed\n\n\nFocus on Flask routes, FastAPI endpoints, Django views, or any other Python web framework endpoints you find.\"\n  }\n}</code></pre> \n</div> \n<p><strong>3. イベント発生時にフックがトリガーされる：</strong> ファイルの保存や作成などのイベントが発生すると、エージェントフックがトリガーされ、Kiro 内で新しいセッションがバックグラウンドで実行されます。開発者は、エージェントフックセッションを通じて提案された変更を受け入れたり修正したりできます。</p> \n<p><strong>フックをテストしてみましょう。</strong> たとえば Kiro に「レコードを CSV として抽出する新しい API を追加するのを手伝って」と依頼したとします。Kiro は関連する .py ファイルに新しい API エンドポイントを追加します。バックグラウンドでは、「Execute hook: API Documentation Sync」という名前の別のセッションが作成され、Kiro が OpenAPI.yaml ファイルと README ファイルを更新します。Kiro は導入された変更を追跡するために CHANGELOG.md も生成します。<br> 以下のビデオは、新しい API が「app.py」ファイルに追加されたときに API Documentation Sync フックがトリガーされる様子を示しています。</p> \n<h3>エージェントフックがトリガーされる</h3> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-triggered-How-I-stopped-worrying-about-ReadMe-files.gif\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166898\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/agent-hook-triggered-How-I-stopped-worrying-about-ReadMe-files.gif\" alt=\"\" width=\"750\" height=\"487\"></a></p> \n<h2>エージェントフックで他に何ができるか？</h2> \n<p>README の自動化は強力ですが、それは始まりに過ぎません。エージェントフックは、コードが変更されたときに必要となるあらゆる日常的なタスクを自動化できます：</p> \n<ul> \n <li><strong>コード最適化：</strong> 可読性、保守性、パフォーマンス最適化のためのコード最適化</li> \n <li><strong><a href=\"https://kiro.dev/docs/hooks/examples/#internationalization-helper\" target=\"_blank\" rel=\"noopener\">言語ローカライゼーション</a>：</strong>ユーザー向けテキストコンテンツの自動翻訳生成</li> \n <li><strong>セキュリティドキュメント：</strong> 認証コードを変更したときのセキュリティ考慮事項の更新</li> \n <li><strong>アーキテクチャ図：</strong> サービス統合を変更したときのシステム図の更新</li> \n <li><strong>デプロイメントガイド：</strong> Docker 設定を変更したときのデプロイメント手順の更新</li> \n <li><strong>トラブルシューティングガイド：</strong> 例外処理コードに基づく一般的なエラーシナリオの生成</li> \n <li><strong><a href=\"https://kiro.dev/docs/hooks/examples/#integration-with-mcp\" target=\"_blank\" rel=\"noopener\">Figma デザインの検証</a>：</strong> Figma MCP を使用して HTML/CSS ファイルが Figma デザインに従っているかを検証</li> \n</ul> \n<p>その他にもたくさんあります。詳細なエージェントフック設定を含む<a href=\"https://kiro.dev/docs/hooks/examples/\" target=\"_blank\" rel=\"noopener\">例のリスト</a>をご覧ください。</p> \n<h2>最終的に重要なのは何か</h2> \n<p>ドキュメントが自動で常に最新の状態に保たれるようになると、まるで魔法のような変化が起こります。：開発者は再びドキュメントを信頼するようになります。チームメンバー同士で作業を中断し合うことも減ります。開発者は集中状態を保ったままより多くの時間を過ごし、コード品質が向上し、機能のリリースも加速します。しかし、得られる恩恵は生産性指標にとどまりません。</p> \n<p>新しい開発者のオンボーディングが速くなり、正確なドキュメントが組織にとっての「知の蓄積」なります。経験豊富な開発者がチームから去るとき、知識も一緒にドアから出て行くのではなく、彼らの在職中にエージェントフックによって常に最新の状態に保ってきたガイドの中に生き続けます。ドキュメントは 3 か月前の古いスナップショットではなく、コードベースの現在の状態をリアルタイムで反映した「生きた記録」であるべきです。Kiro のエージェントフックを活用すれば、ドキュメントがコードと並行して自動的に進化する間、あなたは優れたソフトウェアの構築に集中できます。</p> \n<h2>まとめ</h2> \n<p>みなさんが Kiro でエージェントフックを設定し、ご自身のプロジェクトで実際に動作する様子を見るのをとても楽しみにしています。ぜひ <a href=\"https://discord.com/invite/kirodotdev\" target=\"_blank\" rel=\"noopener\">Discord サーバー</a>にて、ご意見やご感想をお聞かせください。このブログで話したドキュメントのユースケースから始めて、他のユースケースにもぜひチャレンジしてみてください。具体例は<a href=\"https://kiro.dev/docs/hooks/examples/\" target=\"_blank\" rel=\"noopener\">こちらのドキュメント</a>でも紹介されています。</p> \n<h2>エージェントフック使用時の注意点</h2> \n<p>正規表現を利用するイベントトリガー（たとえば、<code>**/*.py</code>）でエージェントフックを実装する場合、パターンの適用範囲を慎重に検討することが重要です。あまりに広範囲なスコープになると、フックが実行されたときに過度の変更をもたらし、大規模プロジェクトにて意図しないドキュメント更新につながる可能性があります。効率性とドキュメントの明確性を維持するために、より具体的で対象を絞ったパターンマッチングを実装することをお勧めします。<a href=\"https://kiro.dev/docs/hooks/troubleshooting/\" target=\"_blank\" rel=\"noopener\">エージェントフックのトラブルシューティング</a>を参照してください。</p> \n<p>翻訳はApp Dev Consultantの宇賀神が担当しました。</p>"
  },
  {
    "title": "AWS Transform for VMware を使用して VMware ワークロードを移行およびモダナイズする",
    "date": "2025-10-15T04:29:34.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/migrate-and-modernize-vmware-workloads-with-aws-transform-for-vmware/",
    "content": "<p>本稿は、2025 年 7 月 8 日に <a href=\"https://aws.amazon.com/blogs/architecture/\" target=\"_blank\" rel=\"noopener\">AWS Architecture Blog</a> で公開された <a href=\"https://aws.amazon.com/jp/blogs/architecture/migrate-and-modernize-vmware-workloads-with-aws-transform-for-vmware/\" target=\"_blank\" rel=\"noopener\">Migrate and modernize VMware workloads with AWS Transform for VMware</a> を翻訳したものです。</p> \n<p>2025年5月15日、AWS は画期的なソリューションである <a href=\"https://aws.amazon.com/jp/transform/vmware/\" target=\"_blank\" rel=\"noopener\">AWS Transform for VMware</a> を発表しました。この革新的なサービスは、クラウド移行における長年の課題に正面から取り組み、AWS クラウドへの簡素化され効率的な移行の新たな時代を切り開きます。手作業を大幅に削減し、重要な VMware ワークロードの移行を加速することで、AWS Transform for VMware は、組織がクラウドへのアプローチを革新することを目指しています。</p> \n<p><a href=\"https://aws.amazon.com/jp/blogs/news/new-capabilities-in-aws-transform-for-vmware/\" target=\"_blank\" rel=\"noopener\">一般提供開始の発表</a>以来、AWS Transform for VMware は業界全体で注目を集めており、組織はその機能を活用して VMware のワークロードの移行とモダナイゼーションの取り組みを加速したいと考えています。この革新的な技術の詳細を掘り下げていく中で、 AWS Transform for VMware が移行を簡素化するだけでなく、クラウド導入とデジタルトランスフォーメーションの実態を再形成していることを明らかにします。</p> \n<h2>VMware 移行の課題</h2> \n<p>企業のワークロードをクラウドに移行することは、単なる技術的な課題ではありません。それは、ビジネス変革、精度、スピード、そして最小限の中断です。長年にわたる確立された運用プロセスは、文書化が不十分な構成、一貫性に欠けるセキュリティプラクティス、そして暗黙知への強い依存を伴う複雑な環境を作り出すことが多くあります。技術チームは、これらの変革プロジェクトを実行しながら、複雑なアプリケーションの依存関係を把握し、複数のステークホルダー間で調整を行い、ビジネスの継続性を維持しなければなりません。包括的な文書化の欠如と、システム間の依存関係に対する明確な理解の不足は、頻繁な移行期間の延長やプロジェクトリスクの増加につながります。さらに、進行中の運用と移行活動のバランスを取る必要性も課題です。適切な知識の移転を実現することは、これらの重要な取り組みにさらに複雑さを加えます。</p> \n<h2>ソリューションの概要</h2> \n<p>AWS Transform for VMware が、アプリケーションのディスカバリーを簡素化し、ネットワーク変換を自動化し、包括的なアーキテクチャを通じて複雑な移行をオーケストレーションする方法について、以下の図で見ていきましょう。</p> \n<p>これらの機能がどのように連携するかを理解するために、アーキテクチャの各構成要素を調べてみましょう。</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/07/06/Screenshot-2025-07-06-at-18.42.20.png\" alt=\"Component architecture of AWS Transform for VMware\" width=\"1207\" height=\"726\"></p> \n<h2>効率化されたディスカバリーとアセスメント</h2> \n<p>この旅は、VMware 環境の徹底的なディスカバリーとアセスメントから始まります (1)。<a href=\"https://aws.amazon.com/jp/transform/vmware/\" target=\"_blank\" rel=\"noopener\">AWS Transform for VMware</a> (4) は複数のディスカバリー方法をサポートしています。1つの選択肢は、VMware インベントリ収集用の <a href=\"https://www.dell.com/en-us/shop/vmware/sl/rvtools\" target=\"_blank\" rel=\"noopener\">RVTools</a> です。VMware NSX を実行しているお客様向けには、オプションで <a href=\"https://aws.amazon.com/jp/blogs/news/exporting-network-configuration-data-with-import-export-for-nsx/\" target=\"_blank\" rel=\"noopener\">import/export</a> 機能があります。さらに、<a href=\"https://aws.amazon.com/jp/application-discovery/\" target=\"_blank\" rel=\"noopener\">AWS Application Discovery Service</a> は、移行のためのデータと依存関係を収集する、エージェントベースおよびエージェントレスの両方のディスカバリーオプション (2) を提供しています。</p> \n<p>インベントリ検出 (5) は、ソース環境から重要なデータを収集し、AWS Migration Discovery アカウント (7) 内にある <a href=\"https://aws.amazon.com/jp/s3/\" target=\"_blank\" rel=\"noopener\">Amazon Simple Storage Service</a> (Amazon S3) バケット (12) に安全に保存します。このデータは、十分な情報に基づいた移行計画の基礎となり、AWS Application Discovery Service (15) によって、AWS Migration Planning アカウントでさらに処理されます。AWS Transform は、これらのサービスと連携し、移行の進捗状況を追跡し、サーバーのインベントリと依存関係データを収集するための単一の場所を提供します。これは、アプリケーションの適切なグループ化とウェーブプランニングの成功に不可欠です。</p> \n<h2>インテリジェントなネットワーク変換とウェーブプランニング</h2> \n<p>環境を包括的に理解することで、AWS Transform for VMware は、次の重要なフェーズへ移行します。ネットワーク変換機能 (19) は、ターゲットネットワークインフラストラクチャを設定するために、<a href=\"https://aws.amazon.com/jp/cloudformation/\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation テンプレート</a> (13、26) の作成を自動化します。これらのテンプレートにより、クラウド環境がソース設定を密接に反映することを確実にし、移行のセットアップを簡素化します。</p> \n<p>一方、ウェーブプランニング機能 (6) は、高度な<a href=\"https://en.wikipedia.org/wiki/Graph_neural_network\" target=\"_blank\" rel=\"noopener\">グラフニューラルネットワーク</a>を使用してアプリケーションの依存関係を分析し、最適な移行ウェーブを計画します。これにより、複雑なポートフォリオおよびアプリケーションの依存関係分析が最小限に抑えられ、移行準備の整ったウェーブプランが提供され、スムーズな移行を実現します。</p> \n<h2>強化されたセキュリティとコンプライアンス</h2> \n<p>セキュリティは移行プロセス全体を通じて最優先事項です。<a href=\"https://aws.amazon.com/jp/kms/\" target=\"_blank\" rel=\"noopener\">AWS Key Management Service</a> (AWS KMS) (8、16、26) は、保存されたデータ、会話履歴、および成果物に対して堅牢な暗号化を提供します。デフォルトでは、AWS マネージドキーが使用され、追加の制御のために<a href=\"https://docs.aws.amazon.com/ja_jp/kms/latest/developerguide/concepts.html\" target=\"_blank\" rel=\"noopener\">カスタマーマネージドキー</a>を使用するオプションがあります。</p> \n<p><a href=\"https://aws.amazon.com/jp/organizations/\" target=\"_blank\" rel=\"noopener\">AWS Organizations</a> (9) は、複数の AWS アカウントにわたる一元管理を可能にし、<a href=\"https://aws.amazon.com/jp/cloudtrail/\" target=\"_blank\" rel=\"noopener\">AWS CloudTrail</a> (14、26) は、完全な監査証跡のために API アクティビティの取得と記録をします。アクセス制御は、<a href=\"https://aws.amazon.com/jp/iam/\" target=\"_blank\" rel=\"noopener\">AWS Identity and Access Management</a> (IAM) (26) を通じて管理され、AWS アカウント全体で一元化されたアクセス管理を提供します。</p> \n<p><a href=\"https://aws.amazon.com/jp/cloudwatch/\" target=\"_blank\" rel=\"noopener\">Amazon CloudWatch</a> (10、26) は、管理アカウント内の AWS Transform サービスのアクティビティ、リソース利用状況、および運用メトリクスを継続的に監視し、移行プロセス全体を通じて完全な可視性と制御を提供します。<a href=\"https://aws.amazon.com/jp/iam/identity-center/\" target=\"_blank\" rel=\"noopener\">AWS Identity Center</a> (11) は、移行に関与するすべての AWS アカウントに一元的なアクセス管理を提供することで、セキュリティをさらに強化します。</p> \n<h2>組織的な移行実行</h2> \n<p>移行を実行する時が来たら、AWS Transform はさまざまな AWS ツールとサービス (20) と連携し、エンドツーエンドの移行をオーケストレーションします。<a href=\"https://aws.amazon.com/jp/application-migration-service/\" target=\"_blank\" rel=\"noopener\">AWS Application Migration Service</a> (25) は、綿密に計画されたウェーブとグループ化に基づいて、ソース環境から AWS Migration Target Account (18) の <a href=\"https://aws.amazon.com/jp/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Compute Cloud</a> (Amazon EC2) インスタンス (21) にサーバーを複製します。</p> \n<p>AWS レプリケーションエージェント (2) は、AWS Application Migration Service と連携し、効率的で信頼性の高いデータ転送を実現します。<a href=\"https://aws.amazon.com/jp/ebs/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Block Store</a> (Amazon EBS) (21) は、移行された仮想マシンに必要なストレージを提供し、最適なパフォーマンスとスケーラビリティを実現します。</p> \n<h2>柔軟なネットワーク構成</h2> \n<p>AWS Transform for VMware は、異なる要件に対応する2つのネットワークモデルを提供します：</p> \n<ul> \n <li>ハブアンドスポークモデル – <a href=\"https://aws.amazon.com/jp/transit-gateway/\" target=\"_blank\" rel=\"noopener\">AWS Transit Gateway</a> (23) は、Amazon Virtual Private Clouds (Amazon VPC) に共有 <a href=\"https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/vpc-nat-gateway.html\" target=\"_blank\" rel=\"noopener\">NAT ゲートウェイ</a>を持つ中央ハブ VPC を介して接続します。このモデルは、一元管理および共有サービスに最適です。</li> \n <li>分離モデル – 各 VPC は接続性が確立されていない状態で独立して動作します。このアプローチは、既存の AWS ネットワークインフラストラクチャを持つお客様向けに設計されており、新しい VPC を既存のネットワークトポロジーに手動で接続することを可能にします。</li> \n</ul> \n<p>AWS Transform によって作成された VPC (22) は、オンプレミスのネットワークセグメントと一致し、シームレスな移行を提供します。NAT ゲートウェイ (24) は、プライベートサブネットにアウトバウンドインターネットアクセスを提供し、セキュリティを維持しながら必要な接続性を可能にします。ハブアンドスポークアーキテクチャでは、ハブ VPC の一元化 NAT ゲートウェイを複数のスポーク VPC に提供でき、コストの最適化と管理の簡素化を実現できます。分離された VPC 展開の場合、インターネットアクセスを必要とする各 VPC 内で専用の NAT ゲートウェイをプロビジョニングする必要があります。すべての場合において、NAT ゲートウェイを通る Egress トラフィックの流入を可能にするために、ルートテーブルを設定する必要があります</p> \n<p>完全なセットアップ手順と要件については、<a href=\"https://docs.aws.amazon.com/ja_jp/transform/latest/userguide/what-is-service.html\" target=\"_blank\" rel=\"noopener\">AWS Transform ユーザーガイド</a>を参照してください。</p> \n<h2>追加の考慮事項</h2> \n<p>AWS Transform for VMware のディスカバリーワークスペースは、世界中でご利用いただけます (3)。サポートされているリージョンに関する最新の情報については、<a href=\"https://aws.amazon.com/jp/about-aws/global-infrastructure/regional-product-services/\" target=\"_blank\" rel=\"noopener\">AWS Services by Region</a> (17) を参照してください。</p> \n<p>移行プロセス全体を通じて、AWS Migration Discovery アカウントと AWS Migration Target アカウントの両方の主要な移行成果物は Amazon S3 バケット (12、26) に格納されます。これらには、インベントリデータ、依存関係マッピング、ウェーブプラン、アプリケーショングループ化、同様に Infrastructure as Code templates (AWS CloudFormation および AWS Cloud Development Kit)、およびウェーブごとの移行計画が含まれます。</p> \n<h2>お客様のメリット</h2> \n<p>AWS Transform for VMware は、重要な利点を提供します：</p> \n<ul> \n <li>手作業の手間を削減 – 自動化により人的ミスを最小限に抑え、貴重な IT リソースを解放します</li> \n <li>精度の向上 – AI 主導の依存関係マッピングとウェーブプランを活用でき、最適な移行戦略を立てられます</li> \n <li>コラボレーションの強化 ― 一元管理とトラッキングにより、チーム間の連携が向上します</li> \n <li>コスト最適化 – インスタンスの適切なサイズと AWS の柔軟な価格設定モデルを活用して、即時かつ長期的なコスト削減を実現します</li> \n <li>将来性 – AWS クラウドサービス上で、継続的なモダナイゼーションとイノベーションの機会を開きます</li> \n</ul> \n<p>移行ソリューションを実装する際には、常に組織のセキュリティ要件、コンプライアンス義務、および <a href=\"https://aws.amazon.com/jp/architecture/security-identity-compliance/\" target=\"_blank\" rel=\"noopener\">AWS セキュリティベストプラクティクス</a>を確認し、遵守してください。詳細なセキュリティガイダンスについては、<a href=\"https://docs.aws.amazon.com/ja_jp/security/\" target=\"_blank\" rel=\"noopener\">AWS セキュリティドキュメント</a>と組織のセキュリティチームに相談してください。</p> \n<h2>料金</h2> \n<p>AWS Transform は、エージェント AI 機能により、VMware ワークロード向けの移行およびモダナイゼーションプロジェクトを加速します。現在、アセスメントと変換を含む主要機能を無料* で AWS のお客様へ提供しています。これにより、前払い費用なしで、移行とモダナイゼーションの道のりを迅速化できます。</p> \n<p><em>*無料とは、AWS Transform サービス自体を指します。移行時に使用する AWS サービスおよびリソースには標準料金が適用されます。</em></p> \n<h2>まとめと次のステップ</h2> \n<p>AWS Transform for VMware は、組織に VMware の移行とモダナイゼーションの複雑さを克服する力を与えます。包括的で自動化されたアプローチを提供することで、AWS クラウドへのより高速で信頼性の高い移行を可能にします。この新しいサービスは、変化する VMware の環境を自信を持って進むために必要なツールと機能を提供します。</p> \n<p>探究したアーキテクチャは、AWS Transform for VMware が主要な課題にどのように取り組むか示しています：</p> \n<ul> \n <li>ディスカバリーおよびアセスメントプロセスを効率化</li> \n <li>ネットワーク変換とインテリジェントウェーブプランニングの自動化</li> \n <li>最小限の混乱で移行実行をオーケストレート</li> \n <li>移行全体を通じたセキュリティとコンプライアンスの向上</li> \n <li>一元管理と監視の提供</li> \n <li>多様な要件に対応できる柔軟なネットワークオプションの提供</li> \n</ul> \n<p>VMware 移行の旅を加速する準備はできましたか？ <a href=\"https://aws.amazon.com/jp/transform/vmware/\" target=\"_blank\" rel=\"noopener\">AWS Transform for VMware</a> 製品ページにアクセスして、詳細をご確認いただき、今日から始めましょう。AWS Transform for VMware の<a href=\"https://aws.storylane.io/share/qye0se68an9i?utm_source=pdp\" target=\"_blank\" rel=\"noopener\">インタラクティブデモ</a>をご確認ください。VMware NSX 環境からネットワーク構成をエクスポートする場合は、<a href=\"https://aws.amazon.com/jp/blogs/news/exporting-network-configuration-data-with-import-export-for-nsx/\" target=\"_blank\" rel=\"noopener\">Import/Export for NSX によるネットワーク構成データのエクスポート</a>も参照してください。私たち専門家チームが、お客様の移行およびモダナイゼーションの取り組みをガイドし、AWS クラウドの可能性を最大限に引き出すお手伝いをいたします。</p> \n<hr> \n<h3>著者について</h3> \n<p>\n <!-- '\"` --></p> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/05/28/Screenshot-2025-05-28-at-09.14.50.png\" alt=\"Kiran Reid\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Kiran Reid</h3> \n  <p>Kiran Reidは、AWS の Senior Generative AI および Machine Learning Specialist です。人工知能 (AI) 技術に関する専門知識を持つ Kiran は、AWS のパートナーやお客様と密接に連携し、AI を活用したワークロードの移行とモダナイゼーションを支援しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/06/26/akulrama.jpeg\" alt=\"Ramu Akula\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Ramu Akula</h3> \n  <p>Ramu Akula は、AWS の Principal Portfolio Manager および Telco Network Transformation specialist です。24 年以上にわたる IT 分野での経験を活かし、お客様の AWS へのワークロード移行およびモダナイジングを支援しています</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/1f1362ea41d1bc65be321c0a378a20159f9a26d0/2024/11/07/Patrick-Kremer.png\" alt=\"Patrick Kremer\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Patrick Kremer</h3> \n  <p>Patrick Kremer は、インフラの移行と現代化に特化した Senior Specialist Solutions Architect です。Patrick は 2022 年に AWS に入社し、20 年にわたる VMware の経験を活かし、お客様が AWS ソリューションに移行するのを支援してきました。彼は教育とブログ活動に情熱を持つ、認定 AWS Solutions Architect Professional です。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2025/06/02/markjagg.jpeg\" alt=\"Mark Jaggers\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Mark Jaggers</h3> \n  <p>Mark Jaggers は、AWS の Outbound Product Management であり、クラウド移行およびディザスタリカバリーソリューションの市場開拓戦略を統括しています。Mark は、AWS Elastic Disaster Recovery と AWS Application Migration Service の両方のサービスチーム内で働き、お客様の大規模な IT インフラストラクチャのモダナイズを支援しています。</p> \n </div> \n</footer> \n<p>この投稿の翻訳は Solutions Architect の田澤が担当させていただきました。原文記事は<a href=\"https://aws.amazon.com/jp/blogs/architecture/migrate-and-modernize-vmware-workloads-with-aws-transform-for-vmware/\" target=\"_blank\" rel=\"noopener\">こちら</a>です。</p>"
  },
  {
    "title": "週刊AWS – 2025/10/6週",
    "date": "2025-10-15T03:53:06.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-weekly-20251006/",
    "content": "<p>みなさん、こんにちは。ソリューションアーキテクトの杉山です。今週も <a href=\"https://aws.amazon.com/jp/blogs/news/tag/%E9%80%B1%E5%88%8Aaws/\">週刊AWS</a> をお届けします。</p> \n<p>2025 年 11 月 21 日に、株式会社LangGenius、株式会社リコー、アマゾンウェブサービスジャパン合同会社が登壇する「<a href=\"https://d2e7mz4alxgx8z.cloudfront.net/\">企業の生成 AI 活用を加速する Dify Enterprise on AWS 〜セキュアなデータの活用とパートナー導入事例〜</a>」のイベントが開催されます。Dify Enterprise の新機能紹介、機密性の高いデータを保有する企業システムと Dify の安全な連携手法、Dify 導入パートナーによる事例紹介を通じて、エンタープライズでの安全かつ効果的な生成 AI 活用の知見を提供します。物理開催のため、事前にお申し込みの上、ご参加ください。</p> \n<p>それでは、先週の主なアップデートについて振り返っていきましょう。</p> \n<p><span id=\"more-166830\"></span></p> \n<h4>2025年10月6日週の主要なアップデート</h4> \n<ul> \n <li>10/6(月) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ec2-c8i-and-c8i-flex-instances-generally-available\" target=\"_blank\" rel=\"noopener\">新しいコンピュート最適化 Amazon EC2 C8i および C8i-flex インスタンス</a><br> AWS が新しいコンピュート最適化インスタンス C8i と C8i-flex の一般提供を開始しました。カスタム Intel Xeon 6 プロセッサを搭載し、従来の Intel ベースインスタンスと比較して最大 15% のコスト削減と 2.5 倍のメモリ帯域幅を実現します。Web アプリケーションでは最大 60%、AI 推論では最大 40% の性能向上を達成します。C8i-flex は Web サーバーやデータベース向けで、料金が少し安価で採用しやすいタイプです。C8i は、CPU 負荷の高いシステム向けのインスタンスタイプです。バージニア北部、オハイオ、オレゴン、スペインリージョンで利用可能です。詳細は<a href=\"https://aws.amazon.com/ec2/instance-types/c8i/\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの Blog 記事をご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-eks-distro-kubernetes-version-1-34\" target=\"_blank\" rel=\"noopener\">Amazon EKS と Amazon EKS Distro が Kubernetes バージョン 1.34 をサポート開始</a><br> Amazon EKS と Amazon EKS Distro で Kubernetes version 1.34 のサポートが開始されました。Kubernetes 1.34 のアップデートの内容を一部取り上げると、コンテナイメージを取得する時のセキュリティが強化され、従来よりも安全にイメージの認証を行えるようになりました。また Pod 内の複数コンテナのリソース管理が簡素化され、より効率的なリソース配分が可能になります。既存クラスターは EKS コンソールや eksctl を使って簡単にアップグレード可能で、全ての AWS リージョンで利用できます。詳細は<a href=\"https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions-standard.html\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n  </ul> </li> \n <li>10/7(火) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/automatic-quota-management-service-quotas/\" target=\"_blank\" rel=\"noopener\">AWS Service Quotas の自動 Quota 管理が一般提供開始</a><br> AWS Service Quotas で自動クォータ管理機能が一般提供開始となりました。AWS Service Quotas は各サービスの利用上限 (Quota) を一元管理するサービスです。新しいアップデートで、Quota 使用量を監視し、上限に近づくと事前に自動通知を受け取れるようになります。これまでは Quota 超過でサービスが停止するリスクがありましたが、事前通知により計画的な対応が可能です。通知は email や SMS、Slack などで受け取れます。</li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-marketplace-japan-consumption-tax-support\" target=\"_blank\" rel=\"noopener\">AWS Marketplace が Channel Partner Private Offers の日本消費税サポートを拡張</a><br> AWS Marketplace で日本の消費税サポートが拡張され、Channel Partner Private Offers (CPPO) にも対応しました。これまで、日本に住所を持つ ISV 会社 (SaaS 系) や Channel Partner が、日本のお客様に販売する場合、AWS Japan が 10% の消費税を徴収して、日本の税務当局に送金をしています。今回のアップデートで、Channel Partner Private Offers (CPPO) の取引においても、日本の消費税のサポートが拡大されました。CPPO とは、AWS パートナーが、AWS Marketplace に出品されている ISV製品・SaaS製品を、各ベンダーに代わって販売することができるプログラムです。詳細は<a href=\"https://aws.amazon.com/jp/local/invoice-faq/\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの FAQ</a>をご参照ください。</li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-marketplace-currencies-usage-based-private-offers\" target=\"_blank\" rel=\"noopener\">AWS Marketplace が使用量ベースのプライベートオファーで新しい通貨をサポート</a><br> AWS Marketplace で Usage ベース (従量課金制) のプライベートオファーが EUR、GBP、AUD、JPY の 4 つの新通貨に対応しました。これまで、通貨が USD のみ利用可能でしたが、利用しやすい通貨で取引できるようになりました。外国為替リスクを回避でき、売り手は現地通貨での受取が可能となり、利用者は調達プロセスが簡素化されます。詳細は<a href=\"https://external-aws-mp-isvs.s3.amazonaws.com/Internationalization/Local_Currency_Cheatsheet_Seller.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-documentdb-mongodb-compatibility-new-regions-asia-pacific-mexico\" target=\"_blank\" rel=\"noopener\">Amazon DocumentDB (MongoDB 互換) が、アジア太平洋地域とメキシコの 4 つの新しいリージョンで利用可能になりました</a><br> Amazon DocumentDB (MongoDB 互換) が大阪リージョン、タイリージョン、マレーシアリージョン、メキシコ中央リージョンで新たに利用可能になりました。Amazon DocumentDB は、MongoDB 互換のフルマネージドデータベースとなり、今回のアップデートでリージョンが拡張し、システムを構成しやすくなりました。</li> \n  </ul> </li> \n <li>10/8(水) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-q-developer-understand-service-prices-estimate-workload-costs\" target=\"_blank\" rel=\"noopener\">Amazon Q Developer がサービス料金の理解とワークロードコストの見積もりを支援</a><br> Amazon Q Developer に新しく「価格・コスト見積もり」を行うための機能が追加されました。自然言語で AWS サービスの料金情報を取得できるため、人間が複数の価格ページを確認する手間を削減しやすくなりました。「RDS 拡張サポートの料金は?」「SNS で月 100 万通知の見積もりは?」といった質問を投げかけられます。AWS Management Console のチャットパネルから利用可能です。詳細は<a href=\"https://docs.aws.amazon.com/cost-management/latest/userguide/ce-cost-analysis-q.html\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.comabout-aws/whats-new/2025/10/general-purpose-amazon-ec2-m8a-instances/\" target=\"_blank\" rel=\"noopener\">新しい汎用 Amazon EC2 M8a インスタンス</a><br> AWS で新しい汎用 EC2 インスタンス M8a の提供が開始されました。5世代目 AMD EPYC プロセッサを搭載し、従来の M7a インスタンスと比較して最大 30% の性能向上と 19% のコストパフォーマンス改善を実現しています。メモリ帯域幅も 45% 向上し、レイテンシに敏感なワークロードにも対応できるようになりました。金融アプリケーション、ゲーム、レンダリング、アプリケーションサーバーなどの高性能が求められる用途に最適で、オハイオ、オレゴン、スペインリージョンで利用可能です。詳細は<a href=\"https://aws.amazon.com/blogs/aws/new-general-purpose-amazon-ec2-m8a-instances-are-now-available\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの Blog 記事をご参照ください。</a></li> \n  </ul> </li> \n <li>10/9(木) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-dynamodb-ipv6/\" target=\"_blank\" rel=\"noopener\">Amazon DynamoDB が Internet Protocol version 6 (IPv6) をサポート開始</a><br> Amazon DynamoDB に VPC からアクセスする際に IPv6 がサポートしました。AWS PrivateLink Gateway および Interface エンドポイントを利用して VPC 内からアクセスする際に、IPv6 を利用した接続が可能となります。現在は米国リージョンで利用可能で、他のリージョンにも順次展開予定です。詳細は<a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/AccessingDynamoDB.html#dual-stackipv4-6\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-quick-suite-agentic-ai-powered-workspace\" target=\"_blank\" rel=\"noopener\">Amazon Quick Suite の提供開始</a><br> 従来あった Amazon QuickSight が Amazon Quick Suite に名前がリブランドされました。組織内の全従業員がデータに触れながら新しいインサイトを得やすくする方向性へのリブランドとなります。AI を活用した新機能を 3 つピックアップすると、Quick Research : インターネット上の情報と社内のデータをかけ合わせて質の高いレポートを作成、Quick Automate : 複雑な多段階のビジネスプロセスを自然処理で定義しながら自動的に処理、Quick Index : 組織内のデータを MCP、S3、Gmail、Sharepoint などと連携してナレッジべースとして提供、といった機能が含まれています。社内データと AI を連携する仕組みを、より統合された形で提供することで、社内でのインサイト発見に活用しやすくなります。最大 25 ユーザーまで 30 日間の無料トライアルが利用でき、バージニア北部、オレゴン、シドニー、アイルランドリージョンで提供中です。東京リージョンについては、Qucik Suite の UI に変更されていますが、新たな機能は現時点では利用できません。詳細は<a href=\"https://aws.amazon.com/jp/blogs/news/reimagine-business-intelligence-amazon-quicksight-evolves-to-amazon-quick-suite/\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの Blog 記事をご参照ください。</a></li> \n  </ul> </li> \n <li>10/10(金) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-client-vpn-macos-tahoe/\" target=\"_blank\" rel=\"noopener\">AWS Client VPN が macOS Tahoe をサポート開始</a><br> AWS Client VPN が MacOS Tahoe (バージョン 26.0) に対応しました。これまでも Mac 用の Client を提供していましたが、より最新の MacOS のバージョンに対応した形です。Client VPN ソフトウェアのバージョン 5.3.1 以降でサポートをしています。Client VPN は、リモートワークで自宅から会社のネットワークや AWS 環境に安全に接続したい場合に利用いただけるネットワーク系のサービスです。詳細は<a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのドキュメントをご参照ください。</a></li> \n  </ul> </li> \n</ul> \n<p>それでは、また来週お会いしましょう！</p> \n<h1>著者について</h1> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2024/05/31/sugi-profile_en.png\" alt=\"Suguru Sugiyama\" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\"><a href=\"https://x.com/sugimount\" target=\"_blank\" rel=\"noopener\">杉山 卓(Suguru Sugiyama) / @sugimount</a></h3> \n  <p>AWS Japan のソリューションアーキテクトとして、幅広い業種のお客様を担当しています。最近は生成 AI をお客様のビジネスに活かすためにアイデア出しやデモンストレーションなどを多く行っています。好きなサービスは仮想サーバーを意識しないもの全般です。趣味はゲームや楽器演奏です</p> \n </div> \n</footer>"
  },
  {
    "title": "2025 年 9 月の AWS Black Belt オンラインセミナー資料及び動画公開のご案内",
    "date": "2025-10-15T03:07:24.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/2025-09-aws-blackbelt/",
    "content": "<p>2025 年 9 月に公開された AWS Black Belt オンラインセミナーの資料及び動画についてご案内させて頂きます。<br> 動画はオンデマンドでご視聴いただけます。</p> \n<p>また、過去の AWS Black Belt オンラインセミナーの資料及び動画は「<a href=\"https://aws.amazon.com/jp/blogs/news/aws-blackbelt-overview/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Black Belt Online Seminar 一覧</a>」に一覧がございます。<br> YouTube の再生リストは「<a href=\"https://www.youtube.com/playlist?list=PLzWGOASvSx6FIwIC2X1nObr1KcMCBBlqY\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Black Belt Online Seminar の Playlist</a>」をご覧ください。<span id=\"more-166861\"></span></p> \n<hr> \n<h3>Reserved Instances</h3> \n<p>Reserved Instances は、1 年または 3 年の期間で特定の使用量を契約するかわりに、オンデマンド料金と比較して低料金を実現する柔軟な料金モデルです。本セッションでは、Reserved Instances の概要、購入方法および購入計画などについて説明します。</p> \n<p><iframe loading=\"lazy\" title=\"Reserved InstancesãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/z7CEXdf6ZRw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Reserved Instances_1031_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/z7CEXdf6ZRw\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>Reserved Instances の概要や購入方法を知りたい方</li> \n <li>Reserved Instances の購入計画を立てたい方</li> \n <li>データベースなどのワークロードのコスト最適化を促進したい方</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>Reserved Instances の概要・購入方法について学んでいただけます</li> \n <li>購入計画や購入後のモニタリングについても紹介します</li> \n</ul> \n<p><strong>スピーカー</strong><br> 加須屋 悠己<br> テクニカルアカウントマネージャー</p> \n<hr> \n<h3>Amazon Managed Grafana</h3> \n<p>Amazon Managed Grafana は 拡張性、安全性、⾼可⽤性を備えたフルマネージドな Grafana 環境を提供する AWS サービスです。本セッションでは、Amazon Managed Grafana についてご紹介しております。</p> \n<p><iframe loading=\"lazy\" title=\"Amazon Managed GrafanaãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/4X7Q5ERQncA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-Managed-Grafana_0831_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/4X7Q5ERQncA\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>AWS 上でオープンソースを利⽤したオブザーバビリティに関⼼のある⽅</li> \n <li>Grafana の運⽤に課題を持っている⽅</li> \n <li>Amazon Managed Grafana に興味のある⽅</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>Amazon Managed Grafana の特徴や機能</li> \n <li>Amazon Managed Grafana のユースケース</li> \n</ul> \n<p><strong>スピーカー</strong><br> 辻林侑<br> ソリューションアーキテクト</p> \n<hr> \n<h3>Amazon Cognito</h3> \n<p>Amazon Cognito は、ウェブアプリケーションやモバイルアプリケーションにユーザー認証、認可、ユーザー管理機能を簡単に追加できる認証サービスです。複雑な認証システムの構築や運用が不要になることから、多くのお客様のアプリケーション開発で採用頂いています。本セッションでは、Amazon Cognito を使用するユースケースや機能についてご紹介します。</p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-Cognito_1031_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>）&nbsp;</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>アイデンティティ管理に AWS の利⽤を検討している⽅</li> \n <li>Amazon Cognito でできることを理解されたい⽅</li> \n <li>Cognito ユーザープールと ID プールの違いや使い⽅を理解されたい⽅</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>アイデンティティ管理における Amazon Cognito の使い方を学習いただけます</li> \n <li>Amazon Cognito ユーザープールと ID プールの違いについて理解を深めていただけます</li> \n <li>Amazon Cognito の機能や認証フローを習得いただけます</li> \n</ul> \n<p><strong>スピーカー</strong><br> 鈴⽊ 理希也／海江⽥ 祥汰／吉⽥ 健⼈<br> クラウドサポートエンジニア</p> \n<hr> \n<h3>Amazon GuardDuty Runtime Monitoring 編</h3> \n<p>Amazon GuardDuty の保護プランである Runtime Monitoring は EC2、ECS、EKS のワークロード内部の異常な動作をモニタリングし、セキュリティ脅威を検知できます。本セミナーでは Amazon GuardDuty Runtime Monitoring の概要と開始方法および検知例について解説します。</p> \n<p><iframe loading=\"lazy\" title=\"Amazon GuardDuty Runtime Monitoring ç·¨ãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/UOIHnC75Pek?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-GuardDuty-Runtime-Monitoring_0930_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/UOIHnC75Pek\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>AWS ワークロード上のセキュリティ強化をご検討中の方</li> \n <li>Amazon GuardDuty Runtime Monitoring の機能について知りたい方</li> \n <li>Amazon GuardDuty Runtime Monitoring の開始方法や検出例について知りたい方</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>ランタイムモニタリングをおすすめする理由</li> \n <li>Amazon GuardDuty Runtime Monitoring の概要</li> \n <li>Amazon GuardDuty Runtime Monitoring の開始方法</li> \n <li>Amazon GuardDuty Runtime Monitoring による脅威検出の例</li> \n</ul> \n<p><strong>スピーカー</strong><br> 坂下 拓弥<br> クラウドサポートエンジニア</p> \n<hr> \n<h3>Amazon Connect Global Resiliency</h3> \n<p>Amazon Connect は東京リージョンで複数の要素により信頼性を高めていますが、地域的な災害や障害が発生した場合など、より高い要件に対応することが必要なお客様のために大阪リージョンを利用した Amazon Connect Global Resiliency によって事業継続計画にも対応できるようになりました。本セッションは Amazon Connect が備える信頼性を改めて解説し、Amazon Connect Global Resiliency で実現可能になることや注意事項について紹介致します。</p> \n<p><iframe loading=\"lazy\" title=\"Amazon Connect Global ResiliencyãAWS Black Beltã\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/RSw62JtyEWM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong><span style=\"color: #808080\">資料（<a href=\"https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2025_Amazon-Connect-Global-Resiliency_0930_v1.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">PDF</a>） | 動画（<a href=\"https://youtu.be/RSw62JtyEWM\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube</a>）</span></strong></p> \n<p><strong>対象者</strong></p> \n<ul> \n <li>Amazon Connect が備えている信頼性を理解したい方</li> \n <li>Amazon Connect における BCP の設計に関心のある方</li> \n <li>Amazon Connect Global Resiliency の具体的な機能が知りたい方</li> \n</ul> \n<p><strong>本 BlackBelt で学習できること</strong></p> \n<ul> \n <li>Amazon Connect が備える信頼性について</li> \n <li>Amazon Connect Global Resiliency の機能、動作、および運用上の注意事項</li> \n <li>Amazon Connect Global Resiliency の具体的な切替方法</li> \n</ul> \n<p><strong>スピーカー</strong><br> 清水 幸典<br> Amazon Connect スペシャリスト ソリューションアーキテクト</p>"
  },
  {
    "title": "Amazon Bedrock AgentCore、東京を含むAWSリージョンで一般提供開始：AIエージェントを現実の世界へ",
    "date": "2025-10-15T01:25:32.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-bedrock-agentcore-is-now-generally-available/",
    "content": "<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore-services_1015.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166820\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore-services_1015.png\" alt=\"Amazon Bedrock AgentCore Services\" width=\"1280\" height=\"720\"></a></p> \n<p>本記事は米国時間 10 月 13 日に公開された AWS エージェンティック AI 担当バイスプレジデント　スワミ・シバスブラマニアン（Swami Sivasubramanian）の署名ブログ「<a href=\"https://aws.amazon.com/jp/blogs/machine-learning/amazon-bedrock-agentcore-is-now-generally-available/\">Make agents a reality with Amazon Bedrock AgentCore: Now generally available</a>」の日本語抄訳版です。</p> \n<p><strong>AIエージェントをプロトタイプから、セキュリティ、スケーラビリティ、信頼性を備えた本番環境へ</strong></p> \n<p>2006年に AWS を立ち上げた時、私たちはクラウドコンピューティングが組織のテクノロジーを構築し、スケールさせる方法を変革すると信じていました。現在、AI エージェントについても同様の転換点に立っています。私たちは、数十億もの AI エージェントが協働し、日常業務から複雑なビジネスプロセスまであらゆるものを変革する世界を思い描いています。しかし、これを現実のものとするには、フレームワークやローコードの開発者向けツール以上のものが必要です。企業がビジネスの基盤として信頼できるAIエージェントには、エンタープライズグレードの運用基盤が必要です。その基盤は、セキュアで信頼性が高く、スケーラブルで、AI エージェントの非決定的な性質を考慮して構築されている必要があります。AWS はミッションクリティカルなシステム構築支援の経験を活かし、多様な組織が自信を持ってエージェンティックシステムを本番環境へ移行できる包括的な基盤を <a href=\"https://aws.amazon.com/jp/bedrock/agentcore/\">Amazon Bedrock AgentCore</a> を通じて提供します。</p> \n<p><strong>AgentCore: AIエージェントを迅速に本番環境へ</strong></p> \n<p>AgentCore の一般提供開始により、すべての開発者がAIエージェントをパイロット環境からフルスケールの本番環境へ迅速に移行することが可能になります。AgentCore は AI エージェントの構築、デプロイ、運用に必要な基盤を提供します。エージェントに複雑なワークフローを処理するためのツール、メモリ、データを簡単に取り入れることが可能です。数行のコードを書くだけで、現在利用可能な最も安全でスケーラブルなランタイム環境の一つの選択肢にAIエージェントをデプロイすることが可能です。また、エンタープライズグレードでの展開に必要なコントロールとアクセス管理を備えてこれらのエージェントを運用できます。これらすべてをインフラ管理なしで実行でき、任意のモデルやエージェントフレームワークを使って簡単に開始できます。</p> \n<p>AgentCore SDK は、多様な業界のあらゆる規模のお客様に既に100万回以上ダウンロードされています。初期のお客様には、Clearwater Analytics (CWAN)、Cox Automotive、Druva、Ericsson、Experian、Heroku、National Australia Bank、ソニーグループ、Thomson Reutersなど、その他多くのお客様が含まれます。AgentCore はまた、Accenture、Cisco、Deloitte、SalesforceなどのAWSパートナーによってサポートされ、すでに変革を実現する結果をもたらし始めています。</p> \n<p><strong>AgentCore: 包括的なAIエージェント基盤</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore_a-comprehensive-agentic-platform_1015.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166821\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/14/AgentCore_a-comprehensive-agentic-platform_1015.png\" alt=\"AgentCore, a comprehensive agentic platform\" width=\"1998\" height=\"1125\"></a></p> \n<p>AI エージェントの構築は簡単ではありません。例えば、ID プロバイダーとの統合方法、メモリと可観測性（オブザーバビリティ）の実現方法、ツールとの統合方法などを理解する必要があります。私たちのAIエージェント基盤は、構築からデプロイ、運用までのAI エージェント開発ライフサイクル全体にわたるフルマネージドサービスを提供します。任意のモデルやフレームワークを組み合わせることができ、エンタープライズグレードのインフラストラクチャとツールにアクセスしながら最大限の柔軟性を提供します。その主要な機能を見てみましょう。</p> \n<p><strong>自由自在にAIエージェント構築：</strong>AI エージェント分野は急速に進化しており、新しいフレームワーク、モデル、プロトコルがほぼ毎週のように登場しています。AgentCore のサービス群はモジュールとして提供されているため、必要に応じて組み合わて利用することも、単独で利用することも可能であり、開発者はAIエージェントを望む方法で構築できます。組織としては、チームが必要とするAgentCore のサービスを選択しながら、好みのフレームワーク（CrewAI、Google ADK、LangGraph、LlamaIndex、OpenAI Agents SDK、Strands Agentsを含む）とモデル（Amazon Bedrockで利用可能なモデルや、OpenAIやGeminiなどBedrock以外で利用可能なモデルを含む）を使用できるため、望む方法で自由に構築できます。</p> \n<p><strong>価値を生み出すAIエージェントのための基盤：</strong>AI エージェントは具体的なアクションの実行で価値を生み出します。例えば、コードの記述と実行、企業システムへの接続、ウェブサイトのナビゲーションなどです。AgentCoreはこれらに不可欠なサービスを提供します。AgentCore Code Interpreter により、AIエージェントは分離された環境でコードを安全に生成・実行でき、AgentCore Browserにより、AIエージェントはウェブアプリケーションを大規模に操作することができるようになります。また、AgentCore Gateway は既存の API や AWS Lambda 関数をエージェント互換のツールに変換し、既存の MCP サーバーに接続し、必要不可欠なサードパーティのビジネスツールやサービス（JiraやAsana、Zendeskなど）とのシームレスな統合を提供します。この統一されたアクセスポイントにより、企業システム全体にわたる安全な統合が可能になります。AgentCore Identity を使用すると、エージェントはOAuth 標準を使用した適切な認証と認可によって、これらのツール全体に安全にアクセスし、操作できます。</p> \n<p><strong>インテリジェントなメモリを備えたコンテキスト対応AIエージェント：</strong>AIエージェントが真に効果的であるためには、時間の経過とともに対話からコンテキストを維持し、学習する必要があります。例えば、企業向けソフトウェアを検討するお客様を支援する営業サポートAIエージェントの例を考えてみましょう。複数回にわたるお客様との会話から、お客様の業界、予算上の制約、技術要件を記憶し、同じ質問を繰り返すことを避けながら、お客様にパーソナライズされた提案を行う必要があります。同様に、複雑な技術的トラブルシューティングを支援する例では、AI エージェントは以前のデバッグ試行の結果を思い出し、より的を絞ったソリューションを提供しなければなりません。AgentCore Memory は、開発者が複雑なメモリインフラストラクチャを管理することなく、このような高度なコンテキスト対応エクスペリエンスの構築を支援し、AI エージェントがユーザーの好み、過去のやり取り、そして会話を豊かにする関連コンテキストの詳細な理解を構築・維持するのを支援します。</p> \n<p><strong>信頼できるエージェントのための包括的な可観測性：</strong>AI エージェントはリアルタイムで推論し、非決定的にアクションを実行します。そのため、開発者にはAIエージェントの推論とアクションに対して完全な可視性が必要です。AgentCore Observability は、リアルタイムダッシュボードと詳細な監査証跡を通じて包括的なモニタリングを提供します。組織はAIエージェントのすべてのアクションを追跡し、問題を迅速にデバッグし、パフォーマンスを継続的に最適化できます。AgentCore Observability は、メトリクス、ログ、トレースなどのテレメトリデータを収集してルーティングするための標準化されたプロトコルとツールを提供するオープンソースのオブザーバビリティフレームワークであるOpenTelemetry（OTEL）との互換性を提供しています。これにより、Dynatrace、Datadog、Arize Phoenix、LangSmith、Langfuseなどの既存のモニタリングツールと統合が可能です。</p> \n<p><strong>業界をリードする信頼性であらゆる規模に対応：</strong>従来のアプリケーションとは異なり、AI エージェントのワークロード持続時間は本質的に予測不可能です。AgentCore Runtime はこうした変動性に対応するように設計されており、必要に応じてゼロから数千のセッションへと自動的にスケーリングし、長時間実行タスク向けに業界をリードする8時間のランタイムを提供します。</p> \n<p><strong>エンタープライズグレードのAIエージェントセキュリティ：</strong>AIエージェントはユーザーに代わって行動しながら、複数のシステムに安全にアクセスし、機密データを処理する必要があるため、堅牢なセキュリティと規制コンプライアンスの実現においては一切の妥協が許されません。AgentCore はAI エージェントが安全に運用できるよう、すべてのサービスにセキュリティを組み込んでいます。バーチャルプライベートクラウド（VPC）環境と <a href=\"https://aws.amazon.com/jp/privatelink/\">AWS PrivateLink</a> をサポートし、ネットワークトラフィックをプライベートで安全に保ちます。最も重要なことに、AgentCore Runtime は microVM 技術を通じて業界をリードするセキュリティを提供し、各AIエージェントのセッションに独自の分離されたコンピューティング環境を与え、データ漏洩を防止し、すべての相互作用の完全性を維持します。</p> \n<p><strong>AgentCoreでスピード、スケール、セキュリティを両立：</strong>AgentCore は、<a href=\"https://kiro.dev/\">Kiro</a> や Cursor AI などの統合開発環境（IDE）で動作する MCP サーバーを通じて、本番環境対応の AI エージェントを簡単に構築できます。開始にはわずか数分しかかかりません。そして、これらは簡略化されたツールではありません。堅牢なセキュリティを維持しながら、ゼロから数千のセッションへと即座にスケールできる、フル機能の本番環境対応ソリューションです。つまり、お客様のチームは AI エージェントが実証済みの基盤上に構築されていることを理解した上で、アイデアからデプロイメントまで自信を持って迅速に進めることができます。</p> \n<p><strong>AIエージェントの価値を実現するお客様事例</strong></p> \n<p>Cohere Health の規制された医療環境から、Ericsson の複雑でテクニカルなシステム、そしてソニーグループのグローバル規模での変革まで、先進的な組織がAgentCoreを活用して業界を超えた次世代のAIイノベーションを推進しています。AI 時代に成功する組織は、未来を完璧に予測する組織ではなく、進化する柔軟性を維持しながら実証された基盤の上に構築する組織でしょう。AgentCore を基盤とすることで、AI エージェントの展開と運用のための専用サービスにアクセスできるだけでなく、グローバル規模でセキュリティを確保しながら、企業の変革を支援してきた約20年の経験を持つパートナーも得ることになるでしょう。</p> \n<p>世界最大の広告会社 Publicis Groupe に所属するEpsilon が、AgentCore を使用して大手ブランドのキャンペーンをパーソナライズし、革新する様子を以下のビデオでご覧ください。同社の Intelligent Campaign Automation ソリューションは、複数のチャネルにわたるキャンペーン設計、オーディエンスターゲティング、リアルタイム最適化を自動化し、実行時間の短縮と顧客ターゲティング精度の向上を大規模に実現しています。</p> \n<p><iframe loading=\"lazy\" title=\"Epsilon Transforms Marketing Campaigns with Amazon Bedrock AgentCore | Amazon Web Services\" width=\"500\" height=\"281\" src=\"https://www.youtube-nocookie.com/embed/Ds7z4JA5gB4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen sandbox=\"allow-scripts allow-same-origin\"></iframe></p> \n<p><strong>インテリジェントなワークフロー自動化による製造業の変革：</strong>Amazon Devices Operations &amp; Supply Chain チームは、AI エージェントを活用した製造アプローチの開発にAgentCoreを使用しています。この新しいアプローチの一環として、AIエージェントは製品仕様を使って協働し、手動プロセスを自動化します。あるAIエージェントは製品要件を読み取り、品質管理のための詳細なテスト手順を作成し、別のエージェントは製造ライン上のロボットが必要とするビジョンシステムをトレーニングします。その結果、従来はエンジニアリング時間に数日を要していたオブジェクト検出モデルの微調整が、高い精度で1時間以内に完了できるようになりました。この実証実験は、AI エージェントが初期製品要件から最終生産までの過程を効率化するスマートな製造へのビジョンの始まりに過ぎません。</p> \n<p><strong>AIエージェントによる医療判断の迅速化：</strong>医療現場では、1分1秒が重要です。Cohere Health® は臨床インテリジェンス企業で、保険者（Payer）、医療機関（Provider）の連携を強化し、ケア前後の臨床的意思決定のスピードと正確性を向上させることに焦点を当てています。同社の臨床トレーニングを受けたAIは、患者ケアへのアクセスを加速し、患者のアウトカムを改善し、医療機関の管理負担を軽減し、ケア継続全体にわたって医療サービス提供におけるエコノミクスを改善します。</p> \n<p>例えば、Cohere HealthはAgentCoreを利用して、医療保険における医療の必要性審査の精度と効率を最適化するAI搭載コパイロットであるCohere Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> を構築しました。Cohere Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> は、臨床記録、患者メモ、FAX などの構造化データと非構造化データの両方を分析し、要求された治療の医学的必要性を検証するための証拠を迅速に特定して表示します。このコパイロットは、医療保険の審査担当者に事前承認リクエストの審査に向けて必要な臨床コンテキストを提供し、審査担当者の質問にもインテリジェントに対応します。</p> \n<p>Cohere Health は、高度に規制された医療業界においてエージェンティックAIを初めて本番環境でデプロイするためのエンタープライズグレードのインフラを求め、AgentCore を選択しました。AgentCore で利用可能な包括的な監査証跡、拡張セッションサポート、複数時間にわたる複雑なワークフローを通じて履歴を維持する機能は、Cohere Health のユースケースに不可欠となっています。</p> \n<p>Cohere Health は、Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> が今後レビュー時間を30～40％短縮し、重要な義務付けられた処理時間を満たすのに貢献するだろうと予想しています。より迅速な意思決定は、患者にとりケアへのアクセスを早め、治療への順守を増やし、結果を改善し、コストを削減します。Review Resolve<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2122.png\" alt=\"™\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> はまた、医療保険が臨床的決定の正確性を約30％向上し、それによって医療費の削減と患者のアウトカム改善に貢献する見込みです。</p> \n<p>通<strong>信業界におけるAIエージェント — 複雑なシステムの簡素化：</strong> 通信技術における世界的リーダーであるEricssonは、AIエージェントのデプロイにおける課題に取り組むためにAgentCore を使用しています。Ericsson で、ビジネスエリアネットワークにおけるAIと先進テクノロジーを担当する責任者であるDag Lindbo 氏は次のように述べています。「Ericsson において、私たちの3G/4G/5G/6Gシステムは数百万行ものコードで構成され、数千の相互接続されたサブシステムに及んでいます。これは、国レベルの重要インフラストラクチャにおける数十年にわたるエンジニアリングイノベーションを示しています。AgentCore は、データと情報の重要な融合を実現し、実世界のR&amp;Dにおいて前例のない能力を持つAIエージェントを提供し、数万人規模の社員全体で二桁の価値創出につながるでしょう。また、AgentCore は任意のエージェントフレームワークを使用できるため、多くのチームとユースケースにわたって拡張する上で不可欠です」</p> \n<p><strong>エンターテインメント業界におけるエージェント活用：</strong>セキュリティ、オブザーバビリティとスケーラビリティを両立：世界有数のテクノロジー・エンターテインメント企業であるソニーグループでも、AgentCoreがインパクトを生み出しています。「Agentic AI は、これまでにないレベルでの業務の高度化と効率化を実現するために不可欠な技術です」とソニーグループ株式会社 D&amp;Tプラットフォーム AI Acceleration 部門 部門長の大場 正博氏は述べています。「一方で、エージェンティックAI の活用には、多くの技術的課題があることも事実です。Amazon Bedrock AgentCore を活用することで、グループ全体のAgentic AI Platform を構築し、エンタープライズレベルのセキュリティ、オブザーバビリティそしてスケーラビリティを実現し、さらにクロスプラットフォームでのシームレスな AI リソースへの接続を実現しました。Amazon Bedrock AgentCore を 私たちの AI エコシステムの中核に置くことで、膨大なAIを管理・共有する能力を獲得し、確信と安全性を持ってAIトランスフォーメーションを加速することができます」</p> \n<p>AgentCore は現在、アジアパシフィック（ムンバイ）、アジアパシフィック（シンガポール）、アジアパシフィック（シドニー）、アジアパシフィック（東京）、ヨーロッパ（ダブリン）、ヨーロッパ（フランクフルト）、米国東部（バージニア北部）、米国東部（オハイオ）、米国西部（オレゴン）の9つの AWS リージョンで一般提供され、お客様の世界規模での展開をサポートしています。AgentCore上で動作するように予め設計・構築されたAIエージェントとツールを提供する <a href=\"https://aws.amazon.com/marketplace/solutions/ai-agents-and-tools?trk=70405219-a2f8-4816-a915-9932f523f1bd&amp;sc_channel=el\">AWS Marketplace</a>を活用することで価値実現までの時間を加速することも可能です。</p> \n<p><strong>Amazon Bedrock AgentCoreをご利用の日本のお客様からのコメント</strong><br> （日本語抄訳版における追加記載、五十音順）</p> \n<p><strong>株式会社ウェザーニューズ　執行役員 テクノロジー・プロダクト責任者 出羽 秀章氏</strong><br> ウェザーニューズでは、BtoC 向けの「お天気エージェント」やBtoB 向け SaaS サービスにおいて、AIエージェントの β 版をリリースし、天気に関連するデータやソリューションの提供を開始しています。正式リリース後により多くのユーザーに安心してご利用いただくためには、性能・セキュリティ・ガバナンス・スケーラビリティといった観点が不可欠です。今回、Amazon Bedrock AgentCore のマネージドサービスを活用することで、これらの課題解決に向けて大きく前進できると考えています。新たに提供されるフルマネージドなサービス群と共に、お客様へこれまで以上に大きなビジネス価値をお届けできることを楽しみにしています。</p> \n<p><strong>TIS株式会社 IT 基盤技術事業本部 IT基盤ビジネス事業部長　黒田 訓功氏</strong><br> 当社のお客様には、安全性とガバナンスを重視するエンタープライズ企業に加え、AI活用による成長を目指す中堅・中小企業まで、幅広い層が含まれます。Amazon Bedrock AgentCore によるアイデンティティ管理、セッション隔離、運用の透明性の確保は、そうしたお客様にとって“安心して業務を任せられる AI エージェント”の基盤となります。応答の質、対話の一貫性、サービスの稼働安定性が整うと、利用者にとって使いやすく、心地よい体験となります。そのような体験が信頼を育み、選ばれ続けるサービスにつながると考えています。Amazon Bedrock AgentCore があるからこそ、TIS はお客様から信頼される AI エージェントソリューションの提供者として、これからも期待に応え続けられると確信しています。</p> \n<p><strong>株式会社ディー・エヌ・エー ML Ops Engineer　外山 寛氏</strong><br> 弊社ディー・エヌ・エーでは AI オールインを掲げ全社で AI 活用を推進していきます。その際に大規模言語モデル（LLM）を業務で安全に活用するためにデータセキュリティに配慮したシステム設計が重要になってきます。 Amazon Bedrock AgentCore ではそのようなシステム設計を支援するための機能が提供されていると感じます。 今後のさらなるきめ細やかなデータセキュリティ機能の発展に期待しています。</p> \n<p><strong>株式会社野村総合研究所　AI 担当 経営役　生産革新センター　センター長　稲葉 貴彦氏</strong><br> Amazon Bedrock AgentCore は、企業のデジタル変革を根本的に変える可能性を秘めています。多様なオープンソースフレームワークとの柔軟な連携や、独自の機能を提供する 7 つのサービスの選択肢、完全なセッション分離機能と最大 8 時間の長時間ワークロード対応により、より高度な業務での安定運用が期待できます。プレビュー版からの検証を経て、現在、社内外の複数プロジェクトで利活用を進めており、今後も検証を重ねながら、当社のお客様の競争優位性確保に貢献してまいります。</p> \n<p>今すぐAgentCoreを始めましょう – aws.amazon.com/bedrock/agentcore/にアクセスして、エージェントの未来を構築し始めましょう！</p>"
  },
  {
    "title": "propsを1つ増やしただけなのにレスポンスサイズが5倍に増えてしまった",
    "date": "2025-10-15T00:53:07.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/chot/articles/e0e2203d12bff8",
    "content": "ある日、Vercelのダッシュボードを見ると以前はだいたい100KB前後だったページのレスポンスサイズが500KB前後に増えてしまっていました。\n原因はサーバコンポーネントからクライアントコンポーネントに渡すpropsが巨大だったことでした。\nSCからCCに渡したpropsはRSCペイロードという形で初回レスポンスのHTMLに含まれるためです。\n分かってしまえば単純なことなのですが、当時Next.jsのバージョンアップなどの改修も同時に行なっていたために原因調査に手こずりました。\nそんなわけで、レスポンスサイズが5倍になったときの調査に役に立つかもしれない（？）RSCペイロードの覗き方を..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.5",
    "date": "2025-10-14T23:36:19.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.5",
    "content": "### Core Changes\n\n- feat: using @next/rspack-core: #84221\n- Upgrade React from `ead92181-20251010` to `d7215b49-20251013`: #84850\n- Turbopack build: Switch to using workerthreads for process: #84818\n- [Cache Components] Dev - restart render on cache miss: #84088\n- Update font data: #84785\n- Fix build compile mode if pages dir does not exist in Next.js 16: #84783\n- improve next config schema validation errors: #84847\n- Upgrade React from `d7215b49-20251013` to `56e84692-20251014`: #84860\n- warnOnce for Middleware deprecation: #84862\n- Add codemod for Middleware API to Proxy API: #84824\n- Deprecate Middleware API and add Proxy API: #84764\n- remove `clientParamParsing` configuration & bundle it with `cacheComponents`: #84763\n- remove dynamicIO flag: #84872\n- Bump eslint-plugin-react to 7.37.0: #84876\n\n### Misc Changes\n\n- docs: soft 404's, Suspense and loading.tsx: #83867\n- [turbopack] Discuss Core Web vitals in our bundle size gap docs: #84837\n- [turbopack] document missing webpack loader features: #84849\n- [turbopack] fix typo in docs: #84868\n- [turbopack] Remove the implementation of `TaskInput` from `AutoSet`: #84867\n\n### Credits \n\nHuge thanks to @SyMind, @icyJoseph, @timneutkens, @lubieowoce, @vercel-release-bot, @greguintow, @huozhi, @devjiwonchoi, @lukesandberg, and @ztanner for helping!\n"
  },
  {
    "title": "実サービスへの搭載に向けたLLM AgentとMeta Agentの研究開発",
    "date": "2025-10-14T23:33:34.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/elyza/articles/4c78076139a733",
    "content": "\n はじめに\nこんにちは、ELYZA Labチームの佐藤 (@shoetsu_sato)です。最近のLabチームの取り組みの1つとして行ってきたLLMエージェント開発の概要とELYZAにおける研究開発の内容について紹介します。\n大規模言語モデル（LLM）は単なる対話システムを超えて「エージェント」としての活用が注目されています。エージェントとは、自然言語で与えられたタスクを理解し、外部ツールやデータベースを利用しながら、LLMコールを連続的に行い自律的に問題解決をする仕組みです。最近ではOpenAIやGoogle、Hugging Faceなどが次々にエージェント開発用フレームワークを公開..."
  },
  {
    "title": "ごめん、カーソル移動を効率的にするヘルシェイク矢野.vimのこと考えてた",
    "date": "2025-10-14T22:11:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/takets/articles/vim-plugin-hellshake-yano",
    "content": "この記事は、Vim駅伝2025年10月15日の記事です。\n前回の記事は、482FさんのLua Neovim で斜体を無効化する です。\nVimでのカーソル移動は、hjklやw/b/eといったモーションキーを使うのが基本です。\nが。画面に表示されているN行目のM文字目に移動したいとき、何度もキーを繰り返し押す必要があります。当たり前の話です。しかし面倒であることには違いありません。\n本来、位置Aに移動したいだけであって、キー入力は仕方なく行う行為です。なので対策したかったので対策しました。\n\n 対策：hit-a-hint系プラグイン\n移動にキーをたくさん入力せねばならない問題に対して、いく..."
  },
  {
    "title": "作って意地でも理解する フォントがレンダリングされるまで",
    "date": "2025-10-14T20:10:48.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yayo1/articles/4fb4dd2a6c4654",
    "content": "いきなりですが、2つ質問です。今まさにあなたが読んでいる文字がどうやってレンダリングされているか説明できますか？私はできませんでした。それではあるモノの仕組みを理解するために最も効率の良い方法は何でしょうか？そう、自作することです！それではフォントのパーサーとレンダラーをゼロから作っていきましょう！\n\n 目的\n小さなTrueTypeレンダラーを自作し、フォントがレンダリングされるまで流れを理解することが目的です。具体的には、Unicodeのフォントを読み込んで、任意の文字列をレンダリングしpngファイルとして書き出すまでを目標とします。実装はほぼプレーンなC++で、ベクトル演算用にglm..."
  },
  {
    "title": "vitejs/vite – v6.3.7",
    "date": "2025-10-14T13:43:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.3.7",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.3.7/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "AI SDK 実践入門 - 入門編",
    "date": "2025-10-14T13:38:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/hayato94087/books/8ac4877fc2fc5d",
    "content": "ゼロから AI SDK を学べます。\n\n【読者】\n・AI SDK の初学者\n・React使いで AI 機能を実装したい方\n・LLM を活用したアプリケーション開発に興味がある方\n\n【特徴は】\n・AI SDK について体系的に学習できること\n・TypeScript を活用した AI アプリケーション開発\n・最新の AI SDK の利用\n・Next.js 15 の利用\n・複数の AI プロバイダーを統一的に扱う方法\n\n【本書籍がカバーする技術】\n・AI SDK Core\n・AI SDK UI\n・OpenAI API\n・Gemini API\n・OpenWeather API\n\n【その他】\n「いいね」してくれたらモチベーションあがります🚀 "
  },
  {
    "title": "vitejs/vite – v7.1.10",
    "date": "2025-10-14T13:16:35.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.10",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.10/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "大阪万博内部 API 解説",
    "date": "2025-10-14T09:38:31.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/nakasyou/articles/osakaexpo-api",
    "content": "大阪万博が昨日閉幕したので、大阪万博の予約サイトの内部で使用されている API について自分が調べたことを公開しようと思います。\n数日前にタイムスリップした気持ちでお読みください。\nまた、脆弱だと思ったポイントもあるので、閉幕したのでそれも解説しちゃいます。\n\n 想定読者\n\n万博のアプリの裏側をちょっと覗いてみたい人\n大阪万博の脆弱っぽい部分をちょっと知りたい人\n閉幕してしまったけれど自分がどこに行ったかを思い出したい人\n次日本で万博が開催されたときにアプリを開発する人、および発注する人\n\n\n tl;dr\n成果物: https://github.com/pnsk-lab/myakumya..."
  },
  {
    "title": "Nani翻訳の技術的な話",
    "date": "2025-10-14T05:31:58.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/catnose99/articles/nani-translate",
    "content": "先日 Nani というAI翻訳アプリをリリースしました。macOS / Windowsアプリを使うとショートカットで解説つきの翻訳を簡単に呼び出すことができます。\nhttps://x.com/catnose99/status/1973218927158424056\nこの記事ではNaniの技術的な話をまとめておきます。「レスポンスが速い」という声も多くいただいているので、そのあたりの工夫についても触れたいと思います。\n\n ざっくりとした構成\n主な使用技術やサービスは以下のようになっています。\n\n\nTurso: SQLiteでユーザーの設定などを保存\n\nUpstash (Redis): キャ..."
  },
  {
    "title": "RAGでドキュメントの更新に強くする手法",
    "date": "2025-10-14T01:00:33.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/knowledgesense/articles/8b96daf7ca2474",
    "content": "\n 導入\nこんにちは、株式会社ナレッジセンスの須藤英寿です。\n今回は、ドキュメントの更新に強いRAGの手法「VersionRAG」を紹介します。\nhttps://arxiv.org/pdf/2510.08109\n\n\n サマリー\nRAGは便利な手法ですが、文書のバージョンの変化が苦手です。例えば、仕様書のように更新されていく文書の新旧の認識が苦手です。Google検索で出てきた情報が古い情報で、今では利用できない。というのは誰しもが経験してきたのではないでしょうか。RAGでも、同様の問題が発生します。\n今回紹介する「VersionRAG」は、内容が時間経過でどんどん更新されていくドキュメン..."
  },
  {
    "title": "Vibe Codingで25万ダウンロード超のOSSを開発できた。できたが… ── AIの役割 vs 人間の役割ではなく「協働」で考える",
    "date": "2025-10-13T22:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/team_zenn/articles/claudecode-ai-coding-vs-human-engineer",
    "content": "\n はじめに\n@dyoshikawaです。\n私の2025年6月ごろからの取り組みとして、Claude CodeによるVibe CodingでRulesyncというOSSツールを公開しました。\nそこでかなり自由にClaude Codeでいろんな手法を試すことができましたので、AIコーディング全般のTipsをお伝えできればと思います。\n一方で（人間の介入が少なすぎる）Vibe Codingの弊害としてコードベースやドキュメントが崩壊し、途中で開発がストップした場面もありました。ここのプロセスの反省と、どのように開発可能に復帰させたかという点も紹介します。\n最後に人間の役割、AIの役割、ソフト..."
  },
  {
    "title": "Next.js App Routerで破綻しない設計──本番で使えるアーキテクチャ実践ガイド",
    "date": "2025-10-13T15:32:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yukionishi/articles/cd79e39ea6c172",
    "content": "Next.jsのApp Routerは、“設計力が試されるフレームワーク”です。\nServer Components、Server Actions、そして“use client”による明確な境界。\nそれらは間違いなく強力な仕組みであり、\n使いこなせば、アプリケーションの構造を根本から変えるほどのポテンシャルを持っています。\nただ、どう設計すれば破綻しないのかについては、\n誰も明確な指針を示してくれません。\n実際、僕自身もいくつものチーム開発でApp Routerを使いながら、\n「境界があいまいになる」「Server Actionsが散らかる」\nといった“App Router地獄”を何度も..."
  },
  {
    "title": "yomitokuで作る日本語OCR Webアプリ【Flask + TypeScript】",
    "date": "2025-10-13T14:45:46.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/lecto/articles/b345c7f3920ae9",
    "content": "\n はじめに\n昨今、AI が急速に普及している中で、改めて「OCR（光学文字認識）」という技術に注目してみました。\nOCR の API サービスは多数存在していますが、どれも従量課金制で、利用量が増えるとコストが膨らんでいきます。Google Cloud Vision API や Amazon Textract などは高精度ですが、個人開発や小規模なプロジェクトでは原価が気になるところです。\n「日本語 OCR を自分で構築できれば、コストを気にせず色々なことに使えるのではないか？」\nOSS の OCR ライブラリとしては、Tesseract や EasyOCR などが有名ですが、日本語の..."
  },
  {
    "title": "Claude Codeに自分の記憶を持ってもらうMCPサーバーを作った話",
    "date": "2025-10-13T14:28:18.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/pppp303/articles/claude-ops-mcp-memory",
    "content": "\n 作ったもの：claude-ops-mcp\nhttps://github.com/pppp606/claude-ops-mcp/\nClaude Codeの操作履歴をMCPサーバーとして提供するツールです。ClaudeCodeが自分で書いた自分のログを、自身で読み返すためのMCPです。\n\n なぜ作ったか\nClaude Codeがv2になり /rewind コマンドで会話を巻き戻せるのは便利なのですが、根本的にClaude Codeは自身が行った作業の内容を理解（記憶）していないという問題があります。\n「え、ちょっと何したの？」という素朴な質問に、自身のログを遡って確認するという機能はなく..."
  },
  {
    "title": "知ってるかい？Codexならスマホでタスク完結できる世界線を。",
    "date": "2025-10-13T12:06:21.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/fastdoctor/articles/80f22eb54883b0",
    "content": "※ ファンタジーではありません。\nもちろん丸投げでは完結できませんし、指示を無視した事もしてきます。\nそこはAI駆動開発に片足突っ込んだ人なら分かる通り、一定許容する必要がありますよね。\nしかし、以前この記事を書いた後で意見がまたガラッと変わるのですが、突如Codexに推し変することにしました。\nhttps://zenn.dev/fastdoctor/articles/f2f6b90f95c039\nもし以下に課題を感じてるという人がいたら、私と同じくシュタインズゲートの選択をしてはいかがでしょうか・・・😈\n\nClaude Code使ってるが、結局パソコンの前から離れて仕事できない。\nスマ..."
  },
  {
    "title": "なぜ気軽にテーブルにカラムを足してはいけないのか",
    "date": "2025-10-13T10:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mj2mkt/articles/2025-10-12-dont-add-columns-at-random",
    "content": "\n はじめに\nデータベース（RDB）の設計で深く考えずにテーブルにカラムを追加してしまうことはありませんか？テーブルの追加よりもアプリケーション側での変更が少ないので、心理的ハードルが低いこともあるでしょう。しかし、そうしてカラム追加していくうちに取り返しのつかないことになるかもしれません。\nこの記事では大きく以下の3つに分けて、なぜ気軽にテーブルにカラムを足してはいけないのかを説明します。\n\nそもそもデータベース設計がちゃんとできていないことの兆候である\n変更のコストが大きい\nインデックスの設計が難しくなる\n\n\n そもそもデータベース設計がちゃんとできていないことの兆候である\n気軽にカ..."
  },
  {
    "title": "【React】「とりあえず切り出す」をやめる - カスタムフック設計で大事なこと",
    "date": "2025-10-13T04:00:00.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/uzu_tech/articles/12bb1dde240c5b",
    "content": "こんにちは!\n株式会社Sally エンジニアの haruten です♪\n私たち株式会社Sallyでは、マーダーミステリーをスマホやPCで遊べるアプリ「ウズ」や、マーダーミステリーを制作してウズ上で公開・プレイできるエディターツール「ウズスタジオ」などを開発・運営しています。\nhttps://sally-inc.jp/\n今回はReactのカスタムフックの設計について学び直す機会があったので、その備忘録です！\n\n はじめに\nカスタムフックは、Reactにおけるロジックの再利用を可能にする強力な機能です。\nしかし最近、とりあえずスパゲッティコードを切り出して分割するだけに利用していることに気づ..."
  },
  {
    "title": "nodejs/node – 2025-10-08, Version 24.10.0 (Current), @RafaelGSS",
    "date": "2025-10-11T16:18:16.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v24.10.0",
    "content": "### Notable Changes\r\n\r\n* \\[[`31bb476895`](https://github.com/nodejs/node/commit/31bb476895)] - **(SEMVER-MINOR)** **console**: allow per-stream `inspectOptions` option (Anna Henningsen) [#60082](https://github.com/nodejs/node/pull/60082)\r\n* \\[[`3b92be2fb8`](https://github.com/nodejs/node/commit/3b92be2fb8)] - **(SEMVER-MINOR)** **lib**: remove util.getCallSite (Rafael Gonzaga) [#59980](https://github.com/nodejs/node/pull/59980)\r\n* \\[[`18c79d9e1c`](https://github.com/nodejs/node/commit/18c79d9e1c)] - **(SEMVER-MINOR)** **sqlite**: create authorization api (Guilherme Araújo) [#59928](https://github.com/nodejs/node/pull/59928)\r\n\r\n### Commits\r\n\r\n* \\[[`e8cff3d51e`](https://github.com/nodejs/node/commit/e8cff3d51e)] - **benchmark**: remove unused variable from util/priority-queue (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`03294252ab`](https://github.com/nodejs/node/commit/03294252ab)] - **benchmark**: update count to n in permission startup (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`3c8a609d9b`](https://github.com/nodejs/node/commit/3c8a609d9b)] - **benchmark**: update num to n in dgram offset-length (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`7b2032b13e`](https://github.com/nodejs/node/commit/7b2032b13e)] - **benchmark**: adjust dgram offset-length len values (Bruno Rodrigues) [#59708](https://github.com/nodejs/node/pull/59708)\r\n* \\[[`552d887aee`](https://github.com/nodejs/node/commit/552d887aee)] - **benchmark**: update num to n in dgram offset-length (Bruno Rodrigues) [#59708](https://github.com/nodejs/node/pull/59708)\r\n* \\[[`31bb476895`](https://github.com/nodejs/node/commit/31bb476895)] - **(SEMVER-MINOR)** **console**: allow per-stream `inspectOptions` option (Anna Henningsen) [#60082](https://github.com/nodejs/node/pull/60082)\r\n* \\[[`0bf022d4c0`](https://github.com/nodejs/node/commit/0bf022d4c0)] - **console,util**: improve array inspection performance (Ruben Bridgewater) [#60037](https://github.com/nodejs/node/pull/60037)\r\n* \\[[`04d568e591`](https://github.com/nodejs/node/commit/04d568e591)] - **deps**: V8: cherry-pick f93055fbd5aa (Olivier Flückiger) [#60105](https://github.com/nodejs/node/pull/60105)\r\n* \\[[`621058b3bf`](https://github.com/nodejs/node/commit/621058b3bf)] - **deps**: update archs files for openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\r\n* \\[[`81b3009fe6`](https://github.com/nodejs/node/commit/81b3009fe6)] - **deps**: upgrade openssl sources to openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\r\n* \\[[`dc44c9f349`](https://github.com/nodejs/node/commit/dc44c9f349)] - **deps**: upgrade npm to 11.6.1 (npm team) [#60012](https://github.com/nodejs/node/pull/60012)\r\n* \\[[`ec0f137198`](https://github.com/nodejs/node/commit/ec0f137198)] - **deps**: update ada to 3.3.0 (Node.js GitHub Bot) [#60045](https://github.com/nodejs/node/pull/60045)\r\n* \\[[`f490f91874`](https://github.com/nodejs/node/commit/f490f91874)] - **deps**: update amaro to 1.1.4 (pmarchini) [#60044](https://github.com/nodejs/node/pull/60044)\r\n* \\[[`de7a7cd0d7`](https://github.com/nodejs/node/commit/de7a7cd0d7)] - **deps**: update ada to 3.2.9 (Node.js GitHub Bot) [#59987](https://github.com/nodejs/node/pull/59987)\r\n* \\[[`a533e5b5db`](https://github.com/nodejs/node/commit/a533e5b5db)] - **doc**: add automated migration info to deprecations (Augustin Mauroy) [#60022](https://github.com/nodejs/node/pull/60022)\r\n* \\[[`7fb8fe4875`](https://github.com/nodejs/node/commit/7fb8fe4875)] - **doc**: fix typo on child\\_process.md (Angelo Gazzola) [#60114](https://github.com/nodejs/node/pull/60114)\r\n* \\[[`24c1ef9846`](https://github.com/nodejs/node/commit/24c1ef9846)] - **doc**: remove optional title prefixes (Aviv Keller) [#60087](https://github.com/nodejs/node/pull/60087)\r\n* \\[[`08b9eb8e19`](https://github.com/nodejs/node/commit/08b9eb8e19)] - **doc**: mark `.env` files support as stable (Santeri Hiltunen) [#59925](https://github.com/nodejs/node/pull/59925)\r\n* \\[[`66d90b8063`](https://github.com/nodejs/node/commit/66d90b8063)] - **doc**: mention reverse proxy and include simple example (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\r\n* \\[[`14aa1119cb`](https://github.com/nodejs/node/commit/14aa1119cb)] - **doc**: provide alternative to `url.parse()` using WHATWG URL (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\r\n* \\[[`f9412324f6`](https://github.com/nodejs/node/commit/f9412324f6)] - **doc**: fix typo of built-in module specifier in worker\\_threads (Deokjin Kim) [#59992](https://github.com/nodejs/node/pull/59992)\r\n* \\[[`64e738a342`](https://github.com/nodejs/node/commit/64e738a342)] - **doc,crypto**: reorder ML-KEM in the asymmetric key types table (Filip Skokan) [#60067](https://github.com/nodejs/node/pull/60067)\r\n* \\[[`1b25008b41`](https://github.com/nodejs/node/commit/1b25008b41)] - **http**: improve writeEarlyHints by avoiding for-of loop (Haram Jeong) [#59958](https://github.com/nodejs/node/pull/59958)\r\n* \\[[`35f9b6b28f`](https://github.com/nodejs/node/commit/35f9b6b28f)] - **inspector**: improve batch diagnostic channel subscriptions (Chengzhong Wu) [#60009](https://github.com/nodejs/node/pull/60009)\r\n* \\[[`3b92be2fb8`](https://github.com/nodejs/node/commit/3b92be2fb8)] - **(SEMVER-MINOR)** **lib**: remove util.getCallSite (Rafael Gonzaga) [#59980](https://github.com/nodejs/node/pull/59980)\r\n* \\[[`c495e1fe57`](https://github.com/nodejs/node/commit/c495e1fe57)] - **lib**: optimize priority queue (Gürgün Dayıoğlu) [#60039](https://github.com/nodejs/node/pull/60039)\r\n* \\[[`6be31fb9f3`](https://github.com/nodejs/node/commit/6be31fb9f3)] - **lib**: implement passive listener behavior per spec (BCD1me) [#59995](https://github.com/nodejs/node/pull/59995)\r\n* \\[[`c5e4aa763b`](https://github.com/nodejs/node/commit/c5e4aa763b)] - **meta**: bump actions/setup-python from 5.6.0 to 6.0.0 (dependabot\\[bot]) [#60090](https://github.com/nodejs/node/pull/60090)\r\n* \\[[`50fa1f4a76`](https://github.com/nodejs/node/commit/50fa1f4a76)] - **meta**: bump ossf/scorecard-action from 2.4.2 to 2.4.3 (dependabot\\[bot]) [#60096](https://github.com/nodejs/node/pull/60096)\r\n* \\[[`def4ce976c`](https://github.com/nodejs/node/commit/def4ce976c)] - **meta**: bump actions/cache from 4.2.4 to 4.3.0 (dependabot\\[bot]) [#60095](https://github.com/nodejs/node/pull/60095)\r\n* \\[[`24b5abc0e9`](https://github.com/nodejs/node/commit/24b5abc0e9)] - **meta**: bump step-security/harden-runner from 2.12.2 to 2.13.1 (dependabot\\[bot]) [#60094](https://github.com/nodejs/node/pull/60094)\r\n* \\[[`8ccf2b0b34`](https://github.com/nodejs/node/commit/8ccf2b0b34)] - **meta**: bump actions/setup-node from 4.4.0 to 5.0.0 (dependabot\\[bot]) [#60093](https://github.com/nodejs/node/pull/60093)\r\n* \\[[`78580147ef`](https://github.com/nodejs/node/commit/78580147ef)] - **meta**: bump actions/stale from 9.1.0 to 10.0.0 (dependabot\\[bot]) [#60092](https://github.com/nodejs/node/pull/60092)\r\n* \\[[`705686b5c4`](https://github.com/nodejs/node/commit/705686b5c4)] - **meta**: bump codecov/codecov-action from 5.5.0 to 5.5.1 (dependabot\\[bot]) [#60091](https://github.com/nodejs/node/pull/60091)\r\n* \\[[`423a6bc744`](https://github.com/nodejs/node/commit/423a6bc744)] - **meta**: bump github/codeql-action from 3.30.0 to 3.30.5 (dependabot\\[bot]) [#60089](https://github.com/nodejs/node/pull/60089)\r\n* \\[[`9d9bd0fb4f`](https://github.com/nodejs/node/commit/9d9bd0fb4f)] - **meta**: move Michael to emeritus (Michael Dawson) [#60070](https://github.com/nodejs/node/pull/60070)\r\n* \\[[`dbeee55824`](https://github.com/nodejs/node/commit/dbeee55824)] - **module**: use sync cjs when importing cts (Marco Ippolito) [#60072](https://github.com/nodejs/node/pull/60072)\r\n* \\[[`a722f677ac`](https://github.com/nodejs/node/commit/a722f677ac)] - **perf\\_hooks**: fix histogram fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`b3295b8353`](https://github.com/nodejs/node/commit/b3295b8353)] - **process**: fix wrong asyncContext under unhandled-rejections=strict (Shima Ryuhei) [#60103](https://github.com/nodejs/node/pull/60103)\r\n* \\[[`cff4a7608a`](https://github.com/nodejs/node/commit/cff4a7608a)] - **process**: fix default `env` for `process.execve` (Richard Lau) [#60029](https://github.com/nodejs/node/pull/60029)\r\n* \\[[`cd034e927f`](https://github.com/nodejs/node/commit/cd034e927f)] - **process**: fix hrtime fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`18c79d9e1c`](https://github.com/nodejs/node/commit/18c79d9e1c)] - **(SEMVER-MINOR)** **sqlite**: create authorization api (Guilherme Araújo) [#59928](https://github.com/nodejs/node/pull/59928)\r\n* \\[[`d949222043`](https://github.com/nodejs/node/commit/d949222043)] - **sqlite**: replace `ToLocalChecked` and improve filter error handling (Edy Silva) [#60028](https://github.com/nodejs/node/pull/60028)\r\n* \\[[`6417dc879e`](https://github.com/nodejs/node/commit/6417dc879e)] - **src**: bring permissions macros in line with general C/C++ standards (Anna Henningsen) [#60053](https://github.com/nodejs/node/pull/60053)\r\n* \\[[`e273c2020c`](https://github.com/nodejs/node/commit/e273c2020c)] - **src**: update contextify to use DictionaryTemplate (James M Snell) [#60059](https://github.com/nodejs/node/pull/60059)\r\n* \\[[`5f9ff60664`](https://github.com/nodejs/node/commit/5f9ff60664)] - **src**: remove `AnalyzeTemporaryDtors` option from .clang-tidy (iknoom) [#60008](https://github.com/nodejs/node/pull/60008)\r\n* \\[[`9db54adccc`](https://github.com/nodejs/node/commit/9db54adccc)] - **src**: update cares\\_wrap to use DictionaryTemplates (James M Snell) [#60033](https://github.com/nodejs/node/pull/60033)\r\n* \\[[`fc0ceb7b82`](https://github.com/nodejs/node/commit/fc0ceb7b82)] - **src**: correct the error handling in StatementExecutionHelper (James M Snell) [#60040](https://github.com/nodejs/node/pull/60040)\r\n* \\[[`3e8fdc1d8d`](https://github.com/nodejs/node/commit/3e8fdc1d8d)] - **src**: remove unused variables from report (Moonki Choi) [#60047](https://github.com/nodejs/node/pull/60047)\r\n* \\[[`d744324d8e`](https://github.com/nodejs/node/commit/d744324d8e)] - **src**: avoid unnecessary string allocations in SPrintF impl (Anna Henningsen) [#60052](https://github.com/nodejs/node/pull/60052)\r\n* \\[[`de65a5c719`](https://github.com/nodejs/node/commit/de65a5c719)] - **src**: make ToLower/ToUpper input args more flexible (Anna Henningsen) [#60052](https://github.com/nodejs/node/pull/60052)\r\n* \\[[`354026df5a`](https://github.com/nodejs/node/commit/354026df5a)] - **src**: allow `std::string_view` arguments to `SPrintF()` and friends (Anna Henningsen) [#60058](https://github.com/nodejs/node/pull/60058)\r\n* \\[[`42f7d7cb20`](https://github.com/nodejs/node/commit/42f7d7cb20)] - **src**: remove unnecessary `std::string` error messages (Anna Henningsen) [#60057](https://github.com/nodejs/node/pull/60057)\r\n* \\[[`30c2c0fedd`](https://github.com/nodejs/node/commit/30c2c0fedd)] - **src**: remove unnecessary shadowed functions on Utf8Value & BufferValue (Anna Henningsen) [#60056](https://github.com/nodejs/node/pull/60056)\r\n* \\[[`eb99eec09b`](https://github.com/nodejs/node/commit/eb99eec09b)] - **src**: avoid unnecessary string -> `char*` -> string round trips (Anna Henningsen) [#60055](https://github.com/nodejs/node/pull/60055)\r\n* \\[[`c1f1dbdce2`](https://github.com/nodejs/node/commit/c1f1dbdce2)] - **src**: remove useless dereferencing in `THROW_...` (Anna Henningsen) [#60054](https://github.com/nodejs/node/pull/60054)\r\n* \\[[`ea0f5e575d`](https://github.com/nodejs/node/commit/ea0f5e575d)] - **src**: fill `options_args`, `options_env` after vectors are finalized (iknoom) [#59945](https://github.com/nodejs/node/pull/59945)\r\n* \\[[`415fff217a`](https://github.com/nodejs/node/commit/415fff217a)] - **src**: use RAII for uv\\_process\\_options\\_t (iknoom) [#59945](https://github.com/nodejs/node/pull/59945)\r\n* \\[[`982b03ecbd`](https://github.com/nodejs/node/commit/982b03ecbd)] - **test**: mark `test-runner-run-watch` flaky on macOS (Richard Lau) [#60115](https://github.com/nodejs/node/pull/60115)\r\n* \\[[`831a0d3d28`](https://github.com/nodejs/node/commit/831a0d3d28)] - **test**: ensure that the message event is fired (Luigi Pinca) [#59952](https://github.com/nodejs/node/pull/59952)\r\n* \\[[`5538cfc1e8`](https://github.com/nodejs/node/commit/5538cfc1e8)] - **test**: replace diagnostics\\_channel stackframe in output snapshots (Chengzhong Wu) [#60024](https://github.com/nodejs/node/pull/60024)\r\n* \\[[`77ec400d90`](https://github.com/nodejs/node/commit/77ec400d90)] - **test**: mark test-web-locks skip on IBM i (SRAVANI GUNDEPALLI) [#59996](https://github.com/nodejs/node/pull/59996)\r\n* \\[[`1aaadb9e31`](https://github.com/nodejs/node/commit/1aaadb9e31)] - **test**: ensure message event fires in worker message port test (Jarred Sumner) [#59885](https://github.com/nodejs/node/pull/59885)\r\n* \\[[`1d5cc5e57a`](https://github.com/nodejs/node/commit/1d5cc5e57a)] - **test**: mark sea tests flaky on macOS x64 (Richard Lau) [#60068](https://github.com/nodejs/node/pull/60068)\r\n* \\[[`c412b1855d`](https://github.com/nodejs/node/commit/c412b1855d)] - **test**: expand tls-check-server-identity coverage (Diango Gavidia) [#60002](https://github.com/nodejs/node/pull/60002)\r\n* \\[[`ad87975029`](https://github.com/nodejs/node/commit/ad87975029)] - **test**: fix typo of test-benchmark-readline.js (Deokjin Kim) [#59993](https://github.com/nodejs/node/pull/59993)\r\n* \\[[`bad4b9b878`](https://github.com/nodejs/node/commit/bad4b9b878)] - **test**: add new `startNewREPLSever` testing utility (Dario Piotrowicz) [#59964](https://github.com/nodejs/node/pull/59964)\r\n* \\[[`ef90b0f456`](https://github.com/nodejs/node/commit/ef90b0f456)] - **test**: verify tracing channel doesn't swallow unhandledRejection (Gerhard Stöbich) [#59974](https://github.com/nodejs/node/pull/59974)\r\n* \\[[`d7285459fe`](https://github.com/nodejs/node/commit/d7285459fe)] - **timers**: fix binding fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`6529ae9b0c`](https://github.com/nodejs/node/commit/6529ae9b0c)] - **tools**: add message on auto-fixing js lint issues in gh workflow (Dario Piotrowicz) [#59128](https://github.com/nodejs/node/pull/59128)\r\n* \\[[`1ca116a6ea`](https://github.com/nodejs/node/commit/1ca116a6ea)] - **tools**: verify signatures when updating nghttp\\* (Antoine du Hamel) [#60113](https://github.com/nodejs/node/pull/60113)\r\n* \\[[`20d10a2398`](https://github.com/nodejs/node/commit/20d10a2398)] - **tools**: use dependabot cooldown and move tools/doc (Rafael Gonzaga) [#59978](https://github.com/nodejs/node/pull/59978)\r\n* \\[[`275c07064c`](https://github.com/nodejs/node/commit/275c07064c)] - **typings**: update 'types' binding (René) [#59692](https://github.com/nodejs/node/pull/59692)\r\n* \\[[`8c21c4b286`](https://github.com/nodejs/node/commit/8c21c4b286)] - **wasi**: fix WasiFunction fast call signature (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`b865074641`](https://github.com/nodejs/node/commit/b865074641)] - **win,tools**: add description to signature (Martin Costello) [#59877](https://github.com/nodejs/node/pull/59877)\r\n"
  }
]