[
  {
    "title": "vercel/next.js – v15.6.0-canary.45",
    "date": "2025-10-05T23:43:23.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.45",
    "content": "### Core Changes\n\n- Fix potential race condition with request ID in dev mode: #84532\n\n### Credits \n\nHuge thanks to @unstubbable for helping!\n"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.44",
    "date": "2025-10-05T09:17:52.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.44",
    "content": "### Misc Changes\n\n- Revert \"Turbopack: skip invalidating a task on cell/output change when the dependency is outdated\": #84526\n\n### Credits \n\nHuge thanks to @sokra for helping!\n"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.43",
    "date": "2025-10-04T23:36:37.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.43",
    "content": "### Core Changes\n\n- [segment cache]: collectSegmentData should respect experimental.staleTime config: #84520\n\n### Misc Changes\n\n- Update Rspack development test manifest: #84480\n- Update Rspack production test manifest: #84481\n- [ci]: remove test from segment cache manifest: #84507\n- [ci]: de-flake client cache test: #84517\n\n### Credits \n\nHuge thanks to @vercel-release-bot and @ztanner for helping!\n"
  },
  {
    "title": "testing/synctestはGoランタイムの世界を改変していた",
    "date": "2025-10-04T18:27:05.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yuta_kakiki/articles/9ec93623cfdc81",
    "content": "\n はじめに\n先日、Go Conference 2025に行ってきました。\n様々なセッションを聞く中で、特に興味を持ったトピックがtesting/synctestパッケージです。\nこれを取り上げているセッションが2つもありました。\nhttps://speakerdeck.com/daikieng/synctest\nhttps://docs.google.com/presentation/d/1nCysE_J4WpRUwvDQSAzZbtFFCgCWAZL1tayBVfh79iQ/edit?slide=id.p1#slide=id.p1\n名前は聞いていたが、詳しくはよく知らなかったパッケー..."
  },
  {
    "title": "老いるAI人格育成エンジンを自作する",
    "date": "2025-10-04T14:26:00.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/saldra/articles/fa8ea14b5a1880",
    "content": "\n はじめに\n世の中にはAIキャラクターというジャンルがあります。キャラクターの行動・応答をLLMで生成したりすることで、自律的な存在を制作するジャンルです。ChatGPTの登場以降、技術は急速に発展し、今ではAIに配信をさせる「AITuber」と呼ばれるものまで誕生しています。\n近年までは「あらかじめ開発者やユーザーが設定したキャラクター像に則り動作する」AIキャラクターが標準でした。これは制作者意図を反映するには適切ですが、静的な設定資料だけではAIは予測の範囲内でしか振舞えません。僕はAIに、経験から学び、笑ったり泣いたり、自分なりに考えて創作したり、時には悩んだりする存在になって..."
  },
  {
    "title": "pointermoveで真面目にドラッグ",
    "date": "2025-10-04T09:54:17.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/nishinoshake/articles/ef76a7a740f4de",
    "content": "\n ここが真面目\n\n軽快な動作：requestAnimationFrame で描画\n高速移動で切れない：setPointerCapture\n\nスクロールしても切れない：scroll でも描画\nシンプルな後処理：lostpointercapture で releasePointerCapture を拾う設計\nなんか100行近くなってしまった\n\nタッチデバイス用に touch-action: none を付与しているので、コードを使われる際は CodePen でCSSもご確認ください。\n\nコードconst target = document.querySelector('.draggable..."
  },
  {
    "title": "本屋さんを開催する技術（Kaigi on Rails 2025）",
    "date": "2025-10-04T09:19:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ko1/articles/69d8db0227b40a",
    "content": "\n技術イベントにおいて趣味で本屋をやっているささだです。\nさて、レポート7回目です（過去の記録はこちらから → @. bookstore | @. bookstore site）。\n今回は Kaigi on Rails 2025 で出店させていただきました。初めて本屋をさせていただいたのが Kaigi on Rails 2024 なので、だいたい1年たったことになります（その時のレポート: 本屋さんを開催する技術）。開催の結構直前に大倉さんに「やっていい？」ってねじ込んだのを昨日のように覚えています。いや、嘘。だいぶうろ覚え。その節はありがとうございました＆今回はご依頼いただきましてあり..."
  },
  {
    "title": "CodeXとClaude Code、「今のところ」どっちがストレスなくタスクを頼める？",
    "date": "2025-10-04T09:05:34.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/manabu/articles/f2f6b90f95c039",
    "content": "\n 最近、AIのアウトプット。ストレス溜まってないかい？\n最近、Claude Codeが頭悪いって言われてたり、Codexが良くなってきたという話を聞きます。\nただ、比較してみたという記事を見ても、抽象的な内容が多いです。\nパフォーマンスとか品質とか、そういうのを見たいんじゃなくて、\n出てくるアウトプットが、どれだけ\n「俺様をイラつかせない程度には作ってきてくれるのか？」\nという方がみなさんも気になるのではないでしょうか？笑\n実際どういった指示を出して、そこまでのアプリが出てるかっていうことが\n他の記事だと分かりにくかったので、それなら面倒だけど自分が人柱になろう。\nということで、自分の..."
  },
  {
    "title": "J-RAGBench：日本企業でRAGするときの落とし穴とは",
    "date": "2025-10-04T08:53:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/neoai/articles/0998f81c39a583",
    "content": "\n はじめに\nはじめまして。株式会社neoAIの研究開発組織 (neoAI Research) の山本勇太です。\n昨今、RAG（Retrieval-Augmented Generation）の実用化が急速に進展しています。RAGは、入力クエリをもとに検索器（Retriever）が文書データから関連文書群を取得し、それに基づき大規模言語モデル（LLM）などの生成器（Generator）が回答を作成する手法です。\n\nLLMは多様な組織から頻繁に新しいモデルが公開されており、RAGの実用上優れているモデル選定のニーズは高いです。したがって、RAGにおけるGenerator選定のための、実用上の..."
  },
  {
    "title": "今からNeovimを始める人のLSP最短設定 (0.11, 2025-10-04現在)",
    "date": "2025-10-04T08:40:09.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ras96/articles/4d9d9493d29c06",
    "content": "巷にはNeovimのLSPの設定をまとめた記事が多くあり、この記事もその1つです。\nしかし、既存の記事は情報が古かったり、既にLSPを設定したユーザー向けの移行ガイドであることが多いです。\nこの記事は、2025年10月に今からNeovimを始める方向けのガイドです。\nいずれこの記事も昔のものとなりますが、現時点で最短でLSPの設定を行うための手順を解説します。\n既に古いバージョンのNeovimを使っている人向けの移行記事はこちら:\n\nneovim 0.11からはLSPをほぼネイティブAPIだけで扱える\nNeovim0.11用のLSP設定\n📜2025-04-27 nvim-lspconfi..."
  },
  {
    "title": "小手先に見えるテクニックでも、実はReact的に考えられる",
    "date": "2025-10-04T01:52:46.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/uhyo/articles/react-key-techniques",
    "content": "皆さんこんにちは。React、使っていますか？　Reactを″正しく”使うことは難しいと感じる方も多いのではないでしょうか。\n特に筆者はReactの正しい使い方に厳しく、こんな記事も出しています。熟練のReact使いでもなければ、この記事を読んで難しいと思うのも仕方がありません。\nhttps://zenn.dev/uhyo/articles/useeffect-taught-by-extremist\nuseEffectに関しては、React公式のドキュメントでも「そのエフェクトは不要かも」というページがあり、useEffectを使ってしまいがちだが、useEffectの使用が適していない..."
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.42",
    "date": "2025-10-03T23:47:21.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.42",
    "content": "### Core Changes\n\n- telemetry track mcp server usage: #84471\n- simplify the way we check for turbopack config to ensure we support an empty turbopack object: #84494\n- perf: Use synchronous IO when cleaning `distDir` in `next dev` and `next build`: #84472\n- Make turbopack the default bundler for custom servers: #84281\n- [segment cache]: fix interception route handling: #84497\n- Upgrade React from `a757cb76-20251002` to `85c427d8-20251003`: #84496\n\n### Misc Changes\n\n- fix: Missing link in Lazy Loading docs: #84473\n- docs: simplify streaming metadata: #84253\n- make withRspack idempotent: #84482\n- Turbopack: Use strongly consistent reads in `random_change` unit test: #84505\n\n### Credits \n\nHuge thanks to @huozhi, @joao4xz, @icyJoseph, @lukesandberg, @bgw, and @ztanner for helping!\n"
  },
  {
    "title": "Claude Code 2.0.0 のメジャーアップデートについて",
    "date": "2025-10-03T22:02:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/oikon/articles/claude-code-2",
    "content": "!\n2025年10月3日時点のClaude Code v2.0.0 - v2.0.5の内容です\n\nOikonです。普段はAIツール、特にClaude Codeで遊んでいます。\nClaude Codeが2.0.0にメジャーアップデートされました！2025年5月23日の1.0.0以来のメジャーアップデートです。この間にClaude Codeは1.0.126までアップデートを重ねています。\nhttps://x.com/oikon48/status/1972845004206096535\n今回はXでまとめたポストからClaude Code 2.0.0を使ってみて、個人的に数日使ってみて分かったア..."
  },
  {
    "title": "LLM用宣言的プログラミング言語 DSPy",
    "date": "2025-10-03T16:24:31.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/cybernetics/articles/f879e10b53c2db",
    "content": "\n はじめに\nタイトルは聞きなれないかもしれないが、「DSPyは、宣言型自己改善型Python（Declarative Self-improving Python）の略」とのことであるのでこのようにした。\nhttps://github.com/stanfordnlp/dspy\n実際、触ってみて、なるほど確かに、と思う部分があったので「宣言的」の部分に着目して説明したいと思う。いくつかのコード例を確認しながら、宣言的ってそういうことね、と理解してもらえればこの記事を読んだ意義があると思う。\nDSPyはプロンプトチューニングするということを念頭に置いてPyTorchライクな使い方になっている..."
  },
  {
    "title": "AWS DMS データの再同期によるデータ一貫性",
    "date": "2025-10-03T09:41:20.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-dms-data-resync/",
    "content": "<p><em>本投稿は、 Suchindranath Hegde と Mahesh Kansara と Sridhar Ramasubramanian による記事 「<a href=\"https://aws.amazon.com/jp/blogs/database/data-consistency-with-aws-dms-data-resync/\" target=\"_blank\" rel=\"noopener\">Data consistency with AWS DMS data resync</a>」を翻訳したものです。</em></p> \n<p>この投稿では、<a href=\"https://aws.amazon.com/dms/\" target=\"_blank\" rel=\"noopener\">AWS Database Migration Service</a> の データの再同期機能について詳しく説明します。これは DMS バージョン 3.6.1 で導入された機能で、データベース移行中のデータの不整合を検出して解決するので、手動による修正が必要ありません。<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html\" target=\"_blank\" rel=\"noopener\">データの再同期</a> を使用することで、ソースとターゲットデータベース間のデータ検証によって特定されたデータの不整合が識別され、対処されます。ここでは、データの再同期機能を有効にする手順と、例を通じてデータの不整合を特定する方法について説明します。</p> \n<p>データの再同期が利用可能になる前は、データの不整合に対してユーザーの介入が必要でした。例えば、フルロードと変更データキャプチャ (CDC) のタスクでテーブルの再ロードを実行したり、ターゲットのレコードを手動で更新したりする必要がありました。データの再同期は、AWS DMS が Oracle か SQL Server から PostgreSQL か <a href=\"https://aws.amazon.com/rds/aurora/features/\" target=\"_blank\" rel=\"noopener\">Amazon Aurora PostgreSQL </a>への移行をサポートしているすべての <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\" target=\"_blank\" rel=\"noopener\">リージョン</a> で利用可能です。</p> \n<h2>AWS DMS データの再同期の設定</h2> \n<p>データの再同期は、DMS データ検証で特定された不一致を読み取り、ソースから現在の値を取得し、それをターゲットに適用してターゲット上のレコードを同期することによって実行されます。フルロードのみのタスクの場合、再同期が有効になっていると、すべてのテーブルが検証された直後に実行されます。CDC タスクの場合、再同期はタスク設定を通じてスケジュールする必要があり、その時点で、タスクは CDC とデータ検証を一時停止することで書き込みの競合を最小限に抑えます。</p> \n<p><a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html#CHAP_DataResync.Bestpractices\" target=\"_blank\" rel=\"noopener\">ベストプラクティス</a>で推奨されているように、ソースデータベースのアクティビティが少ないタイミングに、再同期ウィンドウを短時間でスケジュールすることをお勧めします。これにより、CDC が一時停止することによるレイテンシーのスパイクを最小限に抑えることができます。</p> \n<p>データの再同期を設定するには、タスクの<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Task.CDC.html\" target=\"_blank\" rel=\"noopener\">作成</a>または<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.Modifying.html\" target=\"_blank\" rel=\"noopener\">変更</a>時に有効にする必要があります。AWS DMS コンソールで、<strong>データの再同期</strong>の下にある<strong>再同期のスケジュール</strong>を選択します。以下のスクリーンショットに示すとおりです。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65470\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-1-3-1.png\" alt=\"\" width=\"2238\" height=\"482\"></p> \n<p>再同期スケジュールは、Cron 式を使用してデータ再同期の実行をスケジュールします。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">* * * * * \n| | | | | \n| | | | | \n| | | | +---- Day of Week (0-6) \n| | | +------ Month (1-12)\n| | +-------- Day of Month (1-31)\n| +---------- Hour (0-23)\n+------------ Minute (0-59)</code></pre> \n</div> \n<p>例えば、以下の設定では、データの再同期を土曜日の深夜に実行するようにスケジュールしています：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">\"ResyncSettings\": \n{\n    \"EnableResync\": true,\n    \"ResyncSchedule\": \"0 0 * * 6\", // Run Saturday at midnight \n    \"MaxResyncTime\": 360,  // Run for maximum of 360 minutes, or 6 hours \n    \"ValidationTaskId\": \"\" //Optional, used only if validation is performed as a separate Validation only task \n}</code></pre> \n</div> \n<p>その他の例については、<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html#CHAP_DataResync.configurations\" target=\"_blank\" rel=\"noopener\">データ再同期の設定と例</a>を参照してください。</p> \n<p>AWS DMS はデータ再同期で PostgreSQL ターゲットエンドポイントに <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.html#CHAP_DataResync.Troubleshooting.v2table\" target=\"_blank\" rel=\"noopener\">awsdms_validation_failures_v2</a> テーブルを作成します。このテーブルの構造は、以下のスクリーンショットに示されています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65471\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-2-2-1.png\" alt=\"\" width=\"2886\" height=\"726\"></p> \n<p>このテーブルは、検証プロセス中にプライマリキーを使用してソースのデータを参照することで、ターゲットテーブルの不一致を追跡し対処するために参照されます。AWS DMS バージョン 3.6.1 以上にタスクをアップグレードまたは移行する際、アップグレード前に発生した検証の失敗は自動的に再同期されません。アップグレードによる検証の失敗に対処するには、テーブルの再ロードまたは再検証を開始する必要があります。アップグレード後に発生する新しい検証の失敗は、<code>awsdms_validation_failures_v2</code> テーブルを通じて追跡され、再同期されます。</p> \n<p>再同期実行中に、AWS DMS はタスクタイプに応じて以下の一連のステップを実行します。各ステップについて、タスクタイプに応じて以下のメッセージが CloudWatch ログに記録されます：</p> \n<p>フルロード と CDC タスク、または CDC タスクの場合：</p> \n<ol> \n <li>再同期実行のトリガー： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Data Resync Manager schedule window time matched to start resync</code></pre> \n  </div> </li> \n <li>検証の一時停止： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Trying to STOP validation before resync process. (resync_manager.c:331)</code></pre> \n  </div> </li> \n <li>CDC の一時停止： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Data Resync Manager sending command to sorter to PAUSE applying changes to target.</code></pre> \n  </div> </li> \n <li>テーブルの再同期： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[RESYNC_UNLOAD ]I: Sent ctrl command for Resync Unload of table with id: 1</code></pre> \n  </div> </li> \n <li>CDC の再開： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Data Resync Manager sending command to sorter to RESUME applying changes to target</code></pre> \n  </div> </li> \n <li>検証の再開： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Trying to RESUME validation after resync process</code></pre> \n  </div> </li> \n</ol> \n<p>フルロードのみのタスクの場合、検証プロセスが完了した後に再同期マネージャーがトリガーされるため、スケジュールを指定する必要はありません。</p> \n<ol> \n <li>再同期実行のトリガー： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC     ]I:  Data Resync Manager sending command to start up resync subtasks</code></pre> \n  </div> </li> \n <li>テーブルの再同期： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[TASK_MANAGER    ]I:  All tables are loaded. Validation is finished. Waiting for resync to finish...  (replicationtask.c:4953)\n [DATA_RESYNC     ]I:  Stopped Data Resync Manager, exiting thread \n</code></pre> \n  </div> </li> \n</ol> \n<h2>AWS DMS データの再同期のユースケース</h2> \n<p>AWS DMS のデータの再同期が有効なユースケースはいくつかあります。このセクションでは、2 つの例を見ていきます。</p> \n<h3>ターゲットでレコードの誤削除</h3> \n<p>最初に検討するユースケースは、ターゲット上のレコードが誤って削除された場合です。このユースケースを説明するために、REVIEWS という名前のテーブルを Oracle から PostgreSQL に移行します。フルロードが完了した後、ターゲット上の数レコードを誤って削除します。以下の例では、ターゲット上の特定のレコードを削除するために、ターゲットに対して Data Manipulation Language (DML) ステートメントを実行します：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; delete from dms_test.reviews where review_id=8193 ;\n DELETE 1</code></pre> \n</div> \n<p>このシナリオでは、テーブルの再検証を試みるとデータ不整合が発生します。これは、以下のコマンドを入力するか、AWS コンソールで確認することができます：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">aws dms  describe-table-statistics --replication-task-arn arn:aws:dms:us-east-1:xxxxxxxxxxxx:task:xxxxxxxxxxxx --filters Name=table-name,Values=\"REVIEWS\"\n\n{\n    \"TableStatistics\": [ \n        {\n            \"SchemaName\": \"DMS_TEST\",\n            \"TableName\": \"REVIEWS\",\n            \"Inserts\": 0,\n            \"Deletes\": 0,\n            \"Updates\": 0,\n            \"Ddls\": 0,\n            \"AppliedInserts\": 0,\n            \"AppliedDeletes\": 0,\n            \"AppliedUpdates\": 0,\n            \"AppliedDdls\": 0,\n            \"FullLoadRows\": 3500,\n            \"FullLoadCondtnlChkFailedRows\": 0,\n            \"FullLoadErrorRows\": 0,\n            \"FullLoadStartTime\": \"2025-06-03T14:24:23.062000-05:00\",\n            \"FullLoadEndTime\": \"2025-06-03T14:24:25.408000-05:00\",\n            \"FullLoadReloaded\": false,\n            \"LastUpdateTime\": \"2025-06-03T14:35:12.009000-05:00\",\n            \"TableState\": \"Table completed\",\n            \"ValidationPendingRecords\": 0,\n<strong> \"ValidationFailedRecords\": 1,</strong>\n            \"ValidationSuspendedRecords\": 0,\n<strong> \"ValidationState\": \"Mismatched records\"</strong>\n        }\n    ] \n}</code></pre> \n</div> \n<p>データの再同期が有効になっている場合、ソースをチェックし、ターゲットに再適用することでこれらの不整合が処理されます。次の例では、<code>public.awsdms_validation_failures_v2</code> テーブルに反映されたレコードを確認できます。ここでは、<code>RESYNC_ACTION</code> が <code>UPSERT</code> であることから、ターゲットに再適用されたことがわかります。<code>RESYNC_TIME</code> は、アクションが実行されたタイムスタンプを示しています。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; select * from public.awsdms_validation_failures_v2 ;\n-[ RECORD 1 ]-+---------------------------\n RESYNC_ID     | 1029 \n TASK_NAME     | BESR3KWW2FCLLH4AJBFSEYSNW4 \n TABLE_OWNER   | dms_test \n TABLE_NAME    | reviews \n FAILURE_TIME  | 2025-06-03 19:33:26.410998 \n KEY_TYPE      | Row \n KEY           | {                         +\n              |         \"key\":  [\"8193\"]  +\n              | }\n FAILURE_TYPE  | MISSING_TARGET \n DETAILS       |\n RESYNC_RESULT | SUCCESS \n RESYNC_TIME   | 2025-06-03 19:35:06.322 \n RESYNC_ACTION | UPSERT</code></pre> \n</div> \n<p>CDC 中にターゲットで誤って数件のレコードを削除してしまうシナリオを想像してみてください。例えば、以下の SQL コマンドでは、ターゲット上の 20 件のレコードをランダムに削除します：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; delete from dms_test.reviews where ctid in (select ctid from dms_test.reviews order by RANDOM() LIMIT 20);\n DELETE 20</code></pre> \n</div> \n<p>データの再同期がこれらのレコードを処理し、ターゲットに正常に適用されたことを確認できます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; select \"TABLE_OWNER\", \"TABLE_NAME\",\"RESYNC_ACTION\", \"FAILURE_TYPE\", \"RESYNC_RESULT\",count(*) from public.awsdms_validation_failures_v2 group by \"TABLE_OWNER\", \"TABLE_NAME\",\"RESYNC_ACTION\", \"FAILURE_TYPE\", \"RESYNC_RESULT\";\n-[ RECORD 1 ]-+---------------\n TABLE_OWNER | dms_test \n TABLE_NAME | reviews \n<strong>RESYNC_ACTION | UPSERT FAILURE_TYPE | MISSING_TARGET RESYNC_RESULT | SUCCESS count | 21</strong></code></pre> \n</div> \n<p>これまで説明したフルロードと CDC の両方のシナリオでは、データの再同期にテーブルの再検証が必要です。これにより、すべてのデータの不整合が適切に特定され、修正されます。この再検証が必要なのは、ターゲットの変更が AWS DMS によって行われたものではないためです。</p> \n<h3>テーブルエラー後の CDC タスクの再開</h3> \n<p>別のユースケースとして、移行中にテーブルがエラー状態になり、そのテーブルの変更がターゲットにレプリケートされない場合があります。この場合、タスクの実行中にテーブルを<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.ReloadTables.html\" target=\"_blank\" rel=\"noopener\">再ロード</a>することができます。ただし、CDC のみのタスクの場合、テーブルが失敗した時の LSN からタスクを再開する必要があります。AWS DMS タスク中に複数のテーブルがある場合、特定の時間枠から DMS タスクを開始すると、変更がターゲットに再度適用される場合があります。</p> \n<p>Oracle から PostgreSQL に ADMIN スキーマの 5 つのテーブルを移行するシナリオを考えてみましょう。次のスクリーンショットでは、5 つのテーブルのうち 3 つがエラーで終了しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65472\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-3-2.jpeg\" alt=\"\" width=\"1287\" height=\"561\"></p> \n<p>CloudWatch ログから、これらのテーブルが異なるタイムスタンプでエラーになったことがわかります。テーブルが異なるタイムスタンプで失敗したため、テーブルがエラーになった最も早いタイムスタンプを CDC 開始時間として使用し、これら 3 つのテーブルで CDC のみのタスクを作成する必要があります。この場合、最も早いタイムスタンプは <code>2025-06-05T03:40:13</code> です。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\"><strong>2025-06-05T03:40:13</strong> [TASK_MANAGER ]W: Table 'ADMIN'.'DMST1' was errored/suspended (subtask 0 thread 1). \n\n 2025-06-05T03:47:53 [TASK_MANAGER ]W: Table 'ADMIN'.'DMST2' was errored/suspended (subtask 0 thread 1). \n\n 2025-06-05T03:52:32 [TASK_MANAGER ]W: Table 'ADMIN'.'DMST5' was errored/suspended (subtask 0 thread 1). </code></pre> \n</div> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65473\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/09/02/image-4.jpeg\" alt=\"\" width=\"1122\" height=\"586\"></p> \n<p>データの再同期中に、検出された競合が解消されたことを確認できます。以下のスクリーンショットに示されています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65474\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-5-1-1.jpeg\" alt=\"\" width=\"1287\" height=\"289\"></p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; select * from public.awsdms_validation_failures_v2 ;\n-[ RECORD 1 ]-+---------------------------\n RESYNC_ID     | 9949 \n TASK_NAME     | 6LOQBMAKQFDELB5WQB5BPG5Q74 \n TABLE_OWNER   | admin \n TABLE_NAME    | dmst1 \n FAILURE_TIME  | 2025-06-05 05:26:58.027987 \n KEY_TYPE      | Row \n KEY           | {                         +\n              |         \"key\":  [\"101\"]   +\n              | }\n FAILURE_TYPE  | MISSING_TARGET \n DETAILS       |\n RESYNC_RESULT | SUCCESS \n RESYNC_TIME   | 2025-06-05 05:30:06.423 \n RESYNC_ACTION | UPSERT</code></pre> \n</div> \n<h2>Conclusion</h2> \n<p>この投稿では、データの再同期について紹介し、その設定方法と、検証中にデータ再同期を使用して不整合を確認および修正できる 2 つのユースケースについて説明しました。詳細については、<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html\" target=\"_blank\" rel=\"noopener\">AWS DMS データの再同期</a>を参照してください。</p> \n<h3>著者について</h3> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"aligncenter size-full wp-image-29797\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-6-1-1.jpeg\" alt=\"Suchindranath Hegde\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Suchindranath Hegde</h3> \n  <p><a href=\"https://www.linkedin.com/in/suchindranath-hegde/\" target=\"_blank\" rel=\"noopener\">Suchindranath</a> は Amazon Web Services のシニアデータ移行スペシャリストソリューションアーキテクトです。彼はお客様と協力して、AWS DMS を使用した AWS へのデータ移行に関するガイダンスと技術支援を提供しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"aligncenter size-full wp-image-29797\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-7-1-1.jpeg\" alt=\"Mahesh Kansara\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Mahesh Kansara</h3> \n  <p><a href=\"https://www.linkedin.com/in/mahesh-kansara/\" target=\"_blank\" rel=\"noopener\">Mahesh</a> は Amazon Web Services のデータベースエンジニアリングマネージャーです。彼は開発チームやエンジニアリングチームと緊密に連携して、移行およびレプリケーションサービスを改善しています。また、お客様と協力して、データベースや分析のさまざまなプロジェクトに関するガイダンスや技術支援を行い、AWS を使用する際のソリューションの価値向上を支援しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"aligncenter size-full wp-image-29797\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-8-4.jpeg\" alt=\"Sridhar Ramasubramanian\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Sridhar Ramasubramanian</h3> \n  <p><a href=\"https://www.linkedin.com/in/sridhar-r/\" target=\"_blank\" rel=\"noopener\">Sridhar</a> はAWS Database Migration Service チームのデータベースエンジニアです。彼はAWSのお客様のニーズにより合うように、DMS サービスの改善に取り組んでいます。</p> \n </div> \n</footer>"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.41",
    "date": "2025-10-03T09:33:30.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.41",
    "content": "### Misc Changes\n\n- Turbopack: Only benchmark file IO on `next dev`: #84474\n- Turbopack: improve incremental build performance when deployment id changes: #84460\n\n### Credits \n\nHuge thanks to @bgw and @sokra for helping!\n"
  },
  {
    "title": "AWS Summit Japan 2025 AI健康アプリ「HugWay」を支えるAWSアーキテクチャ：テオリア・テクノロジーズの認知症プラットフォーム戦略",
    "date": "2025-10-03T08:17:44.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-summit-japan-2025-theoria-technologies-hugway-aws-architecture/",
    "content": "<p>このブログは、テオリア・テクノロジーズ株式会社と、アマゾン ウェブ サービス ジャパン合同会社 ソリューション アーキテクト 椎名優司による共著です。</p> \n<p>2025 年 6 月 25 日、26 日に幕張メッセで開催された <a href=\"https://aws.amazon.com/jp/summits/japan/\">AWS Summit Japan 2025</a> では、EXPO として AWS Village と呼ばれる展示エリアが用意され、90 を超える AWS 最新テクノロジー展示、先進企業 50 社による AWS 活用事例、パートナーによる 130 以上のソリューション展示など、270 を超える展示を行いました。その中に展開された Industries Pavilion では、各業界向けの最新の AWS ソリューションの展示や、実際に AWS を活用している企業のブースも併設されました。 テオリア・テクノロジーズ株式会社は Industries Pavilion のヘルスケア・ライフサイエンス業界向けブースに出展されました。</p> \n<p>今回のブログでは、Industries Pavilion のテオリア・テクノロジーズ株式会社ブースで展示されたAI健康アプリ「<a href=\"https://www.hugway.theo-one.com/\">HugWay(はぐうぇい)</a>」について、プラットフォーム概要やAWS アーキテクチャをご紹介します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/aws_summit_japan_2025_theoria-booth.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166301\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/aws_summit_japan_2025_theoria-booth.png\" alt=\"\" width=\"700\" height=\"568\"></a></p> \n<h2>テオリア・テクノロジーズの認知症プラットフォーム事業とAI健康アプリ「HugWay」</h2> \n<p>テオリア・テクノロジーズは「認知症との向き合い方を、テクノロジーで変えていく。」をミッションに掲げ、エーザイグループの一員として認知症という社会課題の解決を目指しています。</p> \n<p>エーザイが創薬で貢献する一方、テオリアはデータサイエンス技術を中心に、「認知症にかかわる全ての人が自分らしくいるための『羅針盤』となる」世界を目指します。その核となるのが、認知症に関する様々なソリューションや人々をつなぐ「認知症プラットフォーム」の構築です。</p> \n<p>運動プログラムや食事指導、治療薬やデジタルを活用したものなど多岐にわたるソリューションを線で繋げ、一人ひとりへの「体験の最適化」を目指します。具体的には、健常・未病の方向けに認知機能の低下のリスクに「そなえる」、認知機能の低下が顕著になった方向けに医療機関受診・診断・治療への橋渡しを行う「つながる」、認知症やMCI（軽度認知障害）の診断後の治療・介護を「ささえる」の3つの領域でサービス開発を進め、ポータルサイト「<a href=\"https://theotol.soudan-e65.com/\">テヲトル</a>」がこれらを横断します。</p> \n<p>「そなえる」領域のサービスである脳に良い生活習慣をサポートするアプリ「<a href=\"https://www.hugway.theo-one.com/\">HugWay（はぐうぇい）</a>」は、2025年6月16日にリリースしたAIを搭載した健康管理アプリケーションです。「HugWay」は、ユーザーに寄り添うAIパートナーとの対話を中心に、歩数管理、睡眠管理、活動記録、脳に良い生活習慣コンテンツ、そして楽しく続けられる脳トレゲーム（ブレインワークアウト）を提供し、多くの人が抱える「漠然とした認知症への不安」や「義務感があって健康活動が続けられない」「老後の健康不安」といった悩みを解決します。</p> \n<h3>脳に良い生活習慣をサポートするアプリ「HugWay（はぐうぇい）」の特徴</h3> \n<h4>AIパートナーとの会話と記録</h4> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_01_hugmaru.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166230 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_01_hugmaru.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<p>AIパートナー「ハグまる」と日常の出来事や感じたことなど好きなテーマで話す事ができます。AIパートナーがユーザー自身の事や話した内容の一部を覚えて、寄り添った会話が特徴です。話せば話すほどにAIパートナーの「ハグまる」がユーザーの事を理解してくれて、共感し、時には健康に関するヒントや新しい活動を提案します。過去の会話内容も踏まえてパーソナライズされたコミュニケーションを提供し、孤独感の解消やモチベーション維持に繋げます。また、会話の記録はアプリで確認してふりかえる事ができます。</p> \n<h4>歩数や睡眠などの活動管理</h4> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_02_activity_logging.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166231 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_02_activity_logging.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<p>日々の歩数や活動量、睡眠データ、毎日の会話を自動で記録し、ダッシュボードで分かりやすく可視化します。歩数の目標設定機能もあり、AIパートナーとの会話の中で褒められたりと楽しみながら健康習慣の定着をサポートします。</p> \n<h4>脳活コンテンツ</h4> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_03_brain_workout.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166233 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_03_brain_workout-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<p>脳トレゲームとしてブレインワークアウトを搭載。計算問題や記憶ゲームなど、スキマ時間に手軽に楽しく取り組める全10種類のゲームです。脳の活性化を促し、認知機能の維持をサポートします。その他にも脳の健康情報サイトである「<a href=\"https://nou-lab.theo-one.com/\">脳ラボ</a>」と連携し、脳の健康を意識した食事や睡眠、運動などのコンテンツを提供します。</p> \n<h3>こんな方におすすめ</h3> \n<h4>脳の健康が気になる方</h4> \n<p>「何となく認知症は不安」、「とりあえず脳トレはやってるけど、認知症のそなえはよくわからない」といった方へ脳に良い生活習慣のサポートを「HugWay」が行います。</p> \n<h4>健康改善が必要な方</h4> \n<p>健康診断の結果や体調の変化を機に、生活習慣を見直したいと考えている方に、「HugWay」が寄り添います。</p> \n<h4>アクティブなシニア層</h4> \n<p>趣味や社会との繋がりを大切にし、これからも活動的な生活を送りたい方を「HugWay」が応援します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_04_conversation.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166250 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_04_conversation-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<h3>「HugWay」のシステム設計と運用基盤</h3> \n<p>「HugWay」 では、生成 AI によるユーザーの会話体験を中核に据え、継続利用を促す話題創出に向けた機能拡張性を担保しました。さらに、スケールと安全性を高めるために当社独自の ID 基盤を活用し、API ゲートウェイを開発して、モバイルからバックエンド、データ基盤までを疎結合のマイクロサービス群として設計しています。これにより、新しい会話体験や外部データ連携を小さく素早く追加可能にしました。また、トラフィックのスパイク時にも安定したレスポンスを維持し、ゼロトラスト前提の認証・認可でユーザーデータを保護します。さらに、DevOps 体制のもとで CI/CD とオブザーバビリティ基盤を活用し、継続的なフィードバックを取り込むことで、機能改善の速度とサービスの信頼性を同時に高めています。</p> \n<h3>「HugWay」のAWSアーキテクチャのご紹介</h3> \n<p>サービスとしてAPI機能を提供するバックエンド環境と、生成AIのオブザーバビリティ環境について紹介します。</p> \n<p>API を提供するバックエンドは AWS App Runner を中核に据え、オートスケーリングと負荷分散を適切に設計しています。構成は、当社 ID 基盤と連携する認証サーバー、生成 AI と連携するチャットサーバー、その他のアプリ機能を担うメインサーバーの3サーバー構成です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_01.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-166252\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_01-1024x582.png\" alt=\"\" width=\"1024\" height=\"582\"></a></p> \n<p><a href=\"https://aws.amazon.com/jp/apprunner/\">AWS App Runner</a>はウェブアプリケーションを自動的に構築するサービスであり、トラフィックに合わせてスケールし、Amazon Bedrockを含むほかAWSサービスとシームレスに連携させることができます。AWS App Runnerはフルマネージドサービスであり、インフラの構築や運用は不要です。開発者はコンテナレジストリに保存されているコンテナイメージ、もしくはレポジトリでホストされているコードをソースとして使用することでサービス(上記構成では各機能をもつサーバー)をデプロイできます。</p> \n<p><a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a>は生成AIアプリケーションやエージェントを構築するためのサービスであり、「HugWay」ではユーザーとAIパートナーの間でパーソナライズされたコミュニケーションを実現するために利用しています。ユーザーとの会話を実現するためにAIチャットサーバーが<a href=\"https://docs.aws.amazon.com/ja_jp/bedrock/latest/userguide/conversation-inference.html\">Converse API</a>を用いてAmazon Bedrockを利用しているほかに、会話内容からユーザーの特徴や傾向を分析したり、シームレスな会話体験を提供するため会話内容を要約して<a href=\"https://aws.amazon.com/jp/rds/aurora/\">Amazon Aurora</a>に保存し適宜参照し会話に活かすことで、ユーザーに寄り添った会話を実現しています。</p> \n<p>生成 AI のテレメトリーは過渡期にあり選定が難しかったため、「HugWay 」では OpenTelemetry を採用しその時最適なソリューションを選択する方法を採用しました。ベンダーに依存しない形でアプリケーションの観測性を高め、生成テキストの安全性検証や表現ルールの策定に活用しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_02.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-166255\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_02-1024x577.png\" alt=\"\" width=\"1024\" height=\"577\"></a></p> \n<h2>おわりに</h2> \n<p>本ブログでご紹介したテオリア・テクノロジーズ株式会社の展示や関連する AWS サービスに関して、ご興味・ご質問をお持ちのお客様は<a href=\"https://aws.amazon.com/jp/contact-us/sales-support/\">お問い合わせフォーム</a>もしくは担当営業までご連絡ください。</p> \n<h2>著者について</h2> \n<h3>テオリア・テクノロジーズ株式会社</h3> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/tadashi_ota-150x150.png\">\n  </div> \n  <p><strong>太田 忠 (Tadashi Ota)</strong> プロダクトマネージャー<br> 予防、ヘルスケア領域を担当しており、認知症のそなえを推進しています。プロダクトマネジメントの他に事業戦略や組織、採用など幅広く活動しています。</p> \n </div> \n</footer> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/keigo_ando-150x150.png\">\n  </div> \n  <p><strong>安藤 圭吾 (Keigo Ando)</strong> プロダクト開発部シニアソフトウェアエンジニア<br> バックエンド・インフラを中心に、何でもやる縁の下の力持ちを目指しています。</p> \n </div> \n</footer> \n<h3>アマゾン ウェブ サービス ジャパン合同会社</h3> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/yuji_shiina-150x150.jpg\">\n  </div> \n  <p><strong>椎名 優司 (Yuji Shiina) </strong> ソリューションアーキテクト<br> ヘルスケア・ライフサイエンス領域のお客様を中心に、クラウド利用の技術支援を通じてお客様のご要望を具現化するための活動をしています。</p> \n </div> \n</footer>"
  },
  {
    "title": "AIはどこまでテストができるのか？AIテストエージェントの現在地と課題",
    "date": "2025-10-03T07:15:43.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ubie_dev/articles/dc6a0d8f74fd76",
    "content": "UbieでQAエンジニアをしているMayです。\nUbieでは、「テクノロジーで人々を適切な医療に案内する」というミッションの実現に向け、症状検索エンジン「ユビー」などのプロダクトを開発しています。事業が急成長するなかで、開発の質とスピードの両立は欠かせません。AI活用が当たり前になっていく中、Ubieでも「AI主導開発」を掲げ取り組んでいます。今回は「AI主導開発」の一角をなす、「自律テスト」についてお話します。\n\n AI-native Engineeringの到来とUbieの戦略\n最近、AIを使ったソフトウェア開発が、いよいよ現実的になってきました。AnthropicとCursorのエ..."
  },
  {
    "title": "AWS Parallel Computing Service (PCS)を利用したスケーラブルなクライオ電子顕微鏡データ解析環境",
    "date": "2025-10-03T06:07:18.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/scalable-cryo-em-on-aws-parallel-computing-service-pcs/",
    "content": "<p><img loading=\"lazy\" class=\"alignright size-full wp-image-4661\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/boofla88_a_close_up_image_of_a_protein_taken_by_an_electron_mic_dadd2dd4-f163-4c2b-9d71-bdc09c6b335d.png\" alt=\"Scalable Cryo-EM on AWS Parallel Computing Service (PCS)\" width=\"380\" height=\"212\"></p> \n<p>クライオ電子顕微鏡（Cryo-EM）は、創薬研究者が創薬に不可欠な生体分子の三次元構造を決定することを可能にします。Cryo-EMの導入が進むにつれ、科学者やITシステム管理者は、これらの顕微鏡によって毎日生成される数テラバイトのデータを効率的に処理する方法を模索してきました。これらの処理パイプラインには、スケーラブルで多様なワークロードに対応できるコンピューティング環境と、高速かつコスト効率に優れたストレージが必要です。</p> \n<p>AWS Parallel Computing Service (PCS)は、クラウドでハイパフォーマンスコンピューティング(HPC)クラスタを展開・管理するためのマネージドサービスです。Cryo-EMにPCSを使用することで、構造生物学者にとって一貫したユーザー体験を維持しながら、HPCインフラの構築と管理に伴う差別化につながらない重労働を軽減し、研究に迅速に取り掛かることができます。</p> \n<p>この投稿では、PCS上でCryo-EMに使用できる推奨リファレンスアーキテクチャを紹介し、一般的なアプリケーションである <a href=\"https://guide.cryosparc.com/processing-data/get-started-with-cryosparc-introductory-tutorial\">CryoSPARC</a> を使用した具体例を示します。また、可視化ツールとして <a href=\"https://www.cgl.ucsf.edu/chimerax/\">ChimeraX</a> について紹介し、一般的にクラウドでCryo-EMを実行するためのベストプラクティスについても解説します。</p> \n<h2>アーキテクチャの概要</h2> \n<div id=\"attachment_4649\" class=\"wp-caption aligncenter\" style=\"width: 2140px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4649\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.46.48@2x.png\" alt=\"Figure 1 - Architecture overview of CryoSPARC on AWS. The Slurm controller is deployed in an AWS service account, and the compute and storage resources are deployed in the user AWS account. FSx for Lustre and Amazon Elastic File Store (EFS) are both mounted to the cluster.\" width=\"2130\" height=\"1158\" aria-describedby=\"caption-attachment-4649\"></p> \n <p id=\"caption-attachment-4649\" class=\"wp-caption-text\">図1 – AWS上のCryoSPARCのアーキテクチャ概要。SlurmコントローラはAWSサービスアカウントに配置され、コンピュートとストレージリソースはユーザーAWSアカウントに配置されます。クラスタにはFSx for LustreとAmazon Elastic File Store (EFS)がマウントされています。</p> \n</div> \n<h2>セットアップと前提条件</h2> \n<p>PCSドキュメントに記載されている<a href=\"https://docs.aws.amazon.com/pcs/latest/userguide/getting-started_prerequisites.html\">前提条件</a>に加え、CryoSPARCのライセンスが必要です。ライセンスなしでこのガイドに従ってPCSクラスタを作成することは可能ですが、最終的にはソフトウェアをインストールしてテストジョブを実行するためにライセンスが必要になります。ライセンスを取得するには、<a href=\"https://guide.cryosparc.com/licensing\">Structura Biotechnology </a>にお問い合わせください。</p> \n<h2>共有ストレージを使用したクラスタの作成</h2> \n<p><a href=\"https://github.com/aws-samples/aws-hpc-recipes/\">HPC Recipes Library</a> は AWS のエンジニアリングチームとアーキテクチャチームが作成したテンプレートを共有するGitHubの公開リポジトリです。これにより、面倒な構築手順なしにHPCインフラをクラウド上に展開できます。この例に適した共有ストレージを備えたPCSクラスタを作成するには、AWS CloudFormationを使用してクラスタ全体を迅速に起動する <a href=\"https://github.com/aws-samples/aws-hpc-recipes/tree/main/recipes/pcs/getting_started\">PCS guidance for a one-click deployment</a>&nbsp;を利用できます。</p> \n<p>CloudFormationが起動するとパラメータ指定の画面が表示されます。ここにクラスターのログインノードにアクセスするためのSSHキーをプルダウンで指定するオプションが表示されます。その他のフィールドはすべてそのままにしておき、<strong>Create</strong> を選択してください。これにより、必要なネットワークの前提条件、ログインノードグループを含むクラスター、単一のデモ用コンピューティングノードグループ、/home用のEFSファイルシステム、および/shared用のLustreファイルシステムが作成されます。。</p> \n<p>準備が整うと<a href=\"https://us-east-2.console.aws.amazon.com/cloudformation/home?region=us-east-2#/stacks?filteringText=cryosparc&amp;filteringStatus=active&amp;viewNested=true\">CloudFormation console</a>&nbsp;に以下のスタックが表示されるはずです。図2はCloudFormationのスクリーンショットで、各スタックにデプロイされた内容の簡単な説明が含まれています。</p> \n<div id=\"attachment_4650\" class=\"wp-caption aligncenter\" style=\"width: 2196px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4650\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.47.28@2x.png\" alt=\"Figure 2: CloudFormation stacks created by hpc recipes template.\" width=\"2186\" height=\"746\" aria-describedby=\"caption-attachment-4650\"></p> \n <p id=\"caption-attachment-4650\" class=\"wp-caption-text\">図2: hpcレシピテンプレートによって作成されたCloudFormationスタック</p> \n</div> \n<p>また、PCSクラスタを手動で作成する場合や、アカウント内の既存のリソースを使用する場合は <a href=\"https://docs.aws.amazon.com/pcs/latest/userguide/getting-started.html\">PCS User Guide</a> の手順に従ってこれらのリソースを設定するだけです。</p> \n<h2>LustreファイルシステムのスループットのためのFSxの調整</h2> \n<p><a href=\"https://us-east-2.console.aws.amazon.com/cloudformation/home?region=us-east-2#/stacks?filteringText=cryosparc&amp;filteringStatus=active&amp;viewNested=true\">CloudFormation console</a> で<strong>View Nested </strong>のラジオスライダーをクリックして、デプロイしたテンプレートから作成されたさまざまなスタックを確認します。<strong>get-started-cfn-FSxLStorage</strong> で始まるスタックを見つけてクリックします。コンソールの右側にスタック情報が表示されたら、<strong>Outputs</strong> タブをクリックし、後ほど使用する <strong>FSxLustreFilesystemId</strong>&nbsp;の値をメモします。</p> \n<div id=\"attachment_4651\" class=\"wp-caption aligncenter\" style=\"width: 2016px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4651\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.48.08@2x.png\" alt=\"Figure 3: FSx for Lustre CloudFormation stack created by hpc recipes template.\" width=\"2006\" height=\"1338\" aria-describedby=\"caption-attachment-4651\"></p> \n <p id=\"caption-attachment-4651\" class=\"wp-caption-text\">図 3: hpc レシピテンプレートによって作成された FSx for Lustre CloudFormation スタック</p> \n</div> \n<p>CryoSPARC のインストールを成功させるには、FSx for Lustre システムのストレージ単位あたりのスループットを 250 MB/s/TiB に更新する必要があります。この処理には最大 20 分かかる場合がありますので、残りのクラスター設定を進める間、ファイルシステムの更新がバックグラウンドで完了する時間を確保するため、今すぐコマンドを実行しましょう。</p> \n<pre><code class=\"lang-bash\">aws fsx update-file-system \\\n    --file-system-id $FSX-LUSTRE-ID \\\n    --lustre-configuration PerUnitStorageThroughput=250\n</code></pre> \n<h2>追加のノードグループとキューの作成</h2> \n<p>最初のクラスタ作成が完了したら、いくつかのコンピュートノードグループとキューを作成します。AWS PCSのコンピュートノードグループは、Amazon Elastic Compute Cloud (Amazon EC2)のノード(インスタンスと呼称されます)の論理的な集合体です。これらは、あなたがジョブを実行する一時的なマシンとなります。AWS PCSキューは、スケジューラのネイティブ実装であるワークキューを軽量に抽象化したものです。ジョブはキューに投入され、キューは1つ以上のコンピュートノードグループにマッピングされます。CryoSPARCでは、レーンはPCSキューに相当します。</p> \n<p><code>compute-cpu</code>（c5a.8xlargeインスタンス）、<code>compute-single-gpu</code>（g6.4xlarge）、<code>compute-multi-gpu</code>（g6.48xlarge）の3つの新しい計算ノードグループを作成し、これらの計算ノードグループをそれぞれのキューにマッピングします。これらのインスタンスタイプは、私たちの内部テストに基づいて選定されました。処理パイプライン内の個々のタスクのスケーラビリティに関する詳細な説明は <a href=\"https://guide.cryosparc.com/setup-configuration-and-management/cryosparc-on-aws/performance-benchmarks\">CryoSPARC performance benchmarks</a> にて選定理由が説明されています。</p> \n<p>これらのノードグループはPCSコンソールから作成できますが、ここではAWS CLIで作成する方法を紹介します。このコマンドを実行して、<code>compute-1</code> の PCS Compute Node GroupのAMI ID、Instance Profile、Launch Template IDを取得し、出力を保存します。次の一連のコマンドでこれを使用して、追加のコンピュートノードグループを作成します:</p> \n<pre><code class=\"lang-bash\">aws pcs get-compute-node-group \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-identifier compute-1 \n</code></pre> \n<p>以下のコマンドを実行し、各コマンドの出力から計算ノードグループ名とIDを保存します。これを使用して、これらのノードグループをキューにマッピングします：</p> \n<pre><code class=\"lang-bash\">aws pcs create-compute-node-group \\\n    --compute-node-group-name compute-cpu \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --region $REGION \\\n    --subnet-ids $PRIVATE_SUBNET_ID \\\n    --custom-launch-template id=$COMPUTE_LT_ID,version='1' \\\n    --ami-id $AMI_ID \\\n    --iam-instance-profile $INSTANCE_PROFILE_ARN \\\n    --scaling-config minInstanceCount=0,maxInstanceCount=2 \\\n    --instance-configs instanceType=c5a.8xlarge\naws pcs create-compute-node-group \\\n    --compute-node-group-name compute-single-gpu \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --region $REGION \\\n    --subnet-ids $PRIVATE_SUBNET_ID \\\n    --custom-launch-template id=$COMPUTE_LT_ID,version='1' \\\n    --ami-id $AMI_ID \\\n    --iam-instance-profile $INSTANCE_PROFILE_ARN \\\n    --scaling-config minInstanceCount=0,maxInstanceCount=2 \\\n    --instance-configs instanceType=g6.4xlarge\naws pcs create-compute-node-group \\\n    --compute-node-group-name compute-multi-gpu \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --region $REGION \\\n    --subnet-ids $PRIVATE_SUBNET_ID \\\n    --custom-launch-template id=$COMPUTE_LT_ID,version='1' \\\n    --ami-id $AMI_ID \\\n    --iam-instance-profile $INSTANCE_PROFILE_ARN \\\n    --scaling-config minInstanceCount=0,maxInstanceCount=2 \\\n    --instance-configs instanceType=g6.48xlarge\n</code></pre> \n<p>以下のコマンドを実行して、ノードグループの作成状況を確認します：</p> \n<pre><code class=\"lang-bash\">aws pcs get-compute-node-group --region $region \\\n    --cluster-identifier $cluster-name \\\n    --compute-node-group-identifier $node-group-name\n</code></pre> \n<p>3つのノードグループそれぞれのステータスが <code>ACTIVE</code> になったら、キューの作成に進むことができます。各キューは1つ以上のノードグループにマッピングされ、これらのノードグループはキューに到着したジョブを処理するための一時的なインスタンスを供給する役割を担います。このクラスタでは、各キューを単一のノードグループにマッピングします。</p> \n<p><code>$NODE_GROUP_ID</code> はノードグループ名と同じではないことに注意してください。</p> \n<pre><code class=\"lang-bash\">aws pcs create-queue \\\n    --queue-name cpu-queue \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-configurations \ncomputeNodeGroupId=$COMPUTE_CPU_NODE_GROUP_ID\naws pcs create-queue \\\n    --queue-name single-gpu-queue \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-configurations computeNodeGroupId=$COMPUTE_SINGLE_GPU_NODE_GROUP_ID\naws pcs create-queue \\\n    --queue-name multi-gpu-queue \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-configurations computeNodeGroupId=$COMPUTE_MULTI_GPU_NODE_GROUP_ID\n</code></pre> \n<p>次に、キューが正常に作成されたことを確認します：</p> \n<pre><code class=\"lang-bash\">aws pcs get-queue --region $REGION \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --queue-identifier $PCS_QUEUE_NAME\n</code></pre> \n<p>ステータスが <strong>ACTIVE</strong>&nbsp;を返したら、キューの作成は完了です。クラスタログインノードにログインして、CryoSPARCをインストールします。</p> \n<p>Amazon EC2のコンソールを開き <strong>Instances</strong>に移動します。 <strong>検索バー</strong>で <code>aws:pcs:compute-node-group-id = <em>&lt;LOGIN_COMPUTE_NODE_GROUP_ID</em>&gt;</code> を検索し、<em>&lt;LOGIN_COMPUTE_NODE_GROUP_ID&gt;</em> をログインノードグループのIDに置き換えてエンターキーを押します。このインスタンスを選択し、<strong>Connect</strong>を選択します。次のページで、<strong>Session Manager</strong>を選択し、<strong>Connect</strong>を選択します。ブラウザのタブでターミナルセッションが開きます（これはSession Managerの優れた機能です）。ターミナルで、ユーザを<code>ec2-user</code>に変更します。ec2-userは、ジョブの投入と管理を行うSlurmの権限を持つクラスタ内のユーザです。</p> \n<pre><code class=\"lang-bash\">sudo su - ec2-user</code></pre> \n<p>クラスタのログインノードに接続したら、次のコマンドを実行して追加のSlurmパーティションを確認します：</p> \n<pre><code class=\"lang-bash\">sinfo</code></pre> \n<p>以下のように表示されます：</p> \n<pre><code class=\"lang-bash\">PARTITION AVAIL TIMELIMIT NODES STATE NODELIST\ndemo up infinite 4 idle~ compute-1-[1-4]\nsingle-GPU up infinite 4 idle~ single-GPU-[1-4]\nCPU up infinite 4 idle~ CPU-[1-4]\nmulti-GPU up infinite 4 idle~ multi-GPU-[1-4]</code></pre> \n<p>クラスタにログインできたので、CryoSPARCをインストールしてテストデータセットをダウンロードします。</p> \n<h2>CryoSPARCのインストールとテストデータセットのダウンロード</h2> \n<p>CryoSPARCのインストールとセットアップを簡単にするために、共有ファイルシステムにアプリケーションをインストールし、クラスタのキュー名に基づいてレーンを登録するシェルスクリプトを用意しました。これにアクセスするには、<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html\">キーペアを生成して</a>ログインノードにSSH接続します。ログインノードに接続したら、スクリプトをダウンロードして実行可能ファイルにしてください：</p> \n<pre><code class=\"lang-bash\">wget https://raw.githubusercontent.com/aws-samples/cryoem-on-aws-parallel-cluster/refs/heads/main/parallel-computing-service/pcs-cryosparc-post-install.sh</code></pre> \n<p>スクリプトを実行し、インストール用の共有ファイルシステムを指定します。<code>$LICENSE_ID</code>をCryoSPARCのライセンスに置き換えてください。最大1時間かかります。</p> \n<pre><code class=\"lang-bash\">chmod +x pcs-cryosparc-post-install.sh\nsudo ./pcs-cryosparc-post-install.sh $LICENSE_ID /shared/cryosparc /shared/cuda 11.8.0 11.8.0_520.61.05 /shared\n</code></pre> \n<p>インストールが完了したら、CryoSPARCサーバーを起動します：</p> \n<pre><code class=\"lang-bash\">/shared/cryosparc/cryosparc_master/bin/cryosparcm start</code></pre> \n<p>ログインノードを再起動した場合、CryoSPARCサーバーのstartコマンドを再度実行する必要があります。このコマンドを起動テンプレートのEC2ユーザーデータセクションに追加することで、このプロセスを自動化できます。Amazon EC2ユーザーデータの操作については <a href=\"https://docs.aws.amazon.com/pcs/latest/userguide/getting-started.html\">PCS User Guide</a>を参照してください。</p> \n<p>サーバーが正常に起動し、 <code>CryoSPARC master started</code> という確認メッセージが表示されたら、新しいユーザーを作成します：</p> \n<pre><code class=\"lang-bash\">cryosparcm createuser \\\n--email \"&lt;youremail@email.com&gt;\" \\\n--password \"&lt;yourpassword&gt;\" \\\n--username \"&lt;yourusername&gt;\" \\\n--firstname \"yourname&gt;\" \\\n--lastname \"&lt;yourlastname&gt;\"\n</code></pre> \n<p>完了したら、ログインノードからログアウトしてください。</p> \n<h2>CryoSparc UIへのアクセス</h2> \n<p>次に、先に生成したEC2キーペアを使用してSSHトンネルをCryoSPARCのログインノードに設定します：</p> \n<pre><code class=\"lang-bash\">ssh -i /path/to/key/key-name -N -f -L \\ localhost:45000:localhost:45000 ec2-user@publicIPofyourinstance</code></pre> \n<p>これを実行した後、ウェブブラウザで <a href=\"http://localhost:45000/\">http://localhost:45000</a>&nbsp;にアクセスすると、CryoSPARC のログイン画面が表示されます。</p> \n<div id=\"attachment_4652\" class=\"wp-caption aligncenter\" style=\"width: 1830px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4652\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.58.05@2x.png\" alt=\"Figure 4: From the web browser login page, access CryoSPARC using the newly create user credentials.\" width=\"1820\" height=\"920\" aria-describedby=\"caption-attachment-4652\"></p> \n <p id=\"caption-attachment-4652\" class=\"wp-caption-text\">図4: ウェブブラウザのログイン画面から、新しく作成したユーザー認証情報を使ってCryoSPARCにアクセスします。</p> \n</div> \n<h2>テストジョブの実行</h2> \n<p>sharedディレクトリにテストデータ用のデータフォルダを作成し、以下のコマンドでテストデータセットをダウンロードします：</p> \n<pre><code class=\"lang-bash\">mkdir /shared/data\ncd /shared/data\n/shared/cryosparc/cryosparc_master/bin/cryosparcm downloadtest\ntar -xf empiar_10025_subset.tar\n</code></pre> \n<p>このステップの完了には数分かかります。</p> \n<p>このテストでは、データセットをLustreファイルシステムに直接ダウンロードしています。本番環境では、Amazon Simple Storage Service (Amazon S3)にデータセットを保存し、Amazon S3とAmazon Fsx for Lustreファイルシステム間で <a href=\"https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\">Data Repository Association</a> (DRA) を使用することをお勧めします。1つのCryo-EMサンプルのサイズは数十テラバイトになることがあり、組織は定期的にペタバイトの顕微鏡データを保存しているため、このようにAmazon S3とFSx for Lustreを使用すると、コストを大幅に削減できます。DRA をセットアップするには <a href=\"https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\">FSx for Lustre documentation</a>を参照してください。</p> \n<p>テストデータセットのダウンロードが完了したら <a href=\"https://guide.cryosparc.com/processing-data/get-started-with-cryosparc-introductory-tutorial\">Get Started with CryoSPARC Tutorial</a>&nbsp;の手順に従って、Import Movies ジョブを実行します。ジョブのキューを選択すると、Slurmクラスタのキューが表示されます。Import Moviesジョブの<code>compute-cpu</code>レーンを選択します：</p> \n<div id=\"attachment_4653\" class=\"wp-caption aligncenter\" style=\"width: 1030px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4653\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.59.32@2x.png\" alt=\"Figure 5: CryoSPARC configured lanes with the same names as PCS queues as part of the installation. Choose compute-cpu for the Import Movies job.\" width=\"1020\" height=\"1160\" aria-describedby=\"caption-attachment-4653\"></p> \n <p id=\"caption-attachment-4653\" class=\"wp-caption-text\">図5：CryoSPARCは、PCSキューと同じ名前でレーンを構成しています。ムービーのインポートジョブにcompute-cpuを選択します</p> \n</div> \n<p>ジョブを実行します。CryoSPARC UIのEvent Logの下に、このようなSlurmサブミッションが表示されるはずです：</p> \n<div id=\"attachment_4654\" class=\"wp-caption aligncenter\" style=\"width: 2234px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4654\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-10.00.20@2x.png\" alt=\"Figure 6: Successful CryoSPARC job submission.\" width=\"2224\" height=\"746\" aria-describedby=\"caption-attachment-4654\"></p> \n <p id=\"caption-attachment-4654\" class=\"wp-caption-text\">図6: 成功したCryoSPARCジョブ投入</p> \n</div> \n<p>ターミナルに戻ってログインノードから<code>squeue</code>コマンドを実行すると、クラスタ上で実行されているジョブを確認できます：</p> \n<pre><code class=\"lang-bash\">JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n    1 compute-c cryospar ec2-user CF       1:02      1 compute-cpu-1\n</code></pre> \n<p><code>sinfo</code> を実行して、ジョブ用に割り当てられているノードを確認します：</p> \n<pre><code class=\"lang-bash\">PARTITION          AVAIL  TIMELIMIT  NODES  STATE NODELIST\ndemo                  up   infinite      4  idle~ compute-1-[1-4]\ncompute-cpu           up   infinite      1   mix# compute-cpu-1\ncompute-cpu           up   infinite      3  idle~ compute-cpu-[2-4]\ncompute-single-GPU    up   infinite      4  idle~ compute-single-gpu-[1-4]\ncompute-multi-GPU     up   infinite      4  idle~ compute-multi-gpu-[1-4]\n</code></pre> \n<p>このノードは、EC2によってAWSアカウントにプロビジョニングされたシングルインスタンスです。EC2コンソールで確認できます。ジョブは数分で正常に完了するはずです。これ以上ジョブをキューに投入しなければ、最後のジョブが完了した数分後にそのインスタンスが動的に終了するのがわかります。</p> \n<h2>可視化と次のステップ</h2> \n<p>可視化パッケージのような追加アプリケーションをクラスタ共有ストレージにインストールすることができます。</p> \n<p>ChimeraXは構造生物学者によく使われている可視化アプリケーションです。この記事では取り上げませんが、ログインノードにAmazon DCVを設定することで、クラスタ上でこれを実行することができます。DCVは、デスクトップとクラウド間で低レイテンシー、高解像度のリモート可視化を提供し、手元の環境とクラウド間の時間とコストのかかるデータ移動を不要にします。</p> \n<div id=\"attachment_4655\" class=\"wp-caption aligncenter\" style=\"width: 2170px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4655\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-10.01.33@2x.png\" alt=\"Figure 7: Screenshot of results from EMPIAR 10288 Sample, run through CryoSPARC, and visualized using ChimeraX.\" width=\"2160\" height=\"1494\" aria-describedby=\"caption-attachment-4655\"></p> \n <p id=\"caption-attachment-4655\" class=\"wp-caption-text\">図7: CryoSPARCで実行し、ChimeraXで可視化したEMPIAR 10288サンプルの結果のスクリーンショット。</p> \n</div> \n<h2>環境の削除</h2> \n<p>AWS CLIを使用して、まず以下のコマンドを使用して<code>cpu-queue</code>、<code>single-gpu-queue</code>、<code>multi-gpu-queue</code>を削除することで、この投稿で構築した環境を削除できます：</p> \n<pre><code class=\"lang-bash\">aws pcs delete-queue --cluster-identifier &lt;pcs_cluster_name&gt; --queue-identifier &lt;pcs_queue_name&gt;</code></pre> \n<p>次に、以下のコマンドで <code>compute-cpu</code>, <code>compute-single-gpu</code> と <code>compute-multi-gpu</code>&nbsp;の各コンピュートノードグループを削除します：</p> \n<pre><code class=\"lang-bash\">aws pcs delete-queue --cluster-identifier &lt;pcs_cluster_name&gt; --compute-node-group-identifier &lt;pcs_compute_node_group_name&gt;</code></pre> \n<p>最後に、次のコマンドを使用してCloudFormationテンプレートを削除することで、PCSクラスタとそれで作成されたすべてのリソースを削除します：</p> \n<pre><code class=\"lang-bash\">aws cloudformation delete-stack --stack-name &lt;pcs_cloudformation_stack name&gt;</code></pre> \n<h2>結論</h2> \n<p>AWS Parallel Computing Service は、 Cryo EM をクラウドで実行するためのパワフルでスケーラブルなソリューションを提供し、研究者が新しい科学的発見を解き放つことを可能にします。</p> \n<p>AWS上のスケーラブルでオンデマンドなコンピューティングにより、科学者のアイデアや意欲の成長に合わせて要求に応えることができます。多様なワークロードに対応できるコンピューティングでAWS PCSを構成し、利用可能になった最新のインスタンスタイプで状態を保つことができます。Amazon DCVを使用してPCSに統合された高解像度、低レイテンシーの可視化により、科学者はデスクトップから直接、完全なCryo-EMワークフローを実行できます。</p> \n<p>お客様がクライオ電子顕微鏡（Cryo-EM）のデータ解析環境にAWSを選択するメリットは、研究者にとってスケーラビリティ、柔軟性、最終的な効率性をもたらすことができることです。</p> \n<p>本ガイドでは、PCS上でCryo-EMジョブを実行する方法の一例を紹介します。構造生物学者は、1つのサンプルを処理する際に複数のアプリケーションを使用し、組織内の研究グループ間でデータセットを共有することがよくあります。AWS Professional ServicesとClovertexのようなAmazon Partner Network (APN)のメンバーは、組織のニーズに合わせてこの初期システムのスケールアウトを支援することができます。詳細については、AWSアカウントチームにお問い合わせいただくか ask-hpc@amazon.com までご連絡ください。<br> \n <!-- '\"` --></p> \n<div>\n 本ブログ記事は、プロフェッショナルサービスの山下が翻訳しました。原文は\n <a href=\"https://aws.amazon.com/jp/blogs/hpc/scalable-cryo-em-on-aws-parallel-computing-service-pcs/\">こちら</a>です。\n</div> \n<div></div> &nbsp;\n<p></p> \n<h2>著者について</h2> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/03/18/CleanShot-2024-03-18-at-14.47.15.png\" alt=\"Marissa Powers\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Marissa Powers</h3> \n  <p>Marissa Powers は、ハイパフォーマンスコンピューティング(HPC)とライフサイエンスに特化したAWSのスペシャリストソリューションアーキテクトです。彼女は計算神経科学の博士号を持っており、創薬ワークロードを加速するために研究者や科学者と働くことを楽しんでいます。ボストンに家族と住んでおり、ウィンタースポーツとアウトドアの大ファンです。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2025/01/06/IMG-2025-01-06-09.24.26@2x.png\" alt=\"Juan Perin\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Juan Perin</h3> \n  <p>Juan Perin は、HPCとストレージを専門とするヘルスケアとライフサイエンスのスペシャリストです。ライフサイエンス分野の研究開発で深い経験を持ち、テクノロジーとサイエンスの応用のギャップを埋めることに喜びを感じています。ニューヨーク近郊に住み、3人の男の子の父親として多忙な日々を送っています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2025/01/06/IMG-2025-01-06-09.24.12@2x.png\" alt=\"Rye Robinson\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Rye Robinson</h3> \n  <p>Rye Robinson は、AWSのHPCを専門とするライフサイエンス・ソリューション・アーキテクトです。お客様が新技術や最先端技術を活用し、多様な複雑な課題を解決するお手伝いをすることが喜びです。仕事以外では、完璧なエスプレッソを淹れるための探求を続けています。</p> \n </div> \n</footer> \n<footer> \n <h2>翻訳者について</h2> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/202412-myself_x125.png\" alt=\"Tomoya Yamashita\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Tomoya Yamashita</h3> \n  <p>山下 智也(Tomoya Yamashita)は<a href=\"https://aws.amazon.com/jp/professional-services/\">Professional Services</a>のコンサルタントです。大規模なマイグレーションやDBマイグレーションチームに所属しています。HPC、ライフサイエンスをはじめエッジの効いたマイグレーションを推進することを楽しんでいます。最近は一緒に年を取ってきた老犬のお世話を日課にしています。</p> \n </div> \n</footer> \n<p>\n <!-- '\"` --></p> \n<footer> \n <div class=\"blog-tag-list\">\n  TAGS:\n  <br> \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/cryo-em/\" rel=\"tag\">Cryo-EM</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/elastic-fabric-adapter/\" rel=\"tag\">Elastic Fabric Adapter</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/research-computing/\" rel=\"tag\">Research Computing</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/storage/\" rel=\"tag\">Storage</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/visualization/\" rel=\"tag\">visualization</a>\n </div> \n</footer>"
  },
  {
    "title": "v0 にデザインシステムを与えて、統一感あるデザインに仕上げよう！",
    "date": "2025-10-03T06:00:07.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/chot/articles/d5ffeb6de3e7c2",
    "content": "ちょっと株式会社の KindBurger です！\n本記事では、プロンプトだけでは表現しきれないデザイン原則を、デザインシステムを「コンテキスト」として与えることでどう改善できるのかを紹介します。\nまた、v0 にはサンプルのデザインシステムも用意されており、すぐに試すことができます 🎉\nこれを利用すれば、次のように一貫性のあるデザインが整ったサイトを簡単に生成できます。\n\n\n v0 とは\nざっくりいうと 「アイデアを素早くかたちにできる」 生成 AI ツールです。\n自然言語のプロンプトや画像、Figma ファイルなどから、\nReact / Next.js / Tailwind CSS / ..."
  },
  {
    "title": "Amazon Connect Cost Insight Dashboard によるコストの可視化と最適化",
    "date": "2025-10-03T05:39:04.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/visualize-and-optimize-your-amazon-connect-costs-with-the-cost-insight-dashboard/",
    "content": "<p>コンタクトセンターのリーダーは、情報に基づいた適切な運用上の意思決定を行うために、<a href=\"https://aws.amazon.com/jp/connect/\">Amazon Connect</a> のコストの可視性の向上を常に求めています。この記事では、生の請求データを実用的なインサイトに変換する強力なソリューションである Amazon Connect Cost Insight Dashboard をご紹介します。このツールは、コンタクトセンターの最適化に特化して設計された包括的なコスト分析機能を提供し、サービスの品質・優秀性を維持しながら効率化の機会を特定することを可能にします。</p> \n<p>Amazon Connect Cost Insight Dashboard は、コンタクトセンターの財務的なパフォーマンスについて、包括的に可視化します。月次のコストトレンドを追跡し、サービスコンポーネント別にコストを分解し、通話国や通話の方向に関わらずテレフォニー費用を分析します。このダッシュボードは、チャネル別のコスト比較、地域別のコスト分析を可能にし、コンタクトあたりのコストなどの主要な効率性に関わるメトリクスを提供します。この強力なツールは、コンタクトセンターマネージャーが情報に基づいた意思決定を行い、運用を最適化するために、必要なデータを提供します。</p> \n<h2>仕組み</h2> \n<p>このソリューションは、以下のように AWS サービスを利用し、請求データをアクセスしやすいインサイトに加工します。</p> \n<div id=\"attachment_165844\" style=\"width: 1440px\" class=\"wp-caption aligncenter\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/arch-1-1.png\"><img aria-describedby=\"caption-attachment-165844\" loading=\"lazy\" class=\"size-full wp-image-165844\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/arch-1-1.png\" alt=\"アーキテクチャ図\" width=\"1430\" height=\"546\"></a>\n <p id=\"caption-attachment-165844\" class=\"wp-caption-text\">図 1: Cloud Intelligence Dashboards Framework のアーキテクチャ概要</p>\n</div> \n<ol> \n <li>AWS コストと使用状況レポート (AWS CUR) が詳細なコストデータを S3 バケットに配信</li> \n <li>AWS Glue crawler がコスト情報のデータカタログを作成・更新</li> \n <li>Amazon Athena が情報をクエリし、関連する Amazon Connect のデータを処理</li> \n <li>Amazon QuickSight がこれらのデータからインタラクティブな可視化を提供</li> \n</ol> \n<h2>Amazon Connect のコスト分析に役立つ 6 つのビュー</h2> \n<p><strong>Overview (概要):</strong> Amazon Connect の使用状況とコストに対する概要レベルの可視化を提供します。Amazon Connect のサービスと通話料を分割して表示できす。また月次のトレンドや当月のメトリクスを表示できます。インバウンドおよびアウトバウンド通話の上位国を特定できます。アカウント、リージョン、サービス別にコストを分類できます。</p> \n<p><strong>Contact Center:</strong> Amazon Connect が有効化されたアカウント内での AWS サービス全体のコストを追跡します。より明確に可視化するため Amazon Connect のコストを除外したサービスのトレンドを表示します。Amazon Lex、Amazon DynamoDB、Amazon S3 などのコンタクトセンターソリューションに統合されるサービスの利用増加のパターンを明らかにできます。また、それらの月次分析が可能です。このビューでは、コンタクトセンターソリューション全体の完全なコストをマッピングできます。例えば、棒グラフでは（Amazon Connect のコストを除いた）サービスタイプ別のコンタクトセンターでの使用状況を表示でき、Amazon Connect と併用されている追加サービスのコストが確認できます。これにより、顧客は Amazon Connect サービスを超えた全体の技術的な支出を理解できます。</p> \n<p><strong>Amazon Connect:</strong> Amazon Connect サービスコストを通話料と切り離して確認できます。複数のリージョンとアカウント間での使用パターンをマッピングでき、サービスコンポーネントの詳細な内訳（エンドカスタマーの通話分数、チャットインタラクション、タスク、エージェント評価）を表示できます。各サービスコンポーネントの単位あたりコストを計算できます。</p> \n<p><strong>Telecom:</strong> コンタクトセンターの通話料の分析のためのビューです。インバウンド/アウトバウンドの時間(分)と通話料のタイプを分類できます。国別にテレコムの使用状況とコストをマッピングでき、世界地図上でグローバルな通話料の状況を可視化できます。コスト影響の多い上位の要素と高額な通話先を特定できます。</p> \n<p><strong>Daily usage (日次使用状況):</strong> 過去 30 日間の詳細な使用状況ビューを提供します。データをインバウンド、アウトバウンド、電話番号のコストに分類できます。特定の日、国、通話へのドリルダウンが可能です。バブルチャートを使用してコストと利用量、価格の関係を可視化できます。個別の通話コストの調査に役立つビューです。</p> \n<p><strong>Call Details (通話詳細):</strong> コンタクト ID ごとの使用タイプを集約できます。通話コストと通話時間の分布を可視化します。最も高額で最も長時間の通話にフラグを立てたり、国別の通話時間パターンを表示することができます。特定の通話詳細と使用タイプの詳細な分析に役立ちます。</p> \n<p><strong>Contact Search (問い合わせ検索):</strong> 特定の問い合わせに対する高度なフィルタリングを提供します。価格、通話時間、国による検索が可能です。コンタクトセンター使用状況を地理的ビューで確認できます。個別の問い合わせコストと特性の詳細分析が可能です。</p> \n<h2>Amazon Connect Cost Insight Dashboard のデモ</h2> \n<p>実際にデプロイする前にダッシュボードの機能を体験したい場合、<a href=\"https://cid.workshops.aws.dev/demo?dashboard=amazon-connect-cost-insight-dashboard\">インタラクティブなデモをご覧ください</a>。このデモではサンプルデータを使用して、ダッシュボードの直感的なインターフェースと強力な可視化機能を紹介しています。</p> \n<div id=\"attachment_165845\" style=\"width: 1440px\" class=\"wp-caption aligncenter\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Picture2-12-1.png\"><img aria-describedby=\"caption-attachment-165845\" loading=\"lazy\" class=\"size-full wp-image-165845\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Picture2-12-1.png\" alt=\"Amazon Connect Cost Insight Dashboard\" width=\"1430\" height=\"742\"></a>\n <p id=\"caption-attachment-165845\" class=\"wp-caption-text\">図 2: Amazon Connect Cost Insight Dashboard のデモ</p>\n</div> \n<p>このデモでは、サービスコンポーネント別のコスト内訳、地域別支出比較、チャネルコスト分析などの主要機能に触れることができます。FinOps チーム、コンタクトセンターマネージャー、DevOps エンジニア、ビジネスリーダーは、これらのインサイトが各役割と責任にどのように活用、適用できるかすぐに確認できます。</p> \n<h2>コンタクトセンターのコスト最適化の例</h2> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/example_1-1-1.gif\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-165849\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/example_1-1-1.gif\" alt=\"コスト分析の例\" width=\"1280\" height=\"720\"></a></p> \n<h3>高額な通話の調査によるコスト分析</h3> \n<p>Call Details ビューにアクセスすることで、最もコストの高い上位 50 件の通話を特定し分析することができます。例えば $0.62 の通話を例にします。この特定のデータポイントを選択すると、ビューが即座にフィルタリングされ、その完全な内訳が表示されます。ダッシュボードでは、エンドカスタマーとフリーダイヤルの分単位のコストの両方が表示され、$0.62 に積み上がるコストの単価・要素が表示されます。高額な通話に対して、この詳細な可視化を行うことで、高コストなやり取りのパターンを特定し、的を絞ったコスト最適化戦略とより効率的なリソース配分を可能にします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/3-1.gif\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-165850\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/3-1.gif\" alt=\"コスト分析の例\" width=\"1280\" height=\"720\"></a></p> \n<h3>国別の通話時間ベースのコスト分析</h3> \n<p>国別の通話時間分布により、10 秒の短い通話から 20 分の長時間の通話まで、異なる時間別のセグメントにわたるコストパターンが明らかになります。例えば、ベルギーの通話パターンを調べるために、その時間のセグメントを選択すると、関連するすべてのコンタクト ID がインタラクティブにバブルとして表示され、それぞれに関連するコストが表示されます。特定の問い合わせをクリックすると、エンドカスタマーとフリーダイヤル分数の詳細なコスト内訳が表示されます。この詳細なビューを Contact Lens の分析と組み合わせることで、どの通話時間と国がより高いコストを発生させるかを特定し、国際通話ルーティングの最適化、人員配置の調整、運用費用削減のためのプロセス改善について、データに基づいた意思決定を可能にします。</p> \n<h2>アクションを起こしましょう</h2> \n<p>Amazon Connect のコストを完全に可視化しましょう。このダッシュボードは、すべてのチャネルにわたる使用パターンとコストを明らかにし、最適化の機会のすばやい特定に役立ちます。 このソリューションを実装し、コンタクトセンターのコストを最適化するために、<a href=\"https://docs.aws.amazon.com/ja_jp/guidance/latest/cloud-intelligence-dashboards/connect-cost-insight.html\">ワークショップガイドにアクセス</a>してください。</p> \n<h2>筆者紹介</h2> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/paras-150x150-1.png\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Paras Babbar</strong> は AWS の Enterprise Support Lead および Connect スペシャリストで、顧客が堅牢で効率的なクラウドソリューションを構築するためのガイダンスの提供に長けています。彼はコンタクトセンターの革新と複雑なビジネス課題への取り組みを専門とし、顧客の成功を推進する革新的な戦略を一貫して提供しています。\n </div> \n</div> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Alex_Yankovskyy_Photo-1-1.jpg\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Alex Yankovskyy</strong> は AWS Telecom のソリューションアーキテクトで、コンタクトセンターおよびカスタマーエクスペリエンスのソリューションにおいて 15 年の経験を持っています。彼は様々な業界の企業が Amazon Connect を使用してコンタクトセンターを変革することを支援し、AI 統合と運用効率に焦点を当てています。Alex は 12 の AWS 認定資格を保有しています。\n </div> \n</div> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/WhatsApp-Image-2025-09-24-at-2.21.54-PM-1.jpeg\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Baraa Elkosh</strong> は AWS Telecom のソリューションアーキテクトで、コンタクトセンターおよびカスタマーエクスペリエンスのソリューションにおいて 15 年の経験を持っています。彼は様々な業界の企業が Amazon Connect を使用してコンタクトセンターを変革することを支援し、AI 統合と運用効率に焦点を当てています。Alex は 12 の AWS 認定資格を保有しています。\n </div> \n</div> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Screenshot-2024-12-05-at-00.51.16-1.png\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Mariia Poliak</strong> は AWS のクラウドオペレーションアーキテクト（COA）で、クラウドコスト最適化に情熱を持っています。Enterprise Support 組織内で働く彼女は、顧客が AWS サービスから最大の価値を得ながら、最適なクラウド利用のプラクティスを実現できるよう支援しています。\n </div> \n</div> \n<p>翻訳はテクニカルアカウントマネージャー高橋が担当しました。原文は<a href=\"https://aws.amazon.com/jp/blogs/contact-center/visualize-and-optimize-your-amazon-connect-costs-with-the-cost-insight-dashboard/\">こちら</a>です。</p>"
  },
  {
    "title": "cc-sddで仕様駆動開発を試してみた",
    "date": "2025-10-03T03:54:11.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/canly/articles/c77bf9f7a67582",
    "content": "こんにちは、株式会社カンリーのエンジニアの桑野です。AIを使ったコーディングが一般化しつつありますが、今回は最近注目を集めている「仕様駆動開発（SDD: Spec-Driven Development）」と、その実装の一つである「cc-sdd」を試してみた経験を共有したいと思います。\n\n 仕様駆動開発（SDD）とは\nAIの登場により、Vibe Coding（自然言語で指示を出してAIにコードを生成させる方法）が活発になりました。しかし、そのアプローチでは「最適化されていないコード」や「どうなっているんだっけ？」という実装が増えるという課題も顕在化してきました。\nSDDは、そのような課題に..."
  },
  {
    "title": "Claude Codeで開発する時こそ「ユビキタス言語辞書」を作ろう！",
    "date": "2025-10-03T02:37:53.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/minedia/articles/cb2313fcc47ceb",
    "content": "\n 3秒まとめ 📝\nClaude Codeと一緒にユビキタス言語辞書を自動更新する仕組みを実装してみました！\n\nAIツール時代の新たな課題は「用語の齟齬によるAIの誤った解釈」だった！\nAIの「忘れっぽさ」への対処法が意外すぎる\n既存システムとの整合性は段階的移行で解決できる\n\n\n どんな人向けの記事？ 🎯\nこの記事は、以下のような方に読んでもらいたいです！\n\n\nシステム開発のチームリーダーの方: 「チーム内で用語がバラバラで困ってる...」でお困りの方\n\nAI活用エンジニアの方: 「Claude Codeが思った通りに動いてくれない！」に興味がある方\n\nDDD実践者の方: 「ユビキタス..."
  },
  {
    "title": "AWS Weekly Roundup: Amazon S3、Amazon Bedrock AgentCore、AWS X-Ray など (2025 年 9 月 29 日)",
    "date": "2025-10-03T01:36:29.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-weekly-roundup-amazon-s3-amazon-bedrock-agentcore-aws-x-ray-and-more-september-29-2025/",
    "content": "<p>皆さん、信じられますか? 早いもので、今年も年末がすぐそこまでやって来ています。AWS re:Invent が開催日を迎えるのもあっという間です! 米国ラスベガスで毎年行われる AWS 最大のイベントは 12 月 1 日から 12 月 5 日の日程で開催され、私たちが取り組んできた数多くの事柄が発表およびリリースされます。チケットをまだ購入していない場合は <a href=\"https://reinvent.awsevents.com/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS re:Invent 2025 のチケットを購入</a>して、このイベントを実際に体験しましょう。ラスベガスに行けなくても心配ありません。数々の発表を情報が入り次第お伝えする AWS ニュースブログをチェックしてください。</p> \n<p>これから re:Invent までの間にもエキサイティングな新しいリリースがまだまだたくさん行われるので、いつものように9 月 22 日週のハイライトを簡単に振り返って最新のリリースを見ていきましょう。まずは、最も人気のあるサービスの 1 つである <a href=\"https://aws.amazon.com/s3/?trk=835ac318-3bae-4494-ad9e-0565dcf139a3&amp;sc_channel=ps&amp;ef_id=Cj0KCQjw3OjGBhDYARIsADd-uX5JtgvrKScev7JcmxEu0VToxQK090GmEaV8sCCAG8koo0hE9kYGLVgaAi5rEALw_wcB:G:s&amp;s_kwcid=AL!4422!3!638364429346!e!!g!!amazon%20s3!19096959014!142655567183&amp;gad_campaignid=19096959014&amp;gbraid=0AAAAADjHtp-yHEG9mIOoojJR9iAsewUDU&amp;gclid=Cj0KCQjw3OjGBhDYARIsADd-uX5JtgvrKScev7JcmxEu0VToxQK090GmEaV8sCCAG8koo0hE9kYGLVgaAi5rEALw_wcB\">Amazon S3</a> です。</p> \n<p><span style=\"text-decoration: underline\"><strong>S3 の更新<br> </strong></span>S3 チームは、S3 の使用をさらに向上させるために懸命に取り組んできました。今月だけでも、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/aws-s3-batch-operations-managing-buckets-console/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">S3 バッチオペレーションのターゲット一括選択</a>、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-s3-conditional-deletes-s3-general-purpose-buckets/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">S3 汎用バケットでの条件付き削除のサポート</a>、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/malware-protection-s3-file-size-archive-scanning-limits/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">マルウェア防止のためのファイルサイズとアーカイブスキャンの制限拡張</a>などがリリースされました。</p> \n<p>9 月 22 日週は、<strong>AWS コンソールでの</strong> <strong>Amazon S3 Tables プレビュー機能の追加</strong>により、新たな S3 マイルストーンが達成されました。今後は、コンソールから直接 S3 テーブルを確認することで、SQL を記述しなくてもテーブルのデータ構造と内容を簡単に理解できるようになります。簡単に表示できるこの特徴量は、S3 Tables がサポートされているすべてのリージョンで今すぐ利用でき、発生するコストはテーブルプレビューを表示するために必要な S3 リクエストの料金のみです。</p> \n<p><span style=\"text-decoration: underline\"><strong>その他のリリース</strong></span><br> 9 月 29 日週はすばらしい機能をリリースしたその他サービスのハイライトをいくつかご紹介します。</p> \n<p>Amazon Bedrock AgentCore が<strong>エンタープライズ統合オプションと自動化オプションを拡大</strong> – Bedrock AgentCore サービスは、新たに <a href=\"https://aws.amazon.com/vpc/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">Amazon VPC</a> 接続、<a href=\"https://aws.amazon.com/privatelink/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS PrivateLink</a>、<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS CloudFormation</a>、リソースタグをサポートすることで<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-bedrock-agentcore-runtime-browser-code-interpreter-vpc-privatelink-cloudformation-tagging/\">エンタープライズ対応性をレベルアップ</a>し、開発者がセキュリティやインフラストラクチャの自動化よりよく制御できるようにしました。スケーラブルなエージェントデプロイ用の AgentCore Runtime、ウェブインタラクション用の AgentCore Browser、セキュアなコード実行用の AgentCore Code Interpreter のどれを使用しているかにかかわらず、これらの機能強化によって、プライベートリソースへのアクセス、インフラストラクチャのデプロイ自動化、系統立ったリソース管理の維持をセキュアに実行できる AI エージェントのデプロイが可能になります。</p> \n<p>AWS X-Ray が<strong>より優れたエラー検出のためのスマートサンプリングを導入</strong> – AWS X-Ray が、<a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-adaptive-sampling.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">定義した制限内でトレースキャプチャ率を自動的に調整する適応型サンプリング</a>の提供を開始しました。この機能は、DevOps チームや SRE が通常の操作時にオーバーサンプリングを行うことなく重要な問題を検出できるようにします。新機能には、異常発生時にサンプリングを増加させる Sampling Boost や、ターゲットを絞りこんだエラートレースを行う Anomaly Span Capture などがあり、チームはコストを抑えながら必要なときに高度なオブザーバビリティを実現できます。</p> \n<p><a href=\"https://aws.amazon.com/clean-rooms/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS Clean Rooms</a> が段階的な ID マッピングでリアルタイムコラボレーションを強化 – AWS Clean Rooms では、<a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS Entity Resolution</a> を使用した新規、変更済み、削除済みのレコードのみでの ID マッピングテーブルの更新が可能になり、コラボレーター間でのデータ同期化をより効率的かつタイムリーに行えるようになりました。この改善は、広告効果測定プロバイダーがプライバシーコントロールを維持しながら広告主やパブリッシャーとの最新データセットを維持するために役立ち、データセット全体を再処理しなくても常時オンのキャンペーン効果測定が可能になります。</p> \n<p><span style=\"text-decoration: underline\"><strong>要点だけを簡潔に</strong></span><br> チームやワークロードに大いに役立つと思われる更新をいくつか簡単に紹介します。</p> \n<p>EC2 インスタンスタイプはどんどん更新されるので、最新タイプを完全に把握しておくのも大変です。<a href=\"https://aws.amazon.com/compute-optimizer/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS Compute Optimizer</a> では、最新の C8、M8、R8、I8 ファミリーを含めた 99 のインスタンスを追加でサポートするようになりました。</p> \n<p>e スポーツでは、1 ミリ秒たりとも無駄にできません! <a href=\"https://aws.amazon.com/gamelift/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">Amazon GameLift</a> が米国ダラスに新しい Local Zone を立ち上げ、テキサス州のプレイヤーはより近い場所に設置された超低レイテンシーゲームサーバーを利用できるようになりました。</p> \n<p>大規模な Amazon EC2 デプロイを管理するときは、コントロールがすべてです! Amazon EC2 の<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">許可された AMI 設定がマーケットプレイスコード、廃止時、作成日、命名パターンでのフィルタリングのサポートを開始</a>しました。これは、非準拠イメージの使用防止に役立ちます。さらに、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ec2-auto-scaling-forced-cancellation-instance/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\"> EC2 Auto Scaling ではインスタンスの更新を即座に強制キャンセル</a>できるようになり、重要なデプロイ中の制御をより迅速に行えるようになりました。</p> \n<p>よりインテリジェントでセキュアなカスタマーサービスをさまざまな言語で実現しましょう! Amazon Connect が、より優れたカスタマージャーニーインサイトを得るために<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-flow-designer-analytics-mode/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">フローデザイナーの分析を強化</a>し、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-associate-custom-attributes-interaction-segments/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">正確なインタラクション追跡のためのカスタム属性</a>を追加するとともに、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-contact-lens-redaction-7-languages/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">Contact Lens の機密データ秘匿化機能を拡張</a>してさらに 7 つの欧米言語をサポートするようになりました。</p> \n<p>9 月 29 日週のニュースは以上です!</p> \n<p>世界中で開催される<a href=\"https://aws.amazon.com/events/explore-aws-events?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">今後の AWS イベントのすべて</a>を忘れずにチェックしましょう。テクノロジー業界の気の合う仲間たちとすばらしい 1 日を過ごしながら、たくさんの人々と出会い、たくさんの事柄を学べる無料のイベントに参加するエキサイティングな機会が盛りだくさんです。</p> \n<p>賞金を掛けて勝負したいと考えているなら、特別なイベントへの参加期間が終了間近です! 10 月 20 日まで続く <a href=\"https://info.devpost.com/blog/aws-ai-agent-global-hackathon?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS AI Agent Global Hackathon</a> は、AWS の包括的な生成 AI スタックを使用して革新的な AI エージェントを構築するというまたとない機会を開発者に提供します。45,000 USD を超える賞金と独占的な市場参入機会を獲得できるグローバルなコンペであなたの創造性と技術力を披露するチャンスをお見逃しなく。</p> \n<p>9 月 22 日週のリリースから、役に立つ機能やエキサイティングな機能を見つけていただけたでしょうか。AWS では、毎週月曜日にウィークリーレビューを公開して AWS の最新情報を皆さんにお届けしています。このページをブックマークして、10 月 6 日週もまたお会いしましょう!</p> \n<p><a href=\"https://link.codingmatheus.com/linkedin\">Matheus Guimaraes | @codingmatheus</a></p> \n<p>原文は<a href=\"https://aws.amazon.com/jp/blogs/aws/aws-weekly-roundup-amazon-s3-amazon-bedrock-agentcore-aws-x-ray-and-more-september-29-2025/\">こちら</a>です。</p>"
  },
  {
    "title": "vitejs/vite – v7.1.9",
    "date": "2025-10-03T00:41:51.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.9",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.9/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "【AWS Skill Builder】スキルプロファイル を利用して AWS の学習成果を共有しましょう",
    "date": "2025-10-02T23:41:28.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/showcase-your-aws-achievements-with-the-new-skills-profile/",
    "content": "<p>本ブログは、2025 年 9 月 23 日に Adam Balest によって執筆された「<a href=\"https://aws.amazon.com/jp/blogs/training-and-certification/showcase-your-aws-achievements-with-the-new-skills-profile/\">Showcase your AWS achievements with the new Skills Profile</a>」を翻訳したものです。</p> \n<p>AWS Training and Certification では、AWS のスキルと成果を共有したい学習者のために、AWS Skill Builder の新機能「スキルプロファイル」の提供を開始しました。これは、AWS 認定、学習成果、デジタルバッジを 1 つの共有可能なプロファイルで紹介する強力な新しい方法です。スキルプロファイルにはカスタマイズ可能な共有オプションがあり、可視性と信頼性を高めながら、学習者それぞれのクラウドスキルを伝えるために使用できます。</p> \n<p>スキルプロファイルは Skill Builder にサインインしている学習者が利用でき、AWS の学習成果を公開できる中心的な場所となります。あなたが意欲的なクラウドプラクティショナーであろうとベテランエキスパートであろうと、あなたのスキルプロファイルはあなたの AWS スキルのショーケースとなり、LinkedIn などのプラットフォームや求人応募で、同僚や採用マネージャーにすぐに共有可能です。</p> \n<blockquote>\n <p><em>「スキルプロファイルでは、AWS の学習過程と、私が身に付けたスキルを簡単に紹介できます。認定資格や学習のマイルストーンをわかりやすい形式で共有できます。スクリーンショットや色々な場所に散らばったリンクは必要ありません。」— AWS Skill Builderの学習者</em></p>\n</blockquote> \n<h3>学習から専門的な評価へ</h3> \n<p>専門的なプラットフォームでのソーシャルラーニングの広がりにより、学習者が信頼性の高い一貫した方法で専門知識を示すことが不可欠になっています。スキルプロファイルは、プライベートな学習記録と、公開される専門的な評価の間のギャップを埋めるものです。</p> \n<p>Skill Builder 内の学習者ダッシュボードはプライベートである一方、スキルプロファイルは公開共有を目的に設計されています。AWS の認定資格、Skill Builder での学習成果、Cloud Quest のバッジ、その他の達成項目などを紹介できます。表示内容を完全にコントロールできるため、自分がプロファイルで共有したい内容を伝えることができます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/02/skill_builder_skills_profile.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166218\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/02/skill_builder_skills_profile.png\" alt=\"\" width=\"842\" height=\"1024\"></a></p> \n<h3>スキル共有を通じたつながりの構築</h3> \n<p>スキルプロファイルは、クラウドの専門知識を可視化し、共有可能にすることで、学習者と組織の双方に新たな価値をもたらします。認証された AWS での実績を共有することで、新たな職業的なつながり、コラボレーション、キャリアの機会への扉が開かれます。</p> \n<p>学習者にとっては、熱心に培ってきたスキルを示す手段となり、組織や採用担当者にとっては、クラウド人材を発見し検証するための信頼できる情報源となります。これらの共有プロファイルにより、スキルを持つ専門家と、現在および将来の機会との間により強固なつながりが生まれます。</p> \n<p>今後、スキルプロファイルは、特定のスキルや AWS クラウドでの成果に基づいて組織や採用担当者が人材を発見するのを助ける機能に加えて、さらに多くの共有可能な実績を含むように拡張される予定です。</p> \n<h3>スキルプロファイルの始め方</h3> \n<p>スキルプロファイルを使い始めるには、AWS Skill Builder にサインインし、画面右上の「アカウント」より「プロフィール」に移動し、スキルプロファイルを作成・カスタマイズします。そこから、表示する実績を選択し、ヘッドライン (オプション) を挿入して、プロファイルのリンクをネットワークと共有できます。</p> \n<p>次の役職に就くことを目指している場合でも、最近の認定資格を紹介したい場合でも、AWS で学んだことを誇りを持って共有したい場合でも、スキルプロファイルを使用して自分のクラウド専門知識を世界に共有できます。</p> \n<p>あなたの AWS ストーリーを共有する準備はできましたか ? 今すぐ AWS Skill Builder にサインインして、スキルプロファイルを作成しましょう !</p> \n<hr> \n<p>翻訳は Technical Instructor の 室橋 弘和 が担当しました。</p>"
  },
  {
    "title": "ターミナル派待望の GitHub Copilot CLI 使い方まとめ",
    "date": "2025-10-02T23:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/10q89s/articles/4a42fb779fde89",
    "content": "こんにちは、URBAN HACKS サーバーサイドエンジニアの池田です。\n2025/9/25に GitHub Copilot CLI が public preview 版で登場しました！\n業務で GitHub Copilot をメインに使っている私にとっては待望の CLI です！\nhttps://github.blog/changelog/2025-09-25-github-copilot-cli-is-now-in-public-preview/\nなお、GitHub Copilot CLI は以下の有料プランで利用可能です。\n\nGitHub Copilot Pro\nGitHub Cop..."
  },
  {
    "title": "浮動小数点数に1を掛ける操作は最適化できるか／浮動小数点数のビット列表現のカノニカル性について",
    "date": "2025-10-02T13:14:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mod_poppo/articles/floating-point-canonicity",
    "content": "浮動小数点数に1を掛ける関数を考えます：\nvoid multiply_one(double *x)\n{\n    static const volatile double one = 1.0;\n    *x *= one;\n}\n数学的には、この関数は入力をそのまま返す関数（恒等関数）です。浮動小数点数の場合はどうでしょうか？特に、この関数は、入力として与えられた浮動小数点数のビット列表現を変えるでしょうか？\n多くの人は「変えないでしょ」「変わったとしても違いは重要じゃない」と思われるかもしれませんが、これはコンパイラーの最適化を考える上では重要な問題になります。もちろん、「浮動小数点数の細..."
  },
  {
    "title": "エンジニアになって1年目に読み終わった本を振り返る",
    "date": "2025-10-02T12:22:52.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/prevent/articles/9fa89a131f765f",
    "content": "\n はじめに\nこんにちは！PREVENTで働いているバックエンドエンジニアのとぴ（@topi_log）と申します！\n2024年10月にPREVENTにジョインしてから丸っと1年が経ちました。月日が経つのは早いですね。\n良い区切りなので、この1年で読んだ本を振り返りながらまとめました。\n\n 読み終わった本たち\nざっくりグループ分けしてみました（AIが）\nそれぞれ簡単に読んだ感想も添えていきます。\n\n ビジネス・コンサルティング\n\n コンサル一年目が学ぶこと 新人・就活生からベテラン社員まで一生役立つ究極のベーシックスキル30選\nhttps://amzn.asia/d/gToV8TS\nコンサ..."
  },
  {
    "title": "Vue3 + TypeScript で「一度閉じたら二度と出ない」お知らせモーダルを実装する",
    "date": "2025-10-02T09:56:59.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/hi_kun0912/articles/046fde28d0133e",
    "content": "\n対象読者\n\nVue 3（Composition API）と TypeScript でモーダルを実装したい人\n「一度閉じたら同端末では再表示しない」を安定して実現したい人\nBlade 等のサーバテンプレートからユーザーIDをフロントに渡したい人\nSafari のプライベートブラウズなどで localStorage が使えない場合にも“既読管理”を効かせたい人\n\n\nこの記事では、「初回だけ出す → 閉じたら次回以降は出さない」 告知モーダルを、最小の責務分割で実装します。\nlocalStorage が使えない環境でも Cookie にフォールバックして安定動作させるのがポイントです。\n※ ..."
  },
  {
    "title": "vitejs/vite – v7.1.8",
    "date": "2025-10-02T06:15:47.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.8",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.8/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – create-vite@8.0.2",
    "date": "2025-10-02T05:51:22.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/create-vite%408.0.2",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/create-vite@8.0.2/packages/create-vite/CHANGELOG.md) for details."
  },
  {
    "title": "物体検出モデルの推論高速化入門",
    "date": "2025-10-02T03:43:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/eversteel_tech/articles/51f9b749b8f051",
    "content": "\n はじめに\n株式会社EVERSTEELで機械学習エンジニアをしている加藤です。\n機械学習システムの運用において、推論の高速化は重要な課題です。特にリアルタイムでの処理が求められるアプリケーションでは、レスポンス時間の短縮がユーザー体験に直結します。また、クラウド環境のコスト削減やエッジデバイスのリソース制約など、様々な観点から推論の効率化が必要とされます。\n本記事では特に物体検出モデルのCPU推論に焦点を当て、ディープラーニングモデルの推論を高速化する方法を紹介するとともに、それらのベンチマーク結果を共有します。\n\n 「鉄ナビ検収AI」における推論高速化ニーズ\n弊社では鉄スクラップの画..."
  },
  {
    "title": "Claude Code卒業！GitHub Copilotに乗り換えます！",
    "date": "2025-10-02T03:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/flinters_blog/articles/db9e9e90ea8dde",
    "content": "\n 【導入】 すべての始まりは、一枚の「AI利用ランキング」だった\nこんにちは、FLINTERS新卒エンジニアの野崎です。\n突然ですが、皆さんはAIコーディングツール、活用していますか？\n僕は8月頃から使えるようになった「Claude Code」にドハマりし、まさに\"ゴリゴリ使い倒す\"日々を送っていました。アイデアを壁打ちすれば設計のヒントをくれ、エラーコードを投げれば一瞬で解決策を示してくれる。まるで魔法使いのようなその力に、僕は完全に心酔していました。\nしかし、そんな僕にある転機が訪れます。毎月発表される社内のAI利用状況レポートで、なんと僕が Claude Code利用者ランキング..."
  },
  {
    "title": "facebook/react – 19.2.0 (Oct 1, 2025)",
    "date": "2025-10-01T21:50:48.000Z",
    "source": "GitHub",
    "url": "https://github.com/facebook/react/releases/tag/v19.2.0",
    "content": "Below is a list of all new features, APIs, and bug fixes.\r\n\r\nRead the [React 19.2 release post](https://react.dev/blog/2025/10/01/react-19-2) for more information.\r\n\r\n## New React Features\r\n\r\n- [`<Activity>`](https://react.dev/reference/react/Activity): A new API to hide and restore the UI and internal state of its children.\r\n- [`useEffectEvent`](https://react.dev/reference/react/useEffectEvent) is a React Hook that lets you extract non-reactive logic into an [Effect Event](https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event).\r\n- [`cacheSignal`](https://react.dev/reference/react/cacheSignal) (for RSCs) lets your know when the `cache()` lifetime is over.\r\n- [React Performance tracks](https://react.dev/reference/developer-tooling/react-performance-tracks) appear on the Performance panel’s timeline in your browser developer tools\r\n\r\n## New React DOM Features\r\n\r\n- Added resume APIs for partial pre-rendering with Web Streams:\r\n  - [`resume`](https://react.dev/reference/react-dom/server/resume): to resume a prerender to a stream.\r\n  - [`resumeAndPrerender`](https://react.dev/reference/react-dom/static/resumeAndPrerender): to resume a prerender to HTML.\r\n- Added resume APIs for partial pre-rendering with Node Streams:\r\n  - [`resumeToPipeableStream`](https://react.dev/reference/react-dom/server/resumeToPipeableStream): to resume a prerender to a stream.\r\n  - [`resumeAndPrerenderToNodeStream`](https://react.dev/reference/react-dom/static/resumeAndPrerenderToNodeStream): to resume a prerender to HTML.\r\n- Updated [`prerender`](https://react.dev/reference/react-dom/static/prerender) APIs to return a `postponed` state that can be passed to the `resume` APIs.\r\n\r\n## Notable changes\r\n\r\n- React DOM now batches suspense boundary reveals, matching the behavior of client side rendering. This change is especially noticeable when animating the reveal of Suspense boundaries e.g. with the upcoming `<ViewTransition>` Component. React will batch as much reveals as possible before the first paint while trying to hit popular first-contentful paint metrics.\r\n- Add Node Web Streams (`prerender`, `renderToReadableStream`) to server-side-rendering APIs for Node.js\r\n- Use underscore instead of `:` IDs generated by useId\r\n\r\n## All Changes\r\n\r\n### React\r\n\r\n- `<Activity />` was developed over many years, starting before `ClassComponent.setState` (@acdlite @sebmarkbage and many others)\r\n- Stringify context as \"SomeContext\" instead of \"SomeContext.Provider\" (@kassens [#33507](https://github.com/facebook/react/pull/33507))\r\n- Include stack of cause of React instrumentation errors with `%o` placeholder (@eps1lon [#34198](https://github.com/facebook/react/pull/34198))\r\n- Fix infinite `useDeferredValue` loop in popstate event (@acdlite [#32821](https://github.com/facebook/react/pull/32821))\r\n- Fix a bug when an initial value was passed to `useDeferredValue` (@acdlite [#34376](https://github.com/facebook/react/pull/34376))\r\n- Fix a crash when submitting forms with Client Actions (@sebmarkbage [#33055](https://github.com/facebook/react/pull/33055))\r\n- Hide/unhide the content of dehydrated suspense boundaries if they resuspend (@sebmarkbage [#32900](https://github.com/facebook/react/pull/32900))\r\n- Avoid stack overflow on wide trees during Hot Reload (@sophiebits [#34145](https://github.com/facebook/react/pull/34145))\r\n- Improve Owner and Component stacks in various places (@sebmarkbage, @eps1lon: [#33629](https://github.com/facebook/react/pull/33629), [#33724](https://github.com/facebook/react/pull/33724), [#32735](https://github.com/facebook/react/pull/32735), [#33723](https://github.com/facebook/react/pull/33723))\r\n- Add `cacheSignal` (@sebmarkbage [#33557](https://github.com/facebook/react/pull/33557))\r\n\r\n### React DOM\r\n\r\n- Block on Suspensey Fonts during reveal of server-side-rendered content (@sebmarkbage [#33342](https://github.com/facebook/react/pull/33342))\r\n- Use underscore instead of `:` for IDs generated by `useId` (@sebmarkbage, @eps1lon: [#32001](https://github.com/facebook/react/pull/32001), [https://github.com/facebook/react/pull/33342](https://github.com/facebook/react/pull/33342)[#33099](https://github.com/facebook/react/pull/33099), [#33422](https://github.com/facebook/react/pull/33422))\r\n- Stop warning when ARIA 1.3 attributes are used (@Abdul-Omira [#34264](https://github.com/facebook/react/pull/34264))\r\n- Allow `nonce` to be used on hoistable styles (@Andarist [#32461](https://github.com/facebook/react/pull/32461))\r\n- Warn for using a React owned node as a Container if it also has text content (@sebmarkbage [#32774](https://github.com/facebook/react/pull/32774))\r\n- s/HTML/text for for error messages if text hydration mismatches (@rickhanlonii [#32763](https://github.com/facebook/react/pull/32763))\r\n- Fix a bug with `React.use` inside `React.lazy`\\-ed Component (@hi-ogawa [#33941](https://github.com/facebook/react/pull/33941))\r\n- Enable the `progressiveChunkSize` option for server-side-rendering APIs (@sebmarkbage [#33027](https://github.com/facebook/react/pull/33027))\r\n- Fix a bug with deeply nested Suspense inside Suspense fallback when server-side-rendering (@gnoff [#33467](https://github.com/facebook/react/pull/33467))\r\n- Avoid hanging when suspending after aborting while rendering (@gnoff [#34192](https://github.com/facebook/react/pull/34192))\r\n- Add Node Web Streams to server-side-rendering APIs for Node.js (@sebmarkbage [#33475](https://github.com/facebook/react/pull/33475))\r\n\r\n### React Server Components\r\n\r\n- Preload `<img>` and `<link>` using hints before they're rendered (@sebmarkbage [#34604](https://github.com/facebook/react/pull/34604))\r\n- Log error if production elements are rendered during development (@eps1lon [#34189](https://github.com/facebook/react/pull/34189))\r\n- Fix a bug when returning a Temporary reference (e.g. a Client Reference) from Server Functions (@sebmarkbage [#34084](https://github.com/facebook/react/pull/34084), @denk0403 [#33761](https://github.com/facebook/react/pull/33761))\r\n- Pass line/column to `filterStackFrame` (@eps1lon [#33707](https://github.com/facebook/react/pull/33707))\r\n- Support Async Modules in Turbopack Server References (@lubieowoce [#34531](https://github.com/facebook/react/pull/34531))\r\n- Add support for .mjs file extension in Webpack (@jennyscript [#33028](https://github.com/facebook/react/pull/33028))\r\n- Fix a wrong missing key warning (@unstubbable [#34350](https://github.com/facebook/react/pull/34350))\r\n- Make console log resolve in predictable order (@sebmarkbage [#33665](https://github.com/facebook/react/pull/33665))\r\n\r\n### React Reconciler\r\n\r\n- [createContainer](https://github.com/facebook/react/blob/v19.2.0/packages/react-reconciler/src/ReactFiberReconciler.js#L255-L261) and [createHydrationContainer](https://github.com/facebook/react/blob/v19.2.0/packages/react-reconciler/src/ReactFiberReconciler.js#L305-L312) had their parameter order adjusted after `on*` handlers to account for upcoming experimental APIs\r\n\r\n## eslint-plugin-react-hooks@6.1.0\r\n\r\n**Note:** Version 6.0.0 was mistakenly released and immediately deprecated and untagged on npm. This is the first official 6.x major release and includes breaking changes. \r\n\r\n- **Breaking:** Require Node.js 18 or newer. ([@michaelfaith](https://github.com/michaelfaith) in [#32458](https://github.com/facebook/react/pull/32458))\r\n- **Breaking:** Flat config is now the default `recommended` preset. Legacy config moved to `recommended-legacy`. ([@michaelfaith](https://github.com/michaelfaith) in [#32457](https://github.com/facebook/react/pull/32457))\r\n- **New Violations:** Disallow calling `use` within try/catch blocks. ([@poteto](https://github.com/poteto) in [#34040](https://github.com/facebook/react/pull/34040))\r\n- **New Violations:** Disallow calling `useEffectEvent` functions in arbitrary closures. ([@jbrown215](https://github.com/jbrown215) in [#33544](https://github.com/facebook/react/pull/33544))\r\n- Handle `React.useEffect` in addition to `useEffect` in rules-of-hooks. ([@Ayc0](https://github.com/Ayc0) in [#34076](https://github.com/facebook/react/pull/34076))\r\n- Added `react-hooks` settings config option that to accept `additionalEffectHooks` that are used across exhaustive-deps and rules-of-hooks rules. ([@jbrown215](https://github.com/jbrown215)) in [#34497](https://github.com/facebook/react/pull/34497)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9",
    "date": "2025-10-01T20:37:10.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9.2",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n* *No specific changes for TypeScript 5.9.2 (Stable)*\r\n\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9 RC",
    "date": "2025-10-01T20:35:11.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9-rc",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9-rc/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9 Beta",
    "date": "2025-10-01T20:32:50.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9-beta",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9-beta/).\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.8.3",
    "date": "2025-10-01T20:29:30.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.8.3",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/).\r\n\r\n* [fixed issues query for Typescript 5.8.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.1%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.2 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.2%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.3 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.3%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9.3",
    "date": "2025-10-01T19:06:07.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9.3",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n* *No specific changes for TypeScript 5.9.2 (Stable)*\r\n* [fixed issues query for Typescript 5.9.3 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.3%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  }
]