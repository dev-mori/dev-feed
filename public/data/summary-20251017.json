[
  {
    "title": "vercel/next.js – v16.0.0-canary.11",
    "date": "2025-10-17T18:43:44.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.11",
    "content": "### Core Changes\n\n- Relax default.tsx validation for parallel routes leaf segments: #84767\n- Add codemod for removing `unstable_` prefix: #84974\n- Interception routes match from nested route navigation: #84898\n- [Cache Components] Allow unstable prefix for cacheLife and cacheTag: #84934\n- Add codemod for removing `experimental_ppr`: #84979\n- fix: throw error during build when invalid export for Proxy: #84886\n- [cache components]: prevent expired entries from being served: #84975\n- Delete old prefetch cache related code: #84977\n- docs: Deprecation of Middleware: #84710\n\n### Misc Changes\n\n- Docs/sync with new features 0: #84861\n- Turbopack: transpile runtime with swc: #84931\n- docs: x-nextjs-stale-time header: #84901\n- docs: Templates on navigation: #84493\n- chore: Attempt to fix ppr-partial-hydration flakiness: #84672\n- Update Rspack production test manifest: #84939\n- Turbopack: rename Persistent Caching: #84896\n- Turbopack: Add ChunkedVec test case: #84756\n- docs: Add missing codemod docs: #84980\n- Update prefetching.mdx providing more clarity on the usage of `router.prefetch()`: #84903\n- docs: getting started installation and next lint removal: #84781\n- docs: Split \"Get Started: Route Handlers and Middleware\" to Route Handlers and Proxy: #84708\n- docs: Replace Middleware docs to Proxy: #84709\n- chore: Remove redundant copy of rust reqwest crate: #84982\n- [turbopack] Allow withRspack to work even if you already have NEXT_RSPACK set: #84987\n\n### Credits \n\nHuge thanks to @icyJoseph, @wyattjoh, @mischnic, @devjiwonchoi, @gnoff, @bgw, @vercel-release-bot, @sokra, @ztanner, @acdlite, @hallucinogenizer, and @lukesandberg for helping!\n"
  },
  {
    "title": "Amazon EBS ボリュームクローンのご紹介: EBS ボリュームのインスタントコピーを作成",
    "date": "2025-10-17T12:46:42.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/introducing-amazon-ebs-volume-clones-create-instant-copies-of-your-ebs-volumes/",
    "content": "<p><a href=\"https://en.wikipedia.org/wiki/ZFS\">ZFS</a> が発明された <a href=\"https://en.wikipedia.org/wiki/Sun_Microsystems\">Sun Microsystems</a> で勤務していた私は、開発やテストのニーズに合わせてインスタントボリュームコピーを提供するストレージシステムを使用するのが好きでした。</p> \n<p>10 月 14 日、AWS が Amazon EBS ボリュームクローンのリリースによって同様の機能を <a href=\"https://aws.amazon.com/ebs/\">Amazon Elastic Block Store (Amazon EBS)</a> に搭載したとお伝えできることを嬉しく思います。これは、同一アベイラビリティーゾーン内で EBS ボリュームのポイントインタイムコピーを瞬時に作成できる新機能です。</p> \n<p>多くのお客様は、個別の非本番環境での開発およびテスト作業をサポートするために、本番データのコピーを作成する必要があります。これまで、このプロセスでは (<a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a> に保存されている) EBS スナップショットを取得し、そのスナップショットから新しいボリュームを作成する必要がありました。このアプローチは有効ですが、このプロセスでは複数のステップが原因で運用上のオーバーヘッドが発生します。</p> \n<p>Amazon EBS ボリュームクローンを使用すると、1 回の API コールまたはコンソールクリックで EBS ボリュームのコピーを作成できるようになりました。コピーされたボリュームは数秒で使用可能になり、1 桁ミリ秒のレイテンシーでデータにすぐアクセスできます。そのため、ボリュームクローンは、本番データを使用したテスト環境を迅速にセットアップしたり、開発目的でデータベースの一時的なコピーを作成したりする場合に特に役立ちます。</p> \n<p><strong><span style=\"text-decoration: underline\">ボリュームクローンの仕組みのご紹介</span><br> </strong>この記事では、ボリュームがアタッチされた小規模な <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> インスタンスを作成しました。<code>echo \"Hello CopyVolumes\" &gt; hello.txt</code> コマンドを使用して、ルートファイルシステムにファイルを作成しました。</p> \n<p>コピーを開始するには、<a href=\"https://console.aws.amazon.com\">AWS マネジメントコンソール</a>でブラウザを開き、<strong>[EC2]</strong>、<strong>[Elastic Block Store]</strong>、<strong>[ボリューム]</strong> に移動します。コピーするボリュームを選択します。</p> \n<p>この記事の公開時点では、暗号化されたボリュームしかコピーできないことに注意してください。</p> \n<p><strong>[アクション]</strong> メニューで、<strong>[ボリュームをコピー]</strong> オプションを選択します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/07/2025-10-06_15-35-57.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99703\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/07/2025-10-06_15-35-57.png\" alt=\"ボリュームをコピー – 開始\" width=\"800\" height=\"433\"></a></p> \n<p>次に、ターゲットボリュームの詳細を選択します。<strong>[ボリュームタイプ]</strong> を変更し、<strong>[サイズ]</strong>、<strong>[IOPS]</strong>、<strong>[スループット]</strong> パラメータを調整できます。<strong>[ボリュームをコピー]</strong> を選択して、ボリュームクローンの操作を開始します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/07/2025-10-06_15-36-22.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99707\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/07/2025-10-06_15-36-22.png\" alt=\"ボリュームをコピー – パラメータ\" width=\"800\" height=\"807\"></a></p> \n<p>コピーされたボリュームは <strong>[作成中]</strong> 状態になり、数秒以内に使用可能になります。それを EC2 インスタンスにアタッチして、すぐに使用を開始できます。</p> \n<p>データブロックはソースボリュームからコピーされ、バックグラウンドでボリュームコピーに書き込まれます。処理が完了するまで、ボリュームは <strong>[初期化]</strong> 状態のままです。<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumeStatus.html\"><code>describe-volume-status</code> API</a> を使用して、進行状況を監視できます。初期化操作はソースボリュームのパフォーマンスに影響しません。コピー処理中も通常どおり使用できます。</p> \n<p>私は、コピーしたボリュームをすぐに使用できることが気に入っています。初期化が完了するのを待つ必要はありません。初期化フェーズでは、コピーしたボリュームのパフォーマンスは、3,000 IOPS と 125 MiB/s のベースライン、ソースボリュームのプロビジョニングされたパフォーマンス、またはコピーされたボリュームのプロビジョニングされたパフォーマンスのうち、最も低い値に基づいて提供されます。</p> \n<p>初期化が完了すると、コピーされたボリュームはソースボリュームから完全に独立し、フルプロビジョニングされたパフォーマンスを発揮します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/07/2025-10-07_11-12-41.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99710\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/07/2025-10-07_11-12-41.png\" alt=\"ボリュームをコピー – 初期化\" width=\"800\" height=\"310\"></a>または、<a href=\"https://aws.amazon.com/cli/\">AWS コマンドラインインターフェイス (AWS CLI)</a> を使用してコピーを開始することもできます。</p> \n<pre><code class=\"lang-bash\">aws ec2 copy-volumes                          \\\n     --source-volume-id vol-1234567890abcdef0 \\\n     --size 500                               \\\n     --volume-type gp3</code></pre> \n<p>ボリュームコピーを作成したら、それを EC2 インスタンスにアタッチしてマウントします。起動時に作成したファイルが存在することを確認できます。</p> \n<p>まず、<code>attach-volume</code> コマンドを使用して、ノートパソコンからボリュームをアタッチします。</p> \n<pre><code class=\"lang-bash\">aws ec2 attach-volume \\\n         --volume-id 'vol-09b700e3a23a9b4ad' \\\n         --instance-id 'i-079e6504ad25b029e'   \\\n         --device '/dev/sdb'</code></pre> \n<p>次に、インスタンスに接続し、以下のコマンドを入力します。</p> \n<pre><code class=\"lang-bash\">$ sudo lsblk -f\nNAME          FSTYPE FSVER LABEL UUID                                 FSAVAIL FSUSE% MOUNTPOINTS\nnvme0n1                                                                              \n├─nvme0n1p1   xfs          /     49e26d9d-0a9d-4667-b93e-a23d1de8eacd    6.2G    22% /\n└─nvme0n1p128 vfat   FAT16       3105-2F44                               8.6M    14% /boot/efi\nnvme1n1                                                                              \n├─nvme1n1p1   xfs          /     49e26d9d-0a9d-4667-b93e-a23d1de8eacd                \n└─nvme1n1p128 vfat   FAT16       3105-2F44     \n\n$ sudo mount -t xfs /dev/nvme1n1p1 /data\n\n$ df -h\nFilesystem        Size  Used Avail Use% Mounted on\ndevtmpfs          4.0M     0  4.0M   0% /dev\ntmpfs             924M     0  924M   0% /dev/shm\ntmpfs             370M  476K  369M   1% /run\n/dev/nvme0n1p1    8.0G  1.8G  6.2G  22% /\ntmpfs             924M     0  924M   0% /tmp\n/dev/nvme0n1p128   10M  1.4M  8.7M  14% /boot/efi\ntmpfs             185M     0  185M   0% /run/user/1000\n/dev/nvme1n1p1    8.0G  1.8G  6.2G  22% /data\n\n$ cat /data/home/ec2-user/hello.txt \nHello CopyVolumes</code></pre> \n<p><strong><span style=\"text-decoration: underline\">知っておくべきこと<br> </span></strong>ボリュームクローンは、ソースボリュームと同じアベイラビリティーゾーン内にコピーを作成します。コピーは暗号化されたボリュームからのみ作成することができ、コピーのサイズはソースボリュームと同じかそれより大きい必要があります。</p> \n<p>ボリュームクローンは、スナップショットとまったく同じように、ボリュームの Crash-consistent コピーを作成します。アプリケーションの整合性を保つには、コピーを作成する前にアプリケーションの I/O 操作を一時停止する必要があります。例えば、PostgreSQL データベースでは、<code>pg_start_backup ()</code> 関数と <code>pg_stop_backup ()</code> 関数を使用して書き込みを一時停止し、一貫性のあるコピーを作成できます。XFS 搭載の Linux のオペレーティングシステムレベルでは、<code>xfs_freeze</code> コマンドを使用してファイルシステムへのアクセスを一時的に中断および再開し、キャッシュされたすべての更新がディスクに書き込まれるようにすることができます。</p> \n<p>ボリュームクローンはポイントインタイムコピーを作成しますが、バックアップ目的で EBS スナップショットを置き換えるのではなく、補完するものです。データバックアップと AZ レベルおよびボリューム障害からの保護としては、引き続き EBS スナップショットが推奨のソリューションです。EBS ボリュームの耐久性 (io2 では 99.999%、その他のボリュームタイプでは 99.9%) を維持するボリュームクローンと比較して、スナップショットは Amazon S3 への増分バックアップを 99.999999999% の耐久性で提供します。特に、ボリュームコピーへの即時アクセスが必要なテスト環境と開発環境のシナリオでは、ボリュームクローンの使用をご検討ください。</p> \n<p>コピーされたボリュームはソースボリュームから独立して存在し、削除するまで標準の EBS ボリューム料金が引き続き発生します。コストを効果的に管理するには、ガバナンスルールを導入し、開発またはテストアクティビティで不要になったコピーされたボリュームを特定して削除してください。</p> \n<p><span style=\"text-decoration: underline\"><strong>料金と利用可能なリージョン<br> </strong></span>ボリュームクローンはすべての EBS ボリュームタイプをサポートし、同一の AWS アカウントおよびアベイラビリティーゾーンのボリュームで動作します。この新機能は、すべての AWS 商用<a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">リージョン</a>、一部の<a href=\"https://aws.amazon.com/about-aws/global-infrastructure/localzones/locations/\">ローカルゾーン</a>、<a href=\"https://aws.amazon.com/govcloud-us/\">AWS GovCloud (米国)</a> でご利用いただけます。</p> \n<p>料金については、開始時にソースボリュームのデータの GiB あたり 1 回限りの料金が請求され、新しいボリュームには標準 EBS 料金が請求されます。</p> \n<p>ボリュームクローンは、データベースワークロードや継続的インテグレーション (CI) シナリオで特に役立つと思います。例えば、本番環境に影響を与えたり、Amazon S3 からデータがハイドレートされるのを待ったりすることなく、新しい特徴量のテストや問題のトラブルシューティングを行うために、本番環境のデータベースのコピーをすばやく作成できます。</p> \n<p>Amazon EBS ボリュームクローンの使用を開始するには、<a href=\"https://console.aws.amazon.com/ec2/home#Volumes:\">コンソールの Amazon EBS セクション</a>にアクセスするか、<a href=\"https://docs.aws.amazon.com/ebs/latest/userguide/ebs-copying-volume.html\">EBS ドキュメント</a>をご覧ください。この機能を使用して開発ワークフローを改善した方法についてお伺いすることを楽しみにしています。</p> \n<p><a href=\"https://linktr.ee/sebsto\">– seb</a></p> \n<p>原文は<a href=\"https://aws.amazon.com/jp/blogs/aws/introducing-amazon-ebs-volume-clones-create-instant-copies-of-your-ebs-volumes/\">こちら</a>です。</p>"
  },
  {
    "title": "AWS Transfer Family SFTP コネクタが VPC ベースの接続をサポート",
    "date": "2025-10-17T10:13:29.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-transfer-family-sftp-connectors-now-support-vpc-based-connectivity/",
    "content": "<p>重要なビジネスデータを交換するための業界標準として、多数の組織が<a href=\"https://aws.amazon.com/what-is/sftp/\">Secure File Transfer Protocol (SFTP)</a> に頼っています。従来、プライベート SFTP サーバーへのセキュアな接続には、カスタムインフラストラクチャ、手作業によるスクリプト作成、パブリックインターネットへのエンドポイントの公開が欠かせませんでした。</p> \n<p>10 月 14 日から、<a href=\"https://aws.amazon.com/aws-transfer-family/\">AWS Transfer Family</a> <a href=\"https://docs.aws.amazon.com/transfer/latest/userguide/creating-connectors.html\">SFTP コネクタ</a>が <a href=\"https://aws.amazon.com/vpc/?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">Amazon Virtual Private Cloud (Amazon VPC)</a> 環境経由でのリモート SFTP サーバーへの接続をサポートするようになりました。<a href=\"https://aws.amazon.com/s3/?nc2=type_a&amp;?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">Amazon Simple Storage Service (Amazon S3)</a> とプライベートまたはパブリック SFTP サーバー間でのファイル転送を、お使いの VPC で既に定義されているセキュリティコントロールとネットワーク設定を適用しながら実行できます。この機能は、オンプレミス環境、パートナーホスト型プライベートサーバー、またはインターネットに接続するエンドポイントの全体でデータソースを統合するために役立ち、フルマネージド型の <a href=\"https://aws.amazon.com/\">Amazon Web Services (AWS)</a> サービスのシンプルな運用性を備えています。</p> \n<p><strong><u>SFTP コネクタによる新機能<br> </u></strong>以下が主な機能強化になります。</p> \n<ul> \n <li><strong>プライベート SFTP サーバーへの接続</strong> – SFTP コネクタは、AWS VPC 接続内でしかアクセスできないエンドポイントに到達できるようになりました。これらのエンドポイントには、VPC または共有 VPC でホストされるサーバー、<a href=\"https://aws.amazon.com/directconnect/?nc2=type_a&amp;?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS Direct Connect</a> 経由で接続されるオンプレミスシステム、VPN トンネル経由で接続されるパートナーホスト型サーバーなどがあります。</li> \n <li><strong>セキュリティとコンプライアンス</strong> – すべてのファイル転送は、VPC で既に適用されているセキュリティコントロール (<a href=\"https://aws.amazon.com/network-firewall/?nc2=h_prod_se_netf&amp;?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS Network Firewall</a> や、一元化されたイングレスおよびエグレスインスペクションなど) を経由してルーティングされます。プライベート SFTP サーバーはプライベートのまま維持されるため、インターネットに公開する必要はありません。パートナーの許可リスト要件を満たすために、静的 Elastic IP や Bring-Your-Own-IP (BYOIP) のアドレスを提示することも可能です。</li> \n <li><strong>パフォーマンスとシンプルさ</strong> – NAT ゲートウェイ、AWS Direct Connect、VPN 接続などの独自のネットワークリソースを使用することで、コネクタは大規模な転送のためにより多くの帯域幅容量を利用できるようになります。コネクタの設定は、<a href=\"https://console.aws.amazon.com/?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS マネジメントコンソール</a>、<a href=\"https://aws.amazon.com/cli/?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS コマンドラインインターフェイス (AWS CLI)</a>、または <a href=\"https://aws.amazon.com/tools/?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS SDK</a> を使用して数分で完了でき、カスタムスクリプトを作成したりサードパーティツールを構築したりする必要はありません。</li> \n</ul> \n<p><strong><u>VPC ベースの SFTP 接続の仕組み<br> </u></strong>SFTP コネクタは、VPC 経由でセキュアな接続を確立するために <a href=\"https://aws.amazon.com/vpc/lattice/\">Amazon VPC Lattice</a> リソースを使用します。&nbsp;主なコンストラクトには、<strong>リソース設定</strong>と<strong>リソースゲートウェイ</strong>が含まれます。リソース設定はターゲット SFTP サーバーを表すもので、プライベート IP アドレスやパブリック DNS 名を使用して指定します。リソースゲートウェイは SFTP コネクタがこれらの設定にアクセスできるようにして、ファイル転送が VPC とそのセキュリティコントロールを経由して行われるようにします。</p> \n<p>以下は、Amazon S3 とリモート SFTP サーバー間のトラフィックフローを説明するアーキテクチャ図です。<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/02/Screenshot-2025-10-02-at-22.53.51.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99633\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/02/Screenshot-2025-10-02-at-22.53.51.png\" alt=\"\" width=\"1968\" height=\"926\"></a>アーキテクチャ図にあるように、Amazon S3 からのトラフィックは SFTP コネクタを経由して VPC に送られます。リソースゲートウェイは、コネクタから VPC リソースへのインバウンド接続を処理するエントリポイントです。アウトバウンドトラフィックは、設定されたエグレスパスを通じてルーティングされます。この場合、パブリックサーバーには Elastic IP がアタッチされた Amazon VPC NAT ゲートウェイが使用され、プライベートサーバーには AWS Direct Connect と VPN 接続が使用されます。VPC CIDR 範囲からの既存の IP アドレスを使用できるため、パートナーサーバーの許可リストが簡略化されます。VPC 内の一元化されたファイアウォールがセキュリティポリシーを適用し、お客様所有の NAT ゲートウェイが大規模な転送のための高帯域幅を提供します。</p> \n<p><strong><u>この特徴量を使用するシナリオ<br> </u></strong>この機能を使用することで、開発者と IT 管理者はさまざまなシナリオのセキュリティ要件とコンプライアンス要件を満たしながらワークフローを簡素化できます。</p> \n<ul> \n <li><strong>ハイブリッド環境</strong> – エンドポイントをインターネットに公開することなく、AWS Direct Connect または <a href=\"https://aws.amazon.com/vpn/site-to-site-vpn/\">AWS Site-to-Site VPN</a> を使用して、Amazon S3 とオンプレミス SFTP サーバー間でのファイル転送を行います。</li> \n <li><strong>パートナー統合</strong> – プライベート VPN トンネルまたは共有 VPC 経由でしかアクセスできないビジネスパートナーの SFTP サーバーに接続します。そうすることで、カスタムスクリプトの作成やサードパーティツールの管理が不要になり、運用に伴う複雑性が軽減されます。</li> \n <li><strong>規制対象業界</strong> – 金融サービス、政府、またはヘルスケアにおけるセキュリティ要件を順守するために、VPC 内の一元化されたファイアウォールとインスペクションポイント経由でファイル転送のルーティングを行います。</li> \n <li><strong>高スループット転送</strong> – Elastic IP や BYOIP を用いた NAT ゲートウェイ、AWS Direct Connect、VPN 接続などの独自のネットワーク設定を使用して、パートナーの許可リストに既に存在する IP アドレスを保持しながら、大規模な高帯域幅転送を処理します。</li> \n <li><strong>統合ファイル転送ソリューション</strong> – Transfer Family で内部と外部両方の SFTP 接続を標準化し、ファイル転送ツール全体での断片化を低減します。</li> \n</ul> \n<p><strong><u>SFTP コネクタを使用した構築の開始<br> </u></strong>SFTP コネクタを使用した VPC 環境経由のファイル転送を開始するには、以下の手順を実行します。</p> \n<p>まず、VPC Lattice リソースを設定します。<a href=\"https://us-east-1.console.aws.amazon.com/vpcconsole/home/?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">Amazon VPC コンソール</a>のナビゲーションペインにある [<strong>PrivateLink と Lattice</strong>] で [<strong>リソースゲートウェイ</strong>] を選択してから [<strong>リソースゲートウェイを作成</strong>] を選択して、VPC へのイングレスポイントとして機能するリソースゲートウェイを作成します。<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/Create-or-select-a-resource-gateway-1.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99586\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/Create-or-select-a-resource-gateway-1.png\" alt=\"\" width=\"3836\" height=\"1074\"></a>次に、ナビゲーションペインの [<strong>PrivateLink と Lattice</strong>] で [<strong>リソース設定</strong>] を選択してから [<strong>リソース設定を作成</strong>] を選択して、ターゲット SFTP サーバー用のリソース設定を作成します。プライベート IP アドレスまたはパブリック DNS 名、およびポート (通常は 22) を指定します。<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/create-resouce-configurations.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99587\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/create-resouce-configurations.png\" alt=\"\" width=\"3838\" height=\"990\"></a></p> \n<p>指定したら、<a href=\"https://aws.amazon.com/iam/?nc2=type_a&amp;?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS Identity and Access Management (IAM)</a> 許可を設定します。コネクタの作成に使用した IAM ロールに <code>transfer:*</code> 許可と VPC Lattice 許可 (<code>vpc-lattice:CreateServiceNetworkResourceAssociation</code>、<code>vpc-lattice:GetResourceConfiguration,</code> <code>vpc-lattice:AssociateViaAWSService</code>) があることを確認します。IAM ロールの信頼ポリシーを更新して、<code>transfer.amazonaws.com</code> を信頼できるプリンシパルとして指定します。そうすることで、SFTP コネクタを作成したり管理したりするときのロールを AWS Transfer Family が引き継げるようになります。</p> \n<p>ロールが引き継がれたら、<a href=\"https://console.aws.amazon.com/transfer/home?refid=30641bb5-5f59-4f87-9a27-a89f5ad26ab6\">AWS Transfer Family&nbsp;コンソール</a>を使用して SFTP コネクタを作成します。[<strong>SFTP コネクタ</strong>] を選択してから、[<strong>SFTP コネクタを作成する</strong>] を選択します。<a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/create-SFTP-connector-1.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99583\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/create-SFTP-connector-1.png\" alt=\"\" width=\"1457\" height=\"331\"></a>[<strong>コネクタの設定</strong>] セクションで [<strong>VPC Lattice</strong>] を出力タイプとして選択してから、[<strong>リソース設定</strong>] の Amazon リソースネーム (ARN)、[<strong>アクセスロール</strong>]、[<strong>コネクタの認証情報</strong>] を指定します。オプションで、セキュリティを強化するための信頼できるホストキーを含めます。または、SFTP サーバーが非標準のポートを使用する場合はデフォルトポートを上書きします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/configure-SFTP-connector-1.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99549\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/09/30/configure-SFTP-connector-1.png\" alt=\"\" width=\"2515\" height=\"971\"></a>次に、接続をテストします。[<strong>アクション</strong>] メニューで [<strong>テスト接続</strong>] を選択して、コネクタがターゲット SFTP サーバーに到達できることを確認します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/03/test-SFTP-connector-2.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-99641\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2025/10/03/test-SFTP-connector-2.png\" alt=\"\" width=\"3006\" height=\"608\"></a>最後に、コネクタのステータスが [<strong>アクティブ</strong>] になったら、<code>StartDirectoryListing</code>、<code>StartFileTransfer</code>、<code>StartRemoteDelete</code>、または <code>StartRemoteMove</code> などの Transfer Family API を呼び出すことで、リモート SFTP サーバーとのプログラム的なファイル操作を開始できます。すべてのトラフィックは、IP アドレスやセキュリティコントロールとともに NAT ゲートウェイ、AWS Direct Connect、VPN 接続などの設定済みリソースを使用して、VPC 経由でルーティングされます。</p> \n<p>すべてのオプションと高度なワークフローについては、<a href=\"https://docs.aws.amazon.com/transfer/\">AWS Transfer Family ドキュメント</a>を参照してください。</p> \n<p><strong><u>今すぐご利用いただけます</u></strong></p> \n<p>VPC ベースの接続性を備えた SFTP コネクタは、現在 21 の <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\">AWS リージョン</a>でご利用いただけます。サポートされている AWS リージョンの最新リストについては、<a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?utm_source=chatgpt.com/?trk=ba8b32c9-8088-419f-9258-82e9375ad130&amp;sc_channel=el\">AWS Services by Region</a> を確認してください。これからは、NAT ゲートウェイ、Elastic IP、ネットワークファイアウォールなどの独自の VPC リソースを使用して、プライベート、オンプレミス、またはインターネットに接続されたサーバーに AWS Transfer Family の SFTP コネクタをセキュアに接続できるようになります。</p> \n<p>– <a href=\"https://www.linkedin.com/in/zhengyubin714/\">Betty</a></p> \n<p>原文は<a href=\"https://aws.amazon.com/jp/blogs/aws/aws-transfer-family-sftp-connectors-now-support-vpc-based-connectivity/\">こちら</a>です。</p>"
  },
  {
    "title": "Amazon GameLift Servers でローンチを成功させるためのステップ：開発フェーズ",
    "date": "2025-10-17T08:10:17.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/development-phase-steps-for-successful-launches-on-amazon-gamelift-servers/",
    "content": "<p>本記事は、2025 年 10 月 9 日に公開された <a href=\"https://aws.amazon.com/jp/blogs/gametech/development-phase-steps-for-successful-launches-on-amazon-gamelift-servers/\">Development phase steps for successful launches on Amazon GameLift Servers</a> を日本語に翻訳したものです。翻訳はソリューションアーキテクトの安藤怜央が担当しました。</p> \n<p>マルチプレイヤーゲームの開発において、ゲームサーバーのグローバルなホスティング、スケーリング、監視の効率的な方法について検討されているのではないでしょうか。また、世界中のプレイヤーに最高のゲーム体験を提供するため、セッション配置の最適化についてもお悩みかもしれません。これらすべてを一から構築するのは、かなりの労力を必要とする作業です。</p> \n<p>私たちはグローバルなゲームサーバーホスティングのためのフルマネージド型サービスである <a href=\"https://aws.amazon.com/jp/gamelift/servers/\">Amazon GameLift Servers</a> をお勧めしています。このサービスは、オーケストレーション、グローバルなセッション配置、ゲームセッションライフサイクル管理を担うため、マルチプレイヤーゲームのローンチにおける運用作業とストレスを軽減するのに役立ちます。</p> \n<p>このブログシリーズでは、ゲームローンチを成功させるための準備の重要な考慮事項について説明します。この最初のブログはプリプロダクションで実行すべきアクションに焦点を当て、第 2 部はプリローンチ準備 ( ローンチの 2〜3 ヶ月前 ) に焦点を当てます。これらの推奨事項は、開発初期のインテグレーションからゲームローンチまで数百のゲームスタジオをサポートした経験に基づいています。</p> \n<p>このブログの内容の理解を進めるために、以下の知識があることを想定しています：</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/jp/gamelift/servers/getting-started/\">Amazon GameLift Servers の基本</a>に精通していること</li> \n <li>ゲームエンジンとゲーム開発の知識</li> \n <li>マルチプレイヤーネットワーキング概念の理解</li> \n</ul> \n<p>ゲームローンチの初期計画における 4 つの重要な領域について説明します：</p> \n<ol> \n <li>ゲームサーバーのテストとインスタンスタイプの選択</li> \n <li>ゲームセッションライフサイクル管理の設定</li> \n <li>セッション配置のためのキューとキューイベントの活用</li> \n <li>モニタリング、ログ記録、アラームの設定</li> \n</ol> \n<h2>ゲームサーバーのテストとインスタンスタイプの選択</h2> \n<p>ゲームサーバーのテストは通常、ローカル上でゲームサーバーをテストするところから始まります。ローカルサーバーの動作が確認できたら、次のステップは <a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/fleets-intro.html\">Amazon GameLift Servers フリート</a>にデプロイし、サービス上でパフォーマンスをテストすることです。</p> \n<p>正しいインスタンスタイプとサイズを特定するのに役立つ重要な測定メトリクスは以下の通りです：</p> \n<ol> \n <li>リソース消費量 ( CPU 集約型と比較したメモリ集約型 )</li> \n <li>各インスタンスで実行できるゲームサーバーコンテナまたはプロセスの数</li> \n <li>最大プレイヤー負荷でのインスタンス上のゲームサーバーのパフォーマンス</li> \n</ol> \n<p>このフェーズは小さなフリート、単一リージョンの 1 つのインスタンスでも実行できます。この時点で、リソース分離のために別の開発用 Amazon Web Services ( AWS ) アカウントを作成することをお勧めします。後でテストや本番などの他の環境を追加できます。フリートは非常に線形にスケールアウトするため、実際のテスターやボットクライアントで単一インスタンスを最大プレイヤー負荷にかけることで、ゲームサーバーのパフォーマンスについて良い指標を得ることができます。</p> \n<p>推奨されるフリートタイプは<a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/fleets-intro-containers.html\">コンテナフリート</a>です。コンテナフリートでは、各ゲームサーバーの vCPU とメモリ要件を定義できます。Amazon GameLift Servers は、選択されたインスタンスタイプに可能な限り多くのセッションを自動的に配置します。</p> \n<p>組み込みの <a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/working_with_metrics.html\">Amazon CloudWatch メトリクス</a>は、ゲームサーバーのメモリと CPU 制約を特定するのに役立ちます。このテスト使用データに基づいて調整し、C インスタンスファミリー ( より多くの CPU が必要な場合 ) 、M インスタンスファミリー( メモリと CPU のバランス )、R インスタンスファミリー ( より多くのメモリが必要な場合 ) の中から選択できます。物理シミュレーションは多くの CPU リソースを消費するため、ほとんどのゲームは C インスタンスファミリーまたは M インスタンスファミリーを使用します。</p> \n<p>Amazon GameLift Servers でサポートされている最新世代のインスタンスは、最高の価格パフォーマンスを提供します。ARM ベースの <a href=\"https://docs.aws.amazon.com/ja_jp/prescriptive-guidance/latest/optimize-costs-microsoft-workloads/net-graviton.html\">AWS Graviton インスタンス</a>を活用することで、パフォーマンスをさらに向上させることができます。</p> \n<p>選択したインスタンスタイプに何個のコンテナ ( コンテナフリートの場合 ) またはゲームサーバープロセス ( <a href=\"https://aws.amazon.com/jp/ec2/\">Amazon EC2</a> フリートの場合 ) を配置できるかを決定するには、実際の負荷でテストし、パフォーマンスを監視する必要があります。これは、ゲームをプレイするテストグループ、またはサーバーに接続して事前定義されたスクリプトでゲームを自動的にプレイするヘッドレスボットクライアントのいずれかで実行できます。</p> \n<p>このテストは、クライアントとサーバー間で実際のデータトラフィックが流れる状態で実行する必要があります。サーバー上のローカルボットでシミュレーションをテストするだけでは、パフォーマンスの包括的な全体像を得られないためです。複数のリージョンにボットクライアントや実際のテスターを配置することも、地理的なネットワークトラフィックレイテンシーがパフォーマンスにどのように影響するかをより現実的に理解するのに役立ちます。</p> \n<p>図 1 は、<a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch</a> メトリクスとログを通じてパフォーマンスを監視しながら、ゲームセッションにトラフィックを生成するボットクライアントを示しています。コンテナフリートは自動的にゲームサーバーログを Amazon CloudWatch にプッシュし、Amazon EC2 フリートでは <a href=\"https://github.com/aws-solutions-library-samples/guidance-for-custom-game-backend-hosting-on-aws/tree/main/BackendFeatures/AmazonGameLiftIntegration#amazon-cloudwatch-logs-and-metrics\">CloudWatch Agent を使用</a>してログを CloudWatch にプッシュできます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-1-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-166988 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-1-1.png\" alt=\"\" width=\"1430\" height=\"915\"></a></p> \n<p><em>図 1：ゲームサーバーのパフォーマンステスト</em></p> \n<h2>ゲームセッションライフサイクル管理の設定</h2> \n<p>ゲームサーバープロセスのライフサイクルにはいくつかの重要な要素があり、すべてを考慮することがフリートの健全性を保つために不可欠です。それでは、ゲームサーバーフリートでのセッション管理のシーケンスを詳しく見てみましょう。</p> \n<p>起動時、ゲームサーバープロセスは Amazon GameLift Servers との通信を確立し、ゲームセッションをホストする準備ができていることを報告します。</p> \n<p>ゲームサーバープロセスは以下のサーバー SDK 操作を順番に呼び出します：</p> \n<ol> \n <li>ゲームサーバーの初期化</li> \n <li>サーバー準備完了の通知</li> \n <li>ゲームサーバーヘルスの評価</li> \n <li>ゲームセッションイベントの処理</li> \n <li>ゲームセッションの終了</li> \n</ol> \n<h3>1. ゲームサーバーの初期化</h3> \n<p>サーバーは <code>InitSDK</code> 呼び出しメソッドで開始します。この関数は、サーバープロセスを認証し、Amazon GameLift Servers のオーケストレーションの準備を行います。</p> \n<p>考慮事項：</p> \n<ul> \n <li>Amazon GameLift Servers との通信を速やかに確立するため、サーバープロセスの起動時に最初の呼び出しとして <code>InitSDK</code> を実行してください。</li> \n <li>フリートの監視をサポートし、サイレントな障害を防ぐため、SDK 初期化エラーのログ取得とハンドリングを行ってください。</li> \n</ul> \n<h3>2. サーバー準備完了の通知</h3> \n<p>リソースとゲームロジックがロードされたら、<code>ProcessReady</code> を呼び出して Amazon GameLift Servers にプロセスがゲームセッションをホストする準備ができていることを通知します。この呼び出しでは、ゲームクライアントがゲームセッションに接続するために使用するプロセスの接続情報も報告されます。Amazon GameLift Servers はゲームサーバープロセスのステータスを ACTIVE に更新し、新しいゲームセッションをホストできる状態になります。</p> \n<p>考慮事項：</p> \n<ul> \n <li>すべての初期化が完了した後にのみ <code>ProcessReady</code> を呼び出し、重複した呼び出しを避けてください。</li> \n <li><code>OnStartGameSession</code> や <code>OnHealthCheck</code> などの必要なコールバックをすべて提供し、適切なエラーハンドリングと再試行を実装してください。</li> \n <li>Amazon GameLift Servers コンソールまたは API からセッションログにアクセスできることを確認するため、EC2 フリートで正確なログパスを提供してください。</li> \n</ul> \n<h3>3. ゲームサーバーヘルスの評価</h3> \n<p>サーバープロセスが ACTIVE に設定されると、Amazon GameLift Servers はゲームサーバープロセスからヘルスステータスを要求するため、定期的に <code>OnHealthCheck</code> コールバックを呼び出し始めます。プロセスが unhealthy と報告するか、ヘルスチェックに応答しない場合、サービスはプロセスのアクティブステータスを変更し、新しいプロセスに置き換えます。</p> \n<p>考慮事項：</p> \n<ul> \n <li>サーバー SDK で堅牢な <code>OnHealthCheck</code> コールバックを実装し、true で応答する前にサーバーが健全であることを適切に検証してください。</li> \n</ul> \n<h3>4. ゲームセッションイベントの処理</h3> \n<p>プレイヤーがゲームへの参加を要求すると、ゲームクライアントはバックエンドサービスにリクエストを送信し、新しいセッションを開始するために <code>StartGameSessionPlacement</code> または <code>CreateGameSession</code> を呼び出す場合があります。サービスは利用可能なサーバープロセスをフリートで検索します。見つかると、ゲームセッションを作成し、<code>OnStartGameSession</code> コールバックを呼び出します。サーバーは自身の準備ができたら <code>ActivateGameSession</code> を呼び出し、Amazon GameLift Servers はセッションを PENDING から ACTIVE に更新し、配置を完了します。</p> \n<p>考慮事項：</p> \n<ul> \n <li><code>OnStartGameSession</code> を受信した後にのみプレイヤーが接続するようにしてください。Amazon GameLift Servers は、サーバープロセスが新しいゲームセッションのホストを開始することを望む場合にこのコールバックを呼び出します。これにより、実際にゲームがロードされる前にサーバーへの接続を試みることによって発生する問題を減らすことができます。</li> \n <li>ゲームマップやその他の設定を適切にセットアップし、セッションをホストする完全な準備ができてから、<code>OnStartGameSession</code> コールバック内で <code>ActivateGameSession</code> を呼び出してください。<code>ActivateGameSession</code> を呼び出すことで、サーバーが新しいゲームセッションをホストするための初期化を完了し、プレイヤー接続を確立するための着信トラフィックを受信する準備ができたことを Amazon GameLift サービスに通知します。</li> \n <li>プロセスがセッション配置を数日間待機している場合、ヘルスチェックですべてのシステムが正しく動作していることを確認してください。これは、フリートを事前にセットアップしたものの、実際の本番トラフィックを後から受信する場合や、時間帯によってプレイヤートラフィックが変化する場合に当てはまります。一部のロケーションでは、セッション配置を受信しない時間帯が存在する可能性があります。</li> \n</ul> \n<h3>5. ゲームセッションの終了</h3> \n<p>ゲームセッションの終了時に、サーバープロセスは Amazon GameLift Servers にゲームセッションステータスを通知します。ゲームサーバープロセスは、サーバー SDK 操作 <code>ProcessEnding</code> を呼び出してシャットダウンを開始します。ゲームセッション終了の一環として、Amazon GameLift Servers はゲームセッションとサーバープロセスのステータスを TERMINATED に変更します。</p> \n<p>考慮事項：</p> \n<ul> \n <li>ゲームセッションがサーバーに配置され ( <code>OnStartGameSession</code> が呼び出され ) たものの、プレイヤーが接続しない、または切断された場合のバックアッププロセス終了メカニズムを実装してください。これらの状況で確実にプロセスを正しく終了させ、新しいゲームサーバーに置き換えられるようにする必要があります。</li> \n <li>複数のセッションでサーバープロセスを再利用しないでください。セッション終了後、<code>ProcessEnding</code> を呼び出して終了してください。これにより、新しいプロセスの作成と登録が即座にトリガーされます。</li> \n <li>サーバーが終了する可能性のあるすべてのパスで Amazon GameLift Servers SDK の <code>ProcessEnding</code> を呼び出してください。これにより、適切にクリーンアップされ、直ちに新しいセッションに置き換えられることが保証されます。</li> \n</ul> \n<p>図 2 は、ゲームサーバープロセスのライフサイクルと、すべてのゲームサーバーの実装において考慮すべき重要なステップを示しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-2-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-166993 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-2-1.png\" alt=\"\" width=\"1430\" height=\"443\"></a></p> \n<p><em>図 2：ゲームサーバーライフサイクル</em></p> \n<h2>セッション配置のためのキューとキューイベントの活用</h2> \n<p><a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/queues-intro.html\">Amazon GameLift Servers キュー</a>は、フリートで直接セッションを作成するよりもいくつかの利点を提供します。</p> \n<p>キューの利点として以下があります：</p> \n<ol> \n <li>最初のオプションが利用できない場合、セカンダリのフリートロケーションにフェイルオーバーできます</li> \n <li>複数のフリートに跨ってセッションを配置できます</li> \n <li>バックエンドが処理できるセッション配置イベントを提供します</li> \n <li>レイテンシーとコストに基づいて送信先 ( destination ) を優先順位付けします</li> \n</ol> \n<p>キューを使用する場合、<code>StartGameSessionPlacement</code> 呼び出しが使用する必要がある唯一の API です。残りはキューイベントを通じて管理されます。</p> \n<p>キューを使用する際のベストプラクティスは以下です：</p> \n<ol> \n <li>適切なキャパシティが見つからない場合に配置が失敗と見なすまでの時間を定義するため、キューのタイムアウトを設定してください 。</li> \n <li>キューにプレイヤーのレイテンシーを提供する場合は、プレイヤーレイテンシーポリシーを設定してください。ここで設定する制限は現実的なものにしてください。多くのマッチで一部のプレイヤーが到達できないレイテンシー値を待つために長時間待機することは避けるべきです。プレイヤーレイテンシーポリシーがない場合でも、キューにレイテンシーデータを提供すると、このデータに基づいてセッションが配置されます。デフォルトの動作は平均値に基づいて機能しますが、プレイヤーレイテンシーポリシーは最大レイテンシー制限を超えるプレイヤーがいないことを保証します。</li> \n <li>ゲームセッション配置の優先順位を定義してください。ほとんどの場合、登録されたすべてのフリートでレイテンシーを優先し、次にコストを考慮するというデフォルトの動作を推奨します。ただし、レイテンシーの品質に関係なく <a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/fleets-intro-anywhere.html\">Amazon GameLift Servers Anywhere フリート</a>リソースを最初に使用したい場合は、その送信先を最優先に設定してください。</li> \n</ol> \n<p>キューイベントを使用する際のベストプラクティスは以下です：</p> \n<ol> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/queue-notification.html\">ゲームセッション配置イベントの通知</a>を受信するために、Amazon Simple Notification Service ( <a href=\"https://aws.amazon.com/jp/sns/\">Amazon SNS</a> ) トピックを登録するか、<a href=\"https://aws.amazon.com/jp/eventbridge/\">Amazon EventBridge</a> を使用してください。</li> \n <li><a href=\"https://aws.amazon.com/jp/lambda/\">AWS Lambda</a> 関数をイベントに登録し、<a href=\"https://aws.amazon.com/jp/dynamodb/\">Amazon DynamoDB</a> などのデータベースにイベントデータを保存したり、WebSocket を介してプレイヤーに直接更新を送信したりできます。Describe API の使用と比較して、イベントの使用は非常にスケーラブルです。</li> \n</ol> \n<p>図 3 は、Amazon GameLift Servers キューを活用したゲームセッションの配置と Amazon SNS トピックへのサブスクライブを通じたイベント処理に関する基本的なアーキテクチャ概要を示しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-3.png\"><img loading=\"lazy\" class=\"alignnone wp-image-166994 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-3.png\" alt=\"\" width=\"1430\" height=\"489\"></a></p> \n<p>図 3：Amazon GameLift Servers キューを活用するための基本的なアーキテクチャ</p> \n<p>レイテンシポリシーを使用せず、特定のロケーションを優先して正確にセッションを配置する必要がある場合は、<code>StartGameSessionPlacement</code> リクエストで <a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/apireference/API_PriorityConfigurationOverride.html\">Priority Configuration Override</a> を定義できます。これは、ゲームデザイン上、プレイヤーが特定のロケーションまたは優先ロケーションのリストから選択できる機能を提供する場合に役立ちます。また、マッチメーカーが各ロケーションのレイテンシーを個別に提供する代わりに、優先順位リストを提供する場合にも役立ちます。</p> \n<p>マッチメーカーとして <a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/flexmatchguide/match-intro.html\">Amazon GameLift Servers FlexMatch</a> を使用している場合、定義したキューとネイティブに統合されます。その後、セッション配置プロセスを追跡するために、キューイベントの代わりに FlexMatch イベントを使用できます。</p> \n<h2>メトリクス、ログ記録、アラームの設定</h2> \n<p>環境で何が起きているかを理解する上で、オブザーバビリティは重要です。Amazon GameLift Servers には、これをサポートするいくつかのネイティブ機能があります。ログ、モニタリング、アラームという 3 つの重要な側面について説明します。</p> \n<h3>ログ</h3> \n<p>コンテナフリートでは、追加のツールやサービスを使用せずに、ゲームサーバーの出力を <a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html\">Amazon CloudWatch</a> または Amazon Simple Storage Service ( <a href=\"https://aws.amazon.com/jp/s3/\">Amazon S3</a> ) に送信するように設定できます。デバッグ時に適切ログファイルを検索できるよう、ゲームサーバーの出力にゲームセッション ID を書き込むようにしてください。EC2 フリートでは、ゲームセッション終了後 14 日以内にログファイルをダウンロードできます。EC2 フリートでも Amazon CloudWatch にログをプッシュしたい場合は、<a href=\"https://github.com/aws-solutions-library-samples/guidance-for-custom-game-backend-hosting-on-aws/tree/main/BackendFeatures/AmazonGameLiftIntegration#amazon-cloudwatch-logs-and-metrics\">AWS Game Backend Framework ガイダンスの Amazon GameLift Servers integration</a> が Amazon CloudWatch Agent の設定に役立ちます。</p> \n<p>ゲームサーバープロセスからログ出力を生成する際は、ロギングシステムでログの詳細度を定義できるようにすることをお勧めします。開発時にはより詳細なロギングを使用し、本番環境では収集するデータ量を減らすことができます。JSON 形式などの構造化されたログ出力を使用することで、CloudWatch のクエリ機能を活用しやすくなります。</p> \n<p>さらに、サイドカーコンテナを実行するか、EC2 フリートの場合はインスタンス上でバックグラウンドエージェントを実行することで、任意のサードパーティログ管理ツールにログ出力を送信できます。</p> \n<h3>メトリクス</h3> \n<p>Amazon GameLift Servers は広範囲な <a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/monitoring-cloudwatch.html\">CloudWatch メトリクス</a>を提供します。これには、フリート内のインスタンスとゲームセッションの情報、キューによる配置時間、リソース使用率メトリクス、その他多くが含まれます。これらのメトリクスは、Amazon GameLift Servers コンソールと CloudWatch で直接利用できます。</p> \n<p>監視すべき主要なメトリクスは以下です：</p> \n<ol> \n <li><strong>リソース使用率：</strong> <code>CPUutilization</code>、<code>MemoryUtilization</code>（コンテナフリート用）、<code>NetworkIn/NetworkOut</code>。これらのメトリクスは、ゲームサーバープロセスのパフォーマンスと使用しているリソース量の概要を提供します。</li> \n <li><strong>セッション可用性：</strong> <code>PercentAvailableGameSessions</code>、<code>AvailableGameSessions</code>。これらのメトリクスは、フリートの健全性と新しいセッションを配置する能力を示します。</li> \n <li><strong>潜在的な問題：</strong> <code>UnhealthyInstancesReplaced</code>、<code>ServerProcessAbnormalTerminations</code>。これらのメトリクスは、動作を継続するためのリソースが不足しているインスタンスと、プロセスが正しく終了していない問題を示します。</li> \n <li><strong>キューメトリクス：</strong> <code>AverageWaitTime</code>、<code>PlacementsFailed</code>、<code>PlacementsTimedOut</code>。これらのメトリクスは、プレイヤーがマッチに配置されるまでの速さや、配置の失敗頻度など、キューの健全性の指標を提供します。</li> \n</ol> \n<p>ログと同様に、サイドカーコンテナまたは EC2 フリートのエージェントを使用して、他のシステムに関するカスタマーメトリクスを収集できます。これには、Grafana で視覚化できる Prometheus インスタンスでメトリクスを収集する OpenTelemetry エージェントなどのツールやサービスが含まれます。</p> \n<h3>アラーム</h3> \n<p>アラームは、ゲームバックエンドに問題があることを運用チームに通知するメカニズムです。問題の可能性を示すメトリクスに対して<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/ConsoleAlarms.html\">適切なアラームを作成</a>する必要があります。これには、<code>PercentAvailableGameSessions</code> ( 低いまたはゼロ ) 、<code>ServerProcessAbnormalTerminations</code>、<code>UnhealthyInstancesReplaced</code>、<code>PlacementsFailed</code> などのメトリクスや、ニーズに関連するその他のメトリクスが含まれます。さらに、<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/MonitoringLogData.html\">CloudWatch Logs からメトリクスを抽出</a>し、抽出されたメトリクスに基づいてアラームを作成できます。ログからのメトリクスの迅速な抽出には JSON 形式が推奨されます。</p> \n<p>図 4 は、CloudWatch のメトリクスとログを活用して、問題が発生した際にアラームを生成し、オンコールチームに通知する方法の例を示しています。同様のアプローチは、Prometheus でメトリクスを収集し、Grafana で可視化する場合にも適用できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-4.png\"><img loading=\"lazy\" class=\"alignnone wp-image-166995 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/AGLS-Image-4.png\" alt=\"\" width=\"1430\" height=\"620\"></a></p> \n<p><em>図 4：ログとメトリクスに基づくオンコールチームへのアラーム</em></p> \n<h2>結論</h2> \n<p>Amazon GameLift Servers をゲームサーバーホスティングに使用することで、ゲームローンチの成功に向けた運用面で準備を整えるためのベースラインについて説明しました。正しいインスタンスタイプとサーバープロセス、またはコンテナパッキングを選択することで、高性能でコスト最適化された構成を確保する方法について議論しました。また、すべてのアーキテクチャが適切に制御されたイベントベースのセッション配置のためにキューを活用すべき方法についても考察しました。最後に、ログ、モニタリング、アラームの設定が問題の特定とゲームサーバーのパフォーマンスに関する情報収集にどのように役立つかについて議論しました。</p> \n<p>シリーズの第 2 回ブログ「Amazon GameLift Servers でローンチを成功させるためのステップ：ローンチフェーズ」では、ゲームローンチの準備についてより深く掘り下げます。</p> \n<p>マルチプレイヤーゲームサーバーホスティングのために Amazon GameLift Servers を今すぐ始めましょう。ビジネスの加速にどのように役立つかを学ぶために、<a href=\"https://pages.awscloud.com/Amazon-Game-Tech-Contact-Us.html\">AWS 担当者</a>にお問い合わせください。</p> \n<h2>参考資料</h2> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/gameliftservers/latest/developerguide/gamelift_quickstart_customservers_checklist.html\">Preparing your game for launch</a></li> \n <li><a href=\"https://aws.amazon.com/jp/blogs/gametech/amazon-gamelift-achieves-100-million-concurrently-connected-users-per-game/\">Amazon GameLift achieves 100 million concurrently connected users per game</a></li> \n <li><a href=\"https://aws.amazon.com/jp/blogs/gametech/compiling-unreal-engine-5-dedicated-servers-for-aws-graviton-ec2-instances/\">Compiling Unreal Engine 5 Dedicated Servers for AWS Graviton EC2 Instances</a></li> \n</ul> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2024/05/15/Juho-Jantunen.jpeg\" alt=\"Juho Jantunen\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Juho Jantunen</h3> \n  <p>Juho Jantunen は、AWS for Games チームのワールドワイドプリンシパルソリューションアーキテクトとして、ゲームバックエンドとゲームサーバーホスティングソリューションに注力しています。ゲーム業界とクラウドテクノロジーのバックグラウンドを持ち、数百万人のプレイヤーを抱える複数のタイトルにおいて、AWS 上でゲームバックエンドの構築と運用を行ってきました。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2025/10/06/Sushil.jpeg\" alt=\"Sushil Ranganathan\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Sushil Ranganathan</h3> \n  <p>Sushil Ranganathan は、Amazon Web Services のシニアテクニカルアカウントマネージャーです。12 年以上の業界経験を持ち、戦略的産業のお客様が AWS クラウド上でエンタープライズ規模のソリューションを構築・運用できるよう支援することに情熱を注いでいます。</p> \n </div> \n</footer>"
  },
  {
    "title": "マルチAIエージェントが創る新しい店舗体験 〜Amazon Bedrock AgentCoreによる販売支援〜",
    "date": "2025-10-17T08:02:23.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/multi-aiagents-sales-support-with-bedrock-agentcore/",
    "content": "<h1>はじめに</h1> \n<p>小売業界では、顧客の購買行動が多様化し、実店舗にもオンラインのようなパーソナライズ体験が求められるようになっています。顧客は自分に最適な提案を受け、迷うことなくスムーズに買い物できる体験を期待するようになりました。こうした背景のもと、AWS は <a href=\"https://aws.amazon.com/jp/bedrock/agentcore/\">Amazon Bedrock AgentCore</a> を活用し、<a href=\"https://protohologram.com/\">PROTO</a> 社のサイネージデバイスと連携したマルチ AI エージェントによる新しい販売支援アプローチを提案しています。本記事では、その全体構成と技術の仕組み、そして店頭に導入された際の顧客側・店舗側それぞれの活用方法について紹介します。<br> <span id=\"more-167147\"></span></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-167150 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image-1024x579.png\" alt=\"\" width=\"1024\" height=\"579\"></a></p> \n<p style=\"text-align: center\">図1. マルチ AI エージェントによる店舗での販売支援ソリューション概要</p> \n<h1>全体構成</h1> \n<p>このソリューションの特徴は、複数の AI エージェントがそれぞれの役割を担い、連携して一貫した顧客体験を実現する点にあります。顧客とのコミュニケーションを担う「アバターエージェント」、商品情報を扱う「商品情報エージェント」、店舗運営を支援する「店舗支援エージェント」、そして全体を統制する「オーケストレーターエージェント」が協調して動作します。</p> \n<p>これらのエージェントは、Amazon Bedrock AgentCore を中核としたアーキテクチャ上に構築されています。実行基盤には<a href=\"https://aws.amazon.com/jp/ecs/\">Amazon ECS</a>、連携制御には <a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-quick-start.html\">AgentCore Gateway</a>、ステート管理には <a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/memory.html\">AgentCore Memory</a> を利用しています。さらに、商品情報は <a href=\"https://aws.amazon.com/jp/s3/features/vectors/\">Amazon S3 Vector</a> にベクトルデータとして格納され、顧客との会話データは <a href=\"https://aws.amazon.com/jp/dynamodb/\">Amazon DynamoDB</a> に保存されます。<a href=\"https://aws.amazon.com/jp/pm/lambda/\">AWS Lambda</a> を用いて外部 API 連携や処理フローを柔軟に実装することで、企業ごとの業務要件に合わせた高度な拡張性を実現しています。</p> \n<p style=\"text-align: center\"><img loading=\"lazy\" class=\"aligncenter wp-image-167151 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image-1-1-1024x579.png\" alt=\"\" width=\"1024\" height=\"579\"><br> 図2. ソリューションデモアーキテクチャ</p> \n<h3></h3> \n<h1>共有スペース/来店前 アバター店員側の仕組み</h1> \n<p>アバターエージェントは、来店前後を通じて顧客の購買体験を支える重要な存在です。来店前には、Web やスマートフォン経由で顧客の希望カテゴリや用途を音声やチャットでヒアリングし、その情報を店舗と共有します。これにより、顧客が入店した瞬間から、AI が最適な売場や商品を案内できる状態が整います。</p> \n<p>店頭では、アバターが自然な対話を通じて商品やフロアを案内します。案内には、<a href=\"https://aws.amazon.com/jp/transcribe/\">Amazon Transcribe</a> を活用して多言語対応にしています。また、必要に応じて商品比較のポイントやおすすめの組み合わせを <a href=\"https://aws.amazon.com/jp/personalize/\">Amazon Personalize</a> を用いて提示します。例えば「シンプルなデザインの長袖と華やかなデザインのものを比べて試してみてください」といった会話が自動生成され、顧客の好みに合わせて提案されます。また、多言語理解と音声出力を組み合わせることで、海外からの来店者にも対応可能です。これらの対話内容は AgentCore Memory に蓄積され、顧客体験の改善に役立てられます。</p> \n<p>最後に QR コードが払い出され、ユーザーはスマートファンなどで QR コードをかざすと、商品の情報や店舗までの地図が表示されます。さらにその QR コードは店舗側のスタッフに掲示するような流れを作っています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image-2.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-167152\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image-2.jpg\" alt=\"\" width=\"100\" height=\"133\"></a></p> \n<p style=\"text-align: center\">画像1. PROTO デバイス <a href=\"https://protohologram.com/the-m/\">Type M</a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/protodemo7.gif\"><img loading=\"lazy\" class=\"aligncenter wp-image-167153 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/protodemo7.gif\" alt=\"\" width=\"640\" height=\"360\"></a></p> \n<p style=\"text-align: center\">動画1. エージェントログによる振る舞いの参考可視化とPROTO デバイスでの表示内容</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/mobiledemo3.gif\"><img loading=\"lazy\" class=\"aligncenter wp-image-167155 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/mobiledemo3.gif\" alt=\"\" width=\"640\" height=\"360\"></a></p> \n<p style=\"text-align: center\">動画2. モバイル側のデモ</p> \n<h1>店舗側の仕組み</h1> \n<p>店舗スタッフにとっても AI エージェントは強力なサポートツールです。AI が事前に顧客の来店目的や希望商品を整理して共有するため、スタッフは来店時点で顧客に最適な提案をスムーズに行えます。店舗スタッフは、事前にユーザーがアバター店員側で取得した QR コードを店員にタブレット端末でスキャンをしてもらいます。タブレット端末には、エージェントAI が事前に生成したセールストークや説明文が提示され、それを基に均質かつ効果的な接客が実現されます。</p> \n<p>さらに、顧客がどの商品に興味を示したか、どのような会話がされたかといった情報が掲示され、購買心理に基づく販売支援が可能になります。店舗は AI を通じて常にナレッジを蓄積し、接客の品質を可視化・標準化することができます。AI による支援で人員不足の課題も解消され、スタッフはより創造的な顧客サービスに注力できるようになります。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/tablet-screen.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-167172 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/tablet-screen-1024x727.png\" alt=\"\" width=\"1024\" height=\"727\"></a></p> \n<p style=\"text-align: center\">画像2. AI エージェントが出力した店員が使うタブレットの表示内容</p> \n<h3></h3> \n<h1>技術アーキテクチャ</h1> \n<p>Amazon Bedrock AgentCore は、AI エージェントを本番運用レベルで安全かつ拡張性高く稼働させるための統合プラットフォームです。その特徴は、AI エージェントの「思考（推論）」「記憶（メモリ）」「行動（ツール実行）」を分離して最適化する設計思想にあります。この仕組みにより、企業は複雑な統合作業を行うことなく、柔軟にエージェント群を構築・拡張できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image-7-1.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-167162 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/Image-7-1-1024x555.png\" alt=\"\" width=\"1024\" height=\"555\"></a></p> \n<p style=\"text-align: center\">図３．Bedrock Agent Core の機能群</p> \n<h2>AgentCore Runtime による安全な AI エージェント運用</h2> \n<p>AgentCore Runtime は、AWSのサーバーレス基盤上で動作するエージェント専用の実行環境です。任意の AI フレームワークで構築したエージェントを「Bedrock AgentCore App」としてコンテナ化し、Amazon ECS または Lambda 経由でスケーラブルに稼働させます。長時間のタスク（最大8時間）や非同期実行をネイティブにサポートしており、たとえば店舗内のアバター案内のような持続的インタラクションにも適しています。また、Runtime はマルチエージェント間の通信チャネルを MCP（Model Communication Protocol）で統一しているため、異なる言語モデルやバックエンドでも相互協調が可能です。</p> \n<h2>AgentCore Gateway による多様な外部サービス連携</h2> \n<p>AgentCore Gatewayは、外部のAPI・Lambda 関数・社内システムをエージェント互換ツールとして自動登録・接続する中枢です。開発者は既存の API 仕様（ OpenAPI や Smithy など）をそのまま用いて、MCP 互換ツールとして登録できます。これにより、POS システムや在庫 DB などを AI エージェントがアクセスできるようになります。さらに、Gateway にはツール検索用のセマンティックディスカバリー機構が組み込まれており、複数エージェント間で動的に最適なツールを呼び出せます。店舗支援エージェントが在庫を確認し、アバターエージェントに結果を返すような非同期連携を実現する中核がこの Gateway です。</p> \n<h2>AgentCore Memory による顧客体験の蓄積と進化</h2> \n<p>AgentCore Memory は、エージェントが顧客との過去の対話を知識として再利用するための永続記憶レイヤーです。短期記憶は直前の会話コンテキストを保持し、長期記憶は複数セッションにまたがる行動履歴や嗜好情報を蓄積します。単なるテキスト保存ではなく、発話内容の意味抽出・統合・重複排除を行うAI 駆動の「知識整理プロセス」が特徴的です。たとえば、顧客が「昨年は青いシャツが好み」と発言した情報を参照し、翌年の来店時に「今年は同系色の新作をおすすめします」と提案するような連続的な体験を提供できます。この構造により、AI エージェントは「覚えている」だけでなく、「理解して進化する」存在へと近づいています。</p> \n<h2>AgentCore IdentityとObservability による運用セキュリティと可視化</h2> \n<p>企業利用を前提とした統合認証基盤も、AgentCore の大きな強みです。<a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/identity-overview.html\">AgentCore Identity</a> は、IAM および Cognito を活用してマルチサービス間の権限とユーザー認証を統一管理します。これにより、どのエージェントがどのツールにアクセスできるかを厳密に制御できます。<a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/observability-get-started.html\">Observability</a> コンポーネントでは、CloudWatch・OpenTelemetry 連携を通してエージェントの挙動や消費コスト、エラー発生率を可視化し、運用チームがプロアクティブに調整可能です。特に、企業規模でマルチ AI エージェントを運用する際のトレーサビリティと説明責任を確保するうえで、この仕組みは欠かせません。</p> \n<h2>AgentCore Browser による Web 連携自動化</h2> \n<p>AgentCore Browser は、AI エージェントにヘッドレス環境でウェブページの自動操作能力を提供します。画面を表示せず、裏側で Web サイトの閲覧や情報抽出、フォーム入力などを安全かつサンドボックス内で行えるため、店舗スタッフが価格調査や在庫確認を依頼するだけで、AI が Web 上の必要な業務を迅速に自動化します。現場の効率化と幅広い外部情報連携が可能となり、店舗 DX の中核技術として注目されています。</p> \n<h2>AgentCore Code Interpreter による店舗業務の自動化と高度分析</h2> \n<p><a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-getting-started.html\"> AgentCore Code Interpreter</a> はエージェントによるコード実行・データ分析・レポート生成を可能にしたサンドボックス型のマネージド実行環境です。会話から生まれた業務要望があった際、エージェントはブラウザ操作や外部データ取得に加え、リアルタイムの集計・グラフ化・予測解析まで一貫して自律的に実施できます。たとえば「店舗ごとの売上データを集計し、週ごとの増減をグラフ化して、Excel 形式で提出」「最新の販売結果から、次回発注数量を Python で計算」など、これまで人手と複雑なシステム連携が必要だった分析業務が、自然言語指示のみで完結します。大容量データ処理や複雑な条件分岐も、Code Interpreter のセキュアサンドボックス内で実行され、API 連携や IAM 統合によって権限管理も万全です。店頭とクラウドが一体化した展開により、業務フローの高度化と省力化を両立できる土台となります。</p> \n<h2>エージェント連携設計の核心</h2> \n<p>こうした構成の中で、重要なのは「各エージェントが独立しながらも共有知を持つ」という設計です。販売支援の現場では、アバター、商品推薦、店舗オペレーションという異なる領域のAIが、共通メモリを介してスムーズに協調します。AgentCore はこの協調制御（Orchestration）をネイティブサポートし、オーケストレーターエージェントが会話ログ・ツール呼び出し・状態管理を一元的に制御します。この仕組みによって、個々の応答だけでなく「一貫した店舗全体体験」をAIが提供できます。</p> \n<h1>今後の展望</h1> \n<p>今後は、顧客行動ログと売上データを統合し、AI が販売戦略を自律的に最適化するフェーズへと発展していくことが期待されます。また、Amazon Bedrock の進化に伴い、エージェント間の協調精度や自然対話能力が高まることで、より人間らしい接客体験の実現が可能になるでしょう。AWS は、こうした次世代店舗モデルの実現に向けて、企業と共にリアルな価値創造を支援し続けます。</p> \n<h1>おわりに</h1> \n<p>AI が店舗運営を支える時代は、すでに目の前にあります。マルチ AI エージェントによる販売支援は、単なる自動化ではなく、「顧客と人のあいだにある理想的な接客体験」を形にするものです。Amazon Bedrock AgentCore を活用することで、企業は短期間で柔軟な AI 接客システムを立ち上げ、顧客満足と業務効率を両立させることができます。これからも AWS は、小売業をはじめとする多様な業種において、AI が創り出す新たなビジネス体験をともに実現していきます。</p> \n<h1>著者について</h1> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d1.awsstatic.com/Developer%20Marketing/jp/magazine/profile/photo_totsuka-tomoya.7a8175c15da4a36f9232592a389c5f5c18663193.jpg\" alt=\"Tomoya Tozuka\" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\"><a href=\"https://x.com/tottu22\" target=\"_blank\" rel=\"noopener\">戸塚 智哉(Tomoya Tozuka) / @tottu22</a></h3> \n  <p>飲食やフィットネス、ホテル業界全般のお客様をご支援しているソリューション アーキテクトで、AI/ML、IoT を得意としています。最近では AWS を活用したサステナビリティについて顧客に訴求することが多いです。<br> 趣味は、パデルというスペイン発祥のスポーツで、休日は仲間とよく大会に出ています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/blog_photo.jpg\" alt=\"\" width=\"320\" height=\"309\" class=\"aligncenter size-full wp-image-167191\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/blog_photo.jpg\" alt=\"Yoshitaka Kawaji\" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\"><a href=\"https://x.com/kawaji_scratch\" target=\"_blank\" rel=\"noopener\">川路 義隆（Yoshitaka Kawaji）/ @kawaji_scratch</a></h3> \n  <p>担当業界は小売業、技術面ではServerless・AI-DLC・アジャイル開発などの領域で業界を問わずお客様をご支援しています。<br> 趣味はJAWS-UGコミュニティの運営支援で、全国各地のイベントに参加しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/17/avatar.jpg\" alt=\"Yoshiyuki Iino\" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\">飯野 善行（Yoshiyuki Iino）</h3> \n  <p>主に小売業界のお客様を支援するソリューションアーキテクトです。生成 AI エージェントやベクトルデータベースの技術を使った提案機会が増えてきたことを嬉しく思っています。休日はカメラと重量級のレンズを持ってロードバイクで出かけます。</p> \n </div> \n</footer>"
  },
  {
    "title": "vercel/next.js – v15.5.6",
    "date": "2025-10-17T02:26:51.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.5.6",
    "content": "> [!NOTE]  \r\n> This release is backporting bug fixes. It does **not** include all pending features/changes on canary.\r\n\r\n### Core Changes\r\n- Turbopack: don't define process.cwd() in node_modules #83452\r\n\r\n\r\n### Credits\r\n\r\nHuge thanks to @mischnic for helping!"
  },
  {
    "title": "AWS Weekly Roundup: Amazon Quick Suite、Amazon EC2、Amazon EKS など (2025 年 10 月 13 日)",
    "date": "2025-10-17T01:44:04.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-weekly-roundup-amazon-quick-suite-amazon-ec2-amazon-eks-and-more-october-13-2025/",
    "content": "<p>10 月 13 日週は、<a href=\"https://www.meetup.com/awsuguk-ai-in-practice/\">英国 AWS ユーザーグループの第 1 回 AWS AI in Practice ミートアップ</a>に出席しました。この夜のフォーカスは、AI 支援ソフトウェア開発とエージェントでした! 10 月 20 日週はイタリアで <a href=\"https://conferences.codemotion.com/milan2025/agenda/\">Codemotion</a> (ミラノ) と <a href=\"https://www.meetup.com/amazon-web-services-rome/events/311302816\">AWS ユーザーグループのミートアップ</a> (ローマ) に参加します。また、AI を活用した研究、ビジネスインテリジェンス、自動化機能を単一のワークスペースにまとめた<a href=\"https://aws.amazon.com/blogs/aws/reimagine-the-way-you-work-with-ai-agents-in-amazon-quick-suite/\">新しい Amazon Quick Suite を試してみる</a>のも楽しみです。</p> \n<p><span style=\"text-decoration: underline\"><strong>10 月 6 日週のリリース</strong></span><br> 私が 10 月 13 日週に注目したリリースをご紹介します。</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/quicksuite/\">Amazon Quick Suite</a> – 職場での質問にすばやく回答し、インサイトをアクションに変換する新しいエージェンティックチームメイトです。<a href=\"https://aws.amazon.com/blogs/aws/reimagine-the-way-you-work-with-ai-agents-in-amazon-quick-suite/\">詳細については、Esra によるリリース記事をご覧ください</a>。</li> \n <li><a href=\"https://aws.amazon.com/ec2/\">Amazon EC2</a> – 第 5 世代 AMD EPYC (コードネーム Turin) プロセッサを搭載した汎用 <a href=\"https://aws.amazon.com/blogs/aws/new-general-purpose-amazon-ec2-m8a-instances-are-now-available/\">M8a インスタンス</a>と、カスタム Intel Xeon 6 プロセッサを搭載しコンピューティング最適化された <a href=\"https://aws.amazon.com/blogs/aws/introducing-new-compute-optimized-amazon-ec2-c8i-and-c8i-flex-instances/\"> C8i および C8i-Flex インスタンス</a>が利用可能になりました。</li> \n <li><a href=\"https://aws.amazon.com/eks/\">Amazon EKS</a> – EKS と <a href=\"https://aws.amazon.com/eks/eks-distro/\"> EKS Distro</a>でいくつかの改善が実施され、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-eks-distro-kubernetes-version-1-34/\">Kubernetes バージョン 1.34 のサポートが開始</a>されました。</li> \n <li><a href=\"https://aws.amazon.com/iam/identity-center/\">AWS IAM アイデンティティセンター</a> – AWS Key Management Service キーを使用して、<a href=\"https://aws.amazon.com/blogs/aws/aws-iam-identity-center-now-supports-customer-managed-kms-keys-for-encryption-at-rest/\">IAM アイデンティティセンター組織インスタンスに保存されている ID データを暗号化</a>できるようになりました。</li> \n <li><a href=\"https://aws.amazon.com/vpc/lattice/\">Amazon VPC Lattice</a> – <a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-vpc-lattice-configurable-ip-resource-gateway/\">リソースゲートウェイの Elastic Network Interface (ENI) に割り当てられる IPv4 アドレスの数を設定</a>できるようになりました。IPv4 アドレスはネットワークアドレス変換に使用され、リソースへの同時 IPv4 接続の最大数を決定します。</li> \n <li><a href=\"https://aws.amazon.com/q/developer/\">Amazon Q Developer</a> – Amazon Q Developer は、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-q-developer-understand-service-prices-estimate-workload-costs/\">AWS の製品とサービスの価格、可用性、属性に関する情報の入手</a>をお手伝いします。これにより、自然言語を使用して適切なリソースを選択し、ワークロードコストを見積もることが容易になります。<a href=\"https://aws.amazon.com/blogs/aws-cloud-financial-management/introducing-aws-pricing-capabilities-in-amazon-q-developer-ask-questions-get-instant-cost-insights/\">このブログ記事で詳細をご覧ください</a>。</li> \n <li><a href=\"https://aws.amazon.com/rds/db2/\">Amazon RDS for Db2</a> – <a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-rds-for-db2-native-database-backup/\">データベースレベルのネイティブバックアップを実行</a>できるようになり、データベースの管理と移行の柔軟性が向上しました。</li> \n <li><a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html\">AWS Service Quotas</a> – <a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/automatic-quota-management-service-quotas/\">自動クォータ管理</a>でクォータ使用量の通知を受け取ることができます。E メール、SMS、Slack など、お好みの通知チャネルを設定できます。通知は <a href=\"https://docs.aws.amazon.com/health/latest/ug/what-is-aws-health.html\">AWS Health</a> でも利用可能で、自動化ワークフロー向けの関連する <a href=\"https://aws.amazon.com/cloudtrail/\">AWS Cloudtrail</a> イベントをサブスクライブできます。</li> \n <li><a href=\"https://aws.amazon.com/connect/\">Amazon Connect</a> – <a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-connect-cases-api-link-search/\">新しいケース API を使用してケースデータをプログラムで強化</a>し、関連するケースのリンク、カスタム関連項目の追加、複数のケースの検索を実行できるようになりました。また、特定のニーズに合わせて<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-connect-enables-service-level-calculation-configuration/\">サービスレベル計算をカスタマイズ</a>できるようになりました。導入されたばかりの新機能には、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-connect-copy-bulk-edit-agent-scheduling/\">エージェントのスケジュール設定のコピーと一括編集</a>と<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/amazon-connect-agent-adherence-notifications/\">エージェントスケジュール遵守通知</a>が含まれます。</li> \n <li><a href=\"https://aws.amazon.com/vpn/\">AWS Client VPN</a> – <a href=\"https://aws.amazon.com/about-aws/whats-new/2025/10/aws-client-vpn-macos-tahoe/\">MacOS Tahoe のサポートを開始しました</a>。</li> \n</ul> \n<p><span style=\"text-decoration: underline\"><strong>その他のアップデート</strong></span><br> その他の興味深いプロジェクト、ブログ記事、ニュースをいくつかご紹介します。</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/blogs/compute/serverless-icymi-q3-2025/\">サーバーレス ICYMI Q3 2025</a> – 見逃した方のために、サーバーレスニュースを四半期ごとにまとめています。</li> \n <li><a href=\"https://aws.amazon.com/blogs/big-data/best-practices-for-migrating-from-apache-airflow-2-x-to-apache-airflow-3-x-on-amazon-mwaa/\">Amazon MWAA で Apache Airflow 2.x から Apache Airflow 3.x に移行するためのベストプラクティス</a> – 新しいリリースの利点を活用するのに役立つガイドです。</li> \n <li><a href=\"https://aws.amazon.com/blogs/storage/building-self-managed-rag-applications-with-amazon-eks-and-amazon-s3-vectors/\">Amazon EKS と Amazon S3 Vectors を使用したセルフマネージド RAG アプリケーションの構築</a> – <a href=\"https://docs.ray.io/en/latest/ray-overview/index.html\">Ray</a>、<a href=\"https://huggingface.co/\">Hugging Face</a>、<a href=\"https://www.langchain.com/\">LangChain</a> などのオープンソースツールを使用してセルフマネージド RAG アプリケーションを構築およびデプロイするためのリファレンスアーキテクチャです。</li> \n <li><a href=\"https://aws.amazon.com/blogs/industries/part-1-bbva-building-a-multi-region-multi-country-global-data-and-ml-platform-at-scale/\">BBVA: 複数リージョンや複数国でのグローバルデータおよび ML プラットフォームの大規模な構築</a> – 銀行セクターにおける最大かつ最も複雑なクラウド移行の 1 つによって、<a href=\"https://www.bbva.com/en/\">BBVA</a> のデータ分析インフラストラクチャ全体を変革するまでのジャーニーを、6 部構成の連載でご紹介します。</li> \n <li><a href=\"https://aws.amazon.com/blogs/machine-learning/customizing-text-content-moderation-with-amazon-nova/\">Amazon Nova を使用したテキストコンテンツモデレーションのカスタマイズ</a> – ドメイン固有のトレーニングデータと組織固有のモデレーションガイドラインを使用して、お客様の要件に合わせたコンテンツモデレーションタスクを実現するためファインチューニングされています。</li> \n</ul> \n<p><span style=\"text-decoration: underline\"><strong>近日開催予定の AWS イベント</strong></span><br> カレンダーを確認して、近日開催予定のイベントにサインアップしてください。</p> \n<ul> \n <li><a href=\"https://info.devpost.com/blog/aws-ai-agent-global-hackathon?trk=c4ea046f-18ad-4d23-a1ac-cdd1267f942c&amp;sc_channel=el\">AWS AI Agent Global Hackathon</a> – AWS の強力な生成 AI スタックを掘り下げて、目を見張るようなすばらしいソリューションを創り出すチャンスです。9 月 8 日から 10 月 20 日までの期間、AWS の AI サービススイートを使用して AI エージェントを作成し、45,000 USD を超える賞金と独占的な市場参入の機会の獲得に向けて競い合いましょう。</li> \n <li><a href=\"https://aws.amazon.com/startups/lp/aws-gen-ai-lofts?trk=c4ea046f-18ad-4d23-a1ac-cdd1267f942c&amp;sc_channel=el\">AWS Gen AI Loft</a> – 特別セッションで AWS の AI 製品とサービスについて学び、業界をリードするエキスパートと交流して、投資家や同業者との有益なネットワーキングの機会を得ることができます。最寄りの都市でご登録ください: <a href=\"https://aws.amazon.com/startups/lp/aws-gen-ai-loft-paris?trk=c4ea046f-18ad-4d23-a1ac-cdd1267f942c&amp;sc_channel=el\">パリ</a> (10 月 7 日～21 日)、<a href=\"https://aws.amazon.com/startups/lp/aws-gen-ai-loft-london?trk=c4ea046f-18ad-4d23-a1ac-cdd1267f942c&amp;sc_channel=el\">ロンドン</a> (10 月 13 日～21 日)、<a href=\"https://aws.amazon.com/startups/lp/aws-gen-ai-loft-tel-aviv?trk=c4ea046f-18ad-4d23-a1ac-cdd1267f942c&amp;sc_channel=el\">テルアビブ</a> (11 月 11 日～19 日)。</li> \n <li><a href=\"https://aws.amazon.com/events/community-day/\">AWS Community Days</a> – 世界中のエキスパート AWS ユーザーと業界リーダーによるテクニカルディスカッション、ワークショップ、ハンズオンラボが提供されるコミュニティ主導のカンファレンスに参加しましょう: <a href=\"https://awscommunity.eu/\">ブダペスト</a> (10 月 16 日)。</li> \n</ul> \n<p><a href=\"https://builder.aws.com/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">AWS Builder Center</a> に参加して、AWS コミュニティのビルダーを学び、構築し、交流しましょう。<a href=\"https://aws.amazon.com/events/explore-aws-events/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">近日開催予定の対面イベント</a>、<a href=\"https://aws.amazon.com/developer/events/?trk=e61dee65-4ce8-4738-84db-75305c9cd4fe&amp;sc_channel=el\">開発者に焦点を当てたイベント</a>、<a href=\"https://aws.amazon.com/startups/events?trk=c4ea046f-18ad-4d23-a1ac-cdd1267f942c&amp;sc_channel=el\">スタートアップ向けのイベント</a>はこちらからご覧ください。</p> \n<p>10 月 13 日週のニュースは以上です。10 月 20 日週にお届けする次回の <a href=\"https://aws.amazon.com/blogs/aws/tag/week-in-review/?trk=7c8639c6-87c6-47d6-9bd0-a5812eecb848&amp;sc_channel=el\">Weekly Roundup</a> もお楽しみに!</p> \n<p>– <a href=\"https://x.com/danilop\">Danilo</a></p> \n<p>原文は<a href=\"https://aws.amazon.com/jp/blogs/aws/aws-weekly-roundup-amazon-quick-suite-amazon-ec2-amazon-eks-and-more-october-13-2025/\">こちら</a>です。</p>"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.10",
    "date": "2025-10-17T00:28:52.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.10",
    "content": "### Core Changes\n\n- stabilize experimental.enablePrerenderSourcemaps: #84916\n- Stop manually setting stacktrace limit: #84968\n- Turbopack: respect `--profile` CLI param: #84920\n- Relax default.tsx validation for parallel routes leaf segments: #84767\n- Add codemod for removing `unstable_` prefix: #84974\n- Interception routes match from nested route navigation: #84898\n- [Cache Components] Allow unstable prefix for cacheLife and cacheTag: #84934\n\n### Misc Changes\n\n- Turbopack: fix pageExtensions precedence: #84926\n- Turbopack: fix client reference order for shared references: #84760\n- Turbopack: turn panic into bail: #84927\n- Docs/sync with new features 0: #84861\n- Turbopack: transpile runtime with swc: #84931\n- docs: x-nextjs-stale-time header: #84901\n- docs: Templates on navigation: #84493\n\n### Credits \n\nHuge thanks to @mischnic, @ztanner, @eps1lon, @icyJoseph, @wyattjoh, @devjiwonchoi, and @gnoff for helping!\n"
  },
  {
    "title": "【お知らせ】AWS AI 認定ポートフォリオの拡大とセキュリティ認定の更新",
    "date": "2025-10-17T00:11:27.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/big-news-aws-expands-ai-certification-portfolio-and-updates-security-certification/",
    "content": "<p>本ブログは、2025 年 10 月 14 日に Tim Trsar によって執筆された「<a href=\"https://aws.amazon.com/blogs/training-and-certification/big-news-aws-expands-ai-certification-portfolio-and-updates-security-certification/\">Big news: AWS expands AI certification portfolio and updates security certification</a>」を翻訳したものです。</p> \n<h2>本日、AWS は認定ポートフォリオの重要な更新を発表し、人工知能とセキュリティの分野における専門知識を検証するための取り組みを強化しました。</h2> \n<h3>近日公開：AWS Certified Generative AI Developer – Professional</h3> \n<p>新しい認定「<a href=\"https://aws.amazon.com/jp/certification/certified-generative-ai-developer-professional/\">AWS Certified Generative AI Developer – Professional</a>」の発表をお知らせします。この認定は、開発者が基盤モデルをアプリケーションやビジネスワークフローに効果的に統合する能力を検証します。ソフトウェア開発者や AI エンジニアは、基盤モデル、RAG アーキテクチャ、ベクトルデータベースを使用した本番環境対応の AI ソリューション構築における専門知識をアピールできます。<strong>ベータ試験の登録は 2025 年 11 月 18 日に開始</strong>され、合格したベータ参加者には特別な「Early Adopter バッジ」が授与されます。ベータ試験は 204 分間、 85 問の問題で構成されています。休憩を含むこの試験に関する情報については、<a href=\"https://aws.amazon.com/jp/certification/policies/during-testing/\">試験当日のポリシーページ</a>をご覧ください。<br> ※ 訳者追記 : 本ベータ試験は日本語での受験が可能です。</p> \n<p>「Exam Prep Plan: AWS Certified Generative AI Developer – Professional」は 2025 年 11 月 18 日に <a href=\"https://skillbuilder.aws/\">AWS Skill Builder</a> で利用可能になります。この準備プランには、試験形式の問題による練習評価、AWS SimuLearn による実践練習、各試験ドメインとタスクステートメントを確認するレッスンが含まれます。この準備プランでは、 AWS の知識とスキルを更新するためのロールベーストレーニングも紹介します。<br> ※ 訳者追記 : 2025 年 11 月 18 日時点では「Exam Prep Plan: AWS Certified Generative AI Developer – Professional」は英語版にて提供予定です。</p> \n<h3>「AWS Certified Machine Learning – Specialty」の廃止</h3> \n<p>AI/ML 認定ポートフォリオの進化の一環として、「<a href=\"https://aws.amazon.com/certification/certified-machine-learning-specialty/\">AWS Certified Machine Learning – Specialty</a>」認定の廃止をお知らせします。<strong>この試験の最終受験日は 2026 年 3 月 31 日です。すでに Machine Learning – Specialty を取得している方の認定は、元の有効期限まで有効です。</strong>現在の認定保持者は、「AWS Certified AI Practitioner」、「AWS Certified Machine Learning Engineer – Associate」、「AWS Certified Data Engineer – Associate」、そして新しい「AWS Certified Generative AI Developer – Professional」認定を通じて、AI/ML 学習の旅を継続できます。</p> \n<h3>「AWS Certified Security – Specialty」の更新</h3> \n<p>「<a href=\"https://aws.amazon.com/certification/certified-security-specialty/\">AWS Certified Security – Specialty</a>」試験は、進化するセキュリティ環境に対応するために更新されます。新バージョン（SCS-C03）では、生成 AI と機械学習セキュリティに重点を置いて、新しいテクノロジーの適用範囲を拡大しています。セキュリティ専門家により良いサービスを提供するため、試験ドメインを再構成し、検出とインシデント対応機能のための明確なセクションを作成しました。<strong>更新された試験（SCS-C03）の登録は 2025 年 11 月 18 日に開始されます。現行バージョン（SCS-C02）に関心のある方は、2025 年 12 月 1 日までに認定を完了する必要があります。</strong>新試験の準備をする学習者をサポートするため、2025 年 11 月 18 日に AWS Skill Builder を通じて SCS-C03 向けの更新された試験準備プランを導入します。また、学習者は「<a href=\"https://skillbuilder.aws/learning-plan/NTDPRSFC3F/aws-security-engineer-advanced-learning-plan/VUD51DEB41\">AWS Security Engineer Advanced Learning Plan</a>」に登録することで、AWS の知識とスキルを更新できます。このプランでは、AWS クラウドを使用したセキュリティエンジニアの役割を遂行するために必要なクラウドセキュリティの重要な側面をカバーしています。トレーニングは、事前計画、積極的なモニタリング、対応アクションという 3 つの主要機能に焦点を当てています。</p> \n<p>これらの更新は、安全でスケーラブルな AI ソリューションを実装するために必要な専門知識を持つチームの構築を組織が行えるよう支援するという AWS のコミットメントを反映しています。これらの更新について詳しく知り、認定の旅を始めるには、<a href=\"https://aws.amazon.com/blogs/training-and-certification/\">AWS Training and Certification Blog</a> をご覧ください。</p> \n<p>AI/ML AWS 認定について詳しく知るには、<a href=\"https://www.aboutamazon.com/news/aws/aws-certifications-generative-ai-machine-learning-cloud-jobs\">Amazon blog</a> をご確認ください。</p> \n<hr> \n<p>翻訳は Technical Instructor の 室橋 弘和 が担当しました。</p>"
  },
  {
    "title": "Honoざっくりキャッチアップ(v4.6.0〜v4.10.0)",
    "date": "2025-10-16T21:05:18.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/king/articles/f812a77be830ab",
    "content": "\n はじめに\nこんにちは、@sugar235711です。\n前回の記事から約1年が経ち、Honoはv4.6.0からv4.10.0までアップデートされているのでメモ書き程度に更新内容をまとめます。\nhttps://github.com/honojs/hono/releases\nhttps://hono.dev/\n\n 主要な変更点\nこの章では、v4.6.0以降の大きな変更点について解説します。\n\n Contextual Storage Middlewareの追加によるContext伝搬\n\n 従来の方法\n前回の記事では、リクエストごとにLoggerをContextに詰めて伝播させる方法を紹介しま..."
  },
  {
    "title": "Claude Codeに「次のタスクやっといて」ができるタスク管理ツール Task Master を使ってみた",
    "date": "2025-10-16T21:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/elyza/articles/49e997dde186aa",
    "content": "\n タスク管理できない人間のぼやき\n\nELYZAでプロダクト機械学習エンジニアをやっている中村(@tyo_yo_)です。\n新しい機能を実装する際、PRD (プロダクト要求仕様書: Product Requirements Document) から実装すべきタスクを一つひとつ切り出していく作業。「ここはこうで、あそこはああで...」と考えながらチケットを作る時間って、正直コーディングより疲れませんか。\nあと、歯を磨いている時にふと「あ、あの不具合直さなきゃ」と思い出す瞬間。スマホを取り出してバックログツールにメモしたり、いつのまにか混沌と化したバックログを見て目を背けてしまったり...\n弊..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.9",
    "date": "2025-10-16T18:24:51.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.9",
    "content": "### Core Changes\n\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheTag`: #84880\n- [Cache Components] separate runtime stage in dev render: #84644\n- Reland \"Include server latency in debug info\": #84950\n- Update  codemod ESLint template to Flat config: #84919\n- Upgrade React from `56e84692-20251014` to `93f85932-20251016`: #84963\n- [dev] Fix Middleware and Proxy file conflict: #84965\n\n### Credits \n\nHuge thanks to @gnoff, @lubieowoce, @eps1lon, and @devjiwonchoi for helping!\n"
  },
  {
    "title": "uvコマンドチートシート",
    "date": "2025-10-16T16:52:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/studypocket/articles/uv-cheatsheet",
    "content": "\n はじめに\nスタディポケットでソフトウェアエンジニア / SRE として働いている@Tocyukiです。\n弊社プロダクトのバックエンドは FastAPI で書かれており、パッケージマネージャーにはもちろん(?) uv を使っています。\nhttps://docs.astral.sh/uv/\n普段よく使うコマンドなので、n番煎じ感満載ですが Python が久しぶりで uv 素人な自分のためにチートシート記事を書きました。\n\n uv とは\nuv は Rust で書かれた高速な Python パッケージマネージャーです。Astral 社が開発しています。\n公式では以下のように説明されています..."
  },
  {
    "title": "TinyGo Conference 2025を開催しました ~とあるスタッフより~",
    "date": "2025-10-16T15:23:45.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/satoken/articles/tinygo-conf-2025",
    "content": "\n はじめに\nsatoken です。\n先日世界初のイベントとなる TinyGo Conference 2025 を開催しました！\nhttps://x.com/sago35tk/status/1977358331841749290\nご参加頂いた方々、ありがとうございました。\n快くスポンサー頂いた皆様、当日ご協力頂いたスタッフの皆様も本当にありがとうございました。\nこの TinyGo Conf の開催に深く関わった1人のスタッフ&amp;酒クズとして、個人的なイベントレポートとしたいと思います。\n\n 資料まとめ\n最初に当日の資料をまとめておきます。\nオープニングセッション : TinyGo ..."
  },
  {
    "title": "AWS Bedrockを利用して、AWSの日本国内に閉じてClaude Codeを利用しよう！！",
    "date": "2025-10-16T15:18:13.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/tsumita7/articles/closed-cloud-code-on-aws",
    "content": "みなさん、Claude Codeは利用していますか？私はほぼ毎日使っています。\nClaudeがAWS Marketplace経由で購入できる、Claude for Enterprise Premium Seats with Claude Code Now Available in AWS Marketplaceの発表があり、個人的に盛り上がっている今日この頃です。\n突然ですが、のっぴきならない事情でAWSの日本国内に閉じた形でClaude Codeを利用したいと思ったことはないでしょうか？\n思ったことがある！という方にはこの記事はピッタリだと思います。\n\n サマリ\nこの記事を読むと、図の..."
  },
  {
    "title": "小規模チームがゼロからTerraform構成を設計した話 - AI時代の運用を見据えて",
    "date": "2025-10-16T12:36:44.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/pivotmedia/articles/pivot-terraform-ai-era-design",
    "content": "こんにちは。PIVOTでソフトウェアエンジニアとして、Webフロントエンド、バックエンド、インフラを横断的に担当している@tawachanです。\nこの記事では、PIVOTのプロダクトチームでインフラのTerraform化を推進した経験を共有します。IaCできていなかった状態から、AI時代の運用を見据えた構成をゼロから設計した過程と判断基準について、振り返りながら紹介していきます。\n\n PIVOTのチーム状況と背景\n\n チーム体制\nPIVOTはビジネス映像メディア「PIVOT」を運営する会社です。開発チームは正社員エンジニア3名、QAエンジニア1名、プロダクトマネージャー1名、業務委託で数..."
  },
  {
    "title": "Perforce × FSx for ONTAP で実現する、大規模開発環境のストレージ効率化とコスト削減",
    "date": "2025-10-16T12:31:45.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/perforce-and-fsxn-deliver-storage-efficiency-for-large-scale-development/",
    "content": "<p>このブログ記事は、ネットアップ合同会社 ソリューションアーキテクト 井谷寛と AWS シニアソリューションアーキテクト 長田義広が共同で執筆し、株式会社東陽テクニカ テクニカルサポート 村吉翔大とネットアップ合同会社 シニアクラウドソリューションアーキテクト 藤原善基が監修しています。</p> \n<h2></h2> \n<h2>はじめに</h2> \n<p>ソフトウェア開発で利用される VCS ( Version Control System ) には、Git / Git LFS や Subversion、そしてUnity Version Control ( 旧名 Plastic SCM ) などがあります。しかしゲーム開発や映像制作で広く利用されるゲームエンジンである Unreal Engine と連携してよく使われるのが Perforce P4 ( 旧名 Helix Core、以降 Perforce と表記 ) です。<br> 本記事では AWS 上で Perforce と NetApp ONTAP を組み合わせるメリットとして、大規模なソフトウェア開発に使えるストレージの効率化とコスト削減を実現する手法について説明します。</p> \n<p>※ Perforce に関する解説は<a href=\"https://aws.amazon.com/jp/blogs/news/tag/perforce/\" target=\"_blank\" rel=\"noopener\">こちら</a>の AWS ブログにも記載があります</p> \n<h2></h2> \n<h2>Perforce と NetApp ONTAP を組み合わせるメリット</h2> \n<h3>1. データ量の削減とストレージコストの削減</h3> \n<p>Perforce で管理するデジタルアセット ( 3DCG コンテンツや映像コンテンツ、ソースコードなど ) はプロジェクト間で流用や共有されることが多く、プロジェクト終了時にシステム管理者が削除を要請してもすぐに削除が可能になる訳ではありません。ソースコードであればデータ量は極端に大きくなることはありませんが、映像コンテンツはファイルサイズが大きい為サーバやストレージを圧迫します。どのデータを残してどれを削除するのかを選別するのは時間のかかる作業であり、また「あの時のあのバージョンが欲しい」という状況が将来発生することを考えると、プロジェクト終了時に過去のバージョンは全て捨てて最新バージョンだけ残すと割り切れないケースもあります。</p> \n<p>このように多くのデータを保持する為に、重複排除機能を持ったストレージを活用してデータの保持コストを削減するアプローチがあります。バージョン管理システムには差分の少ない異なるデータが複数世代格納されることが多い為、一般的に重複排除が効きやすいです。NetApp ONTAP には重複排除機能があり、このボリュームを Perforce のリポジトリとして設定するだけでストレージコストを削減できます。</p> \n<p>AWS 上で Perforce を利用する場合は <a href=\"https://aws.amazon.com/jp/fsx/netapp-ontap/\" target=\"_blank\" rel=\"noopener\">Amazon FSx for NetApp ONTAP</a> ( FSx for ONTAP ) を活用できます。マネジメントコンソールや AWS CLI を用いてユーザの VPC に NFS / CIFS / iSCSI プロトコルで接続可能なストレージを提供できます。<a href=\"https://aws.amazon.com/jp/ec2/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Compute Cloud</a> ( Amazon EC2 ) インスタンスにインストールした Perforce サーバが FSx for ONTAP を NFS プロトコルなどでマウントし、そのパスを Perforce サーバ上でリポジトリとして定義すれば設定は完了です。</p> \n<p>重複排除に加えて、FSx for ONTAP の階層化設定を追加するとアクセス頻度の低いデータは SSD 層から GB 単価の安いキャパシティ層にデータを透過的に移動するようになります。これにより同容量の <a href=\"https://aws.amazon.com/jp/ebs/\" target=\"_blank\" rel=\"noopener\">Amazon Elastic Block Store</a> (Amazon EBS) を Perforce サーバに割り当てるのに比べ半分以下のコストで運用できるようになります。</p> \n<p>※ FSx for ONTAP のコストは <a href=\"https://calculator.aws/#/createCalculator/FSxForNetAppOntap\">AWS Pricing Calculator</a> から算出できます</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167100\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/fsxn-cost-1.png\" alt=\"FSxN Cost\" width=\"1400\" height=\"784\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 1: EBS と FSx for ONTAP のコスト比較 ( 2025 年 7 月時点 )</em></p> \n<p>これら FSx for ONTAP の機能を活用することでデータの管理コストを下げることが可能です。AWS の<a href=\"https://aws.amazon.com/jp/solutions/guidance/building-perforce-helix-core-on-aws/\">ガイダンス</a>では 16TB 未満は EBS の GP3 ボリュームタイプの利用を推奨していますが、Perforce で扱うデータ量がそれ以下であっても、16TB 以上に容量が増えていく想定であれば FSx for ONTAP の利用を検討できます。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166919\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/perforce-guidance.png\" alt=\"Perforce Guidance\" width=\"1433\" height=\"811\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 2: Guidance for Building Perforce Helix Core on AWS</em></p> \n<h3></h3> \n<h3>2. Perforce サーバの負荷軽減 ( ストレージオフロード )</h3> \n<p>開発規模の大きいプロジェクトであったり、複数拠点で大容量のデータ連携をする必要がある場合、そのデータ転送処理にPerforce サーバのリソースがとられることがあります。他の VCS と異なり Perforce では Perforce プロキシサーバや転送レプリカ、エッジサーバなどを立てて分散処理することが可能です。それでもパッチ適用やエラーログ調査などの運用コストが増えることを鑑みるとサーバ台数は最小限にすべきです。</p> \n<p>以下の処理を NetApp ONTAP に任せることで、Perforce サーバの負荷を下げることができます。<br> A. ファイルの圧縮・解凍処理<br> B. ファイルのサーバ間ネットワーク転送</p> \n<h4></h4> \n<h4>A. ファイルの圧縮・解凍処理</h4> \n<p>通常ファイルを受け取った Perforce サーバは、そのデータを圧縮した上でディポ ( リポジトリ ) に格納します。しかし大量のファイルを同時に処理するとこの圧縮処理でサーバの CPU 負荷が 100% になることがあります。また CPU コアが多い環境では、仮に空いているコアがあったとしても、圧縮のオーバーヘッドによりネットワーク帯域に余裕があるにもかかわらず転送レートが低い状態になることがあります。読み出し時にも解凍に CPU を使うため、大量のデータをダウンロードする際同様に Perforce サーバがボトルネックになることがあります。これらはプロキシサーバやエッジサーバで負荷分散していても、特定のサーバで発生し得ます。</p> \n<p>※圧縮のオーバーヘッド : Perforce サーバがクライアントから受信したデータは Perforce サーバの CPU を使って圧縮します。もし圧縮が無効であれば Perforce サーバは受信したデータをそのままディポに格納するため、サーバプロセスが圧縮することによる処理遅延 ( = データ転送を低下させる要素 ) が削減されます。</p> \n<p>※近年では VCS にデータを格納する前に圧縮をしてしまうアプリケーションも増えています。Unity などのゲームエンジンでは圧縮した状態で VCS にデータを渡すこともあり、VCS 側の圧縮設定をどうするかは注意すべき設計要素になりつつあります</p> \n<p>このような時は Perforce によるデータ圧縮を無効にして圧縮処理は外部のストレージに委ねます。NetApp ONTAP ストレージにはハードウェア圧縮・解凍するためのアクセラレータが搭載されています。ネットアップ合同会社のテスト環境では、圧縮済みのデータをサブミットする際に Perforce の gz 圧縮を無効化することで、ネットワーク転送スピードが 3 ～ 8 倍程度高速化することを確認しています。</p> \n<p>Perforce で圧縮を無効にする方法は <code>lbr.autocompress</code> と <code>p4 typemap</code> の 2 種類があります。すべてのファイルタイプを非圧縮にするには後者の設定が有効です。</p> \n<p><strong>設定 (1) lbr.autocompress</strong></p> \n<p>1. 既存の設定を確認 ( <code>p4 configure show</code> )</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure show allservers</code></pre> \n<p>以下のような行があれば、次の手順に進みます。<br> <code>any: lbr.autocompress = 1</code><br> <code>edge: lbr.autocompress = 1</code><br> <code>master: lbr.autocompress = 1</code></p> \n<p>2. 圧縮設定の解除 ( <code>p4 configure unset</code> )</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure unset any#lbr.autocompress\nLinux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure unset edge#lbr.autocompress\nLinux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure unset master#lbr.autocompress</code></pre> \n<p>3. 明示的な非圧縮の設定 ( <code>p4 configure set</code> )</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT configure set any#lbr.autocompress=0</code></pre> \n<p><code>edge</code> や <code>commit</code> ではなく <code>any</code> を指定することで、Perforce 全体に設定が反映されます。</p> \n<p><strong>設定 (2) p4 typemap</strong></p> \n<p>1. <code>p4 typemap</code> ですべてのディポのすべてのファイルを非圧縮に指定</p> \n<pre><code class=\"lang-bash\">Linux# p4 -u PERFORCE_SUPERUSER_NAME -p PERFORCE_SERVER_IP:PORT typemap</code></pre> \n<p>エディタが起動するので、すべてのディポ <code>( //... )</code> のすべてのファイル <code>( * )</code> を非圧縮 <code>( binary+F )</code> として扱うように設定します。</p> \n<pre><code class=\"lang-bash\">TypeMap:\nbinary+F //...*</code></pre> \n<p>エディタを保存して終了すれば、設定完了です。</p> \n<p>※ Perforce のバージョン2022.1 以降、<code>lbr.autocompress</code> は “1” がデフォルト値になっています。古いバージョンを使用しているユーザは、現在の設定値を事前にご確認ください</p> \n<p>※ Perforce に設定可能なパラメータの一覧は<a href=\"https://help.perforce.com/helix-core/server-apps/cmdref/current/Content/CmdRef/configurables.alphabetical.html\" target=\"_blank\" rel=\"noopener\">公式サイト</a>に記載があります</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166925\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/lbr.png\" alt=\"lbr設定\" width=\"1007\" height=\"470\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 3: lbr.autocompress の設定</em></p> \n<h4>B. バージョン化ファイルの Perforce サーバ間ネットワーク転送</h4> \n<p>このオフロードは Perforce を分散サーバ構成にしたときに有効です。Perforce の分散アーキテクチャ ( 7 種類 ) はこちらの<a href=\"https://help.perforce.com/helix-core/server-apps/p4sag/current/Content/P4SAG/deployment-architecture.html\" target=\"_blank\" rel=\"noopener\">ドキュメント</a>に記載があります。</p> \n<p>※ Perforce の中心となるサーバにはセントラルサーバやマスタサーバ、コミットサーバなどいくつかの呼び方がありますが、本ブログでは「コミットサーバ」と表記を統一します</p> \n<p>プロキシサーバやエッジサーバがコミットサーバから離れている場所に存在する場合、通常 Perforce クライアントがプロキシサーバなどにデータをリクエストするとプロキシサーバはコミットサーバにファイルを要求し、そのデータをプロキシサーバのキャッシュ領域に保存しつつ Perforce クライアントにデータを渡します。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166926\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/perforce-proxy.png\" alt=\"Perforce Proxy\" width=\"1126\" height=\"634\" border=\"1\"></p> \n<p style=\"text-align: center\"><em>図 4: 通常の Perforce サーバ間データ同期</em></p> \n<p>これに対して、NetApp ONTAP の機能と連携してデータを同期する場合は以下の様になります。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167104\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/perforce-proxy-with-ontap-1.png\" alt=\"perforce-proxy-with-ontap\" width=\"1400\" height=\"778\"></p> \n<p style=\"text-align: center\"><em>図 5: NetApp ONTAP の機能を使った Perforce サーバ間データ同期</em></p> \n<p>サーバ間のファイル転送は NetApp ONTAP の FlexCache という機能を使い、Perforce の機能とは別でデータを転送します。。FlexCache が設定された NetApp ONTAP ストレージをプロキシサーバやエッジサーバがマウントすると、キャッシュストレージにはオリジンストレージのファイルシステムのメタデータのみを転送・保存するため、実体データがキャッシュに存在しなくてもコミットサーバ上のすべてのディポのデータにプロキシサーバが直接アクセスできる状態になり、Perforce サーバ間のバージョン化ファイルの転送が不要になります。<br> ※実データの転送は Perforce 間で行われませんが、Perforce 内部でメタデータを管理するデータベースへのアクセスは引き続き Perforce 間で行われます</p> \n<p>FSx for ONTAP でもこの FlexCache を使えるため、AWS に立てた Perforce サーバもこの機能の恩恵を受けることができます。</p> \n<p>※データを二重持ちするわけではなく、NetApp ONTAP のキャッシュ機能を活用するため、キャッシュ側のストレージコストは最小限となります<br> ※キャッシュストレージの容量が溢れそうになると、ストレージが自動的にアクセス頻度の低いデータをキャッシュから削除して空きスペースを確保します</p> \n<h3></h3> \n<h3>3. リモート拠点やクラウドとのデータ連携作業の簡易化</h3> \n<p>Perforce は分散アーキテクチャを採用しているため、2.B. で説明したサーバ間転送を用いなくても利用することは可能です。しかし特に距離の離れた拠点との通信ではネットワークの遅延が大きいことによる性能低下が発生するため、Perforce サーバのチューニングだけでなくその下で動く Linux OS のチューニングも必要になることがあります。</p> \n<p>自社の環境にあわせてこれらを適切に設定するには幅広い知識とスキル・経験が必要になりますが、NetApp ONTAP のストレージキャッシュ技術を組み合わせることでそのハードルを下げることができます。リモート拠点のプロキシサーバやエッジサーバはその拠点に設置されたキャッシュ用の NetApp ONTAP、AWS 上では FSx for ONTAP をマウントするだけで、高速なデータ連携が可能になります。</p> \n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167105\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/perforce-edge-1.png\" alt=\"perforce-edge\" width=\"1400\" height=\"782\"></p> \n<p style=\"text-align: center\"><em>図 6: エッジサーバと組み合わせた場合の構成例</em></p> \n<h2></h2> \n<h2>まとめ</h2> \n<p>ネットアップ合同会社には日本のお客様向けに Perforce と AWS を連携させて検証できる環境があります。また海外リージョンの FSx for ONTAP と接続して性能検証を行う設備もそろっています。バージョン管理システムの運用管理にお困りの方はご相談ください。</p> \n<p>AWS では多くのゲーム会社様が AWS のクラウドサービスを使ってゲームを開発・運用するための技術支援をしています。またこのブログの様に AWS パートナー企業と共同でゲーム会社様に役立つ情報をご紹介したり、CEDEC や GDC などのゲーム業界イベントや AWS 主催のイベントでも情報を発信しています。私たちの活動がゲーム業界の発展に貢献できる様、今後も技術とビジネスの両面から全力でお客様をサポートしていく所存です。</p> \n<h2></h2> \n<h2>著者 ( 敬称略 )</h2> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/netapp-itani.png\" alt=\"NetApp Itani\" width=\"293\" height=\"353\">\n </div> \n <h3 class=\"lb-h4\">井谷 寛</h3> \n <p>ネットアップ合同会社 ソリューションアーキテクト部 ソリューションアーキテクト</p> \n <p>ハイブリッド・マルチクラウドの提案を得意とするエンジニア。様々な技術を組み合わせて検証し、ソリューション化して、販売から事例化までトータルでお客様をサポートしている。お客様やパートナー様と一緒に手を動かして現実的な提案をするのが得意。</p> \n</div> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img src=\"https://a0.awsstatic.com/main/images/blogs/avatars/aws-avatar-default.png\" alt=\"Murayoshi\" width=\"125\">\n </div> \n <h3 class=\"lb-h4\">村吉 翔大</h3> \n <p>株式会社東陽テクニカ</p> \n <p>ソフトウェア・ソリューション</p> \n <p>テクニカルサポート</p> \n</div> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/netapp-fujiwara-296x300.jpg\" alt=\"NetApp Fujiwara\" width=\"296\" height=\"300\">\n </div> \n <h3 class=\"lb-h4\">藤原 善基</h3> \n <p>ネットアップ合同会社 AWS SE Support シニアクラウドソリューションアーキテクト</p> \n <p>Amazon FSx for NetApp ONTAPの技術支援を担当するエンジニア。NetAppが持つONTAPのナレッジと、AWSとFSx for ONTAPの共同開発・共同営業を通して積み上げた実績と経験に基づくTIPSを資料として公開・トレーニングや案件支援などを行なっている。新卒で国際物流業の物理コンテナを扱う営業になった後、現職まで複数の業種・職種を経験。</p> \n</div> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2024/08/07/REEngine_Nagata.png\" alt=\"\" width=\"192\" height=\"256\">\n </div> \n <h3 class=\"lb-h4\">長田 義広</h3> \n <p>アマゾンウェブサービスジャパン合同会社 ゲームスペシャリスト シニアソリューションアーキテクト</p> \n <p>ゲーム会社でインフラエンジニア、ゲームプログラマなどを務めた後 AWS Japan に入社。ゲーム業界のお客様だけでなくゲームエンジンを使ったストリーミング配信やメタバースなどノンゲーム分野も支援している。社内ではゲーム・ストレージ・メディアの3つの技術コミュニティで活動中。</p> \n</div>"
  },
  {
    "title": "【Next.js】散らかりにくいREST APIのエラーハンドリング",
    "date": "2025-10-16T12:30:28.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/frontendflat/articles/d5ea1c5c533c71",
    "content": "Next.jsでAPIリクエストがエラーとなった場合のトースト表示を実装していたのですが、production buildではメッセージが隠されてしまう現象に遭遇しました。\n\n\nAn error occurred in the Server Components render. The specific message is omitted in production builds to avoid leaking sensitive details. A digest property is included on this error instance which may provi..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.8",
    "date": "2025-10-16T10:03:26.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.8",
    "content": "### Core Changes\n\n- Revert \"Include server latency in debug info\": #84932\n- Development: Use process.hrtime for request time calculation: #84905\n- Use correct JSX runtime for library-owned JSX in React Server: #84869\n- Development: Implement request log time details: #84906\n\n### Credits \n\nHuge thanks to @ztanner, @timneutkens, and @eps1lon for helping!\n"
  },
  {
    "title": "Amazon Bedrock で日本国内に閉じた Anthropic Claude 4.5 の推論が可能に！日本国内クロスリージョン推論のご紹介",
    "date": "2025-10-16T08:35:07.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-bedrock-now-supports-japan-cross-region-inference/",
    "content": "<p>世界中の組織が、お客様体験の向上、業務の効率化、イノベーションの推進を目的として、生成 AI の機能をアプリケーションに統合しています。生成 AI ワークロードの規模と重要性が増すにつれ、AI を活用したアプリケーションの一貫したパフォーマンス、信頼性、可用性を維持することが新たな課題となっています。同時に、多くの日本企業では、データレジデンシー要件やコンプライアンス規制により、データ処理を国内に限定する必要があります。</p> \n<p>このニーズに応えるため、<a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a> では <a href=\"https://www.anthropic.com/\">Anthropic</a> の最新モデル <strong><a href=\"https://aws.amazon.com/jp/blogs/news/introducing-claude-sonnet-4-5-in-amazon-bedrock-anthropics-most-intelligent-model-best-for-coding-and-complex-agents/\">Claude Sonnet 4.5</a> / Claude Haiku 4.5</strong> と共に、<strong><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html\">日本国内クロスリージョン推論</a> (Japan Cross Region Inference)</strong> を導入しました。このマネージドな機能により、推論リクエストを日本国内のリージョンに限定自動的にルーティングし、開発者が需要の変動を予測したり、複雑な負荷分散メカニズムを実装したりすることなく、トラフィックバーストをシームレスに処理できるようになります。</p> \n<p>本記事では、日本国内クロスリージョン推論の仕組み、そして Claude 4.5 シリーズと組み合わせることで、コンプライアンス要件を満たしながら生成 AI アプリケーションのパフォーマンスと信頼性を向上させる方法について解説します。</p> \n<h2>日本国内クロスリージョン推論のコア機能</h2> \n<p>日本国内クロスリージョン推論は、データを日本国内に留めながら、東京リージョンと大阪リージョンの計算リソースを活用することで、予期しないトラフィックバーストに対応します。このセクションでは、この機能の動作原理と、その基盤となる技術メカニズムについて説明します。</p> \n<h3>推論プロファイルの理解</h3> \n<p>Amazon Bedrock における<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles.html\">推論プロファイル</a>は、基盤モデルと、モデル呼び出しリクエストをルーティング可能なひとつ以上のリージョンのセットを定義します。Claude 4.5 の日本国内クロスリージョン推論プロファイルは、この概念を地理的境界内で適用し、リクエストを日本国内のリージョン (東京リージョンもしくは大阪リージョン) のいずれかにルーティングすることで、データレジデンシー要件を満たしながら、予期しないトラフィックバーストに備えて複数リージョンにトラフィックを分散できます。</p> \n<p>推論プロファイルについて理解するために重要な概念として以下のふたつがあります。</p> \n<ul> \n <li><strong>ソースリージョン</strong> – API リクエストが発行されるリージョン</li> \n <li><strong>デスティネーションリージョン</strong> – Amazon Bedrock が推論のためにリクエストをルーティングできるリージョン</li> \n</ul> \n<p>日本国内クロスリージョン推論では、デスティネーションリージョンは以下の日本国内のリージョンに限定されます。</p> \n<ul> \n <li><strong>ap-northeast-1</strong> (東京リージョン)</li> \n <li><strong>ap-northeast-3</strong> (大阪リージョン)</li> \n</ul> \n<p>これにより、すべての推論処理が日本国内で完結し、データが国外に出ることはありません。</p> \n<p>かつ、クロスリージョン推論では、モデルの可用性、キャパシティ、レイテンシーなど複数の要素を考慮して、最適なリージョンにリクエストをルーティングします。リクエストの割り振りには手動設定を必要とせず、自動的に最適な利用可能リージョンを選択します。</p> \n<h3>モニタリングとロギング</h3> \n<p>クロスリージョン推論を使用する場合、<a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch</a> と <a href=\"https://aws.amazon.com/jp/cloudtrail/\">AWS CloudTrail</a> は、リクエストが発生したソースリージョンにのみログを記録します。これにより、推論リクエストが最終的にどこで処理されるかに関係なく、すべてのレコードを単一のリージョンに維持することで、モニタリングとロギングが簡素化されます。</p> \n<p>どのリージョンがリクエストを処理したかを追跡するためには CloudTrail の記録を参照できます。CloudTrail イベントには、デスティネーションリージョンを指定する <code>inferenceRegion</code> キーを持つ <code>additionalEventData</code> フィールドが含まれています。これにより、日本国内の AWS インフラストラクチャー全体での推論リクエストの分散を監視および分析できます。</p> \n<h3>データセキュリティとコンプライアンス</h3> \n<p>Amazon Bedrock の通常のオンデマンド推論と同様に、クロスリージョン推論においても、データセキュリティの高い基準を維持します。クロスリージョン推論中に送信されるデータは、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html\">暗号化され、安全な AWS ネットワーク内に留まります</a>。機密情報は、どのリージョンがリクエストを処理するかに関係なく、推論プロセス全体を通じて保護されます。</p> \n<p><a href=\"https://aws.amazon.com/jp/compliance/shared-responsibility-model/\">セキュリティとコンプライアンスは AWS とお客様の間における共同責任</a>であるため、異なる地理的場所での推論リクエスト処理に伴う法的またはコンプライアンス要件も考慮する必要があります。日本国内クロスリージョン推論では、リクエストは日本国内のリージョンのみにルーティングされるため、データレジデンシー要件を満たしながら、高可用性とスループットのメリットを享受できます。</p> \n<h2>日本国内クロスリージョン推論の実装</h2> \n<p>Claude 4.5 で日本国内クロスリージョン推論は以下のステップで使用できます。</p> \n<ol> \n <li><strong>日本国内クロスリージョン推論プロファイル ID を使用</strong> – Amazon Bedrock への API 呼び出しを行う際、リージョン固有のモデル ID の代わりに、日本国内クロスリージョン推論プロファイル ID (Claude Sonnet 4.5 の場合は <code>jp.anthropic.claude-sonnet-4-5-20250929-v1:0</code>、Claude Haiku 4.5 の場合は <code>jp.anthropic.claude-haiku-4-5-20251001-v1:0</code>) を指定する。これは <code>InvokeModel</code> API と <code>Converse</code> API の両方で機能する。</li> \n <li><strong>IAM 権限の設定</strong> – 推論プロファイルと、デスティネーションリージョンの基盤モデルにアクセスするための適切な <a href=\"https://aws.amazon.com/jp/iam/\">AWS Identity and Access Management</a> (IAM) 権限を付与する。</li> \n</ol> \n<p>適切な IAM 権限の詳細な設定方法と前提条件については、以下の公式ドキュメントをご参照ください。</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-prereq.html\">推論プロファイルの前提条件</a></li> \n <li><a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html\">推論プロファイルをモデル呼び出しで使用する</a></li> \n</ul> \n<h3>サービスクォータの管理</h3> \n<p>日本国内クロスリージョン推論のサービスクォータ増加を申請する場合、それぞれのソースリージョン (日本の場合は東京もしくは大阪) の <a href=\"https://console.aws.amazon.com/servicequotas\">AWS Service Quotas コンソール</a>を使用します。例えば Claude Sonnet 4.5 モデルのクォータ増加をリクエストする際には、以下の画像のように関連する特定のクォータを検索し、特定のリージョンでのワークロード要件に基づいて増加申請を提出できます。詳しくは <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/quotas.html\">Amazon Bedrock のクォータ管理ドキュメント</a>をご参照ください。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/Screenshot-2025-10-07-at-4.18.03 pm.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167090\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/Screenshot-2025-10-07-at-4.18.03 pm.png\" alt=\"\" width=\"2784\" height=\"1482\"></a></p> \n<h2>日本国内クロスリージョン推論の料金</h2> \n<p>グローバル全体分散のクロスリージョン推論に比べて、日本国内クロスリージョン推論では 10% 上乗せの料金設定になっています。以下は Claude Sonnet 4.5 および Claude Haiku 4.5 の料金表です。その他のモデルも含めた詳しい料金は <a href=\"https://aws.amazon.com/jp/bedrock/pricing/\">Amazon Bedrock 料金ページ</a>をご参照ください。</p> \n<table style=\"height: 153px\" border=\"1\" width=\"765\"> \n <tbody> \n  <tr> \n   <td><strong>モデル</strong></td> \n   <td><strong>ゾーン</strong></td> \n   <td><strong>入力 (100万トークン当たり)</strong></td> \n   <td><strong>出力 (100万トークン当たり)</strong></td> \n   <td><strong>プロンプトキャッシュ書き込み (100万トークン当たり)</strong></td> \n   <td><strong>プロンプトキャッシュ読み込み (100万トークン当たり)</strong></td> \n  </tr> \n  <tr> \n   <td>Claude Sonnet 4.5</td> \n   <td>グローバル</td> \n   <td>$3</td> \n   <td>$15</td> \n   <td>$3.75</td> \n   <td>$0.3</td> \n  </tr> \n  <tr> \n   <td>Claude Sonnet 4.5</td> \n   <td>日本 (US/EU/オーストラリアも同様)</td> \n   <td>$3.3</td> \n   <td>$16.5</td> \n   <td>$4.125</td> \n   <td>$0.33</td> \n  </tr> \n  <tr> \n   <td>Claude Haiku 4.5</td> \n   <td>グローバル</td> \n   <td>$1</td> \n   <td>$5</td> \n   <td>$1.25</td> \n   <td>$0.1</td> \n  </tr> \n  <tr> \n   <td>Claude Haiku 4.5</td> \n   <td>日本 (US/EU/オーストラリアも同様)</td> \n   <td>$1.1</td> \n   <td>$5.5</td> \n   <td>$1.375</td> \n   <td>$0.11</td> \n  </tr> \n </tbody> \n</table> \n<h3>日本国内とグローバルのクロスリージョン推論の選択</h3> \n<p>現在 Amazon Bedrock で Anthropic の従来モデルを使用している場合、Claude Sonnet/Haiku 4.5へアップグレードすることで生成 AI アプリケーションの性能を強化することができるでしょう。従来の Claude 3/3.5/3.7/4 といったシリーズのモデルから切り替えるべき主な理由としては、<a href=\"https://www.anthropic.com/news/claude-haiku-4-5\">Sonnet 4.5</a>/<a href=\"https://www.anthropic.com/news/claude-haiku-4-5\">Haiku 4.5</a> のさまざまなドメインにおける優れたパフォーマンスが挙げられます。エージェント型ツール利用、コンピュータ利用といったエージェント構築における汎用な能力の向上だけでなく、特にコーディングや金融分析といった領域においても最先端のパフォーマンスを持つことが示されています。Claude Haiku 4.5 に関しては Sonnet シリーズの 1/3 のコストで利用でき、かつコード生成能力としても従来の Sonnet 4 よりも高いベンチマークスコアを達成するなど、コストパフォーマンスに優れたモデルであることも注目に値します。</p> \n<p>また、<a href=\"https://docs.aws.amazon.com/ja_jp/bedrock/latest/userguide/model-lifecycle.html\">発表から時間が経過した旧来のモデル</a>は、最新のモデルよりも信頼性が低い可能性があることにご注意ください。最高レベルのサポートと信頼性を維持するために、ワークロードを最新なモデルに移行することを強くお勧めします。</p> \n<p><strong>グローバル分散のクロスリージョン推論を選択すべきケース</strong></p> \n<ul> \n <li>データレジデンシー要件がない、または柔軟に対応できる</li> \n <li>世界中の Amazon Bedrock 対応リージョンのリソースプールを活用して、最大限のスループットを確保したい</li> \n <li>グローバルに展開するアプリケーションで、世界中どこからでも同等のパフォーマンスを提供したい</li> \n</ul> \n<p><strong>日本国内クロスリージョン推論を選択すべきケース</strong></p> \n<ul> \n <li>データレジデンシー要件があり、データを日本国内に留める必要がある</li> \n <li>金融、医療、政府などの規制業界で、国内完結のデータ処理が求められる</li> \n <li>コンプライアンス規制により、データの国外転送が制限されている</li> \n <li>ビジネス要件として、データ処理場所を明確に特定・管理する必要がある</li> \n <li>10%上乗せのプレミアム料金を許容できる</li> \n</ul> \n<p>これまでデータレジデンシー要件により、東京リージョンで利用可能な Claude 3.5 Sonnet 等のモデルを利用されていたお客様も、ぜひ日本国内に閉じて推論処理を実行できる Claude Haiku 4.5 もしくは Claude Sonnet 4.5 の利用をご検討ください。</p> \n<h2>まとめ</h2> \n<p>Amazon Bedrock で新しく利用できるようになった Claude Sonnet/Haiku 4.5 では、日本国内クロスリージョン推論の機能により、日本に閉じたデータ処理が可能です。簡単な実装と、CloudTrail および CloudWatch による包括的なモニタリングにより、コンプライアンス要件を満たしながら、最先端の生成 AI モデルを活用できます。</p> \n<p>Claude Sonnet/Haiku 4.5 の日本国内クロスリージョン推論をお試しいただく際には、Amazon Bedrock のマネジメントコンソールの「チャット/テキストのプレイグラウンド」において、そのメリットを直接体験することをお勧めします。また、皆様のアプリケーションにおいても、日本国内クロスリージョン推論プロファイル ID (Claude Sonnet 4.5 の場合は <code>jp.anthropic.claude-sonnet-4-5-20250929-v1:0</code>、Claude Haiku 4.5 の場合は <code>jp.anthropic.claude-haiku-4-5-20251001-v1:0</code>) を使用するようにコードを更新し、適切な IAM 権限を設定し、アプリケーションが日本国内の AWS インフラストラクチャーを活用して推論を実行する様子を監視してください。</p> \n<p>Amazon Bedrock の日本国内クロスリージョン推論の詳細については、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html\">クロスリージョン推論によるスループットの向上</a>、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html\">推論プロファイルのサポートされるリージョンとモデル</a>、<a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-use.html\">モデル呼び出しでの推論プロファイルの使用</a>を参照してください。</p> \n<hr> \n<h3>著者について</h3> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-167069 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/kazmot-1.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>本橋 和貴</strong> (Motohashi, Kazuki) は、AWS Japan の機械学習ソリューションアーキテクトです。AI/ML 領域には8年ほど携わっており、AWS の生成 AI/ML サービスを利用する日本のお客様や AWS パートナー企業をサポートしています。最近購入したファイナルファンタジータクティクスを子育ての傍らプレイする時間を探していますが、まだ起動すらできていません。博士 (理学)。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-167070 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/takaaktk-1.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>菊地 貴彰</strong>（Kikuchi, Takaaki）は、AWS Japan で通信業界のお客様を担当するソリューションアーキテクトです。最近は学生時代の専攻である機械学習の知見を活かし、ビジネスにおける AI/ML の活用に関するご支援を多く行っています。趣味は音楽鑑賞であり、ライブ参加後は首が筋肉痛になります。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-167071 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/16/katayohe-1.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>片山 洋平</strong> (Katayama, Yohei) は AWS Japan のパブリックセクターのソリューションアーキテクトです。主に医療機関をはじめとしたヘルスケア業界のお客様のソリューション構築の支援を行なっています。週末は登山を嗜んでいます。</p>"
  },
  {
    "title": "株式会社マキタ様の AWS 生成 AI 事例「AWS 上の閉鎖型 AI 環境で労働災害報告書作成支援と経営ダッシュボードを内製開発。システム開発経験の少ないエンジニアが短期間でリリースを実現」のご紹介",
    "date": "2025-10-16T03:08:01.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-makita/",
    "content": "<p><em>本ブログは <a href=\"https://www.makita-corp.com/\">株式会社 マキタ様</a> と <a href=\"https://aws.amazon.com/jp/\">Amazon Web Services Japan 合同会社</a>&nbsp;が共同で執筆いたしました。</em></p> \n<p>みなさん、こんにちは。AWS ソリューションアーキテクトの森です。<br> 最近、製造業のお客様における生成 AI を活用した業務効率化の取り組みが加速しています。特に内製開発による AI 活用は、企業独自の課題に対応した柔軟なソリューションを低コストで実現できる点で注目されています。今回は、船舶用ディーゼルエンジンの製造・販売・アフターサービスを手がける株式会社マキタ様が AWS を用いて経営ダッシュボードと労働災害報告書作成支援 AI を「短期間」かつ「システム開発経験の少ないエンジニア主導の開発体制」で内製した事例をご紹介します。</p> \n<p>なお、本取り組みは、AWS ジャパンが 2025年7月15日に開催いたしました中堅・中小企業向け事業戦略説明会にて、株式会社マキタ 執行役員 情報企画部 部長 高山 百合子様よりご紹介いただきました。<br> なお、中堅・中小企業のお客様のビジネス成長や新たな価値創出に向けた、2025年度の新たな AWS の取り組み、生成 AI の事例の詳細については <a href=\"https://aws.amazon.com/jp/blogs/news/%E4%B8%AD%E5%A0%85%E3%83%BB%E4%B8%AD%E5%B0%8F%E4%BC%81%E6%A5%AD%E3%81%A7%E3%82%82%E5%BA%83%E3%81%8C%E3%82%8B%E7%94%9F%E6%88%90-ai%E3%80%82%E4%BC%81%E6%A5%AD%E3%81%AE%E6%88%90%E9%95%B7%E3%81%AB/\">こちら</a>&nbsp;をご参照ください。</p> \n<h2>株式会社マキタ様の状況と検証に至る経緯</h2> \n<p>株式会社マキタ様は、船舶用ディーゼルエンジンを製造する企業として、各種業務システムを AWS で運用しておりましたが、以下のような課題を抱えておりました。</p> \n<ul> \n <li>経営判断に必要なデータが社内の様々な部門に分散しており、迅速な意思決定を行う上でボトルネックとなることがあった。</li> \n <li>労働災害報告書の作成に多くの時間を要し、提出者ごとに記載および検討レベルにばらつきがある。また過去の類似事例や法令確認についても経験と知識が必要なため属人化しており、多面的な対策検討が不足しがちだった。</li> \n</ul> \n<p>そこで Amazon QuickSight (* 現 Amazon Quick Suite) や Amazon Bedrock をはじめとしたマネージドサービスを活用して、これらの課題を解決するソリューションの検証をすることになりました。</p> \n<p>生成 AI を活用して、以下2つのソリューションを情報システム部門にて内製開発しました。</p> \n<p>(*) Amazon QuickSight は先日リリースされた Amazon Quick Suite の一部に統合されました。詳細は <a href=\"https://aws.amazon.com/jp/blogs/news/reimagine-business-intelligence-amazon-quicksight-evolves-to-amazon-quick-suite/\">こちら</a> をご覧ください。</p> \n<h2>ソリューションと構成</h2> \n<h3>1. 経営ダッシュボード</h3> \n<p>本ソリューションは、クラウドストレージに取り込んだ情報ソース（就労、人材管理、会計データ）を基に、Amazon QuickSight を活用して可視化しています。</p> \n<ul> \n <li>AWS Lambda を活用した各種 SaaS やオンプレ環境からのデータを効率よく収集・整形</li> \n <li>AWS Glue DataBrew を活用した ETL 処理でデータを効率的に変換して Amazon S3 にて一元管理</li> \n <li>Amazon QuickSight を活用してデータを取り込み経営ダッシュボードとして可視化</li> \n</ul> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/makita_aws_architecture.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166882\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/makita_aws_architecture.png\" alt=\"\" width=\"608\" height=\"403\"></a></p> \n<h3>2.労働災害報告書作成支援 AI</h3> \n<p>本ソリューションでは、Amazon Bedrock を活用して労働災害報告書の作成・分析プロセスを効率化しました。</p> \n<ul> \n <li>AWS で構築していた既存の AI チャット基盤（Dify）のアーキテクチャを踏襲し、労働災害報告書作成支援 AI を Amazon Bedrockと Python で構築</li> \n <li>製造業で一般的なリスクアセスメント手法に沿った網羅的な AI 提案により、原因分析と対策立案時に関係者の議論を支援</li> \n <li>マルチエージェントコラボレーション機能により、使用目的に応じた柔軟に思考する AI を実現</li> \n <li>RAG (<a href=\"https://aws.amazon.com/jp/what-is/retrieval-augmented-generation/\">Retrieval Augmented Generation</a>) とデータベース（MCP : Model Context Protocol 経由での呼び出し）を使い分け、過去の災害情報や法令情報を効率的に検索・参照できる仕組みを実装</li> \n</ul> \n<p>AWS のセキュアなネットワーク内で、機密性の高い労働災害情報や社内データを外部に漏らすリスクを排除しながら、AI を活用した業務効率化を実現しました。</p> \n<p style=\"text-align: center\"></p> \n<h2>導入効果</h2> \n<p>上記のソリューションをリリースした結果、以下のような効果が得られました。</p> \n<h3>1. 経営ダッシュボード</h3> \n<ul> \n <li>統一された情報の見える化により各部門の自走的なデータ活用が促進</li> \n <li>7 つのダッシュボードで 231 の指標を可視化することに成功。更新頻度の上昇や視認性の向上、ドリルダウン機能の実装により、判断・意思決定スピードが向上</li> \n <li>ダッシュボード構築によりデータの共有や運用が標準化され、集計や分析の属人化リスクを軽減</li> \n</ul> \n<h3>2. 労働災害報告書作成支援 AI</h3> \n<ul> \n <li>過去事例を踏まえた多角的な分析により人間では見落としがちな災害要因を発見し、再発防止策の質が向上</li> \n <li>AIによる網羅的な原因分析やリスクアセスメント提案による検討漏れ防止</li> \n <li>過去 15 年分の自社災害 DB を AI が検索分析し、従来活用が難しかった過去データの有効活用を実現</li> \n</ul> \n<h2>お客様の声（株式会社マキタ様）</h2> \n<p>AWS はスモールスタートが容易で仕組みの再利用ができるため、内製のハードルが下がり、短期間での実装実現につながりました。安定した AWS 基盤上で完結する、多機能な AI 開発環境を使えることが、AWS 上で AI を使うメリットです。AWS の豊富なサービスを活用することによって、システム開発経験者の少ない状況でも、7カ月で経営ダッシュボードを、1.5 カ月で報告書作成支援 AI を内製開発できました。これは、潤沢にエンジニアを抱えることができない中堅・中小企業にとって、非常に魅力的な要素だと感じています。</p> \n<p>ダッシュボードも AI も、「蓄積されたデータを使い、人が判断したり、効率を上げたり、楽をしたりするためのツール」という意味でよく似ています。今後、より多くの社員が同時に利用したり、複雑な業務にも利用したいという要望が増えると考えています。実際、既に 200 近い AI とダッシュボード関連の活用案が、社内の全部門から寄せられています。それらの声に応えられるよう、私たちの部門で最新技術情報をキャッチしながら、更なるデータ活用と AI の高度利用を推進していきます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_aws_engine.jpg\"><br> <img loading=\"lazy\" class=\"wp-image-166106 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_aws_engine.jpg\" alt=\"\" width=\"460\" height=\"344\"><br> </a></p> \n<h2>まとめ</h2> \n<p>本事例は、製造業の企業が AWS の生成 AI サービスを活用することで、セキュリティを確保しつつ、業務効率化と安全対策の高度化を実現した好例です。株式会社マキタ様の内製化への積極的な姿勢と、AWS が提供する運用負荷の少ないマネージドサービス群が、経営ダッシュボードと労働災害報告書作成支援 AI の内製開発により、データ活用と業務プロセスの効率化を同時に達成しています。</p> \n<p>製造業における生成 AI の活用は、業務効率化だけでなく、生産性の向上や労働環境の安全性向上など様々な面で効果を発揮します。本事例が、様々な業種のお客様の AI 活用の参考になれば幸いです。AWS での生成 AI 活用や内製開発の推進にご興味をお持ちの方は、お気軽にご相談ください。</p> \n<p>\n <!-- 1枚目の写真と説明 --></p> \n<div style=\"align-items: center;margin-bottom: 30px\"> \n <div style=\"flex: 0 0 60%;max-width: 600px;margin-right: 20px\">\n  <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_awspic.jpg\"><br> <img loading=\"lazy\" width=\"1833\" height=\"1112\" class=\"alignnone wp-image-166107\" style=\"width: 100%;height: auto\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_awspic.jpg\" alt=\"\"><br> </a>\n </div> \n <div style=\"flex: 1\"> \n  <p><strong>株式会社マキタ</strong> (右から)<br> 執行役員 情報企画部 部長 高山 百合子 様<br> 情報企画部 宮﨑 凌大 様<br> 情報企画部 佐藤 功併 様<br> 情報企画部 岡 育美 様<br> 経営企画部 谷 かすみ 様</p> \n </div> \n</div> \n<div style=\"align-items: center;margin-bottom: 30px\"> \n <div style=\"flex: 0 0 60%;max-width: 600px;margin-right: 20px\"> \n  <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/15/makita_0715-scaled.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-166105\" style=\"width: 100%;height: auto\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/makita_0715.jpg\" alt=\"\" width=\"4435\" height=\"3443\"></a></p> \n </div> \n <div style=\"flex: 1\"> \n  <p><strong>株式会社マキタ</strong> : 執行役員 情報企画部 部長 高山 百合子様（中央）<br> <strong>Amazon Web Services Japan</strong> : アカウントマネージャー 植木 輝（左）、ソリューションアーキテクト 森 瞭輔（右）</p> \n </div> \n</div> \n<p>ソリューションアーキテクト 森</p>"
  },
  {
    "title": "キャパシティの分割、移動、変更による Amazon EC2 オンデマンドキャパシティ予約の効率的な管理",
    "date": "2025-10-16T01:07:12.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/efficiently-manage-amazon-ec2-on-demand-capacity-reservations-odcrs-with-split-move-and-modify/",
    "content": "<section class=\"blog-post-content lb-rtxt\"> \n <p><em>本稿は、2025 年 3 月 11 日に公開された “<a href=\"https://aws.amazon.com/jp/blogs/compute/efficiently-manage-amazon-ec2-on-demand-capacity-reservations-odcrs-with-split-move-and-modify/\">Efficiently manage Amazon EC2 On-Demand Capacity Reservations (ODCRs) with split, move, and modify</a>” を翻訳したものです。</em></p> \n <h2>はじめに</h2> \n <p>今日のクラウドファーストの世界では、アプリケーションの可用性を確保しながらコンピューティング能力を効率的に管理することがビジネスにとって非常に重要です。<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\">Amazon EC2 オンデマンドキャパシティ予約（ODCR）</a>は、予約を管理したいが、複数のチームやアカウントにまたがる予約を管理するのは難しいと考える組織にとって有用なツールです。2024 年 8 月に、キャパシティ予約の管理に新しい機能（分割、移動、変更）が導入されました。このブログでは、これらの機能がどのように業務を変えることができるかご紹介します。 </p> \n <h2>ODCR に関するよくある課題</h2> \n <p>ODCR を活用する際、キャパシティ予約の管理についていくつか課題に直面することがあります。これらの課題には以下が含まれますが、これらがすべてではありません。</p> \n <ul> \n  <li>一部のアカウントで予約したキャパシティが十分に活用されていない</li> \n  <li>余剰キャパシティを効率的に再配分できていない</li> \n  <li>複数の AWS アカウントにわたる既存キャパシティの管理が難しい</li> \n  <li>キャパシティ予約後の変更が難しい</li> \n </ul> \n <p>複数の開発チームと様々なプロジェクトが同時に進行している場合、効率的なキャパシティ割り当てに苦労するかもしれません。また、あるチームではキャパシティが余っている一方で、別のチームではキャパシティが切実に必要になっているという状況に直面することもありえます。</p> \n <h3>ユースケース 1: チーム間でのキャパシティの再配分</h3> \n <h4>未使用キャパシティのジレンマ</h4> \n <p>機械学習（ML）チームが c5.2xlarge インスタンス 10 個分の ODCR を所有しているものの、実際に使用しているのは 5 個のみというシナリオを考えてみます。一方、分析チームは新しいプロジェクトのために、同じタイプの <a href=\"https://aws.amazon.com/jp/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> インスタンスを 3 個を必要としています。これまでであれば、分析チームは新しいキャパシティ予約を作成する必要があり、独自のキャパシティ予約を管理するという不要な作業が発生していました。一方、ML チームが所有する ODCR の未使用のキャパシティ 5 個分は、不要なコストを発生させています。</p> \n <h4>キャパシティの分割</h4> \n <p>キャパシティ予約の<a href=\"https://docs.aws.amazon.com/jp_ja/AWSEC2/latest/UserGuide/capacity-reservations-split.html\">分割機能</a>を使用すると、EC2 インスタンス 10 個分の ODCR （図 1 の ODCR-1）を分割し、未使用キャパシティ 3 個分を使用して新しい ODCR を作成できるようになります。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-1-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-1-1-1024x372.png\" alt=\"キャパシティ分割前の ODCR-1 のキャパシティ\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165574\"></a></p> \n <p style=\"text-align: center\">図 1: キャパシティ分割前の ODCR-1 のキャパシティ</p> \n <p>この機能により、2 つの ODCR が作成されます。</p> \n <ol> \n  <li>元の ODCR（ODCR-1）: ML チーム向けのインスタンス 7 個分のキャパシティ</li> \n  <li>新しい ODCR（ODCR-2）: 分析チーム向けのインスタンス 3 個分のキャパシティ</li> \n </ol> \n <p>分割されると次の図のようになります。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-2.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-2-1024x372.png\" alt=\"キャパシティ分割により更新された ODCR-1 と新しく作成された ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165599\"></a></p> \n <p style=\"text-align: center\">図 2: キャパシティ分割により更新された ODCR-1 と新しく作成された ODCR-2</p> \n <h4>アカウント間の共有</h4> \n <p>キャパシティ予約の分割機能により、同じ AWS アカウント内に新しい ODCR が作成できます。チームが同じ AWS アカウントで作業している場合は、分割は直接実行され、追加の作業は必要ありません。ただし、チームが異なる AWS アカウントを使用している場合は、分割後に新しく作成された ODCR を<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservation-sharing.html\">共有</a>するために、<a href=\"https://aws.amazon.com/jp/ram/\">AWS Resource Access Manager (AWS RAM)</a> を使用する必要があります。これにより、アカウント間で共有されたキャパシティ予約も一元管理できます。</p> \n <p>キャパシティを分割する場合の前提条件と考慮事項の詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-split.html\">AWS ドキュメント</a>を参照してください。</p> \n <p>また、パラメーターや例外、制限などの詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/APIReference/API_CreateCapacityReservationBySplitting.html\">API</a> および <a href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/reference/ec2/create-capacity-reservation-by-splitting.html\">CLI</a> のドキュメントを参照してください。</p> \n <h3>ユースケース 2: ODCR 間のキャパシティの移動</h3> \n <h4>成長に合わせたスケーリング</h4> \n <p>数日後、分析チームではプロジェクト拡大のためにさらにインスタンス 1 個分のキャパシティが必要になり、ODCR-2 にキャパシティをさらに追加する必要が出てきました。</p> \n <h4>キャパシティの移動</h4> \n <p>この目的のために新しい ODCR を作成するのではなく、未使用キャパシティの 1 つを ODCR-1 から ODCR-2 に<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-move.html\">移動</a>することができます。この柔軟性により、新しくキャパシティ予約を作成する手間が省かれ、既存のワークロードの実行も中断されず、ODCR の管理をシンプルにできます。キャパシティの移動により、追加の調達を行うことなく、最適なリソース使用率を確保できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-3.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-3-1024x372.png\" alt=\"キャパシティ移動前の ODCR-1 と ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165598\"></a></p> \n <p style=\"text-align: center\">図 3: キャパシティ移動前の ODCR-1 と ODCR-2</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-4.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-4-1024x372.png\" alt=\"キャパシティ移動によりキャパシティを減らした ODCR-1 とキャパシティが追加された ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165612\"></a></p> \n <p style=\"text-align: center\">図 4: キャパシティ移動によりキャパシティを減らした ODCR-1 とキャパシティが追加された ODCR-2</p> \n <p>キャパシティを移動する場合の前提条件と考慮事項の詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-move.html\">AWS ドキュメント</a>を参照してください。</p> \n <p>また、パラメーターや例外、制限などの詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/APIReference/API_MoveCapacityReservationInstances.html\">API</a> および <a href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/reference/ec2/move-capacity-reservation-instances.html\">CLI</a> のドキュメントを参照してください。</p> \n <h3>ユースケース 3: 変化するワークロードのパターンに合わせたキャパシティ予約属性の調整</h3> \n <h4>動的なワークロード要件</h4> \n <p>データ処理のワークロードパターンが大きく変化する場合は、それに適応する必要があります。最初は、ODCR を特定のインスタンスに限定する基準で作成し、予測可能なワークロードを対象としていました。ですが、より動的で即興的な分析プロジェクトを導入するにつれて、予約に対してインスタンスを起動する方法をより柔軟にする必要が出てきました。</p> \n <h4>キャパシティ予約の変更</h4> \n <p>キャパシティ予約の<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-modify.html\">変更</a>により、新しい予約を作成したり、実行中のワークロードを中断したりすることなく、予約の属性を変更できるようになりました。ODCR は以下の変更が可能です。</p> \n <ul> \n  <li>インスタンス数の変更</li> \n  <li>インスタンスの適格性の変更（ターゲットからオープンへ）</li> \n  <li>プロジェクトのタイムラインに合わせたキャパシティ予約の終了日の変更</li> \n </ul> \n <p>キャパシティ予約の変更により、以下のことができるようになります。</p> \n <ul> \n  <li>厳密なインスタンスの適格性がなくても、新しいインスタンスをより柔軟に起動可能</li> \n  <li>さまざまなプロジェクトにおけるキャパシティ予約の使用率向上</li> \n  <li>変化するビジネスニーズに適応しながら、コストの最適化</li> \n </ul> \n <p>この機能は、既存のワークロードが中断されることなく継続的に実行されることを保証しながら、柔軟性を確保できるため、動的なワークロードにとって非常に貴重なツールとなります。ODCR-2 のキャパシティを 4 から 6 に変更する例については、次の図をご覧ください。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-5.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-5-1024x372.png\" alt=\"キャパシティ予約変更前の ODCR-2（全体キャパシティは 4 でインスタンスの適格性はターゲット）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165611\"></a></p> \n <p style=\"text-align: center\">図 5: キャパシティ予約変更前の ODCR-2（全体キャパシティは 4 でインスタンスの適格性はターゲット）</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-6.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-6-1024x372.png\" alt=\"キャパシティ予約変更後の ODCR-2（全体キャパシティは 6 でインスタンスの適格性はオープン）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165610\"></a></p> \n <p style=\"text-align: center\">図 6: キャパシティ予約変更後の ODCR-2（全体キャパシティは 6 でインスタンスの適格性はオープン）</p> \n <p>ODCR の規模を拡大したり、新規に作成したりするには、Amazon EC2 オンデマンドインスタンスのキャパシティに空きがあることが条件となります。したがって、既存の ODCR に未使用のキャパシティがある場合は、ODCR を変更するよりも、その ODCR を移動または分割する方が適切な選択肢となる場合があります。</p> \n <p>キャパシティ予約を変更する場合の前提条件と考慮事項の詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-modify.html\">AWS ドキュメント</a>を参照してください。</p> \n <p>また、パラメーターや例外、制限などの詳細については、<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/APIReference/API_ModifyCapacityReservation.html\">API</a> および <a href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/reference/ec2/modify-capacity-reservation.html\">CLI</a> のドキュメントを参照してください。</p> \n <h3>キャパシティ分割に関する特別な考慮事項</h3> \n <p>前のセクションでは、キャパシティ分割機能を使用して未使用の余剰キャパシティを切り離し、別のチームの ODCR を作成する方法について説明しました。また、この機能を使用して、使用済みキャパシティを分割して新しい ODCR を作成することもできます。この機能は、部分的に使用されている ODCR を分割して新しい ODCR を作成し、追跡と管理を容易にしたい場合に特に役立ちます。未使用や余剰キャパシティの分割に関する<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-split.html#capacity-reservations-split-considerations\">考慮事項</a>に加えて、使用済みキャパシティの分割には以下の考慮事項があります。</p> \n <ol> \n  <li>使用済みキャパシティは、どのアカウントとも共有されておらず、インスタンスの適格性がオープンである ODCR に対してのみ分割できる</li> \n  <li>キャパシティ予約内で実行されているインスタンスの適格性はオープンである</li> \n  <li>使用済みキャパシティを分割すると、適格性のあるインスタンスがランダムに選択される。分割対象のインスタンスを指定することはできず、数量を満たすのに十分な数の適格性のあるインスタンスが見つからない場合、キャパシティ分割は失敗する。分割するインスタンス数を指定すると、デフォルトでは未使用のキャパシティが最初に移動され、次に適格性のある実行中のインスタンス（予約内の使用済みキャパシティ）が移動される</li> \n </ol> \n <p>次のセクションでは、キャパシティ分割を使用できるシナリオと使用できないシナリオについて説明します。</p> \n <h4>シナリオ 1: 社内における ODCR の管理（他の AWS アカウントと共有されないキャパシティ予約）</h4> \n <p>社内プロジェクトで利用する ODCR が、他の AWS アカウントを持つ外部パートナーと共有せず、インスタンスの適格性がオープンであるシナリオとして、以下の条件を満たす ODCR-1 を考えてみます。</p> \n <ul> \n  <li>全体キャパシティが 10 個の c5.2xlarge インスタンス（インスタンスの適格性はすべてオープン）</li> \n  <li>現在 ML チームが使用しているインスタンスは 8 個</li> \n  <li>未使用のインスタンスは 2 個</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-7.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-7-1024x372.png\" alt=\"キャパシティ分割前の ODCR-1（キャパシティ予約の総容量は 10 で、そのうち未使用キャパシティは 2）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165609\"></a></p> \n <p style=\"text-align: center\">図 7: キャパシティ分割前の ODCR-1（全体キャパシティは 10 で未使用キャパシティは 2）</p> \n <p>この ODCR は他の AWS アカウントと共有されないため、キャパシティ予約を分割する際の柔軟性を最大限に高めることができます。現在使用中のインスタンス数に関わらず、最大 9 個のインスタンスを新しいキャパシティ予約（全体キャパシティから 1 を引いた数）として分割できます。このシナリオでは、使用済みキャパシティと未使用キャパシティの両方を共有できます。これにより、社内チームのキャパシティ割り当てを柔軟に再編成できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-8.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-8-1024x372.png\" alt=\"キャパシティ分割後の ODCR-1 と ODCR-2\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165608\"></a></p> \n <p style=\"text-align: center\">図 8: キャパシティ分割により更新された ODCR-1 と新しく作成された ODCR-2</p> \n <h4>シナリオ 2: 外部パートナーと共有する ODCR の管理（他の AWS アカウントと共有されるキャパシティ予約）</h4> \n <p>ODCR を外部パートナーの AWS アカウントと共有する必要があるシナリオとして、以下の条件を満たす ODCR-1 を考えてみます。</p> \n <ul> \n  <li>全体キャパシティが 10 個の c5.2xlarge インスタンス</li> \n  <li>現在チームとパートナーが使用しているインスタンスは 8 個</li> \n  <li>未使用のインスタンスは 2 個</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-9.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-9-1024x274.png\" alt=\"他の AWS アカウントと共有するキャパシティ分割前の ODCR-1\" width=\"1024\" height=\"274\" class=\"aligncenter size-large wp-image-165607\"></a></p> \n <p style=\"text-align: center\">図 9: 他の AWS アカウントと共有するキャパシティ分割前の ODCR-1</p> \n <p>この場合、選択肢は限定されます。ODCR-1 はパートナーの AWS アカウントと共有されるため、未使用のキャパシティ（最大 2 つのインスタンス）のみを分割できます。キャパシティ分割後、新しく作成された ODCR-2 は社内の AWS アカウントに残り、他の AWS アカウントと共有されることはありません。これにより、パートナーが実行中のワークロードへの中断を防ぎながら、キャパシティ管理の柔軟性を確保できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-10-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-10-1-1024x513.png\" alt=\"キャパシティ分割により他の AWS アカウントと共有される ODCR-1 と共有されない ODCR-2\" width=\"1024\" height=\"513\" class=\"aligncenter size-large wp-image-165614\"></a></p> \n <p style=\"text-align: center\">図 10: キャパシティ分割により他の AWS アカウントと共有される ODCR-1 と共有されない ODCR-2</p> \n <p>これらのシナリオは、社内環境および外部パートナーとの共有環境の両方におけるキャパシティ管理に関して重要なものです。キャパシティの分割や変更を計画する前に、ODCR の共有状況を慎重に検討し、社内チームと外部パートナーの両方にとって円滑な運用を確保する必要があります。</p> \n <h3>キャパシティ移動に関する特別な考慮事項</h3> \n <p>キャパシティ移動を行うと、利用可能な（または余剰の）キャパシティを ODCR 間で再配分できます。ただし、場合によっては、この機能を使用して使用済みインスタンスを ODCR 間で移動することもできます。この機能は、部分的に使用されている ODCR を 1 つに統合して追跡と管理を容易にしたい場合に特に役立ちます。<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/capacity-reservations-move.html#capacity-reservations-move-prereq\">未使用キャパシティの移動に関する考慮事項</a>に加えて、使用済みキャパシティの移動には以下の考慮事項があります。</p> \n <ol> \n  <li>移動元の ODCR と移動先の ODCR はどちらもインスタンスの適格性をオープンとして利用可能でアクティブ状態である</li> \n  <li>キャパシティ予約内で実行されているインスタンスはインスタンスの適格性をオープンとして利用可能である</li> \n  <li>移動元の ODCR と移動先の ODCR はどちらも同じ AWS アカウントが所有する</li> \n  <li>移動元の ODCR と移動先の ODCR は共有可能だが、使用済みインスタンスを移動する際に同じアカウントリストを使用する必要がある。また、同じアカウントへ共有するための条件は、ODCR の未使用部分には適用されない</li> \n </ol> \n <p>移動するインスタンス数を指定すると、デフォルトでは未使用キャパシティが最初に移動され、次に対象となる実行中のインスタンス（予約で使用されているキャパシティ）が移動されます。</p> \n <p>次のセクションでは、この機能が使用できる場面と使用できない場面を説明します。</p> \n <h4>シナリオ 1: 移動元と移動先の ODCR を他のアカウントと共有していない（チーム内でのキャパシティ移動）</h4> \n <p>同じ AWS アカウント（アカウント A）を使用して社内チーム間でキャパシティを管理する場合、プロセスは明確です。例えば、ML チームのリソースを統合するシナリオとして、以下の条件を満たす ODCR-1 と ODCR-2 を考えてみます。</p> \n <ul> \n  <li>ODCR-1（ML チーム A）：合計キャパシティ 10 個のうち、8 個は使用中で 2 個は未使用（インスタンスの適格性はすべてオープン）</li> \n  <li>ODCR-2（ML チーム B）：合計キャパシティ 5 個のすべてが使用中（インスタンスの適格性はすべてオープン）</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-11.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-11-1024x372.png\" alt=\"キャパシティ移動前の ODCR-1 と ODCR-2（どちらも同じ AWS アカウントであり、外部と共有されていない）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165605\"></a></p> \n <p style=\"text-align: center\">図 11: キャパシティ移動前の ODCR-1 と ODCR-2（どちらも同じ AWS アカウントで共有なし）</p> \n <p>両方の ODCR は同じアカウントに属しており、外部と共有されておらず、インスタンスの適格性はオープンです。そのため、ODCR-1 から ODCR-2 にすべてのキャパシティを自由に移動でき、統合 DevOps チーム向けに 15 個のインスタンスからなる統合プールを作成できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-12.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-12-1024x372.png\" alt=\"ODCR-1 からキャパシティが移動され、合計キャパシティが 15 になった ODCR-2（2 個は未使用）\" width=\"1024\" height=\"372\" class=\"aligncenter size-large wp-image-165604\"></a></p> \n <p style=\"text-align: center\">図 12: ODCR-1 からキャパシティが移動され、合計キャパシティが 15 になった ODCR-2（2 個は未使用）</p> \n <h4>シナリオ 2: 移動元と移動先の ODCR が同じアカウントで共有される（外部パートナーとのコラボレーション）</h4> \n <p>ML チーム（ODCR-1）が外部の AI 研究パートナー（アカウント B）と連携するシナリオとして、以下の条件を満たす ODCR-1 と ODCR-2 を考えてみます。</p> \n <ul> \n  <li>ODCR-1: 合計キャパシティ 10 個（8 個が使用済み、2 個が未使用）のインスタンスの適格性はすべてオープンであり、AWS RAM を通じて研究パートナーと共有</li> \n  <li>ODCR-2: 社内分析チーム用の合計キャパシティ 5 個（すべて使用済み）のインスタンスの適格性はすべてオープン</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-13-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-13-1-1024x513.png\" alt=\"キャパシティ移動前の ODCR-1 と ODCR-2（ODCR-1 は他の AWS アカウントと共有）\" width=\"1024\" height=\"513\" class=\"aligncenter size-large wp-image-165619\"></a></p> \n <p style=\"text-align: center\">図 13: キャパシティ移動前の ODCR-1 と ODCR-2（ODCR-1 は他の AWS アカウントと共有）</p> \n <p>分析チームにさらに多くのキャパシティが必要になった場合、他の 8 個は外部パートナーとのコラボレーションで使用されているため、未使用のインスタンス 2 個だけを ODCR-1 から ODCR-2 に移動できます。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-14.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-14-1024x513.png\" alt=\": ODCR-1 の未使用キャパシティのみが移動されて拡張された ODCR-2\" width=\"1024\" height=\"513\" class=\"aligncenter size-large wp-image-165602\"></a></p> \n <p style=\"text-align: center\">図 14: ODCR-1 の未使用キャパシティのみが移動されて拡張された ODCR-2</p> \n <h4>シナリオ 3: 異なるアカウントで共有される移動元 ODCR と移動先 ODCR（複数の外部パートナーが参加するプロジェクト）</h4> \n <p>さまざまなパートナー契約にわたるキャパシティの管理を伴うこのシナリオでは、次のようになります。</p> \n <ul> \n  <li>ODCR-1: データベースパートナー（アカウント B）と共有される全体キャパシティ 10 個のインスタンス（使用済み 8 個、未使用 2 個）</li> \n  <li>ODCR-2: セキュリティパートナー（アカウント C）と共有される全体キャパシティ 5 個のインスタンス（すべて使用済み）</li> \n </ul> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-15.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-15-1024x553.png\" alt=\"異なる AWS アカウントで共有される ODCR-1 と ODCR-2\" width=\"1024\" height=\"553\" class=\"aligncenter size-large wp-image-165621\"></a></p> \n <p style=\"text-align: center\">図 15: 異なる AWS アカウントで共有される ODCR-1 と ODCR-2</p> \n <p>パートナー契約が異なる、つまり ODCR が他のアカウントと共有されているため、未使用の 2 つのキャパシティを ODCR-1 から ODCR-2 にのみ移動できます。これにより、データベースパートナーのワークロードに影響が出ることはありません。</p> \n <p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-16-1.png\"><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/22/odcr-16-1-1024x553.png\" alt=\"共有されたキャパシティ予約により、未使用キャパシティのみが ODCR-2 に移動\" width=\"1024\" height=\"553\" class=\"aligncenter size-large wp-image-165620\"></a></p> \n <p style=\"text-align: center\">図 16: 共有されたキャパシティ予約により、ODCR-1 の未使用キャパシティが移動された ODCR-2</p> \n <p>これらのシナリオから、マルチアカウント環境におけるキャパシティ管理に関する貴重な教訓を得ることができます。柔軟性とパートナーのコミットメントのバランスを取った包括的な共有戦略を策定することで、強固なパートナー関係を維持しながらリソース使用率を最適化できます。</p> \n <h2>まとめ</h2> \n <p>AWS の新しい ODCR 機能（分割、移動、変更）は、クラウドキャパシティ管理において大きな進歩となりました。これらの機能は、組織におけるコンピューティングリソースの運用方法を変革し、より効率的な運用とコスト管理を実現します。キャパシティ予約を動的に調整・共有できる機能により、重要なワークロードに必要な安定性を維持しながら、必要な柔軟性が得られます。</p> \n <p>クラウドインフラストラクチャが進化を続ける中、これらの機能により、複雑なクラウド環境の管理で直面する現実的な課題へ対応できるようになりました。AWS インフラストラクチャの最適化に向けて、新しい ODCR 機能はキャパシティ管理とリソース利用を向上させる強力なツールとなります。</p> \n <p>これらの機能への理解を深めていただくために、実装用の API を含む <a href=\"https://github.com/aws-samples/amazon-odcr-management\">GitHub</a> リポジトリを作成しました。詳細については、キャパシティ予約の<a href=\"https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\">ドキュメント</a>をご覧ください。ご質問やご意見がございましたら、コメント欄にご記入いただくか、AWS サポートまでお気軽にお問い合わせください。</p> \n <p> 翻訳はソリューションアーキテクトの 阿部 純一郎 が担当しました。</p>\n</section>"
  },
  {
    "title": "nodejs/node – 2025-10-15, Version 25.0.0 (Current), @RafaelGSS",
    "date": "2025-10-15T17:20:43.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v25.0.0",
    "content": "Node.js 25 is here! We have upgraded V8 to **14.1**, bringing major `JSON.stringify`\r\nperformance improvements, built-in `Uint8Array` base64/hex conversion, and ongoing\r\nWebAssembly and JIT pipeline optimizations.\r\n\r\nThis release doubles down on secure-by-default apps and web-standard APIs: the permission\r\nmodel gains `--allow-net`, Web Storage is enabled by default, and `ErrorEvent` is now a global.\r\n\r\nWe’ve also removed or finalized long-deprecated APIs such as SlowBuffer,\r\nand added quality-of-life improvements like a portable compile cache and JSPI for WebAssembly.\r\n\r\n### Notable Changes\r\n\r\n* \\[[`8bc7dfd16f`](https://github.com/nodejs/node/commit/8bc7dfd16f)] - **build**: test on Python 3.14 release candidate 3 (Christian Clauss) [#59983](https://github.com/nodejs/node/pull/59983)\r\n* \\[[`663554abdf`](https://github.com/nodejs/node/commit/663554abdf)] - **(SEMVER-MAJOR)** **lib**: expose global ErrorEvent (Richie Bendall) [#58920](https://github.com/nodejs/node/pull/58920)\r\n* \\[[`3312e4e946`](https://github.com/nodejs/node/commit/3312e4e946)] - **(SEMVER-MAJOR)** **src**: unflag --experimental-webstorage by default (Daniel M Brasil) [#57666](https://github.com/nodejs/node/pull/57666)\r\n* \\[[`462c74181d`](https://github.com/nodejs/node/commit/462c74181d)] - **(SEMVER-MAJOR)** **src,permission**: add --allow-net permission (Rafael Gonzaga) [#58517](https://github.com/nodejs/node/pull/58517)\r\n\r\n### Deprecations and Removals\r\n\r\n* \\[[`d33f4b539a`](https://github.com/nodejs/node/commit/d33f4b539a)] - **(SEMVER-MAJOR)** **assert**: move assert.fail with multiple arguments to eol (James M Snell) [#58532](https://github.com/nodejs/node/pull/58532)\r\n* \\[[`b21574d63b`](https://github.com/nodejs/node/commit/b21574d63b)] - **(SEMVER-MAJOR)** **assert**: move CallTracker to EOL (James M Snell) [#58006](https://github.com/nodejs/node/pull/58006)\r\n* \\[[`308b6bc6de`](https://github.com/nodejs/node/commit/308b6bc6de)] - **(SEMVER-MAJOR)** **async\\_hooks**: move `asyncResource` property on bound function to EOL (James M Snell) [#58618](https://github.com/nodejs/node/pull/58618)\r\n* \\[[`daced4ab98`](https://github.com/nodejs/node/commit/daced4ab98)] - **(SEMVER-MAJOR)** **buffer**: move SlowBuffer to EOL (Filip Skokan) [#58220](https://github.com/nodejs/node/pull/58220)\r\n* \\[[`df16f0fd8d`](https://github.com/nodejs/node/commit/df16f0fd8d)] - **(SEMVER-MAJOR)** **child\\_process**: move \\_channel to end-of-life (James M Snell) [#58527](https://github.com/nodejs/node/pull/58527)\r\n* \\[[`a472745958`](https://github.com/nodejs/node/commit/a472745958)] - **(SEMVER-MAJOR)** **crypto**: runtime-deprecate default shake128/256 output lengths (Filip Skokan) [#59008](https://github.com/nodejs/node/pull/59008)\r\n* \\[[`c3b986853c`](https://github.com/nodejs/node/commit/c3b986853c)] - **(SEMVER-MAJOR)** **crypto**: move deprecated hash and mgf1Hash options to EOL (James M Snell) [#58706](https://github.com/nodejs/node/pull/58706)\r\n* \\[[`66632648ba`](https://github.com/nodejs/node/commit/66632648ba)] - **(SEMVER-MAJOR)** **crypto**: runtime deprecate ECDH.setPublicKey() (James M Snell) [#58620](https://github.com/nodejs/node/pull/58620)\r\n* \\[[`a5f9ca1f77`](https://github.com/nodejs/node/commit/a5f9ca1f77)] - **(SEMVER-MAJOR)** **dns**: move falsy hostname in lookup to end-of-life (James M Snell) [#58619](https://github.com/nodejs/node/pull/58619)\r\n* \\[[`2bb7667475`](https://github.com/nodejs/node/commit/2bb7667475)] - **(SEMVER-MAJOR)** **fs**: move FileHandle close on GC to EOL (James M Snell) [#58536](https://github.com/nodejs/node/pull/58536)\r\n* \\[[`eec0302088`](https://github.com/nodejs/node/commit/eec0302088)] - **(SEMVER-MAJOR)** **fs**: move rmdir recursive option to end-of-life (James M Snell) [#58616](https://github.com/nodejs/node/pull/58616)\r\n* \\[[`25dd206c29`](https://github.com/nodejs/node/commit/25dd206c29)] - **(SEMVER-MAJOR)** **fs**: remove `fs.F_OK`, `fs.R_OK`, `fs.W_OK`, `fs.X_OK` (Livia Medeiros) [#55862](https://github.com/nodejs/node/pull/55862)\r\n* \\[[`91dadf2897`](https://github.com/nodejs/node/commit/91dadf2897)] - **(SEMVER-MAJOR)** **http**: deprecate writeHeader (Sebastian Beltran) [#59060](https://github.com/nodejs/node/pull/59060)\r\n* \\[[`4e06a648ff`](https://github.com/nodejs/node/commit/4e06a648ff)] - **(SEMVER-MAJOR)** **perf\\_hooks**: move deprecated accessors to EOF (James M Snell) [#58531](https://github.com/nodejs/node/pull/58531)\r\n* \\[[`a3dfca90d1`](https://github.com/nodejs/node/commit/a3dfca90d1)] - **(SEMVER-MAJOR)** **process**: move multipleResolves event to EOL (James M Snell) [#58707](https://github.com/nodejs/node/pull/58707)\r\n* \\[[`790acc8689`](https://github.com/nodejs/node/commit/790acc8689)] - **(SEMVER-MAJOR)** **tls**: move IP-address servername deprecation to eol (James M Snell) [#58533](https://github.com/nodejs/node/pull/58533)\r\n* \\[[`3aaa2ebe19`](https://github.com/nodejs/node/commit/3aaa2ebe19)] - **(SEMVER-MAJOR)** **url**: move bad port deprecation in legacy url to end-of-life (James M Snell) [#58617](https://github.com/nodejs/node/pull/58617)\r\n\r\n### Semver-Major Commits\r\n\r\n* \\[[`7c9fbc15bc`](https://github.com/nodejs/node/commit/7c9fbc15bc)] - **(SEMVER-MAJOR)** **assert,util**: fail promise comparison in deep equal checks (Ruben Bridgewater) [#59448](https://github.com/nodejs/node/pull/59448)\r\n* \\[[`11222f1a27`](https://github.com/nodejs/node/commit/11222f1a27)] - **(SEMVER-MAJOR)** **assert,util**: handle invalid dates as equal in deep comparison (Ruben Bridgewater) [#57627](https://github.com/nodejs/node/pull/57627)\r\n* \\[[`acce2e8f87`](https://github.com/nodejs/node/commit/acce2e8f87)] - **(SEMVER-MAJOR)** **build**: reset embedder string to \"-node.0\" (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`8a87ba031b`](https://github.com/nodejs/node/commit/8a87ba031b)] - **(SEMVER-MAJOR)** **build**: bump minimum Clang version to 19 (Michaël Zasso) [#59048](https://github.com/nodejs/node/pull/59048)\r\n* \\[[`21b131e93a`](https://github.com/nodejs/node/commit/21b131e93a)] - **(SEMVER-MAJOR)** **build**: reset embedder string to \"-node.0\" (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`f31c88021b`](https://github.com/nodejs/node/commit/f31c88021b)] - **(SEMVER-MAJOR)** **build**: stop distributing Corepack (Antoine du Hamel) [#57617](https://github.com/nodejs/node/pull/57617)\r\n* \\[[`b3238442d8`](https://github.com/nodejs/node/commit/b3238442d8)] - **(SEMVER-MAJOR)** **deps**: patch V8 for illumos (Dan McDonald) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`2a1da3260d`](https://github.com/nodejs/node/commit/2a1da3260d)] - **(SEMVER-MAJOR)** **deps**: patch V8 to avoid duplicated zlib symbol (Michaël Zasso) [#54077](https://github.com/nodejs/node/pull/54077)\r\n* \\[[`7772a2df9d`](https://github.com/nodejs/node/commit/7772a2df9d)] - **(SEMVER-MAJOR)** **deps**: update V8 to 14.1.146.11 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`6d61175db0`](https://github.com/nodejs/node/commit/6d61175db0)] - **(SEMVER-MAJOR)** **deps**: V8: backport 1d3362c55396 (Shu-yu Guo) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`974773572e`](https://github.com/nodejs/node/commit/974773572e)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick 4f38995c8295 (Shu-yu Guo) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`70bfc398e9`](https://github.com/nodejs/node/commit/70bfc398e9)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick 044b9b6f589d (Rezvan Mahdavi Hezaveh) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`6bfc525cf0`](https://github.com/nodejs/node/commit/6bfc525cf0)] - **(SEMVER-MAJOR)** **deps**: V8: cherry-pick d2ad518a0b57 (Joyee Cheung) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`754d28e34f`](https://github.com/nodejs/node/commit/754d28e34f)] - **(SEMVER-MAJOR)** **deps**: V8: revert 6d6c1e680c7b (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`8c508b9399`](https://github.com/nodejs/node/commit/8c508b9399)] - **(SEMVER-MAJOR)** **deps**: V8: revert e3cddbedb205 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`88ca8287b6`](https://github.com/nodejs/node/commit/88ca8287b6)] - **(SEMVER-MAJOR)** **deps**: use std::map in MSVC STL for EphemeronRememberedSet (Joyee Cheung) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`838e2332a5`](https://github.com/nodejs/node/commit/838e2332a5)] - **(SEMVER-MAJOR)** **deps**: patch V8 for illumos (Dan McDonald) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`3522731d9a`](https://github.com/nodejs/node/commit/3522731d9a)] - **(SEMVER-MAJOR)** **deps**: remove problematic comment from v8-internal (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`d234475a33`](https://github.com/nodejs/node/commit/d234475a33)] - **(SEMVER-MAJOR)** **deps**: define V8\\_PRESERVE\\_MOST as no-op on Windows (Stefan Stojanovic) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`a738eb4a7f`](https://github.com/nodejs/node/commit/a738eb4a7f)] - **(SEMVER-MAJOR)** **deps**: fix FP16 bitcasts.h (Stefan Stojanovic) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`1744c7d991`](https://github.com/nodejs/node/commit/1744c7d991)] - **(SEMVER-MAJOR)** **deps**: patch V8 to avoid duplicated zlib symbol (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`fff0d1554d`](https://github.com/nodejs/node/commit/fff0d1554d)] - **(SEMVER-MAJOR)** **deps**: update V8 to 13.7.152.9 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`968e2f47c8`](https://github.com/nodejs/node/commit/968e2f47c8)] - **(SEMVER-MAJOR)** **dgram**: move deprecated APIs to EOL (James M Snell) [#58474](https://github.com/nodejs/node/pull/58474)\r\n* \\[[`5623194a6b`](https://github.com/nodejs/node/commit/5623194a6b)] - **(SEMVER-MAJOR)** **doc,src,test**: replace use of deprecated `GetIsolate` (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`823ca6991f`](https://github.com/nodejs/node/commit/823ca6991f)] - **(SEMVER-MAJOR)** **fs**: make `processReadResult()` and `readSyncRecursive()` private (Livia Medeiros) [#58672](https://github.com/nodejs/node/pull/58672)\r\n* \\[[`a273674dee`](https://github.com/nodejs/node/commit/a273674dee)] - **(SEMVER-MAJOR)** **fs**: move fs stream open method to eol (James M Snell) [#58529](https://github.com/nodejs/node/pull/58529)\r\n* \\[[`39d73036e7`](https://github.com/nodejs/node/commit/39d73036e7)] - **(SEMVER-MAJOR)** **lib**: use validators for argument validation (Nam Yooseong) [#59416](https://github.com/nodejs/node/pull/59416)\r\n* \\[[`cd68e35704`](https://github.com/nodejs/node/commit/cd68e35704)] - **(SEMVER-MAJOR)** **lib**: deprecate `_stream_*` modules (Dario Piotrowicz) [#58337](https://github.com/nodejs/node/pull/58337)\r\n* \\[[`a822a1cbe7`](https://github.com/nodejs/node/commit/a822a1cbe7)] - **(SEMVER-MAJOR)** **lib**: deprecate \\_tls\\_common and \\_tls\\_wrap (Dario Piotrowicz) [#57643](https://github.com/nodejs/node/pull/57643)\r\n* \\[[`705bcc2a00`](https://github.com/nodejs/node/commit/705bcc2a00)] - **(SEMVER-MAJOR)** **module**: move Module.\\_debug to end-of-life (James M Snell) [#58473](https://github.com/nodejs/node/pull/58473)\r\n* \\[[`5fe7800683`](https://github.com/nodejs/node/commit/5fe7800683)] - **(SEMVER-MAJOR)** **node-api**: add warning for NAPI\\_EXPERIMENTAL (Miguel Marcondes Filho) [#58280](https://github.com/nodejs/node/pull/58280)\r\n* \\[[`e1d4d6ab49`](https://github.com/nodejs/node/commit/e1d4d6ab49)] - **(SEMVER-MAJOR)** **repl**: eol deprecate instantiating without new (Aviv Keller) [#59495](https://github.com/nodejs/node/pull/59495)\r\n* \\[[`ed94bc48f3`](https://github.com/nodejs/node/commit/ed94bc48f3)] - **(SEMVER-MAJOR)** **src**: update crypto.getCipherInfo() to use DictionaryTemplate (James M Snell) [#60036](https://github.com/nodejs/node/pull/60036)\r\n* \\[[`37a3df3556`](https://github.com/nodejs/node/commit/37a3df3556)] - **(SEMVER-MAJOR)** **src**: fix calls to v8::Object::wrap (Andreas Haas) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`801ae26fa3`](https://github.com/nodejs/node/commit/801ae26fa3)] - **(SEMVER-MAJOR)** **src**: update NODE\\_MODULE\\_VERSION to 141 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`10df38a38b`](https://github.com/nodejs/node/commit/10df38a38b)] - **(SEMVER-MAJOR)** **src**: improve performance of dotenv ToObject (James M Snell) [#60038](https://github.com/nodejs/node/pull/60038)\r\n* \\[[`075936b413`](https://github.com/nodejs/node/commit/075936b413)] - **(SEMVER-MAJOR)** **src**: use std::string\\_view from node\\_report (iknoom) [#60006](https://github.com/nodejs/node/pull/60006)\r\n* \\[[`234c26cca3`](https://github.com/nodejs/node/commit/234c26cca3)] - **(SEMVER-MAJOR)** **src**: store `Local` for `CallbackScope` on stack (Anna Henningsen) [#59705](https://github.com/nodejs/node/pull/59705)\r\n* \\[[`708fd1945b`](https://github.com/nodejs/node/commit/708fd1945b)] - **(SEMVER-MAJOR)** **src**: remove node.h APIs to make callback without an async context (Chengzhong Wu) [#58471](https://github.com/nodejs/node/pull/58471)\r\n* \\[[`56989d33f5`](https://github.com/nodejs/node/commit/56989d33f5)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::EmitBeforeExit and node::EmitExit (Chengzhong Wu) [#58469](https://github.com/nodejs/node/pull/58469)\r\n* \\[[`d429aa2d17`](https://github.com/nodejs/node/commit/d429aa2d17)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::CreatePlatform and node::FreePlatform (Chengzhong Wu) [#58470](https://github.com/nodejs/node/pull/58470)\r\n* \\[[`e0ae14ce73`](https://github.com/nodejs/node/commit/e0ae14ce73)] - **(SEMVER-MAJOR)** **src**: remove deprecated node::InitializeNodeWithArgs (Chengzhong Wu) [#58470](https://github.com/nodejs/node/pull/58470)\r\n* \\[[`db1700e4b5`](https://github.com/nodejs/node/commit/db1700e4b5)] - **(SEMVER-MAJOR)** **src**: update NODE\\_MODULE\\_VERSION to 138 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`0a87084150`](https://github.com/nodejs/node/commit/0a87084150)] - **(SEMVER-MAJOR)** **test**: update cppgc-object addon config (StefanStojanovic) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`7dd49d7da4`](https://github.com/nodejs/node/commit/7dd49d7da4)] - **(SEMVER-MAJOR)** **test**: spin longer for sequential/test-worker-prof (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`faba50df96`](https://github.com/nodejs/node/commit/faba50df96)] - **(SEMVER-MAJOR)** **test**: remove `--always-turbofan` flag (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`496f12dec6`](https://github.com/nodejs/node/commit/496f12dec6)] - **(SEMVER-MAJOR)** **test**: update snapshot for V8 14.1 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`05aa3a1c70`](https://github.com/nodejs/node/commit/05aa3a1c70)] - **(SEMVER-MAJOR)** **test,win**: split addon tests (StefanStojanovic) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`308de27255`](https://github.com/nodejs/node/commit/308de27255)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 14.0 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`b736370c07`](https://github.com/nodejs/node/commit/b736370c07)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.9 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`085a94ac9b`](https://github.com/nodejs/node/commit/085a94ac9b)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.8 (Michaël Zasso) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`a71ae18ac8`](https://github.com/nodejs/node/commit/a71ae18ac8)] - **(SEMVER-MAJOR)** **tools**: enable leaptiering for aix/ibmi (Abdirahim Musse) [#59805](https://github.com/nodejs/node/pull/59805)\r\n* \\[[`a8217a9eb8`](https://github.com/nodejs/node/commit/a8217a9eb8)] - **(SEMVER-MAJOR)** **tools**: update V8 gypfiles for 13.7 (Michaël Zasso) [#58064](https://github.com/nodejs/node/pull/58064)\r\n* \\[[`fdef0725de`](https://github.com/nodejs/node/commit/fdef0725de)] - **(SEMVER-MAJOR)** **util,console**: colorize regexp groups, character classes, etc (Ruben Bridgewater) [#59710](https://github.com/nodejs/node/pull/59710)\r\n* \\[[`411cc42d22`](https://github.com/nodejs/node/commit/411cc42d22)] - **(SEMVER-MAJOR)** **worker**: move terminate callback to end-of-life (James M Snell) [#58528](https://github.com/nodejs/node/pull/58528)\r\n\r\n### Semver-Minor Commits\r\n\r\n* \\[[`94422e8a40`](https://github.com/nodejs/node/commit/94422e8a40)] - **(SEMVER-MINOR)** **src**: add an option to make compile cache portable (Aditi) [#58797](https://github.com/nodejs/node/pull/58797)\r\n* \\[[`29738c7b42`](https://github.com/nodejs/node/commit/29738c7b42)] - **(SEMVER-MINOR)** **src,permission**: add --allow-inspector ability (Rafael Gonzaga) [#59711](https://github.com/nodejs/node/pull/59711)\r\n* \\[[`f9fcc746f3`](https://github.com/nodejs/node/commit/f9fcc746f3)] - **(SEMVER-MINOR)** **v8**: add cpu profile (theanarkh) [#59807](https://github.com/nodejs/node/pull/59807)\r\n* \\[[`4396cf2d45`](https://github.com/nodejs/node/commit/4396cf2d45)] - **(SEMVER-MINOR)** **wasm**: enable JSPI (Guy Bedford) [#59941](https://github.com/nodejs/node/pull/59941)\r\n\r\n### Semver-Patch Commits\r\n\r\n* \\[[`91f035e597`](https://github.com/nodejs/node/commit/91f035e597)] - **assert**: resolve TODO and rename function (Antoine du Hamel) [#59451](https://github.com/nodejs/node/pull/59451)\r\n* \\[[`2e675c4fa3`](https://github.com/nodejs/node/commit/2e675c4fa3)] - **benchmark**: use non-deprecated WriteUtf8V2 method (Michaël Zasso) [#60173](https://github.com/nodejs/node/pull/60173)\r\n* \\[[`0fb040603b`](https://github.com/nodejs/node/commit/0fb040603b)] - **build**: upgrade Python linter ruff, add rules ASYNC,PERF (Christian Clauss) [#59984](https://github.com/nodejs/node/pull/59984)\r\n* \\[[`f468b6c72b`](https://github.com/nodejs/node/commit/f468b6c72b)] - **build**: update minimum Xcode version to 16.4 (Michaël Zasso) [#60079](https://github.com/nodejs/node/pull/60079)\r\n* \\[[`0eda17ba20`](https://github.com/nodejs/node/commit/0eda17ba20)] - **build**: fix flags for ngtcp2 on IBM i (SRAVANI GUNDEPALLI) [#60073](https://github.com/nodejs/node/pull/60073)\r\n* \\[[`22a864a275`](https://github.com/nodejs/node/commit/22a864a275)] - **build**: remove corepack from release tarballs (Jordan Harband) [#59835](https://github.com/nodejs/node/pull/59835)\r\n* \\[[`7079041e0a`](https://github.com/nodejs/node/commit/7079041e0a)] - **build**: only mention Apple when on Apple (Michaël Zasso) [#59385](https://github.com/nodejs/node/pull/59385)\r\n* \\[[`954d3f44ef`](https://github.com/nodejs/node/commit/954d3f44ef)] - **build**: check Apple clang version in configure script (Michaël Zasso) [#59358](https://github.com/nodejs/node/pull/59358)\r\n* \\[[`2b4a09ef8b`](https://github.com/nodejs/node/commit/2b4a09ef8b)] - **build**: fix OpenSSL version detection (Richard Lau) [#59353](https://github.com/nodejs/node/pull/59353)\r\n* \\[[`af77e4bf2f`](https://github.com/nodejs/node/commit/af77e4bf2f)] - **build**: update macOS runner and Xcode (Michaël Zasso) [#59238](https://github.com/nodejs/node/pull/59238)\r\n* \\[[`86bfdb5528`](https://github.com/nodejs/node/commit/86bfdb5528)] - **build**: remove `nocorepack` `vcbuild` flag (Antoine du Hamel) [#57772](https://github.com/nodejs/node/pull/57772)\r\n* \\[[`b13f24c2da`](https://github.com/nodejs/node/commit/b13f24c2da)] - **build, src**: fix include paths for vtune files (Rahul) [#59999](https://github.com/nodejs/node/pull/59999)\r\n* \\[[`2216a3b1d5`](https://github.com/nodejs/node/commit/2216a3b1d5)] - **deps**: V8: cherry-pick 1e190bbb0396 (Richard Lau) [#60206](https://github.com/nodejs/node/pull/60206)\r\n* \\[[`1b22f6049a`](https://github.com/nodejs/node/commit/1b22f6049a)] - **deps**: upgrade npm to 11.6.2 (npm team) [#60168](https://github.com/nodejs/node/pull/60168)\r\n* \\[[`a1b73fe430`](https://github.com/nodejs/node/commit/a1b73fe430)] - **deps**: V8: cherry-pick 2abc61361dd4 (Richard Lau) [#60177](https://github.com/nodejs/node/pull/60177)\r\n* \\[[`4eb6e6fd79`](https://github.com/nodejs/node/commit/4eb6e6fd79)] - **deps**: V8: cherry-pick 87356585659b (Joyee Cheung) [#60069](https://github.com/nodejs/node/pull/60069)\r\n* \\[[`c0b8c80164`](https://github.com/nodejs/node/commit/c0b8c80164)] - **deps**: define V8\\_PRESERVE\\_MOST as no-op on Windows (Stefan Stojanovic) [#56238](https://github.com/nodejs/node/pull/56238)\r\n* \\[[`65a32bac18`](https://github.com/nodejs/node/commit/65a32bac18)] - **deps**: add ngtcp2 test binaries (James M Snell) [#59946](https://github.com/nodejs/node/pull/59946)\r\n* \\[[`ebfc28a037`](https://github.com/nodejs/node/commit/ebfc28a037)] - **deps**: update nghttp3 to 1.11.0 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`dceb1fca40`](https://github.com/nodejs/node/commit/dceb1fca40)] - **deps**: update ngtcp2 to 1.14.0 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`ee36b86ba3`](https://github.com/nodejs/node/commit/ee36b86ba3)] - **deps**: patch V8 to 13.7.152.19 (Node.js GitHub Bot) [#58713](https://github.com/nodejs/node/pull/58713)\r\n* \\[[`0b3fc0d7a8`](https://github.com/nodejs/node/commit/0b3fc0d7a8)] - **deps**: patch V8 to 13.7.152.14 (Node.js GitHub Bot) [#58631](https://github.com/nodejs/node/pull/58631)\r\n* \\[[`91b3bd3fe6`](https://github.com/nodejs/node/commit/91b3bd3fe6)] - **deps**: patch V8 to 13.7.152.13 (Node.js GitHub Bot) [#58539](https://github.com/nodejs/node/pull/58539)\r\n* \\[[`f77a96cd76`](https://github.com/nodejs/node/commit/f77a96cd76)] - **deps**: patch V8 to 13.7.152.10 (Node.js GitHub Bot) [#58446](https://github.com/nodejs/node/pull/58446)\r\n* \\[[`1cd16e5355`](https://github.com/nodejs/node/commit/1cd16e5355)] - **doc**: improve code snippet alternative of url.parse() using WHATWG URL (Steven) [#60209](https://github.com/nodejs/node/pull/60209)\r\n* \\[[`d54e6aec9e`](https://github.com/nodejs/node/commit/d54e6aec9e)] - **doc**: `createSQLTagStore` -> `createTagStore` (Aviv Keller) [#60182](https://github.com/nodejs/node/pull/60182)\r\n* \\[[`aef3fc37eb`](https://github.com/nodejs/node/commit/aef3fc37eb)] - **doc**: use markdown when branch-diff major release (Rafael Gonzaga) [#60179](https://github.com/nodejs/node/pull/60179)\r\n* \\[[`a2f088d516`](https://github.com/nodejs/node/commit/a2f088d516)] - **doc**: update teams in collaborator-guide.md and add links (Bart Louwers) [#60065](https://github.com/nodejs/node/pull/60065)\r\n* \\[[`75a6fff6be`](https://github.com/nodejs/node/commit/75a6fff6be)] - **doc**: disambiguate top-level `worker_threads` module exports (René) [#59890](https://github.com/nodejs/node/pull/59890)\r\n* \\[[`51df7b92bc`](https://github.com/nodejs/node/commit/51df7b92bc)] - **doc**: update macOS version used to build releases (Michaël Zasso) [#60080](https://github.com/nodejs/node/pull/60080)\r\n* \\[[`910c8796f9`](https://github.com/nodejs/node/commit/910c8796f9)] - **doc**: update BUILDING to reflect Clang 19 changes (Michaël Zasso) [#59782](https://github.com/nodejs/node/pull/59782)\r\n* \\[[`34f9b7eab9`](https://github.com/nodejs/node/commit/34f9b7eab9)] - **doc**: reserve NMV 140 for Electron 39 (David Sanders) [#59627](https://github.com/nodejs/node/pull/59627)\r\n* \\[[`3f6f6db43f`](https://github.com/nodejs/node/commit/3f6f6db43f)] - **doc**: update minimum Xcode and VS versions (Michaël Zasso) [#59358](https://github.com/nodejs/node/pull/59358)\r\n* \\[[`d9fe28bd6b`](https://github.com/nodejs/node/commit/d9fe28bd6b)] - **doc**: fix `CHANGELOG.md` version listing (Antoine du Hamel) [#59299](https://github.com/nodejs/node/pull/59299)\r\n* \\[[`0ab50c2768`](https://github.com/nodejs/node/commit/0ab50c2768)] - **doc**: reserve NMV 139 for Electron 38 (Calvin) [#58779](https://github.com/nodejs/node/pull/58779)\r\n* \\[[`516b4ebd3c`](https://github.com/nodejs/node/commit/516b4ebd3c)] - **doc**: mark Node.js 23 as End-of-Life (Antoine du Hamel) [#58563](https://github.com/nodejs/node/pull/58563)\r\n* \\[[`59b70e5fe3`](https://github.com/nodejs/node/commit/59b70e5fe3)] - **http**: fix http client leaky with double response (theanarkh) [#60062](https://github.com/nodejs/node/pull/60062)\r\n* \\[[`5cf3c3e24c`](https://github.com/nodejs/node/commit/5cf3c3e24c)] - **http2**: rename variable to additionalPseudoHeaders (Tobias Nießen) [#60208](https://github.com/nodejs/node/pull/60208)\r\n* \\[[`535efea962`](https://github.com/nodejs/node/commit/535efea962)] - **http2**: do not crash on mismatched ping buffer length (René) [#60135](https://github.com/nodejs/node/pull/60135)\r\n* \\[[`4bfa387f6d`](https://github.com/nodejs/node/commit/4bfa387f6d)] - **lib**: fix constructor in \\_errnoException stack tree (SeokHun) [#60156](https://github.com/nodejs/node/pull/60156)\r\n* \\[[`4daeec11b9`](https://github.com/nodejs/node/commit/4daeec11b9)] - **lib**: fix typo in QuicSessionStats (SeokHun) [#60155](https://github.com/nodejs/node/pull/60155)\r\n* \\[[`15278252bb`](https://github.com/nodejs/node/commit/15278252bb)] - **lib**: remove redundant destroyHook checks (Gürgün Dayıoğlu) [#60120](https://github.com/nodejs/node/pull/60120)\r\n* \\[[`83052ff9ad`](https://github.com/nodejs/node/commit/83052ff9ad)] - **lib**: add `node:` prefix in sys module deprecation warning (Dario Piotrowicz) [#58442](https://github.com/nodejs/node/pull/58442)\r\n* \\[[`d5abfbf582`](https://github.com/nodejs/node/commit/d5abfbf582)] - **lib**: add module to use in module deprecation warnings (Dario Piotrowicz) [#58442](https://github.com/nodejs/node/pull/58442)\r\n* \\[[`db0121bedd`](https://github.com/nodejs/node/commit/db0121bedd)] - **module**: fix directory option in the enableCompileCache() API (Joyee Cheung) [#59931](https://github.com/nodejs/node/pull/59931)\r\n* \\[[`822a8c3244`](https://github.com/nodejs/node/commit/822a8c3244)] - **perf\\_hooks**: fix stack overflow error (Antoine du Hamel) [#60084](https://github.com/nodejs/node/pull/60084)\r\n* \\[[`d52cd04591`](https://github.com/nodejs/node/commit/d52cd04591)] - **quic**: continue working on quic api bits (James M Snell) [#60123](https://github.com/nodejs/node/pull/60123)\r\n* \\[[`b4af647920`](https://github.com/nodejs/node/commit/b4af647920)] - **quic**: reduce boilerplate and other minor cleanups (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`cd9fd09a27`](https://github.com/nodejs/node/commit/cd9fd09a27)] - **quic**: multiple fixups and updates (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`a6c5d27739`](https://github.com/nodejs/node/commit/a6c5d27739)] - **quic**: update more of the quic to the new compile guard (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`ee7b8ab29c`](https://github.com/nodejs/node/commit/ee7b8ab29c)] - **quic**: few additional small comment edits in cid.h (James M Snell) [#59342](https://github.com/nodejs/node/pull/59342)\r\n* \\[[`c8b64bd023`](https://github.com/nodejs/node/commit/c8b64bd023)] - **quic**: fixup NO\\_ERROR macro conflict on windows (James M Snell) [#59381](https://github.com/nodejs/node/pull/59381)\r\n* \\[[`e2fefd78e2`](https://github.com/nodejs/node/commit/e2fefd78e2)] - **quic**: fixup windows coverage compile error (James M Snell) [#59381](https://github.com/nodejs/node/pull/59381)\r\n* \\[[`99c80e3a45`](https://github.com/nodejs/node/commit/99c80e3a45)] - **quic**: update the guard to check openssl version (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`0e754fa5d1`](https://github.com/nodejs/node/commit/0e754fa5d1)] - **quic**: start re-enabling quic with openssl 3.5 (James M Snell) [#59249](https://github.com/nodejs/node/pull/59249)\r\n* \\[[`200fe9e7f4`](https://github.com/nodejs/node/commit/200fe9e7f4)] - **repl**: move completion logic to internal module (Dario Piotrowicz) [#59889](https://github.com/nodejs/node/pull/59889)\r\n* \\[[`3ac88a7a66`](https://github.com/nodejs/node/commit/3ac88a7a66)] - **src**: use string\\_view in `WriteReport()` (Anna Henningsen) [#60201](https://github.com/nodejs/node/pull/60201)\r\n* \\[[`a1244f04de`](https://github.com/nodejs/node/commit/a1244f04de)] - **src**: make additional cleanups in node locks impl (James M Snell) [#60061](https://github.com/nodejs/node/pull/60061)\r\n* \\[[`fdb6e66227`](https://github.com/nodejs/node/commit/fdb6e66227)] - **src**: update locks to use DictionaryTemplate (James M Snell) [#60061](https://github.com/nodejs/node/pull/60061)\r\n* \\[[`367bcce6a6`](https://github.com/nodejs/node/commit/367bcce6a6)] - **src**: fix usage of deprecated V8 API (Michaël Zasso) [#60174](https://github.com/nodejs/node/pull/60174)\r\n* \\[[`23fa18444f`](https://github.com/nodejs/node/commit/23fa18444f)] - **src**: fix small compile warning in quic/streams.cc (James M Snell) [#60118](https://github.com/nodejs/node/pull/60118)\r\n* \\[[`0ec1d186f4`](https://github.com/nodejs/node/commit/0ec1d186f4)] - **src**: always use strong reference to `napi_async_context` resource (Anna Henningsen) [#59828](https://github.com/nodejs/node/pull/59828)\r\n* \\[[`ce748f6cae`](https://github.com/nodejs/node/commit/ce748f6cae)] - **src**: use `Global` for storing resource in Node-API callback scope (Anna Henningsen) [#59828](https://github.com/nodejs/node/pull/59828)\r\n* \\[[`36256230b4`](https://github.com/nodejs/node/commit/36256230b4)] - **src**: cleanup quic TransportParams class (James M Snell) [#59884](https://github.com/nodejs/node/pull/59884)\r\n* \\[[`985e2fb383`](https://github.com/nodejs/node/commit/985e2fb383)] - _**Revert**_ \"**test**: ensure message event fires in worker message port test\" (Luigi Pinca) [#60126](https://github.com/nodejs/node/pull/60126)\r\n* \\[[`da9cd745c8`](https://github.com/nodejs/node/commit/da9cd745c8)] - **test**: ensure assertions are reachable in `test/client-proxy` (Antoine du Hamel) [#60175](https://github.com/nodejs/node/pull/60175)\r\n* \\[[`e105e821e9`](https://github.com/nodejs/node/commit/e105e821e9)] - **test**: skip quic tests that IBM i does not support (SRAVANI GUNDEPALLI) [#60160](https://github.com/nodejs/node/pull/60160)\r\n* \\[[`bfc81ca228`](https://github.com/nodejs/node/commit/bfc81ca228)] - **test**: ensure assertions are reachable in `test/async-hooks` (Antoine du Hamel) [#60150](https://github.com/nodejs/node/pull/60150)\r\n* \\[[`712cee951c`](https://github.com/nodejs/node/commit/712cee951c)] - **test**: skip tests that cause timeouts on IBM i (SRAVANI GUNDEPALLI) [#60148](https://github.com/nodejs/node/pull/60148)\r\n* \\[[`f8a43f6f34`](https://github.com/nodejs/node/commit/f8a43f6f34)] - **test**: deflake test-fs-promises-watch-iterator (Luigi Pinca) [#60060](https://github.com/nodejs/node/pull/60060)\r\n* \\[[`1f95d39997`](https://github.com/nodejs/node/commit/1f95d39997)] - **test**: prepare junit file attribute normalization (sangwook) [#59432](https://github.com/nodejs/node/pull/59432)\r\n* \\[[`eb159a8cfd`](https://github.com/nodejs/node/commit/eb159a8cfd)] - **test**: remove duplicated allocUnsafeSlow test (Michaël Zasso) [#58524](https://github.com/nodejs/node/pull/58524)\r\n* \\[[`d93cff5af3`](https://github.com/nodejs/node/commit/d93cff5af3)] - _**Revert**_ \"**test**: fix watch tests not including completion messages\" (Joyee Cheung) [#58190](https://github.com/nodejs/node/pull/58190)\r\n* \\[[`6102159fa1`](https://github.com/nodejs/node/commit/6102159fa1)] - **test**: fix watch tests not including completion messages (Dario Piotrowicz) [#58183](https://github.com/nodejs/node/pull/58183)\r\n* \\[[`ad2c1bf62e`](https://github.com/nodejs/node/commit/ad2c1bf62e)] - **test,doc**: skip --max-old-space-size-percentage on 32-bit platforms (Asaf Federman) [#60144](https://github.com/nodejs/node/pull/60144)\r\n* \\[[`6dbf7086bb`](https://github.com/nodejs/node/commit/6dbf7086bb)] - **test\\_runner**: fix suite timeout (Moshe Atlow) [#59853](https://github.com/nodejs/node/pull/59853)\r\n* \\[[`f0aa073907`](https://github.com/nodejs/node/commit/f0aa073907)] - **test\\_runner**: add junit file attribute support (sangwook) [#59432](https://github.com/nodejs/node/pull/59432)\r\n* \\[[`cff138c6b1`](https://github.com/nodejs/node/commit/cff138c6b1)] - **tests**: start adding quic test server utilities (James M Snell) [#59946](https://github.com/nodejs/node/pull/59946)\r\n* \\[[`20dc4b514a`](https://github.com/nodejs/node/commit/20dc4b514a)] - **tools**: use cooldown property correctly (Rafael Gonzaga) [#60134](https://github.com/nodejs/node/pull/60134)\r\n* \\[[`ec26b1c01a`](https://github.com/nodejs/node/commit/ec26b1c01a)] - **tools**: add lint rule to ensure assertions are reached (Antoine du Hamel) [#60125](https://github.com/nodejs/node/pull/60125)\r\n* \\[[`bab752d4db`](https://github.com/nodejs/node/commit/bab752d4db)] - **typings**: add buffer internalBinding typing (방진혁) [#60163](https://github.com/nodejs/node/pull/60163)\r\n* \\[[`1986ee4b65`](https://github.com/nodejs/node/commit/1986ee4b65)] - **vm**: hint module identifier in instantiate errors (Chengzhong Wu) [#60199](https://github.com/nodejs/node/pull/60199)\r\n* \\[[`23b834058c`](https://github.com/nodejs/node/commit/23b834058c)] - **wasm**: revert enable JSPI as already enabled (Guy Bedford) [#60014](https://github.com/nodejs/node/pull/60014)\r\n* \\[[`4bfcad1ac5`](https://github.com/nodejs/node/commit/4bfcad1ac5)] - _**Revert**_ \"**watch**: fix watch args not being properly filtered\" (Joyee Cheung) [#58190](https://github.com/nodejs/node/pull/58190)\r\n* \\[[`4acb854039`](https://github.com/nodejs/node/commit/4acb854039)] - **watch**: fix watch args not being properly filtered (Dario Piotrowicz) [#57936](https://github.com/nodejs/node/pull/57936)\r\n"
  },
  {
    "title": "4年目のソフトウェアエンジニアがSWE協会のコーディング練習会に参加して感じた変化",
    "date": "2025-10-15T14:40:21.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/akhmgc/articles/aa55dfd823d062",
    "content": "\n 概要\n4年目のソフトウェアエンジニアとして、一般社団法人 ソフトウェアエンジニア協会(以下SWE協会)のコーディング練習会に参加して感じた変化を共有します。\nなお、Google を含む外資系ソフトウェアエンジニアのコーディングテストを準備なしで解ける方にとっては、本記事の内容は役に立たないかもしれません。\n\n 自己紹介と参加の背景\n私は現在、主にマーケティングオートメーションツールを提供している会社で、ツール全体が使うデータパイプラインの構築や運用、機能開発に利用する共通基盤の開発等を行っています。\n扱うトラフィックはそれなりに大きく、馴染みの薄いミドルウェアを学ぶ場面も多いのですが..."
  },
  {
    "title": "Supabaseは個人開発の味方 - 煩わしいセットアップは不要・RLSによる宣言的な権限管理",
    "date": "2025-10-15T14:09:34.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kontaco/articles/1128b039d47dd0",
    "content": "こんにちは近藤です\n個人開発でサービスを構築する際、「認証どうしよう」「画像のストレージどこに置こう」「セキュリティ大丈夫かな」「テスト環境の構築が面倒」と悩むことはありませんか?\n私は子供向け画像認識学習アプリ「KORENANI」を開発する中で、Supabaseを採用しました。\n\nこの記事で伝えること:\n\nなぜSupabaseを選んだのか（メリット）\nどんな制約があるのか（デメリット）\nどんなプロジェクトに向いているのか（判断基準）\n\n実体験に基づいて共有します。\n\n TL;DR\nSupabaseの強み:\n\n無料プランが充実（50,000 MAU、500MB DB、1GB Storag..."
  },
  {
    "title": "AIを使う人は、AIをあまり使わない人から「怠惰で能力が低く、自立心に乏しい」と評価されやすい",
    "date": "2025-10-15T10:09:17.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/cloud_ace/articles/b172102d0163c2",
    "content": "こんにちは。クラウドエース株式会社 第四開発部の相原です。\n読者の皆さんは、普段の業務でどれくらい AI を活用していますか？\nおそらく、多くの方がコードの自動生成やデバッグ、ドキュメント作成といったさまざまな場面で、AI を頼れるアシスタントとして利用していることでしょう。\n今や AI は私たちの日常に欠かせないパートナーになりつつあります。\nしかし、その一方で、「AI を使っている」という事実が、私たちの仕事や能力に対する周りの評価にどのような影響を与えるのかについて考えたことはありますか？\n私たちは、AI という「賢いツール」を使いこなすことで、より高度な成果を出せると考えています..."
  },
  {
    "title": "vitejs/vite – v6.4.0",
    "date": "2025-10-15T09:42:05.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.4.0",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.4.0/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "TypeScriptにResult型を導入するための妥協点はどこか？",
    "date": "2025-10-15T07:08:55.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/praha/articles/2eb151a891be16",
    "content": "\n現実のアプリケーションで発生するすべてのエラー・例外をResult型に変換するのは非現実的\nエラーハンドリングが不要なものはUnexpectedErrorとしてまとめてしまう\n\nという現実的な落とし所を提案する記事です。\n!\n\n記事内で使用されているResult型は@praha/byethrowが提供しているものです。\nカスタムエラーの定義には@praha/error-factoryを使用しています。\n\nライブラリ固有の知識がなくても理解できるように、最小限のAPIのみを使用しています。\n\n\n TypeScriptにResult型を導入したくなる理由\nTypeScriptのエラーハンド..."
  },
  {
    "title": "propsを1つ増やしただけなのにレスポンスサイズが5倍に増えてしまった",
    "date": "2025-10-15T00:53:07.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/chot/articles/e0e2203d12bff8",
    "content": "ある日、Vercelのダッシュボードを見ると以前はだいたい100KB前後だったページのレスポンスサイズが500KB前後に増えてしまっていました。\n原因はサーバコンポーネントからクライアントコンポーネントに渡すpropsが巨大だったことでした。\nSCからCCに渡したpropsはRSCペイロードという形で初回レスポンスのHTMLに含まれるためです。\n分かってしまえば単純なことなのですが、当時Next.jsのバージョンアップなどの改修も同時に行なっていたために原因調査に手こずりました。\nそんなわけで、レスポンスサイズが5倍になったときの調査に役に立つかもしれない（？）RSCペイロードの覗き方を..."
  },
  {
    "title": "ごめん、カーソル移動を効率的にするヘルシェイク矢野.vimのこと考えてた",
    "date": "2025-10-14T22:11:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/takets/articles/vim-plugin-hellshake-yano",
    "content": "この記事は、Vim駅伝2025年10月15日の記事です。\n前回の記事は、482FさんのLua Neovim で斜体を無効化する です。\nVimでのカーソル移動は、hjklやw/b/eといったモーションキーを使うのが基本です。\nが。画面に表示されているN行目のM文字目に移動したいとき、何度もキーを繰り返し押す必要があります。当たり前の話です。しかし面倒であることには違いありません。\n本来、位置Aに移動したいだけであって、キー入力は仕方なく行う行為です。なので対策したかったので対策しました。\n\n 対策：hit-a-hint系プラグイン\n移動にキーをたくさん入力せねばならない問題に対して、いく..."
  },
  {
    "title": "作って意地でも理解する フォントがレンダリングされるまで",
    "date": "2025-10-14T20:10:48.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yayo1/articles/4fb4dd2a6c4654",
    "content": "いきなりですが、2つ質問です。今まさにあなたが読んでいる文字がどうやってレンダリングされているか説明できますか？私はできませんでした。それではあるモノの仕組みを理解するために最も効率の良い方法は何でしょうか？そう、自作することです！それではフォントのパーサーとレンダラーをゼロから作っていきましょう！\n\n 目的\n小さなTrueTypeレンダラーを自作し、フォントがレンダリングされるまで流れを理解することが目的です。具体的には、Unicodeのフォントを読み込んで、任意の文字列をレンダリングしpngファイルとして書き出すまでを目標とします。実装はほぼプレーンなC++で、ベクトル演算用にglm..."
  },
  {
    "title": "vitejs/vite – v6.3.7",
    "date": "2025-10-14T13:43:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.3.7",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.3.7/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "AI SDK 実践入門 - 入門編",
    "date": "2025-10-14T13:38:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/hayato94087/books/8ac4877fc2fc5d",
    "content": "ゼロから AI SDK を学べます。\n\n【読者】\n・AI SDK の初学者\n・React使いで AI 機能を実装したい方\n・LLM を活用したアプリケーション開発に興味がある方\n\n【特徴は】\n・AI SDK について体系的に学習できること\n・TypeScript を活用した AI アプリケーション開発\n・最新の AI SDK の利用\n・Next.js 15 の利用\n・複数の AI プロバイダーを統一的に扱う方法\n\n【本書籍がカバーする技術】\n・AI SDK Core\n・AI SDK UI\n・OpenAI API\n・Gemini API\n・OpenWeather API\n\n【その他】\n「いいね」してくれたらモチベーションあがります🚀 "
  },
  {
    "title": "vitejs/vite – v7.1.10",
    "date": "2025-10-14T13:16:35.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.10",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.10/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "大阪万博内部 API 解説",
    "date": "2025-10-14T09:38:31.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/nakasyou/articles/osakaexpo-api",
    "content": "大阪万博が昨日閉幕したので、大阪万博の予約サイトの内部で使用されている API について自分が調べたことを公開しようと思います。\n数日前にタイムスリップした気持ちでお読みください。\nまた、脆弱だと思ったポイントもあるので、閉幕したのでそれも解説しちゃいます。\n\n 想定読者\n\n万博のアプリの裏側をちょっと覗いてみたい人\n大阪万博の脆弱っぽい部分をちょっと知りたい人\n閉幕してしまったけれど自分がどこに行ったかを思い出したい人\n次日本で万博が開催されたときにアプリを開発する人、および発注する人\n\n\n tl;dr\n成果物: https://github.com/pnsk-lab/myakumya..."
  },
  {
    "title": "Nani翻訳の技術的な話",
    "date": "2025-10-14T05:31:58.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/catnose99/articles/nani-translate",
    "content": "先日 Nani というAI翻訳アプリをリリースしました。macOS / Windowsアプリを使うとショートカットで解説つきの翻訳を簡単に呼び出すことができます。\nhttps://x.com/catnose99/status/1973218927158424056\nこの記事ではNaniの技術的な話をまとめておきます。「レスポンスが速い」という声も多くいただいているので、そのあたりの工夫についても触れたいと思います。\n\n ざっくりとした構成\n主な使用技術やサービスは以下のようになっています。\n\n\nTurso: SQLiteでユーザーの設定などを保存\n\nUpstash (Redis): キャ..."
  },
  {
    "title": "Vibe Codingで25万ダウンロード超のOSSを開発できた。できたが… ── AIの役割 vs 人間の役割ではなく「協働」で考える",
    "date": "2025-10-13T22:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/team_zenn/articles/claudecode-ai-coding-vs-human-engineer",
    "content": "\n はじめに\n@dyoshikawaです。\n私の2025年6月ごろからの取り組みとして、Claude CodeによるVibe CodingでRulesyncというOSSツールを公開しました。\nそこでかなり自由にClaude Codeでいろんな手法を試すことができましたので、AIコーディング全般のTipsをお伝えできればと思います。\n一方で（人間の介入が少なすぎる）Vibe Codingの弊害としてコードベースやドキュメントが崩壊し、途中で開発がストップした場面もありました。ここのプロセスの反省と、どのように開発可能に復帰させたかという点も紹介します。\n最後に人間の役割、AIの役割、ソフト..."
  },
  {
    "title": "Next.js App Routerで破綻しない設計──本番で使えるアーキテクチャ実践ガイド",
    "date": "2025-10-13T15:32:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yukionishi/articles/cd79e39ea6c172",
    "content": "Next.jsのApp Routerは、“設計力が試されるフレームワーク”です。\nServer Components、Server Actions、そして“use client”による明確な境界。\nそれらは間違いなく強力な仕組みであり、\n使いこなせば、アプリケーションの構造を根本から変えるほどのポテンシャルを持っています。\nただ、どう設計すれば破綻しないのかについては、\n誰も明確な指針を示してくれません。\n実際、僕自身もいくつものチーム開発でApp Routerを使いながら、\n「境界があいまいになる」「Server Actionsが散らかる」\nといった“App Router地獄”を何度も..."
  },
  {
    "title": "Claude Codeに自分の記憶を持ってもらうMCPサーバーを作った話",
    "date": "2025-10-13T14:28:18.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/pppp303/articles/claude-ops-mcp-memory",
    "content": "\n 作ったもの：claude-ops-mcp\nhttps://github.com/pppp606/claude-ops-mcp/\nClaude Codeの操作履歴をMCPサーバーとして提供するツールです。ClaudeCodeが自分で書いた自分のログを、自身で読み返すためのMCPです。\n\n なぜ作ったか\nClaude Codeがv2になり /rewind コマンドで会話を巻き戻せるのは便利なのですが、根本的にClaude Codeは自身が行った作業の内容を理解（記憶）していないという問題があります。\n「え、ちょっと何したの？」という素朴な質問に、自身のログを遡って確認するという機能はなく..."
  },
  {
    "title": "nodejs/node – 2025-10-08, Version 24.10.0 (Current), @RafaelGSS",
    "date": "2025-10-11T16:18:16.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v24.10.0",
    "content": "### Notable Changes\r\n\r\n* \\[[`31bb476895`](https://github.com/nodejs/node/commit/31bb476895)] - **(SEMVER-MINOR)** **console**: allow per-stream `inspectOptions` option (Anna Henningsen) [#60082](https://github.com/nodejs/node/pull/60082)\r\n* \\[[`3b92be2fb8`](https://github.com/nodejs/node/commit/3b92be2fb8)] - **(SEMVER-MINOR)** **lib**: remove util.getCallSite (Rafael Gonzaga) [#59980](https://github.com/nodejs/node/pull/59980)\r\n* \\[[`18c79d9e1c`](https://github.com/nodejs/node/commit/18c79d9e1c)] - **(SEMVER-MINOR)** **sqlite**: create authorization api (Guilherme Araújo) [#59928](https://github.com/nodejs/node/pull/59928)\r\n\r\n### Commits\r\n\r\n* \\[[`e8cff3d51e`](https://github.com/nodejs/node/commit/e8cff3d51e)] - **benchmark**: remove unused variable from util/priority-queue (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`03294252ab`](https://github.com/nodejs/node/commit/03294252ab)] - **benchmark**: update count to n in permission startup (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`3c8a609d9b`](https://github.com/nodejs/node/commit/3c8a609d9b)] - **benchmark**: update num to n in dgram offset-length (Bruno Rodrigues) [#59872](https://github.com/nodejs/node/pull/59872)\r\n* \\[[`7b2032b13e`](https://github.com/nodejs/node/commit/7b2032b13e)] - **benchmark**: adjust dgram offset-length len values (Bruno Rodrigues) [#59708](https://github.com/nodejs/node/pull/59708)\r\n* \\[[`552d887aee`](https://github.com/nodejs/node/commit/552d887aee)] - **benchmark**: update num to n in dgram offset-length (Bruno Rodrigues) [#59708](https://github.com/nodejs/node/pull/59708)\r\n* \\[[`31bb476895`](https://github.com/nodejs/node/commit/31bb476895)] - **(SEMVER-MINOR)** **console**: allow per-stream `inspectOptions` option (Anna Henningsen) [#60082](https://github.com/nodejs/node/pull/60082)\r\n* \\[[`0bf022d4c0`](https://github.com/nodejs/node/commit/0bf022d4c0)] - **console,util**: improve array inspection performance (Ruben Bridgewater) [#60037](https://github.com/nodejs/node/pull/60037)\r\n* \\[[`04d568e591`](https://github.com/nodejs/node/commit/04d568e591)] - **deps**: V8: cherry-pick f93055fbd5aa (Olivier Flückiger) [#60105](https://github.com/nodejs/node/pull/60105)\r\n* \\[[`621058b3bf`](https://github.com/nodejs/node/commit/621058b3bf)] - **deps**: update archs files for openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\r\n* \\[[`81b3009fe6`](https://github.com/nodejs/node/commit/81b3009fe6)] - **deps**: upgrade openssl sources to openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\r\n* \\[[`dc44c9f349`](https://github.com/nodejs/node/commit/dc44c9f349)] - **deps**: upgrade npm to 11.6.1 (npm team) [#60012](https://github.com/nodejs/node/pull/60012)\r\n* \\[[`ec0f137198`](https://github.com/nodejs/node/commit/ec0f137198)] - **deps**: update ada to 3.3.0 (Node.js GitHub Bot) [#60045](https://github.com/nodejs/node/pull/60045)\r\n* \\[[`f490f91874`](https://github.com/nodejs/node/commit/f490f91874)] - **deps**: update amaro to 1.1.4 (pmarchini) [#60044](https://github.com/nodejs/node/pull/60044)\r\n* \\[[`de7a7cd0d7`](https://github.com/nodejs/node/commit/de7a7cd0d7)] - **deps**: update ada to 3.2.9 (Node.js GitHub Bot) [#59987](https://github.com/nodejs/node/pull/59987)\r\n* \\[[`a533e5b5db`](https://github.com/nodejs/node/commit/a533e5b5db)] - **doc**: add automated migration info to deprecations (Augustin Mauroy) [#60022](https://github.com/nodejs/node/pull/60022)\r\n* \\[[`7fb8fe4875`](https://github.com/nodejs/node/commit/7fb8fe4875)] - **doc**: fix typo on child\\_process.md (Angelo Gazzola) [#60114](https://github.com/nodejs/node/pull/60114)\r\n* \\[[`24c1ef9846`](https://github.com/nodejs/node/commit/24c1ef9846)] - **doc**: remove optional title prefixes (Aviv Keller) [#60087](https://github.com/nodejs/node/pull/60087)\r\n* \\[[`08b9eb8e19`](https://github.com/nodejs/node/commit/08b9eb8e19)] - **doc**: mark `.env` files support as stable (Santeri Hiltunen) [#59925](https://github.com/nodejs/node/pull/59925)\r\n* \\[[`66d90b8063`](https://github.com/nodejs/node/commit/66d90b8063)] - **doc**: mention reverse proxy and include simple example (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\r\n* \\[[`14aa1119cb`](https://github.com/nodejs/node/commit/14aa1119cb)] - **doc**: provide alternative to `url.parse()` using WHATWG URL (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\r\n* \\[[`f9412324f6`](https://github.com/nodejs/node/commit/f9412324f6)] - **doc**: fix typo of built-in module specifier in worker\\_threads (Deokjin Kim) [#59992](https://github.com/nodejs/node/pull/59992)\r\n* \\[[`64e738a342`](https://github.com/nodejs/node/commit/64e738a342)] - **doc,crypto**: reorder ML-KEM in the asymmetric key types table (Filip Skokan) [#60067](https://github.com/nodejs/node/pull/60067)\r\n* \\[[`1b25008b41`](https://github.com/nodejs/node/commit/1b25008b41)] - **http**: improve writeEarlyHints by avoiding for-of loop (Haram Jeong) [#59958](https://github.com/nodejs/node/pull/59958)\r\n* \\[[`35f9b6b28f`](https://github.com/nodejs/node/commit/35f9b6b28f)] - **inspector**: improve batch diagnostic channel subscriptions (Chengzhong Wu) [#60009](https://github.com/nodejs/node/pull/60009)\r\n* \\[[`3b92be2fb8`](https://github.com/nodejs/node/commit/3b92be2fb8)] - **(SEMVER-MINOR)** **lib**: remove util.getCallSite (Rafael Gonzaga) [#59980](https://github.com/nodejs/node/pull/59980)\r\n* \\[[`c495e1fe57`](https://github.com/nodejs/node/commit/c495e1fe57)] - **lib**: optimize priority queue (Gürgün Dayıoğlu) [#60039](https://github.com/nodejs/node/pull/60039)\r\n* \\[[`6be31fb9f3`](https://github.com/nodejs/node/commit/6be31fb9f3)] - **lib**: implement passive listener behavior per spec (BCD1me) [#59995](https://github.com/nodejs/node/pull/59995)\r\n* \\[[`c5e4aa763b`](https://github.com/nodejs/node/commit/c5e4aa763b)] - **meta**: bump actions/setup-python from 5.6.0 to 6.0.0 (dependabot\\[bot]) [#60090](https://github.com/nodejs/node/pull/60090)\r\n* \\[[`50fa1f4a76`](https://github.com/nodejs/node/commit/50fa1f4a76)] - **meta**: bump ossf/scorecard-action from 2.4.2 to 2.4.3 (dependabot\\[bot]) [#60096](https://github.com/nodejs/node/pull/60096)\r\n* \\[[`def4ce976c`](https://github.com/nodejs/node/commit/def4ce976c)] - **meta**: bump actions/cache from 4.2.4 to 4.3.0 (dependabot\\[bot]) [#60095](https://github.com/nodejs/node/pull/60095)\r\n* \\[[`24b5abc0e9`](https://github.com/nodejs/node/commit/24b5abc0e9)] - **meta**: bump step-security/harden-runner from 2.12.2 to 2.13.1 (dependabot\\[bot]) [#60094](https://github.com/nodejs/node/pull/60094)\r\n* \\[[`8ccf2b0b34`](https://github.com/nodejs/node/commit/8ccf2b0b34)] - **meta**: bump actions/setup-node from 4.4.0 to 5.0.0 (dependabot\\[bot]) [#60093](https://github.com/nodejs/node/pull/60093)\r\n* \\[[`78580147ef`](https://github.com/nodejs/node/commit/78580147ef)] - **meta**: bump actions/stale from 9.1.0 to 10.0.0 (dependabot\\[bot]) [#60092](https://github.com/nodejs/node/pull/60092)\r\n* \\[[`705686b5c4`](https://github.com/nodejs/node/commit/705686b5c4)] - **meta**: bump codecov/codecov-action from 5.5.0 to 5.5.1 (dependabot\\[bot]) [#60091](https://github.com/nodejs/node/pull/60091)\r\n* \\[[`423a6bc744`](https://github.com/nodejs/node/commit/423a6bc744)] - **meta**: bump github/codeql-action from 3.30.0 to 3.30.5 (dependabot\\[bot]) [#60089](https://github.com/nodejs/node/pull/60089)\r\n* \\[[`9d9bd0fb4f`](https://github.com/nodejs/node/commit/9d9bd0fb4f)] - **meta**: move Michael to emeritus (Michael Dawson) [#60070](https://github.com/nodejs/node/pull/60070)\r\n* \\[[`dbeee55824`](https://github.com/nodejs/node/commit/dbeee55824)] - **module**: use sync cjs when importing cts (Marco Ippolito) [#60072](https://github.com/nodejs/node/pull/60072)\r\n* \\[[`a722f677ac`](https://github.com/nodejs/node/commit/a722f677ac)] - **perf\\_hooks**: fix histogram fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`b3295b8353`](https://github.com/nodejs/node/commit/b3295b8353)] - **process**: fix wrong asyncContext under unhandled-rejections=strict (Shima Ryuhei) [#60103](https://github.com/nodejs/node/pull/60103)\r\n* \\[[`cff4a7608a`](https://github.com/nodejs/node/commit/cff4a7608a)] - **process**: fix default `env` for `process.execve` (Richard Lau) [#60029](https://github.com/nodejs/node/pull/60029)\r\n* \\[[`cd034e927f`](https://github.com/nodejs/node/commit/cd034e927f)] - **process**: fix hrtime fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`18c79d9e1c`](https://github.com/nodejs/node/commit/18c79d9e1c)] - **(SEMVER-MINOR)** **sqlite**: create authorization api (Guilherme Araújo) [#59928](https://github.com/nodejs/node/pull/59928)\r\n* \\[[`d949222043`](https://github.com/nodejs/node/commit/d949222043)] - **sqlite**: replace `ToLocalChecked` and improve filter error handling (Edy Silva) [#60028](https://github.com/nodejs/node/pull/60028)\r\n* \\[[`6417dc879e`](https://github.com/nodejs/node/commit/6417dc879e)] - **src**: bring permissions macros in line with general C/C++ standards (Anna Henningsen) [#60053](https://github.com/nodejs/node/pull/60053)\r\n* \\[[`e273c2020c`](https://github.com/nodejs/node/commit/e273c2020c)] - **src**: update contextify to use DictionaryTemplate (James M Snell) [#60059](https://github.com/nodejs/node/pull/60059)\r\n* \\[[`5f9ff60664`](https://github.com/nodejs/node/commit/5f9ff60664)] - **src**: remove `AnalyzeTemporaryDtors` option from .clang-tidy (iknoom) [#60008](https://github.com/nodejs/node/pull/60008)\r\n* \\[[`9db54adccc`](https://github.com/nodejs/node/commit/9db54adccc)] - **src**: update cares\\_wrap to use DictionaryTemplates (James M Snell) [#60033](https://github.com/nodejs/node/pull/60033)\r\n* \\[[`fc0ceb7b82`](https://github.com/nodejs/node/commit/fc0ceb7b82)] - **src**: correct the error handling in StatementExecutionHelper (James M Snell) [#60040](https://github.com/nodejs/node/pull/60040)\r\n* \\[[`3e8fdc1d8d`](https://github.com/nodejs/node/commit/3e8fdc1d8d)] - **src**: remove unused variables from report (Moonki Choi) [#60047](https://github.com/nodejs/node/pull/60047)\r\n* \\[[`d744324d8e`](https://github.com/nodejs/node/commit/d744324d8e)] - **src**: avoid unnecessary string allocations in SPrintF impl (Anna Henningsen) [#60052](https://github.com/nodejs/node/pull/60052)\r\n* \\[[`de65a5c719`](https://github.com/nodejs/node/commit/de65a5c719)] - **src**: make ToLower/ToUpper input args more flexible (Anna Henningsen) [#60052](https://github.com/nodejs/node/pull/60052)\r\n* \\[[`354026df5a`](https://github.com/nodejs/node/commit/354026df5a)] - **src**: allow `std::string_view` arguments to `SPrintF()` and friends (Anna Henningsen) [#60058](https://github.com/nodejs/node/pull/60058)\r\n* \\[[`42f7d7cb20`](https://github.com/nodejs/node/commit/42f7d7cb20)] - **src**: remove unnecessary `std::string` error messages (Anna Henningsen) [#60057](https://github.com/nodejs/node/pull/60057)\r\n* \\[[`30c2c0fedd`](https://github.com/nodejs/node/commit/30c2c0fedd)] - **src**: remove unnecessary shadowed functions on Utf8Value & BufferValue (Anna Henningsen) [#60056](https://github.com/nodejs/node/pull/60056)\r\n* \\[[`eb99eec09b`](https://github.com/nodejs/node/commit/eb99eec09b)] - **src**: avoid unnecessary string -> `char*` -> string round trips (Anna Henningsen) [#60055](https://github.com/nodejs/node/pull/60055)\r\n* \\[[`c1f1dbdce2`](https://github.com/nodejs/node/commit/c1f1dbdce2)] - **src**: remove useless dereferencing in `THROW_...` (Anna Henningsen) [#60054](https://github.com/nodejs/node/pull/60054)\r\n* \\[[`ea0f5e575d`](https://github.com/nodejs/node/commit/ea0f5e575d)] - **src**: fill `options_args`, `options_env` after vectors are finalized (iknoom) [#59945](https://github.com/nodejs/node/pull/59945)\r\n* \\[[`415fff217a`](https://github.com/nodejs/node/commit/415fff217a)] - **src**: use RAII for uv\\_process\\_options\\_t (iknoom) [#59945](https://github.com/nodejs/node/pull/59945)\r\n* \\[[`982b03ecbd`](https://github.com/nodejs/node/commit/982b03ecbd)] - **test**: mark `test-runner-run-watch` flaky on macOS (Richard Lau) [#60115](https://github.com/nodejs/node/pull/60115)\r\n* \\[[`831a0d3d28`](https://github.com/nodejs/node/commit/831a0d3d28)] - **test**: ensure that the message event is fired (Luigi Pinca) [#59952](https://github.com/nodejs/node/pull/59952)\r\n* \\[[`5538cfc1e8`](https://github.com/nodejs/node/commit/5538cfc1e8)] - **test**: replace diagnostics\\_channel stackframe in output snapshots (Chengzhong Wu) [#60024](https://github.com/nodejs/node/pull/60024)\r\n* \\[[`77ec400d90`](https://github.com/nodejs/node/commit/77ec400d90)] - **test**: mark test-web-locks skip on IBM i (SRAVANI GUNDEPALLI) [#59996](https://github.com/nodejs/node/pull/59996)\r\n* \\[[`1aaadb9e31`](https://github.com/nodejs/node/commit/1aaadb9e31)] - **test**: ensure message event fires in worker message port test (Jarred Sumner) [#59885](https://github.com/nodejs/node/pull/59885)\r\n* \\[[`1d5cc5e57a`](https://github.com/nodejs/node/commit/1d5cc5e57a)] - **test**: mark sea tests flaky on macOS x64 (Richard Lau) [#60068](https://github.com/nodejs/node/pull/60068)\r\n* \\[[`c412b1855d`](https://github.com/nodejs/node/commit/c412b1855d)] - **test**: expand tls-check-server-identity coverage (Diango Gavidia) [#60002](https://github.com/nodejs/node/pull/60002)\r\n* \\[[`ad87975029`](https://github.com/nodejs/node/commit/ad87975029)] - **test**: fix typo of test-benchmark-readline.js (Deokjin Kim) [#59993](https://github.com/nodejs/node/pull/59993)\r\n* \\[[`bad4b9b878`](https://github.com/nodejs/node/commit/bad4b9b878)] - **test**: add new `startNewREPLSever` testing utility (Dario Piotrowicz) [#59964](https://github.com/nodejs/node/pull/59964)\r\n* \\[[`ef90b0f456`](https://github.com/nodejs/node/commit/ef90b0f456)] - **test**: verify tracing channel doesn't swallow unhandledRejection (Gerhard Stöbich) [#59974](https://github.com/nodejs/node/pull/59974)\r\n* \\[[`d7285459fe`](https://github.com/nodejs/node/commit/d7285459fe)] - **timers**: fix binding fast call signatures (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`6529ae9b0c`](https://github.com/nodejs/node/commit/6529ae9b0c)] - **tools**: add message on auto-fixing js lint issues in gh workflow (Dario Piotrowicz) [#59128](https://github.com/nodejs/node/pull/59128)\r\n* \\[[`1ca116a6ea`](https://github.com/nodejs/node/commit/1ca116a6ea)] - **tools**: verify signatures when updating nghttp\\* (Antoine du Hamel) [#60113](https://github.com/nodejs/node/pull/60113)\r\n* \\[[`20d10a2398`](https://github.com/nodejs/node/commit/20d10a2398)] - **tools**: use dependabot cooldown and move tools/doc (Rafael Gonzaga) [#59978](https://github.com/nodejs/node/pull/59978)\r\n* \\[[`275c07064c`](https://github.com/nodejs/node/commit/275c07064c)] - **typings**: update 'types' binding (René) [#59692](https://github.com/nodejs/node/pull/59692)\r\n* \\[[`8c21c4b286`](https://github.com/nodejs/node/commit/8c21c4b286)] - **wasi**: fix WasiFunction fast call signature (Renegade334) [#59600](https://github.com/nodejs/node/pull/59600)\r\n* \\[[`b865074641`](https://github.com/nodejs/node/commit/b865074641)] - **win,tools**: add description to signature (Martin Costello) [#59877](https://github.com/nodejs/node/pull/59877)\r\n"
  }
]