[
  {
    "title": "vercel/next.js – v15.6.0-canary.39",
    "date": "2025-10-01T23:45:39.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.39",
    "content": "### Core Changes\n\n- Update otel test assertions and pages span_name: #84393\n- [Breaking] Bump minimum TypeScript version to 5.1.0: #84384\n- Upgrade React from `d15d7fd7-20250929` to `ef889445-20250930`: #84383\n- [Breaking] Remove deprecated `unstable_rootParams`: #84373\n- [metadata] remove falsy dynamicParams approach: #84405\n- fix: next rspack binding NextExternalsPlugin: #84303\n- Development: Skip route matching when there is an existing match: #84227\n- Revert \"auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents\": #84419\n- Upgrade React from `ef889445-20250930` to `548235db-20251001`: #84416\n- [Breaking] Update default browserslist config: #84401\n- Upgrade React from `548235db-20251001` to `1bd1f01f-20251001`: #84417\n- Allow `metadataBase` to be a string URL in addition to `URL` instance: #84297\n- Upgrade React from `1bd1f01f-20251001` to `86181134-20251001`: #84427\n- [mcp] logging file should be reset for each session: #84425\n\n### Misc Changes\n\n- Update failing e2e deploy tests: #84395\n- Turbopack: Webpack loader `this.fs.readFile`: #83313\n- Improve tests: #84374\n- Revamp Next.js boilerplate: #81945\n- Add test for twoslash: #84267\n- Docs/project structure polish: #84386\n- Bump to swc v44: #84420\n- Turbopack: don't fail for parse errors in tracing: #84408\n- Update Rspack development test manifest: #84365\n- Update Rspack production test manifest: #84366\n\n### Credits \n\nHuge thanks to @ijjk, @mischnic, @devjiwonchoi, @chloe-yan, @huozhi, @SyMind, @timneutkens, @ztanner, @sireesha-siri, @unstubbable, and @vercel-release-bot for helping!\n"
  },
  {
    "title": "facebook/react – 19.2.0 (Oct 1, 2025)",
    "date": "2025-10-01T21:50:48.000Z",
    "source": "GitHub",
    "url": "https://github.com/facebook/react/releases/tag/v19.2.0",
    "content": "Below is a list of all new features, APIs, and bug fixes.\r\n\r\nRead the [React 19.2 release post](https://react.dev/blog/2025/10/01/react-19-2) for more information.\r\n\r\n## New React Features\r\n\r\n- [`<Activity>`](https://react.dev/reference/react/Activity): A new API to hide and restore the UI and internal state of its children.\r\n- [`useEffectEvent`](https://react.dev/reference/react/useEffectEvent) is a React Hook that lets you extract non-reactive logic into an [Effect Event](https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event).\r\n- [`cacheSignal`](https://react.dev/reference/react/cacheSignal) (for RSCs) lets your know when the `cache()` lifetime is over.\r\n- [React Performance tracks](https://react.dev/reference/developer-tooling/react-performance-tracks) appear on the Performance panel’s timeline in your browser developer tools\r\n\r\n## New React DOM Features\r\n\r\n- Added resume APIs for partial pre-rendering with Web Streams:\r\n  - [`resume`](https://react.dev/reference/react-dom/server/resume): to resume a prerender to a stream.\r\n  - [`resumeAndPrerender`](https://react.dev/reference/react-dom/static/resumeAndPrerender): to resume a prerender to HTML.\r\n- Added resume APIs for partial pre-rendering with Node Streams:\r\n  - [`resumeToPipeableStream`](https://react.dev/reference/react-dom/server/resumeToPipeableStream): to resume a prerender to a stream.\r\n  - [`resumeAndPrerenderToNodeStream`](https://react.dev/reference/react-dom/static/resumeAndPrerenderToNodeStream): to resume a prerender to HTML.\r\n- Updated [`prerender`](https://react.dev/reference/react-dom/static/prerender) APIs to return a `postponed` state that can be passed to the `resume` APIs.\r\n\r\n## Notable changes\r\n\r\n- React DOM now batches suspense boundary reveals, matching the behavior of client side rendering. This change is especially noticeable when animating the reveal of Suspense boundaries e.g. with the upcoming `<ViewTransition>` Component. React will batch as much reveals as possible before the first paint while trying to hit popular first-contentful paint metrics.\r\n- Add Node Web Streams (`prerender`, `renderToReadableStream`) to server-side-rendering APIs for Node.js\r\n- Use underscore instead of `:` IDs generated by useId\r\n\r\n## All Changes\r\n\r\n### React\r\n\r\n- `<Activity />` was developed over many years, starting before `ClassComponent.setState` (@acdlite @sebmarkbage and many others)\r\n- Stringify context as \"SomeContext\" instead of \"SomeContext.Provider\" (@kassens [#33507](https://github.com/facebook/react/pull/33507))\r\n- Include stack of cause of React instrumentation errors with `%o` placeholder (@eps1lon [#34198](https://github.com/facebook/react/pull/34198))\r\n- Fix infinite `useDeferredValue` loop in popstate event (@acdlite [#32821](https://github.com/facebook/react/pull/32821))\r\n- Fix a bug when an initial value was passed to `useDeferredValue` (@acdlite [#34376](https://github.com/facebook/react/pull/34376))\r\n- Fix a crash when submitting forms with Client Actions (@sebmarkbage [#33055](https://github.com/facebook/react/pull/33055))\r\n- Hide/unhide the content of dehydrated suspense boundaries if they resuspend (@sebmarkbage [#32900](https://github.com/facebook/react/pull/32900))\r\n- Avoid stack overflow on wide trees during Hot Reload (@sophiebits [#34145](https://github.com/facebook/react/pull/34145))\r\n- Improve Owner and Component stacks in various places (@sebmarkbage, @eps1lon: [#33629](https://github.com/facebook/react/pull/33629), [#33724](https://github.com/facebook/react/pull/33724), [#32735](https://github.com/facebook/react/pull/32735), [#33723](https://github.com/facebook/react/pull/33723))\r\n- Add `cacheSignal` (@sebmarkbage [#33557](https://github.com/facebook/react/pull/33557))\r\n\r\n### React DOM\r\n\r\n- Block on Suspensey Fonts during reveal of server-side-rendered content (@sebmarkbage [#33342](https://github.com/facebook/react/pull/33342))\r\n- Use underscore instead of `:` for IDs generated by `useId` (@sebmarkbage, @eps1lon: [#32001](https://github.com/facebook/react/pull/32001), [https://github.com/facebook/react/pull/33342](https://github.com/facebook/react/pull/33342)[#33099](https://github.com/facebook/react/pull/33099), [#33422](https://github.com/facebook/react/pull/33422))\r\n- Stop warning when ARIA 1.3 attributes are used (@Abdul-Omira [#34264](https://github.com/facebook/react/pull/34264))\r\n- Allow `nonce` to be used on hoistable styles (@Andarist [#32461](https://github.com/facebook/react/pull/32461))\r\n- Warn for using a React owned node as a Container if it also has text content (@sebmarkbage [#32774](https://github.com/facebook/react/pull/32774))\r\n- s/HTML/text for for error messages if text hydration mismatches (@rickhanlonii [#32763](https://github.com/facebook/react/pull/32763))\r\n- Fix a bug with `React.use` inside `React.lazy`\\-ed Component (@hi-ogawa [#33941](https://github.com/facebook/react/pull/33941))\r\n- Enable the `progressiveChunkSize` option for server-side-rendering APIs (@sebmarkbage [#33027](https://github.com/facebook/react/pull/33027))\r\n- Fix a bug with deeply nested Suspense inside Suspense fallback when server-side-rendering (@gnoff [#33467](https://github.com/facebook/react/pull/33467))\r\n- Avoid hanging when suspending after aborting while rendering (@gnoff [#34192](https://github.com/facebook/react/pull/34192))\r\n- Add Node Web Streams to server-side-rendering APIs for Node.js (@sebmarkbage [#33475](https://github.com/facebook/react/pull/33475))\r\n\r\n### React Server Components\r\n\r\n- Preload `<img>` and `<link>` using hints before they're rendered (@sebmarkbage [#34604](https://github.com/facebook/react/pull/34604))\r\n- Log error if production elements are rendered during development (@eps1lon [#34189](https://github.com/facebook/react/pull/34189))\r\n- Fix a bug when returning a Temporary reference (e.g. a Client Reference) from Server Functions (@sebmarkbage [#34084](https://github.com/facebook/react/pull/34084), @denk0403 [#33761](https://github.com/facebook/react/pull/33761))\r\n- Pass line/column to `filterStackFrame` (@eps1lon [#33707](https://github.com/facebook/react/pull/33707))\r\n- Support Async Modules in Turbopack Server References (@lubieowoce [#34531](https://github.com/facebook/react/pull/34531))\r\n- Add support for .mjs file extension in Webpack (@jennyscript [#33028](https://github.com/facebook/react/pull/33028))\r\n- Fix a wrong missing key warning (@unstubbable [#34350](https://github.com/facebook/react/pull/34350))\r\n- Make console log resolve in predictable order (@sebmarkbage [#33665](https://github.com/facebook/react/pull/33665))\r\n\r\n### React Reconciler\r\n\r\n- [createContainer](https://github.com/facebook/react/blob/v19.2.0/packages/react-reconciler/src/ReactFiberReconciler.js#L255-L261) and [createHydrationContainer](https://github.com/facebook/react/blob/v19.2.0/packages/react-reconciler/src/ReactFiberReconciler.js#L305-L312) had their parameter order adjusted after `on*` handlers to account for upcoming experimental APIs\r\n\r\n## eslint-plugin-react-hooks@6.1.0\r\n\r\n**Note:** Version 6.0.0 was mistakenly released and immediately deprecated and untagged on npm. This is the first official 6.x major release and includes breaking changes. \r\n\r\n- **Breaking:** Require Node.js 18 or newer. ([@michaelfaith](https://github.com/michaelfaith) in [#32458](https://github.com/facebook/react/pull/32458))\r\n- **Breaking:** Flat config is now the default `recommended` preset. Legacy config moved to `recommended-legacy`. ([@michaelfaith](https://github.com/michaelfaith) in [#32457](https://github.com/facebook/react/pull/32457))\r\n- **New Violations:** Disallow calling `use` within try/catch blocks. ([@poteto](https://github.com/poteto) in [#34040](https://github.com/facebook/react/pull/34040))\r\n- **New Violations:** Disallow calling `useEffectEvent` functions in arbitrary closures. ([@jbrown215](https://github.com/jbrown215) in [#33544](https://github.com/facebook/react/pull/33544))\r\n- Handle `React.useEffect` in addition to `useEffect` in rules-of-hooks. ([@Ayc0](https://github.com/Ayc0) in [#34076](https://github.com/facebook/react/pull/34076))\r\n- Added `react-hooks` settings config option that to accept `additionalEffectHooks` that are used across exhaustive-deps and rules-of-hooks rules. ([@jbrown215](https://github.com/jbrown215)) in [#34497](https://github.com/facebook/react/pull/34497)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9",
    "date": "2025-10-01T20:37:10.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9.2",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n* *No specific changes for TypeScript 5.9.2 (Stable)*\r\n\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9 RC",
    "date": "2025-10-01T20:35:11.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9-rc",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9-rc/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9 Beta",
    "date": "2025-10-01T20:32:50.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9-beta",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9-beta/).\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.8.3",
    "date": "2025-10-01T20:29:30.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.8.3",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/).\r\n\r\n* [fixed issues query for Typescript 5.8.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.1%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.2 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.2%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.3 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.3%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9.3",
    "date": "2025-10-01T19:06:07.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9.3",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n* *No specific changes for TypeScript 5.9.2 (Stable)*\r\n* [fixed issues query for Typescript 5.9.3 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.3%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "株式会社ケアネット様の AWS 生成 AI 事例「医師向け情報サービスにおける大規模 AI ライティングシステムの実装」のご紹介",
    "date": "2025-10-01T10:40:34.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-carenet/",
    "content": "<p>みなさん、こんにちは。AWS ソリューションアーキテクトの森です。<br> 2025 年も多くのお客様に生成 AI の活用にチャレンジいただいております。特に注目すべきは、生成 AI をコアビジネスの価値向上や成長加速に繋げる事例が増えてきていることです。今回ご紹介するのは、医療従事者向けの情報サービスを提供する株式会社ケアネット様が、AWS の生成 AI サービスである Amazon Bedrock を活用して、医師向け情報サービスの価値を大幅に向上させた事例です。</p> \n<h2>ケアネット様の状況と課題</h2> \n<p>株式会社ケアネット様は、医療従事者向けプラットフォームを基盤に、医療の人材・教育・経営関連の事業から新薬の開発・治験普及を支援する事業まで、医療・医薬分野の専門サービスを幅広く展開しています。</p> \n<p>その中でも、日常臨床に役立つ医療・医学情報を提供する医師向けの会員制サイト「CareNet.com」は、ケアネット様の主力サービスとなっており、日本全国の医師数の約70%に相当する24万人が登録しています。CareNet.comでは、臨床医による連載やガイドライン解説などの臨床で役立つコンテンツや、医学誌に掲載された論文を厳選し日本語で要約したニュース記事を配信したりしています。しかし、忙しい医師にとっては次のような点が課題となっていました：</p> \n<ul> \n <li>膨大な医学情報の処理：年間 150 万件以上の医学文献が発表される中、臨床医が最新情報を継続的に取得することが困難</li> \n <li>情報提供の限界：従来の人力によるニュース作成では 1 日約 10 件程度しか提供できず、医師の情報ニーズを十分に満たせていなかった</li> \n</ul> \n<p>これらの課題を解決するため、ケアネット様は生成 AI を活用した新サービス「CareNet Academia（ケアネットアカデミア）」の開発に着手しました。ケアネットアカデミアは、「限られた時間で専門分野の知識を効率よくアップデートしたい」といった臨床現場のニーズに応えるスマホ対応ブラウザアプリケーションです。膨大な医学文献（米国国立医学図書館（NLM）が提供する医学文献データベース PubMed）のアブストラクト情報を読み込み、各医師ごとの関心に合わせて生成 AI が自動でニュース記事を選定・作成し、その内容がメールで配信されます。関心のあるトピックス（診療科や疾患）については利用開始時に選択可能となっており、配信されたニュース記事を評価することでより有益な情報を配信できるようになります。</p> \n<div style=\"text-align: center\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image1-1-1.png\"><img loading=\"lazy\" class=\"wp-image-166023\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image1-1-1-300x185.png\" alt=\"\" width=\"428\" height=\"264\"></a>\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image2-1-1.png\"><img loading=\"lazy\" class=\"wp-image-166022\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image2-1-1-300x240.png\" alt=\"\" width=\"329\" height=\"263\"></a>\n</div> \n<h2>ソリューション</h2> \n<p>ケアネットアカデミアで配信する記事を作成するために、Amazon Bedrock を活用した大規模 AI ライティングシステムを構築しました。具体的には、Anthropic 社が開発した LLM である Claude を使ってニュース記事を自動生成し、独自開発のレコメンデーションAIと組み合わせることで、個々の医師に最適化された情報配信を実現しています。</p> \n<p>本記事では、特に Amazon Bedrock を活用した AI ライティングシステムについて詳細に解説します。</p> \n<h2>主な機能</h2> \n<p>AI ライティングシステム（Amazon Bedrock を活用した機能）</p> \n<ul> \n <li>Claude を活用して医学文献から記事を自動生成</li> \n <li>Claude を使って医学文献を整理・要約</li> \n <li>解説記事の自動生成</li> \n</ul> \n<h2>Amazon Bedrock 選定理由</h2> \n<p>ケアネット様が Amazon Bedrock を選定した主な理由は以下の通りです：</p> \n<p><strong>セキュリティとデータ保護</strong></p> \n<ul> \n <li>データが AWS 内に閉じるため、会員情報、医療情報のセキュリティを確保</li> \n <li>転送中・保管時のデータ暗号化により、機密性の高い会員情報、医療情報を安全に処理</li> \n</ul> \n<p><strong>信頼性と品質</strong></p> \n<ul> \n <li>Amazon Bedrock の SLA が定義されており、安定したサービス品質を確保</li> \n</ul> \n<p><strong>スケーラビリティ</strong></p> \n<ul> \n <li>クロスリージョン推論機能を活用し、大量のリクエストを並列処理</li> \n <li>短時間で多数の記事を生成・処理することが可能</li> \n</ul> \n<h2>導入効果</h2> \n<p>Amazon Bedrock を活用した新機能の導入により以下の効果が得られました：</p> \n<ol> \n <li><strong>情報提供量の飛躍的増加</strong> \n  <ul> \n   <li>1日あたりの記事生成数が最大5,000件に拡大（従来比約500倍）</li> \n   <li>医師が必要とする幅広い医学情報をカバー</li> \n  </ul> </li> \n <li><strong>医師の情報収集効率化</strong> \n  <ul> \n   <li>膨大な医学文献から必要な情報だけを抽出・要約して提供</li> \n   <li>医師の情報収集時間の短縮と、より効率的な臨床判断をサポート</li> \n  </ul> </li> \n</ol> \n<p>また、CareNet Academiaをお使いいただいているユーザーの継続率は60%を超えていることからも、医師からの高い満足度が伺えます。さらに、ユーザーからの追加機能の要望（関心のある疾患カテゴリの追加）に迅速に対応したことで、「非常に有用で助かっている」という声も届いています。ケアネット様の CTO である榊原海様からは「Amazon Bedrock の活用で、AWS の統合されたセキュアなインフラ内でAI処理の大規模並列実行を実現できました。」とコメントを頂戴しています。</p> \n<h2>まとめ</h2> \n<p>本事例は、医療情報という専門性の高い分野において、生成 AI を活用してビジネスの価値向上に繋げた優れた事例です。Amazon Bedrock のセキュリティ、信頼性、スケーラビリティを活かし、医師向け情報サービスの質と量を大幅に向上させることに成功しました。</p> \n<p>特に注目すべきは、単に業務効率化だけでなく、医師の情報収集をサポートし、最終的には医療の質向上に貢献するという社会的意義の高いユースケースである点です。AWS は今後も、このような社会的価値の創出に貢献できるよう、安全で信頼性の高い生成 AI サービスの提供を続けてまいります。</p> \n<p>生成 AI を活用したビジネス価値の向上や、AWS が提供する様々なサービスの選択肢にご興味をお持ちの方は、お気軽にお問い合わせください。</p> \n<p>ソリューションアーキテクト 森 瞭輔</p>"
  },
  {
    "title": "AI時代におけるBIツールのあり方について",
    "date": "2025-10-01T07:39:03.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/cavernaria/articles/f857da8ffc9db0",
    "content": "!\nポジショントーク感というか、かなりバイアスがかかっている感が否めないので、ゴマ塩程度に読んでください\n\nカスタマーサクセスマネージャー初級の玉井です。\n仕事でBIツールを扱っている以上、昨今の生成AIとの関係性をちょこちょこ聞かれるのですが、最近それが急激に増えてきました。なので、ちょっと自分の考えを整理するためにポエムをしたためたいと思います。\n\n データ分析と生成AIの今\nBIツールというのは、基本的には「データを可視化して分析するツール」ですが、最近の生成AIの成長が凄まじく、「BIツール無くても、AIにデータ分析を任せられるんちゃうの？」「AI使えば直接データと会話できるやん..."
  },
  {
    "title": "【60億円流出】Solanaステーキングで何が起きたのかーAPI悪用の可能性と対策",
    "date": "2025-10-01T06:59:49.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/omakase/articles/b2e85e51ca45ef",
    "content": "\n ハッキングの概要\n2025年9月8日、約60億円相当の$SOLがハッキングされるニュースがありました。(リンク)\n事前の 2025年8月31日に送られた「アンステーク（Deactivate）」に見えるTx内へ、Authorize(Withdrawer) を8本同梱する“権限すり替え”が仕込まれており、2025年9月8日に攻撃者が新しい Withdraw 鍵で Withdraw を複数回実行しドレイン、という流れです。\nハッキングを受けた企業はユーザー損失を出さない方針を表明。流出のあったStaking Provider は Dashboard/API を停止し、段階的復旧・調査を発表..."
  },
  {
    "title": "【Tauri】Rust から低遅延にフロントエンドにデータをストリーミングする",
    "date": "2025-10-01T05:26:29.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/gemcook/articles/b08ab45c5ed0e5",
    "content": "\n はじめに\n個人開発で、OSC で送られてきた値を Rust で受信し、それを低遅延でフロントエンドに転送してリアルタイムに更新したい要件がありました。公式ドキュメントを確認したところ、目的に合う Channel API があったため、学習を兼ねて記事にまとめました。\n!\nプッシュ通知など比較的シンプルな双方向通信で十分なケースでは、Listen というAPIを利用するのが適していそうです。\n\n\n OSCとは\nOSC（Open Sound Control）は、MIDIの後継として設計された、音楽やメディア制御に特化した高速かつ柔軟な通信プロトコルです。シンプルな構造で低遅延性があり、音..."
  },
  {
    "title": "Next.js × Hono × モノレポで実践する「リアルオプション戦略」：初期の開発速度と将来の柔軟性を両立させるWebシステム設計",
    "date": "2025-10-01T03:38:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/assign/articles/083dfb24afd335",
    "content": "\n はじめに\nASSIGN CTOの須永と申します。\n弊社では転職エージェントの支援品質の高度化・顧客価値の最大化を目指し、面談・選考管理、\n各種書類作成、求人マッチング、データ分析などの機能を持つ業務管理システムを内製で開発しています。\n昨年度からは新たに新卒就活支援事業を開始し、転職支援事業と同様に業務管理システムの開発プロジェクトを本格的に推進することになりました。\nこの記事では、上記システムの設計で採用した「リアルオプション戦略」に基づく技術選定の背景と、その具体的な内容についてご紹介します。\n\n プロジェクトにおける不確実性\nこのプロジェクトには、いくつかの大きな制約や考慮すべ..."
  },
  {
    "title": "【保存版】Convex × TanStack Start × Better Auth 認証実装ガイド",
    "date": "2025-10-01T02:44:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/sc30gsw/articles/bb992544c3e636",
    "content": "\n はじめに\n今回ですが、Convex・TanStack StartにBetter Authを統合させた認証機能の実装をしたので、実装手順・方法を紹介したいと思います。\nまた、今回の実装を行ったソースは以下となります。\nhttps://github.com/sc30gsw/tanstack-convex-better-auth-example\n\n TL;DR\n\nConvexを使用する場合、認証処理の中核（Better Authの主な機能実装）はConvex側で必要\nTanStack StartではBetter Authの client定義が必要かつConvexのSiteURLを設定する必..."
  },
  {
    "title": "ライブカメラに映った落雷をAmazon Novaで検出する試み",
    "date": "2025-10-01T01:00:17.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/weathernews/articles/870c8ac6013593",
    "content": "こんにちは。ウェザーニューズ モバイル・インターネット事業部の hoka です。\nウェザーニューズにはウェザーニュース アプリユーザーのみなさまにご協力いただき設置しているライブカメラが日本国内に 2000 ヵ所以上あります。ライブカメラの映像を動画理解モデルである Amazon Nova を使って解析し、落雷の検出を試してみました。\n\n 録画・検出例\n落雷・稲妻がはっきり映っていることがわかります。\n\n落雷の検出例(茨城県 土浦市)\n\n落雷の検出例(石川県 珠洲市)\n\n 落雷検出のアプローチ\n3 つのステップに分けて処理しています\n\n落雷が発生した地点周辺のライブカメラを録画\n映像内で..."
  },
  {
    "title": "C++を使った数値計算ライブラリの整備で辛かったこと",
    "date": "2025-10-01T00:23:04.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/h_shinaoka/articles/896539019fdd08",
    "content": "\n まえがき\nこの記事はC++を批判する意図はなく, 過去10年以上の数値計算ライブラリの開発経験を共有する目的で書かれている.\n\n まとめ\n特に, 標準的なパッケージマネージャー, コンパイラー, ビルドシステムの不在が辛い. 以下に項目ごとに具体的な感想を書いていこう.\n\n 標準的なパッケージマネージャーの不在\nJulia, Rustなどに存在する統一されたパッケージマネージャーがC++には存在しない. これにより, 以下の困難が生じる.\n\n自分が開発しているライブラリを機能ごとに分割しづらい. 例えば, いくつかのライブラリで共通の機能 (例えば, full-pivoting LU..."
  },
  {
    "title": "IVR による電話注文から Amazon Pay 決済へ – Amazon Connect で実現する新しい注文導線の構築アイデア",
    "date": "2025-10-01T00:21:39.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/ivr-amazonpay/",
    "content": "<h2>はじめに</h2> \n<p>近年、IT の急速な進歩と共に EC 市場は急速に拡大し、様々な顧客ニーズに応えるため EC サイトや決済手段も多様化する中、「電話」という従来からのチャネルの重要性は今なお低下することはありません。シニア層や IT に不慣れな方への対応や緊急時の問い合わせなど、電話での対応が必要とされるシーンは決して少なくなく、むしろ事業者様とお客様をつなぐ接点として大きな価値をもたらす役割を担っています。<br> その一方で、コンタクトセンターにおける人手不足やコストの課題は、業界共通の大きな悩みであることも事実です。オペレータの負荷軽減や業務効率化、運用コストの削減を目指す中で注目される技術として <a href=\"https://aws.amazon.com/jp/what-is/interactive-voice-response/\">IVR (Interactive Voice Response)</a> があります。IVR は電話による顧客対応を自動化する技術として活用されており、音声ガイダンスに従ってキーパッドから番号を入力する、あるいはユーザーが発話することで、その内容に応じて様々なサービスを利用できるシステムです。この技術により、ヒューマンオペレーターの対応を減らし必要な場面にだけオペレーターが介在できるため、人手不足の課題解決につながり、見方を変えると、オペレータ対応を真に必要とするお客様に絞った対応ができるため、問い合わせ窓口としての満足度向上にも貢献できます。<br> ここで注目したいのが、AWS が提供するクラウドベースのコンタクトセンターサービス <a href=\"https://aws.amazon.com/jp/connect/\">Amazon Connect</a> と AI による柔軟な対話を実現する <a href=\"https://aws.amazon.com/jp/lex/\">Amazon Lex</a> です。従来の定型フレーズによる音声ガイダンスでは無機質な印象もあった IVR ですが、AI や 音声合成マークアップ言語 (SSML) など、多様な機能を活用することで、より自然で温かみのあるインタラクションを AWS で実現することができます。そもそも、従来のオンプレミスのコンタクトセンター基盤の IVR にこうした最新のテクノロジーを組み込もうとした場合、時間やコストが制約になることもあります。これに対し、Amazon Connect と Amazon Lex はわずか数クリックでデプロイすることができ、料金についても初期費用不要の従量課金モデルでサービスを利用することが可能です。そのため、スモールスタートで素早く取り組みを開始し、事業成長とともに規模をスケールすることができます。<br> また、<a href=\"https://pay.amazon.co.jp/\">Amazon Pay</a> は Amazon が提供する ID 決済サービスで、Amazon アカウントを持っていればどなたでも利用できる簡単・便利な決済サービスです。<a href=\"https://www.amazon.co.jp/\">amazon.co.jp</a> を普段からご利用いただいているお客様はすでに Amazon アカウントをお持ちですので、Amazon Pay をすぐに利用できます。<a href=\"https://pay.amazon.co.jp/merchant-stories\">Amazon Pay が導入されている EC サイト</a>では、Amazon アカウントに登録されたお支払い方法・お届け先住所を利用できるため、最短 3 ステップでお買い物が完了します。Amazon Pay を IVR による電話注文と統合することで、電話口でのやり取りから Web 決済までスムーズかつセキュアに完結し、これまで抱えていた「電話口でのクレジットカード番号の伝達」や「注文導線における入力操作の手間」というお客様の不安・不満、さらには事業者様が懸念する「購入からの途中離脱」の解消につながります。<br> 本記事では、Amazon Connect および Amazon Lex を活用した IVR による電話注文から Amazon Pay での Web 決済につなげる新しい購入体験のシナリオや構成例についてご紹介します。お客様の利用シーンや属性に合わせて選択可能な最適なチャネルを提供し、コンタクトセンタービジネスをさらに拡張するアプローチのきっかけとなれば幸いです。</p> \n<h2>電話注文時のユーザー体験</h2> \n<p>本記事では電話注文のシーンに焦点を置き、電話注文の開始から決済完了までの一連の流れを想定します。<br> お客様がカタログやテレビショッピングで見た電話番号を入り口とし、どういった体験ができるかのアイデアをご紹介します。<br> 一例ではありますが、以下のようなフローをユーザー体験として想定できます。</p> \n<ol> \n <li><strong>電話をかけて、商品名・購入数 を電話口で伝える。</strong></li> \n <li><strong>注文を電話口で確認したら、電話をかけた端末に SMS メッセージを受信する。</strong></li> \n <li><strong>SMS のリンクから Web に遷移し、Amazon Pay で決済を行う。</strong></li> \n</ol> \n<p>手順 1, 2 のフローは電話口でのインタラクションとなり、手順 3 は、Web での決済操作となるイメージです。<br> 電話口でのインタラクションは IVR によって実現が可能です。つまりオペレータの介在なしに電話でのフローは完結できます。<br> 例えば、以下のような対話イメージを IVR によって実現できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image001-1.png\"><img loading=\"lazy\" class=\"size-large wp-image-164483 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image001-1-1024x448.png\" alt=\"\" width=\"1024\" height=\"448\"></a></p> \n<h2>IVR による電話注文を実現する AWS のサービス</h2> \n<p>電話口での IVR は <a href=\"https://aws.amazon.com/jp/connect/\">Amazon Connect</a> と <a href=\"https://aws.amazon.com/jp/lex/\">Amazon Lex</a> で構築が可能です。<br> Amazon Connect は AWS が提供するクラウドベースのコンタクトセンターサービスで、Web コンソールの UI 上でブロックをつなげることで、コンタクトフローを簡単に構築することができます。そのブロックの中の一つに、Amazon Lex を呼び出すブロックがあります。Amazon Lex は 会話型インターフェースを構築する、いわゆるチャットボットのサービスです。Amazon Lex を Amazon Connect と統合することで、電話口での対話を実現することができます。Amazon Lex では注文を処理するためのインテントを構築し、Amazon Connect のフローの中で呼び出すように構築が可能です。「買い物したい」という発話によって、構築した注文処理のインテントが発動し、最後の注文確認までの会話フローを構築することができます。<br> また、Amazon Lex から AWS Lambda を呼び出すことも可能なため、Amazon Lex のインテントの中で注文確認ができれば AWS Lambda を呼び出し、注文情報をデータベースなどに保管するような構築イメージになります。</p> \n<p>なお、SMS メッセージの送信についても AWS で実現することができ、例えば、Amazon SNS のサービスに SMS メッセージを送信する機能があります。Amazon Connect では発信者の電話番号を取得することができ、さらにコンタクトフローの中で AWS Lambda に電話番号情報を渡して実行することも可能です。そのため、Lambda 関数にて Amazon SNS から SMS 送信を行うよう実装することで、Amazon Connect から連携された電話番号をもとに発信者であるお客様に SMS メッセージを送信することを実現できます。</p> \n<p>上記のように、多様な機能を提供する AWS のサービスを組み合わせることで、IVR による電話注文から SMS の送信まで、すべてを AWS でシンプルに実現できると考えています。電話注文でのインタラクションから SMS 送信までのアーキテクチャ例を以下に掲載いたしますので、ご参考にいただけますと幸いです。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image002.png\"><img loading=\"lazy\" class=\"alignnone wp-image-164470 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image002-1024x682.png\" alt=\"\" width=\"1024\" height=\"682\"></a></p> \n<p>本記事冒頭でも言及した通り AWS は従量課金モデルであるため、スモールスタートで「まず試してみる」といったことが可能です。新しい機能の導入・拡張に AWS は非常に親和性が高いです。</p> \n<h2>Amazon Pay による Web 決済</h2> \n<p>続いて、Web での決済操作の導線イメージをご紹介します。<br> ここでまずは簡単に Amazon Pay の紹介をいたします。</p> \n<h3>Amazon Pay とは</h3> \n<p><a href=\"https://pay.amazon.co.jp/\">Amazon Pay</a> は Amazon のお客様向けに提供されている ID 決済サービスで、<a href=\"https://pay.amazon.co.jp/merchant-stories\">Amazon Pay を導入されている事業者様</a>の EC サイトにてご利用いただけます。<br> Amazon Pay のご利用に新たな専用アカウント・アプリの登録は必要ありません。<br> Amazon アカウントをお持ちのお客様、つまり <a href=\"https://www.amazon.co.jp/\">amazon.co.jp</a> を普段からご利用いただいているお客様であれば、その Amazon アカウントに登録されているお支払い方法・お届け先住所を利用することができるため、購入したい EC サイトにて新たにクレジットカードや住所情報登録の手間が軽減され、スピーディーかつ安心してお買い物を楽しむことができます。また、Amazon Pay ではクレジットカードだけでなく、Amazon ギフトカードやあと払い（ペイディ）、メルペイ、パートナーポイントによるお支払いも可能です。<br> Amazon Pay に関する詳しい情報、および導入を検討される事業者様は、<a href=\"https://pay.amazon.co.jp/\">Amazon Pay の公式ページ</a>、または<a href=\"https://pay.amazon.co.jp/resources/dekiru-amazonpay\">こちらのページ</a>から無料でダウンロードできる資料にてご説明しておりますので、ご参照ください。</p> \n<h3>Amazon Pay での決済イメージ</h3> \n<p>Amazon Pay の概要を掴めたところで、決済操作の導線イメージをご紹介します。「電話注文時のユーザー体験」の章にて記載した手順 3 に相当する箇所のご紹介となります。<br> 簡易な例ではございますが、以下に購入フローのイメージを掲載します。上部の水色のエリアが事業者様の EC サイト、下部のオレンジのエリアが Amazon 側のページ (Amazon Hosted Page) を表しています。<br> Amazon Pay ではこのように、EC サイトと Amazon Hosted Page を行き来することで決済を進めることが基本となります。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image003.jpg\"><img loading=\"lazy\" class=\"size-large wp-image-164484 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image003-1024x636.jpg\" alt=\"\" width=\"1024\" height=\"636\"></a></p> \n<p>流れとしては、ユーザーに SMS が到達し、そこに記載された URL をクリックすることで、電話口での注文情報が反映されたカートページに遷移します。今回 SMS での送信としているのは、Amazon Connect で発信者の電話番号が取得できるためであり、他の手段で URL を送付する方法も考えられます。URL をクリックし Web ページに表示された Amazon Pay ボタンをクリックすることで、Amazon Hosted Page に遷移します。ユーザーはお持ちの Amazon アカウントでログインし、そのアカウントに登録されているお支払方法およびお届け先住所を選択、あとは EC サイト側で注文確定ボタンを押すことで Amazon Pay の決済を完了することができます。<br> このように、Amazon アカウントを持ったユーザーであれば、電話注文から購入完了までの一連の流れを、途中での入力の手間などなくスムーズに完結できるよう実装することが可能です。<br> Amazon Pay を事業者様サイトに組み込む方法については、<a href=\"https://developer.amazon.com/ja/docs/amazon-pay-checkout/introduction.html\">Amazon Pay インテグレーションガイド</a>にて記載がございますので、適宜ご参照ください。<br> （EC サイトへの Amazon Pay 導入には<a href=\"https://pay.amazon.co.jp/signup\">お申し込み</a>が必要です。）</p> \n<h2>IVR × Amazon Pay 導入のメリット</h2> \n<p>IVR による電話注文から、Amazon Pay での Web 決済に引き込むことで以下の観点でメリットがあると考えています。</p> \n<ul> \n <li><strong>待ち時間の軽減</strong><br> IVR での自動応答がない場合、電話注文が殺到すると、オペレータに接続されるのを待つ時間が長くなってしまい、お客様の体験は低下します。 IVR による自動応答で一部の通話に対応することができれば、待ち呼数が減ることになり、有人対応を必要とするお客様もオペレータに繋がりやすくなります。</li> \n <li><strong>購入離脱の削減と在庫確保の安心感</strong><br> オペレータと繋がらないことで今まで購入から離脱していたお客様を救うことができます。また、IVR によって商品の在庫状況をすぐに確認できるようになるため、例えば、期間限定商品の注文に対して、電話注文でまずは在庫を確保することでお客様の安心感や満足度を向上させることもできると考えられます。</li> \n <li><strong>有人対応が必要なお客様への手厚いサポート</strong><br> IVR による電話注文の導入により、その利用者だけでなく、一方でそれを利用しないお客様に対してもメリットがあると考えられます。例えば、高齢者やまだ Web 操作に不安がある方からの問い合わせや、注文トラブルなどの緊急の問い合わせに対して、オペレータをさらに動員させることできます。つまり、オペレータの対応が真に必要なお客様に対するサポートにより時間を充てられることにつながるため、コールセンターとしての質やお客様満足度の向上につながると考えられます。</li> \n <li><strong>電話口でのクレジットカード番号情報の伝達が不要、後払いによる支払い不安からの解消</strong><br> Amazon Pay による Web での決済導線に誘導することで、電話口でクレジットカード番号を伝える必要がなくなります。加えて、商品と併せて配送する請求書でお客様からの入金を待つという決済モデルから解放され、支払い不安が解消されます。お客様および EC サイトを持つ事業者様双方においてメリットが出てくるポイントです。</li> \n</ul> \n<h2>利用シーン</h2> \n<p>利用シーンとしては、以下の場面が例として考えられます。</p> \n<ul> \n <li><strong>テレビ/ラジオ ショッピング</strong></li> \n <li><strong>カタログ通販</strong></li> \n <li><strong>チケット予約</strong></li> \n <li><strong>ホテル予約</strong></li> \n <li><strong>飲食店予約時の事前決済</strong></li> \n</ul> \n<p>上記のユースケースや本記事にて紹介したフローはあくまで例ではございますので、他にも適用できる場面や取り入れられるフローなどがあるかと思います。イメージを膨らましていただくための一助となれば幸いです。</p> \n<h2>Outbound Call による Amazon Pay 決済</h2> \n<p>本記事でご紹介した構想は、テレビやカタログで見た電話番号に対してお客様から電話をかけるといったシーンを想定しておりました。一方、Amazon Connect では Outbound Call の機能があり、Amazon Connect からお客様に対して電話を発信することができます。<br> また、Amazon Pay では Payment Method On File (PMOF) という機能があります。<br> PMOF という機能は、購入者が商品を初回購入するタイミング、あるいはマイページなどから事前に支払い方法を登録することで、以降の購入時は事業者の任意のタイミングでその購入者が登録した支払い方法に対して課金することができる機能です。<br> 支払い方法の事前設定を必要とする事業者や、購入者の操作なしに取引を処理する必要がある事業者に有用な機能です。<br> IVR を使った Amazon Connect からの Outbound Call と Amazon Pay の PMOF の機能を統合することで、お客様の再購入をサポートする体験を実現することも可能です。<br> （現時点におきまして、PMOF は Amazon Pay の担当者より個別でご案内をした事業者様のみご利用いただける限定機能となっております。導入のご検討・PMOF の技術資料をお求めの場合は Amazon Pay への<a href=\"https://pay.amazon.co.jp/signup\">お申し込み</a>後、担当者へご相談ください。）</p> \n<p>流れとしては、初回の購入時あるいは事前に PMOF によって支払い方法を登録します。<br> 初回の購入時から例えば 2 週間経過したタイミングで、その購入者に対して Amazon Connect から Outbound Call をかけます。<br> Outbound Call の中でお客様が購入の意思を示すことで、事前に PMOF にて登録した決済方法に対して請求をかけることができます。<br> これにより、再購入の際に Web 決済導線を再度操作することなく完結することができ、簡単でスムーズな購入体験を実現できます。<br> PMOF による支払い方法の登録を行った以降における Outbound Call での IVR 対話イメージ例を参考までに掲載いたします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image004-1.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-164485\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image004-1-1024x440.png\" alt=\"\" width=\"1024\" height=\"440\"></a></p> \n<p>上記のイメージ例では、お客様は最短 1 クリックのキーパッド操作で購入まで完了できるため、非常に手軽でスムーズな購入体験になります。<br> 認証コードによる本人確認や、注文から 60 分間は注文を取り消せるようにするといったオペレーションを組み込むことで、さらなる安心感を付加することもアイデアとしてあるかと思います。</p> \n<p>なお、関連する記事といたしまして、取引内容の確認・承認を Amazon Connect の Outbound Call で自動化する技術ブログ <a href=\"https://aws.amazon.com/jp/blogs/contact-center/automate-transaction-confirmation-using-outbound-calls-with-amazon-connect/\">Automate transaction confirmation using outbound calls with Amazon Connect</a> もございますので、よろしければ参考にしてみてください。</p> \n<p>最後に、Outbound Call に関して <a href=\"https://aws.amazon.com/jp/connect/outbound/\">Amazon Connect Outbound Campaign</a> という機能もございます。この機能はアウトリーチすべきお客様のセグメントを作成し、適切なタイミング、適切なチャネル（音声通話、SMS、Email等）でプロアクティブなアプローチを実現することができます。ここに IVR を活用することもでき、オペレータが不要な大規模なアウトリーチも可能です。ぜひご検討材料の一つとしていただけますと幸いです。</p> \n<h2>まとめ</h2> \n<p>本記事では、AWS で実現する IVR と Amazon Pay を統合することによって、電話注文から決済までを実現する構想についてご紹介しました。IVR を構成する AWS のサービスについても触れ、AWS を活用することでシンプルかつスモールスタートで始められる点、加えて柔軟に機能拡張していくことができる点も AWS 活用の大きな強みです。すでにコンタクトセンターを導入されている事業者様におきましても、IVR による電話注文のチャネルだけを切り出す形で AWS にて実現することも考えられます。また、Amazon Connect で実現するコンタクトセンターの柔軟性は <a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a> や <a href=\"https://aws.amazon.com/jp/connect/q/\">Amazon Q in Connect</a> と組み合わせることで、生成 AI の技術要素を盛り込みさらに広げていくこともできると考えています。<br> 本記事でご紹介した対話フローや AWS 構成図は一例ではございますので、事業者様の取り扱う商材や社内要件、ターゲットとするお客様、必要となる機能によっても変わってくる部分があるかと思いますが、電話注文のチャネルを拡張するためのアイデアの一助となりましたら幸いでございます。</p> \n<h2>著者</h2> \n<p><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/03/niwaya.jpg\"><img loading=\"lazy\" class=\"alignleft size-thumbnail wp-image-164514\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/03/niwaya-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\"></a>庭屋 郁基</strong><br> アマゾンジャパン合同会社<br> Amazon Payments Japan 事業部<br> Solutions Architect</p>"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.38",
    "date": "2025-09-30T23:40:39.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.38",
    "content": "### Core Changes\n\n- Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\": #84389\n\n### Misc Changes\n\n- Turbopack: trace module.createRequire: #84335\n\n### Credits \n\nHuge thanks to @mischnic and @lukesandberg for helping!\n"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.37",
    "date": "2025-09-30T21:02:24.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.37",
    "content": "### Core Changes\n\n- Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\": #84351\n- [Breaking] Remove AMP codemod: #84356\n- [Breaking] Remove deprecated built-in AMP: #84312\n- auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents: #84250\n- [mcp] get server action tool: #84382\n\n### Example Changes\n\n- examples: Remove AMP example: #84355\n\n### Misc Changes\n\n- docs: Remove AMP docs: #84357\n- docs: Type helpers don't need to be imported: #84265\n- Turbopack: Add docs for debugIds option: #84375\n- Remove references to size metrics in next build from our docs: #83823\n- Bump to swc v42: #83477\n- Turbopack: skip invalidating a task on cell/output change when the dependency is outdated: #84376\n\n### Credits \n\nHuge thanks to @devjiwonchoi, @icyJoseph, @timneutkens, @lukesandberg, @mischnic, @ztanner, @sokra, and @huozhi for helping!\n"
  },
  {
    "title": "Sora 2 発表関連情報まとめ",
    "date": "2025-09-30T18:37:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/schroneko/articles/openai-sora-2",
    "content": "!\nこの記事は人力で書きました。\n\n\n tl;dr\n\nOpenAI が Sora 2 を発表したよ\nSora を使ってご友人と遊べる iOS アプリが公開されたよ\nSora 2 を使うには ChatGPT Pro プランの契約が必須だよ\nただし、今はまだアメリカとカナダでしか使えないよ\n招待コードがあれば使えるよ\n\n!\n私の X のサブスクで招待コードを共有していますので、もしよろしければご覧ください。\nhttps://x.com/schroneko/creator-subscriptions/subscribe\n\n\nOpenAI から動画生成サービスの Sora 2 が発表されました。..."
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.36",
    "date": "2025-09-30T13:34:19.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.36",
    "content": "### Core Changes\n\n- [cna] Add `reactCompiler` option: #82251\n- Turbopack: remove canary version check for turbopackPersistentCachingForDev: #84277\n- [turbopack] Add support for debug_ids: #84319\n\n### Misc Changes\n\n- Turbopack: only replace edge dynamic calls in dev: #84354\n- [turbopack] Remove a bunch of dead code from the source map implementation: #84318\n- Turbopack: prevent duplicate NFT modules: #84369\n\n### Credits \n\nHuge thanks to @mischnic, @lukesandberg, @poteto, and @sokra for helping!\n"
  },
  {
    "title": "成田空港におけるドーリー動態管理システム「DOLYS」をAWSに構築",
    "date": "2025-09-30T12:48:20.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/jal-dolys/",
    "content": "<h2>はじめに</h2> \n<p>本稿は、日本航空株式会社デジタルEX企画部 空港オペレーショングループの橋本様よりご寄稿いただいた、成田空港でのドーリー運用効率化を目的とした動態管理システム導入プロジェクトの取り組みをご紹介します。</p> \n<h2>開発の経緯</h2> \n<p>空港内では、航空機に搭載する貨物や手荷物の入ったコンテナを運ぶために、『ドーリー』と呼ばれる台車を利用しています。<br> ドーリーは動力を持っておらず、牽引車で複数台連結して使用されます。航空機からコンテナを降ろすときも、航空機にコンテナを搭載するときも、必ずコンテナと同じ台数のドーリーが必要となります。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys1.png\" alt=\"航空機からコンテナを降ろし、ドーリーに載せ替える\"><br> 航空機からコンテナを降ろし、ドーリーに載せ替える</p> \n<table> \n <tbody> \n  <tr> \n   <td><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys2.png\" alt=\"使用中のドーリー（コンテナあり）\" width=\"265\"></td> \n   <td><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys3.png\" alt=\"コンテナ搭載前のドーリー\" width=\"265\"></td> \n   <td><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys4.png\" alt=\"ドーリーに設置されたIoT機器\" width=\"265\"></td> \n  </tr> \n  <tr> \n   <td>使用中のドーリー（コンテナあり）</td> \n   <td>コンテナ搭載前のドーリー</td> \n   <td>ドーリーに設置されたIoT機器</td> \n  </tr> \n </tbody> \n</table> \n<p>しかし、成田空港では以下のような課題に直面していました。</p> \n<ul> \n <li>ドーリーの利用は、複数のグループ会社にまたがるため、各社で連絡を取り合いながら、利用するドーリーをそれぞれ確保している。</li> \n <li>未使用のドーリーが空港内のどこに何台あるのか把握する手段が無く、利用の度に各社の現場作業者が捜索をしている。</li> \n <li>ドーリーの稼働状況が分からず適正数が配備されているか不明。</li> \n</ul> \n<p>成田空港内には多くのドーリー置き場や貨物上屋が点在しており、場合によっては移動に30分以上を要することもあります。そのため、ドーリーを見つけるだけでも多大な時間と労力がかかり、業務の効率性を損なう原因となっていました。</p> \n<p>これらの課題を解決すべく、IoTデバイスとクラウド技術を活用した「DOLYSプロジェクト」を立ち上げました。</p> \n<h2>DOLYS導入の目指すもの</h2> \n<p>本プロジェクトの核となるのは、成田空港内の約3,040台のドーリーに装着したIoTデバイスを活用することで位置情報をリアルタイムに管理し、これを可視化するシステムです。このシステムにより以下の具体的な改善目標を掲げました。</p> \n<p>1.ドーリー捜索時間の削減<br> IoTデバイスでリアルタイムに位置を管理することで、ドーリーを探す時間を削減し、業務効率を向上。</p> \n<p>2.ドーリー稼働率の向上による台数削減<br> 効率的な運用管理により、必要な台数を最適化し、ドーリーおよびカートの台数の削減。</p> \n<h2>プロジェクト体制とアプローチ</h2> \n<p>本プロジェクトでは、成田空港におけるドーリーの運用を効率化するシステムを低コスト・短期間で構築することを目指し、アジャイル開発を採用しました。この手法により、現場の課題や要望を迅速にシステムに反映しながら、稼働までのリードタイムを最小化しました。</p> \n<p>特徴的なポイントとして、本プロジェクトでは、JALのグループ企業である<a href=\"http://www.jgsgroup.co.jp\" target=\"brank\" rel=\"noopener\">JALグランドサービス</a>、<a href=\"https://www.jalcargoservice.com\" target=\"brank\" rel=\"noopener\">JALカーゴサービス</a>、<a href=\"https://www.jalsky.co.jp\" target=\"brank\" rel=\"noopener\">JALスカイ</a>といった複数のグループ会社の現場からの意見を広く取り入れ、現場と開発チームとの連携を密接に構築。現場スタッフを主要ステークホルダーに位置付け、ユーザー目線のシステムを実現しました。</p> \n<p>また、プロジェクトは「必要機能のみに絞る」という方針を掲げ、シンプルかつ実用性重視のシステム設計を行ったことが特徴です。<br> <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys5.png\" alt=\"システムのアーキテクチャ\" width=\"265\" height=\"265\"></p> \n<h2>システムのアーキテクチャ</h2> \n<p>AWSを基盤にしたサーバーレスアーキテクチャを採用しています。<br> システムの規模やデータ量に応じたリソースの自動スケールが可能となり、運用コストを最小化しました。また、サーバーレスの特性を活かし、迅速な開発と変更対応も可能になっています。<br> また、本システムはJALグループの統合クラウドプラットフォームである<a href=\"https://aws.amazon.com/jp/solutions/case-studies/jal-nec/\" target=\"brank\" rel=\"noopener\">CIEL/S</a>上に構築することで、AWSの柔軟性を活用しつつ、同グループに求められるITガバナンス要件と高いセキュリティ基準を満たしました。</p> \n<p>IoT技術とAWSのクラウドサービスを組み合わせることで、IoTデバイスからのリアルタイム位置情報を効率的に収集し、ドーリーの位置情報可視化および運用の最適化を実現しました。</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys6.png\" alt=\"DOLYS画面（成田空港の概略図にリアルタイムでドーリー台数を表示）\" width=\"265\" height=\"265\"><br> ※DOLYS画面（成田空港の概略図にリアルタイムでドーリー台数を表示）</p> \n<p>また、現場作業者はiPadなどのタブレット端末を活用し、直感的にドーリーの場所を検索・確認できます。ダッシュボードでは「エリア・スポットごとのドーリー配置台数」や「各会社の必要数」をリアルタイム表示し、機材の種類やコンテナ搭載の有無など細かい条件による検索機能も備えているため、現場の即時対応力と業務効率を大幅に向上させています。</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/12/jal-dolys7.png\" alt=\"アーキテクチャ概略図\" width=\"265\" height=\"265\"><br> ※アーキテクチャ概略図</p> \n<h2>想定効果と今後の展望</h2> \n<p>本システムの導入により、以下の効果が見込まれます。</p> \n<p>1.稼働率の向上に伴い、新規購入台数および点検費用の削減が可能となります。具体的には、年間で56台（約7％減）の更新台数削減により、約7,170万円のコスト削減が期待されます。</p> \n<p>2.所在の見える化により、捜索時間と燃料消費の削減が実現します。年間で約14,157時間の捜索時間が削減され、燃料も約66,361リットル（約760万円相当）が節約されます。<br> 加えてCO2排出量は年間約171トン削減され、環境負荷の軽減にも寄与します。<br> ※CO2算出方法：66,361[ℓ]×0.00258[t-CO2/ℓ]=171[t]</p> \n<p>現在は成田空港で運用が進んでいますが、同様の仕組みを羽田空港にも展開する計画が進行中です。これにより、複数の主要空港でのドーリー運用効率が向上し、さらに標準化された管理体制が構築される見込みです。</p> \n<p>現行のDOLYSは主に「ドーリーの現在位置」と「利用可否ステータス（積載検知）」を確認する機能で活用されていますが、将来的には以下のようなデータ分析機能の追加が構想されています。</p> \n<p>稼働率の分析：ドーリーの使用頻度や運用状況を可視化。過剰な配備や不足を是正。<br> リソースマネジメント：人だけでなく、設備などのリソースを最適化し、全体の運用効率を最大化。<br> これらのデータ分析機能により、コスト削減と業務改善をさらに推進します。</p> \n<h2>まとめ</h2> \n<p>本稿でご紹介した「DOLYSプロジェクト」は、成田空港におけるドーリー管理の課題を起点に、IoTとクラウド技術を融合させた革新的なソリューションを実現しました。AWSを活用したサーバーレスアーキテクチャにより、低コストかつ迅速なシステム構築を可能とし、現場のニーズに対応したシンプルで使いやすい管理環境を提供しています。</p> \n<p>導入効果として、稼働率向上による更新台数の削減や捜索時間・燃料消費の大幅な削減が想定されており、コストメリットだけでなく環境負荷の低減にも寄与しています。今後は、羽田空港への展開をはじめ、データ分析機能の充実によるさらなるリソース最適化を目指し、運用効率化に貢献してまいります。</p> \n<p>本プロジェクトは、現場を中心に据えたアジャイル開発の好例であり、デジタル化推進における成功モデルとして、今後のさらなる業務改革の礎となることを期待しています。</p> \n<hr> \n<div class=\"blog-author-box\">\n <strong><a href=\"https://www.jal.co.jp/\">日本航空株式会社</a></strong>\n <br> \n <strong>デジタルEX企画部空港オペレーショングループ</strong>\n <br> \n <strong>橋本 隆彦</strong>\n <br> 2008年、日本航空のグランドハンドリング業務を担う株式会社JALグランドサービスに入社。\n <br> 現場業務を経験後、2018年より社内システム開発に関する業務などを担当。\n <br> 2024年より現職に従事。DOLYSや空港オペレーション系システムを担当。\n</div> \n<div class=\"blog-author-box\">\n <strong><a href=\"https://www.jal.co.jp/\">日本航空株式会社</a></strong>\n <br> \n <strong>グランドハンドリング企画部BPR推進グループ</strong>\n <br> \n <strong>村上 忠</strong>\n <br> 1993年、日本航空のグランドハンドリング業務を担う株式会社JALグランドサービスに入社。\n <br> 現場業務・間接業務（安全品質・生産計画担当）を経験後、2022年より現職に従事。\n <br> DOLYSを含む空港ハンドリングの生産性向上施策を担当。\n</div> \n<div class=\"blog-author-box\">\n <strong><a href=\"https://www.jaldx.co.jp/\">JALデジタル株式会社</a></strong>\n <br> \n <strong>デジタル開発部第1グループ</strong>\n <br> \n <strong>篠原 奈都未</strong>\n <br> 2018年、日本航空のITを担う株式会社JALインフォテック（現：JALデジタル株式会社）に入社。\n <br> 業務システムの基盤維持管理を担当。\n <br> 2021年より現職に従事。\n <br> クラウドネイティブ技術を活用したアプリ開発やアジャイル開発推進を担当。\n</div>"
  },
  {
    "title": "全プロセスが一秒止まる不具合、原因はLinuxカーネルにあり？",
    "date": "2025-09-30T08:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/turing_motors/articles/a460fe08b54253",
    "content": "\n はじめに\n完全自動運転の実現を目指すスタートアップ「チューリング」でエンジニアをしています、坂本です。私が所属しているDrivingSystemチームでは、組み込みLinuxをベースに、自動運転システムと、自動運転モデル学習用データ収集システムを開発しています。\n組み込みLinuxの開発を行っていると、カーネルの挙動、周辺デバイスとの組み合わせ等によって、思いがけない不具合に遭遇することが少なくありません。この記事では、実際にシステム開発中に遭遇した再現が難しく、原因の切り分けに時間を要した不具合について紹介していきます。同じように組込みLinuxや自動運転ソフトウェアの開発に携わっ..."
  },
  {
    "title": "ベルリンで開催された Fluttercon 2025 EU に参加してきました",
    "date": "2025-09-30T07:06:37.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/chooyan/articles/94052f1b10c045",
    "content": "年に 1 回ベルリンで開催される世界最大規模の Flutter カンファレンスの Fluttercon 2025 EU にスピーカーとして参加してきました。\nhttps://www.fluttercon.dev/speakers/tsuyoshi-chujo\nFluttercon EU は参加者数約 1,000 人、セッション数 75、5 部屋同時進行（オープンなスペースでのプログラムも含めたら最大 6 コマ同時進行）、3 日間開催、しかも毎日飲み会がある、というデカさの毎年行われているイベントです。これに加え、参加者数がさらに多い Droidcon も同時開催しています。\n飲み会などで..."
  },
  {
    "title": "AI Readyなナレッジマネジメント〜議事録の利活用を例に〜",
    "date": "2025-09-30T06:57:16.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ubie_dev/articles/8e8c107419601b",
    "content": "\n はじめに\nUbieでデータエンジニアをやっている @yosh_yumyum です。\n普段はBigQueryやdbtを使ったデータ分析基盤の構築・運用が業務の中心ですが、今回はデータといっても社内WikiやNotionにあるようなドキュメント（非構造データ）のデータ整備と利活用を目指した取り組みを紹介します。\n本記事を通じて、以下の様な知見を得られるかと思います。\n\n議事録やSlackでの会話など、社内に点在する多様なデータを組織的に整備するためのアプローチ\nワークフロー構築および自動化ツールの利活用による非構造化データの利活用手法\n生成AIやchat botを組み合わせたナレッジ活用..."
  },
  {
    "title": "Amazon QuickSight BIOps – パート3 : API を使用したアセットのデプロイ",
    "date": "2025-09-30T06:45:53.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-3-assets-deployment-using-apis/",
    "content": "<p>本記事は、2025 年 8 月 6 日に公開された <a href=\"https://aws.amazon.com/jp/blogs/business-intelligence/amazon-quicksight-biops-part-3-assets-deployment-using-apis/\">Amazon QuickSight BIOps – Part 3: Assets deployment using APIs</a> を翻訳したものです。翻訳は Solutions Architect の守田 凜々佳が担当しました。</p> \n<p>ビジネスインテリジェンス (BI) エコシステムがチーム、アカウント、環境全体に拡大するにつれて、一貫性、信頼性、ガバナンスの維持が大きな課題となります。特にマルチアカウント環境では、ダッシュボードとデータセットを手動でデプロイすることで、バージョンの不一致、依存関係の破綻、運用リスクの増大につながることがあります。</p> \n<p>このシリーズの投稿では、<a href=\"https://aws.amazon.com/quicksight\" rel=\"noopener noreferrer\" target=\"_blank\">Amazon QuickSight</a> におけるビジネスインテリジェンス運用 (BIOps) に焦点を当てています。<br> <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-1-a-no-code-guide-to-version-control-and-collaboration/\" rel=\"noopener noreferrer\" target=\"_blank\">パート 1</a> では、バージョン管理とコラボレーションのノーコードガイドを提供しました。<br> <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/\" rel=\"noopener noreferrer\" target=\"_blank\">パート 2</a> では、QuickSight API を使用した自動バージョン管理とロールバック、そして BI アセットの継続的インテグレーション/継続的デリバリー (CI/CD) パイプラインについて説明しました。本記事では、QuickSight における API を活用した BIOps 戦略に焦点を当て、特に以下のトピックについて説明します：</p> \n<ul> \n <li>API を使用したクロスアカウントおよび複数環境へのアセットの展開</li> \n <li>データセットのバージョン更新時における競合の検出と解決</li> \n <li>開発、QA、本番環境間での権限と設定の管理</li> \n</ul> \n<p><code>Assets-as-Bundle</code> API、<code>Describe-Definition</code> API、自動化スクリプトなどのツールを使用して、手作業を最小限に抑え、下流での障害を防ぎながら、アセットをプログラムによって自動的にデプロイする方法を説明します。</p> \n<h2>ソリューションの概要</h2> \n<p>このシリーズの<a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/\" rel=\"noopener\" target=\"_blank\">パート 2</a> では、QuickSight API を使用したバージョン管理、ロールバック、CI/CD ワークフローについて説明しました。本記事では、その内容を踏まえて、デプロイメントをスケールし、異なる環境間での一貫性を確保するための実践的なテクニックを紹介します。<br> 以下のセクションでは、QuickSight における API ベースの BIOps ソリューションの概要を説明し、チームがプログラムコードを用いて BI アセットのデプロイメントとガバナンスを自動化する方法を紹介します。 QuickSight において複数の AWS アカウント・リージョン間での BI アセットのデプロイ方法について解説し、API を使用してダッシュボード、データセット、および依存関係を一貫性をもって、安全でスケーラブルな形で展開する方法を説明します。</p> \n<h2>前提条件</h2> \n<p>このチュートリアルを実施するには、以下の前提条件が必要です。</p> \n<ul> \n <li><a href=\"https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fportal.aws.amazon.com%2Fbilling%2Fsignup%2Fresume&amp;client_id=signup\" rel=\"noopener noreferrer\" target=\"_blank\">AWS アカウント</a></li> \n <li>以下の AWS サービスへのアクセス: \n  <ul> \n   <li><a href=\"http://aws.amazon.com/cloudformation\" rel=\"noopener noreferrer\" target=\"_blank\">AWS CloudFormation</a></li> \n   <li><a href=\"https://aws.amazon.com/quicksight/\" rel=\"noopener noreferrer\" target=\"_blank\">Amazon QuickSight</a></li> \n   <li><a href=\"https://aws.amazon.com/s3/\" rel=\"noopener noreferrer\" target=\"_blank\">Amazon Simple Storage Service</a> (Amazon S3)</li> \n   <li><a href=\"https://aws.amazon.com/iam/\" rel=\"noopener noreferrer\" target=\"_blank\">AWS Identity and Access Management</a> (IAM)、QuickSight の <code>Template</code>、<code>Assets-as-Bundle</code>、<code>Create</code>、<code>Update</code>、<code>Delete</code>、<code>Describe</code> API にアクセスする権限を持っていること</li> \n  </ul> </li> \n <li>Python の基本的な知識 (Python 3.9 以降を使用)</li> \n <li>SQL の基本的な知識</li> \n <li>最新バージョンの <a href=\"http://aws.amazon.com/cli\" rel=\"noopener noreferrer\" target=\"_blank\">AWS Command Line Interface</a> (AWS CLI) がインストールされている</li> \n <li><a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/quicksight.html\" rel=\"noopener noreferrer\" target=\"_blank\">Boto3</a> がインストールされている</li> \n</ul> \n<p>また、続きを読む前に、このシリーズの <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-1-a-no-code-guide-to-version-control-and-collaboration/\" rel=\"noopener noreferrer\" target=\"_blank\">パート 1 </a> と <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/\" rel=\"noopener noreferrer\" target=\"_blank\">パート 2 </a> を確認することをお勧めします。</p> \n<h2>アセットデプロイメントのためのテンプレート API</h2> \n<p>「<a href=\"https://aws.amazon.com/blogs/big-data/biops-amazon-quicksight-object-migration-and-version-control/\" rel=\"noopener noreferrer\" target=\"_blank\">BIOps: Amazon QuickSight object migration and version control</a>」では、テンプレートベースのアプローチを使用して QuickSight アセットをデプロイする方法について説明しています。執筆時点ではテンプレートは環境間でダッシュボードを移行およびバックアップするための主な手段でした。</p> \n<p>開発環境と本番環境の 2 つの QuickSight アカウントがあるとします。両方のアカウントは、有効なデータソースに接続するように設定されています。<br> 以下の図は、このアーキテクチャを示しています。</p> \n<p><img loading=\"lazy\" alt=\"\" class=\"alignnone size-full wp-image-5242\" height=\"625\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-3image-1.jpeg\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" width=\"1288\"></p> \n<p>実装の詳細に興味がある場合は、<a href=\"https://aws.amazon.com/blogs/big-data/biops-amazon-quicksight-object-migration-and-version-control/\" rel=\"noopener noreferrer\" target=\"_blank\">元の記事</a>を参照してください。ただし、現在ではアセットのデプロイメントにテンプレート方式を使用することはおすすめしていません。<code>Assets-as-Bundle</code> や <code>Describe-Definition</code> などの新しい API が導入されたことで、BI チームは QuickSight アセットの管理において、より柔軟で透明性が高く、バージョン管理に適したオプションを利用できるようになりました。</p> \n<h2>アセットの一括デプロイのための Assets-as-Bundle API</h2> \n<p><a href=\"https://aws.amazon.com/blogs/business-intelligence/automate-and-accelerate-your-amazon-quicksight-asset-deployments-using-the-new-apis/\" rel=\"noopener noreferrer\" target=\"_blank\">Automate and accelerate your Amazon QuickSight asset deployments using the new APIs</a> では、<code>Assets-as-Bundle</code> API を使用して、AWS アカウントやリージョン間で QuickSight アセットをデプロイする方法について説明しています。これらの API は、ダッシュボード、分析、データセットなど、依存関係のあるアセットのデプロイのために設計されています。</p> \n<p>次の図は、このアプローチに基づくサンプルワークフローを示しています。</p> \n<p><img alt=\"\" class=\"alignnone size-full wp-image-5243\" height=\"603\" loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-3image-2.jpg\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" width=\"918\"></p> \n<p><code>ExportAssetsBundle</code> API は、QuickSight JSON または CloudFormation テンプレートの 2 つのエクスポート形式オプションを提供します。 QuickSight JSON オプションを使用すると、アセットは各アセットタイプ（分析、ダッシュボード、データセット、データソースなど）に対応した JSON ファイルを含む ZIP ファイルとしてエクスポートされます。<br> この ZIP パッケージはアセット間の関係を保持し、個々の JSON ファイルの確認や修正がしやすいため、デプロイメントの自動化に適していますが、きめ細かなバージョン管理には適していません。</p> \n<p>コンテンツは、次のスクリーンショットに示すような階層構造で整理されています。</p> \n<p><img alt=\"\" class=\"alignnone size-full wp-image-5252\" height=\"374\" loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/08/01/BI-5149-part-3-image-3.png\" width=\"382\"></p> \n<p>この<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Notebooks_for_Assets_Deployment/Assets_as_Bundle_Option/BIOPS_QS_JSON_Option_Use_Case_1.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">サンプル Jupyter ノートブック</a>では、QuickSight JSON 形式で、ソースアカウントからターゲットアカウントに QuickSight アセットをデプロイするための <code>ExportAssetsBundle</code> および <code>ImportAssetsBundle</code> API の使用方法を示すワークフローを提供しています。このサンプルは基本的なユースケースとなり、ソース管理の統合、バージョンタグ付け、環境固有の設定などの自動化ステップを組み込んだ包括的なデプロイメントパイプラインに拡張することができます。</p> \n<h3>アセットデプロイメントにおけるアクセス許可の管理</h3> \n<p>デフォルトでは、エクスポートされた QuickSight アセットは、エクスポート操作時に <code>include-permissions</code> オプションが明示的に有効化されていない限り、ユーザーレベルまたはグループレベルの権限は保持されません。<br> 権限が含まれている場合でも、ソース環境とターゲット環境の両方でユーザー名またはグループ名が一致していない限り、アカウント間で正しくマッピングされない可能性があります。</p> \n<p>適切なアクセス制御のために、インポートジョブの完了後に適切な <code>UpdatePermissions</code> API を使用して、アセットのアクセス権限を手動で更新することがベストプラクティスです。<br> これにより、ターゲット環境の正しいユーザーまたはグループが、インポートされたダッシュボード、分析、データセット、その他のアセットにアクセスできるようになります。</p> \n<p>もう 1 つの選択肢は、<code>StartAssetBundleImportJob</code> API の <code>OverridePermissions</code> パラメータを使用して、インポート時にアクセス許可を割り当てることです。インポートされたアセットへのアクセス権を付与する必要があるターゲットアカウントのユーザーまたはグループを指定できます。<br> ただし、このオプションは慎重に使用する必要があります。インポートジョブが完了すると、指定されたユーザーまたはグループは直ちにアセットにアクセスできるようになります。意図しないユーザーに機密性の高いダッシュボードやデータセットが公開されることを防ぐため、アクセス許可が正しく設定されていることを確認することが重要です。</p> \n<h3>環境固有の設定を使用したアセットデプロイメントの管理</h3> \n<p><code>StartAssetBundleImportJob</code> API には <code>OverrideParameters</code> というパラメータも用意されており、BI チームはこれを使用してインポート時に環境固有の設定を上書きできます。<br> これには、Virtual Private Cloud (VPC) 接続、データソースの資格情報、その他のデプロイメント固有の属性などが含まれます。</p> \n<p><code>OverrideParameters</code> を使用することで、エクスポートされたバンドルファイルを直接変更することなく、新しいアカウントや環境にインポートされたアセットが正しいインフラストラクチャリソースに確実に接続できるようにします。<br> これは特に、ネットワークや認証設定が異なる環境間 (例えば、開発環境から本番環境) でアセットを昇格させる際に便利です。</p> \n<p>環境やアカウント間でのアセットのデプロイデプロイメントに関するより包括的なアーキテクチャについては、<a href=\"https://aws.amazon.com/solutions/guidance/multi-account-environments-on-amazon-quicksight/\" rel=\"noopener noreferrer\" target=\"_blank\">Guidance for Multi-Account Environments on Amazon QuickSight</a> を参照してください。<br> このガイダンスでは、開発、検証、本番アカウントの体系的な管理、QuickSight の名前空間とアクセス許可の管理、自動化されたアセットデプロイパイプラインの実装について、企業のシステムに求められるガバナンスおよびスケーラビリティの要件を考慮したベストプラクティスを説明しています。</p> \n<p>次の図は、このオプションのソリューションアーキテクチャを示しています。</p> \n<p><img alt=\"\" class=\"alignnone size-full wp-image-5245\" height=\"930\" loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-3image-4.jpg\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" width=\"1570\"></p> \n<p><code>Assets-as-Bundle</code> API の CloudFormation テンプレートオプションは、機能的には QuickSight JSON オプションと似ています。<br> このオプションを選択すると、エクスポート出力は、ダッシュボードまたは分析と、データセット、データソース、テーマ、フォルダなどの依存関係をカプセル化した CloudFormation テンプレートになります。このオプションは、既に AWS CloudFormation をインフラストラクチャの自動化に使用しているチームにとって特に有用です。なぜなら、一貫したツールとデプロイメントパイプラインを使用して、他の AWS リソースと共に QuickSight アセットをデプロイおよび管理できるためです。</p> \n<p>実践的な例として、<code>Assets-as-Bundle</code> API の CloudFormation テンプレートオプションを使用した一連のワークフローを示す<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Notebooks_for_Assets_Deployment/Assets_as_Bundle_Option/BIOPS_CFT_Option_Use_Case_1.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">サンプル Jupyter ノートブック</a>をご参照ください。<br> このノートブックでは、CloudFormation テンプレートを使用して、構造化された再現可能な形でアセット昇格を実現するために QuickSight のアセットをアカウント間でエクスポートおよびデプロイする方法を示しています。</p> \n<p>以下の表は、CloudFormation テンプレートを用いる方法と QuickSight JSON (<code>Assets-as-Bundle</code> API) を用いる方法を比較したものです。</p> \n<table border=\"1px\" cellpadding=\"10px\" class=\"styled-table\"> \n <tbody> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><strong>項目</strong></td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><strong>CloudFormation テンプレート</strong></td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><strong>QuickSight JSON</strong></td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">エクスポート形式</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">YAML/JSON 形式の CloudFormation テンプレート</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">ZIP アーカイブ内の構造化された JSON ファイル</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">目的</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">AWS CloudFormation ベースの Infrastructure as Code (IaC) ワークフローとの統合</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">QuickSight ネイティブ形式でのアセットの移植性と検査の簡素化</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">対象範囲</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">ダッシュボード、分析、および依存関係を含む</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">ダッシュボード、分析、および依存関係を含む</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">変更可能性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">AWS CloudFormation の構文知識が必要；より厳格</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">読み書きが容易；JSON は QuickSight の内部構造に従う</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">デプロイメント方法</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">CloudFormation スタックを使用してデプロイ</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><code>ImportAssetsBundle</code> API を使用してインポート</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">開発ツールの互換性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">AWS CloudFormation ベースの環境に最適</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">JSON ベースのワークフローまたはカスタムデプロイメントスクリプトに最適</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">可読性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">BI ユーザーにとって直感的ではない；インフラ指向</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">BI チームにとってより直感的；<code>Describe</code> API と密接に連携</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">ユースケースの適合性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">BI アセットのデプロイメントを広範な IaC テンプレートに統合するチーム向け</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">QuickSight アセットの移行やコードベースのワークフローに焦点を当てたチーム向け</td> \n  </tr> \n </tbody> \n</table> \n<p><code>Assets-as-Bundle</code> API で利用可能な QuickSight JSON と CloudFormation テンプレートのオプションについて詳しく比較するには、<a href=\"https://aws.amazon.com/blogs/business-intelligence/choosing-between-the-two-export-options-of-the-amazon-quicksight-asset-deployment-apis/\" rel=\"noopener noreferrer\" target=\"_blank\">Choosing between the two export options of the Amazon QuickSight asset deployment APIs</a> をご参照ください。<br> この記事では、それぞれのオプションの長所と短所について詳しく説明し、実際の例を示しながら、BI チームがデプロイメントワークフローと自動化のニーズに最適なフォーマットを選択できるようにサポートします。</p> \n<p><a href=\"https://aws.amazon.com/blogs/business-intelligence/automate-your-amazon-quicksight-assets-deployment-using-the-new-amazon-eventbridge-integration/\" rel=\"noopener noreferrer\" target=\"_blank\">Automate your Amazon QuickSight assets deployment using the new Amazon EventBridge integration</a> では、<code>Assets-as-Bundle</code> API を <a href=\"https://aws.amazon.com/eventbridge/\" rel=\"noopener noreferrer\" target=\"_blank\">Amazon EventBridge</a> と連携してデプロイメントワークフローを自動化する方法を説明しています。 QuickSight アセットの作成、更新、削除などのイベントに応答する EventBridge ルールを設定することで、チームは環境間でアセットのエクスポート、バージョン管理、昇格を行うワークフローを自動的にトリガーできます。この連携は、QuickSight の BI アセットに対してイベントドリブンの CI/CD パイプラインを実現する上で特に有用です。</p> \n<h2>アセットの段階的なデプロイのための Describe-Definition API</h2> \n<p>このシリーズの <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/\" rel=\"noopener noreferrer\" target=\"_blank\">パート 2</a> では、<code>Describe-Definition</code> API を使用して、単一の QuickSight アカウント内でバージョン管理を行う方法について説明しました。<br> 同じ原則をマルチアカウント構成に拡張することで、環境全体で BI アセットの体系的かつ選択的なデプロイが可能になります。</p> \n<p>個々のアセットのデプロイに <code>Describe</code> API を使用することは、多くのシナリオでベストプラクティスとされています。例えば、関連するダッシュボードを更新せずに本番アカウントのデータセットの問題を修正するための緊急デプロイを実行する場合や、依存アセットに影響を与えずにダッシュボード内のフィルター定義を更新する場合などです。このきめ細かな制御により、デプロイのリスクを軽減し、不要な上書きを回避し、大規模な BI 環境における段階的な開発ワークフローとの整合性を保つことができます。</p> \n<p>サンプルコードについては、QuickSight アセットのデプロイに関する 2 つの一連の自動化オプションを説明している <a href=\"https://aws.amazon.com/blogs/big-data/biops-amazon-quicksight-object-migration-and-version-control/\" rel=\"noopener noreferrer\" target=\"_blank\">BIOps: Amazon QuickSight object migration and version control</a> を参照してください。<br> この記事は元々テンプレートベースのアプローチに基づいていましたが、基本的な概念は今でも有用です。</p> \n<p>関連する <a href=\"https://github.com/aws-samples/amazon-quicksight-sdk-proserve/tree/master/BIOps_Deployment_Scripts/Jupyter%20Notebook\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub リポジトリ</a> で提供されているコードを再利用および応用することができます。<br> 従来のテンプレート関連の API 呼び出しを、新しい <code>DescribeDashboardDefinition</code> やその他の <code>Describe-Definition</code> API に更新することで、バージョン管理されたリソースのデプロイに関する現在のベストプラクティスに沿って、同じ自動化ワークフローを拡張できます。</p> \n<h2>API メソッドの比較</h2> \n<p>以下の表は、<code>Assets-as-Bundle</code> API と <code>Describe-Definition</code> API の使用を比較したものです。</p> \n<table border=\"1px\" cellpadding=\"10px\" class=\"styled-table\"> \n <tbody> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><strong>比較項目</strong></td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><strong>Assets-as-Bundle API</strong></td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><strong>Describe-Definition/Describe API</strong></td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">主なユースケース</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">環境、アカウント、リージョン間での関連アセットのデプロイ</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">バージョン管理、モジュール開発、CI/CD 統合</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">粒度</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">依存関係 (データセット、ソース、テーマ、フォルダ) を含むダッシュボードと分析を完全にバンドル</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">個別のアセット定義に焦点を当てる</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">可視性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">ZIP ファイルに埋め込まれた JSON または CloudFormation テンプレート；追加作業を要して内容確認が可能</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">API を通じて直接アクセス可能な、完全に可視化された行単位の JSON 定義</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">バージョン管理との適合性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">理想的ではない；差分の確認、モジュール化、レビューが困難</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">優れている；Git ベースのワークフロー、レビュー、ロールバックに適している</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">コンポーネントの再利用性</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">限定的；バンドルは自己完結型で、複数バンドルのシナリオではデータセットが重複する可能性がある</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">高い；適切に設計されたソリューションでは、コンポーネント (計算フィールド、フィルター) をアセット間で再利用およびモジュール化できる</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">開発ワークフロー</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">QuickSight の既存のダッシュボードまたは分析からバンドルを作成</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">JSON をプログラムで作成または変更し、<code>Update</code> API を使用して適用</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">デプロイメントワークフロー</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><code>ExportAssetsBundle</code> を使用してエクスポートし、<code>ImportAssetsBundle</code> を使用してインポート</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\"><code>Create</code> または <code>Update</code> API を使用して変更をプッシュ</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">最適な用途</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">環境間でのダッシュボードとその依存関係をパッケージとして移行する場合</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">反復的な開発、CI/CD、コードベースの作業を行う BI チーム向け</td> \n  </tr> \n  <tr> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">制約</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">バンドルが大きく、冗長なアセットが含まれる可能性がある；個別のコンポーネントの分離や編集が困難</td> \n   <td style=\"padding: 10px;border: 1px solid #dddddd\">依存アセット (データセット、ソース、テーマ) は含まれず、別途処理が必要</td> \n  </tr> \n </tbody> \n</table> \n<h2>バックアップ、リストア、ディザスタリカバリ</h2> \n<p>このセクションでは、QuickSight API を使用して BI アセットのバックアップ、リストア、リカバリを行い、信頼性の高いディザスタリカバリを実現し、環境全体でのデータ損失を最小限に抑える方法について説明します。</p> \n<p>QuickSight アセットのバックアップ、リストア、ディザスタリカバリには、<code>Assets-as-Bundle</code> API と <code>Describe-Definition</code> API の両方を使用できます。<br> アセットを定期的にバンドル (ZIP ファイルまたは CloudFormation テンプレート) または個別の JSON 定義としてエクスポートすることで、BI チームは Amazon S3、Git、その他のリポジトリに保存されるバージョン管理されたバックアップを作成できます。</p> \n<p><code>Assets-as-Bundle</code> API を使用すると、チームはダッシュボードごとにバックアップを整理し、各ダッシュボードをその依存関係 (データセット、データソース、テーマなど) と共にエクスポートできます。このアプローチは便利で、ダッシュボード単位でのリカバリに適しています。</p> \n<p>一方、<code>Describe-Definition</code> API はより柔軟性が高いものの、より多くの労力を必要とします。<br> BI チームは、すべてのアセットを個別にリストアップし、タイプ別 (データソース、データセット、分析) に保存し、モジュール式のバックアップ構造を維持できます。確実な復元のためには、データソースから始まり、データセット、テーマ、最後にダッシュボードと分析という依存関係を意識した適切な順序でアセットを再デプロイする必要があります。</p> \n<p>前述のとおり、記事 <a href=\"https://aws.amazon.com/blogs/big-data/biops-amazon-quicksight-object-migration-and-version-control/\" rel=\"noopener noreferrer\" target=\"_blank\">BIOps: Amazon QuickSight object migration and version control</a> では、テンプレートベースのアプローチを使用して QuickSight アカウントのアセットをバックアップおよび復元するためのサンプル実装を提供しています。関連する <a href=\"https://github.com/aws-samples/amazon-quicksight-sdk-proserve/blob/master/BIOps_Deployment_Scripts/Jupyter%20Notebook/6_Batch_Deployment.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">Jupyter ノートブック </a> では、アカウント全体でのアセットの一括エクスポートとインポートを自動化する方法を説明しています。</p> \n<p>もともとはテンプレートを中心に構築されていましたが、関連する API 呼び出しを <code>Describe-Definition</code> API に置き換えることで、現在のベストプラクティスに沿った、スケーラブルで保守可能なバックアップおよび復元ワークフローを作成できます。</p> \n<p>さらに、チームは QuickSight フォルダを使用してバックアップを整理し、関連するアセットを構造化された復旧戦略の一部としてグループ化することで、より直感的に復元の操作を管理できます。フォルダベースのバックアップと復元のアプローチについては、こちらの <a href=\"https://github.com/aws-samples/amazon-quicksight-sdk-proserve/blob/master/BIOps_Deployment_Scripts/Jupyter%20Notebook/8_Folder_Deployment.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">サンプル Jupyter ノートブック</a> を参照してください。このノートブックでは、フォルダで整理された QuickSight アセットのエクスポートと再インポートの方法を示しており、BI チームが関連するアセット (ダッシュボード、分析、データセット) をグループ化して一括管理できるようになっています。</p> \n<h2>データセットとダッシュボード間のマージコンフリクトの解決方法</h2> \n<p>このセクションでは、QuickSight でデータセットとダッシュボード間のマージのコンフリクトを検出し解決する方法について説明し、スキーマの変更が依存する可視化やフィルターを壊さないようにする方法を解説します。<br> 次の図は、データセットのバージョン管理とコンフリクト解決のワークフローを示しています。</p> \n<p><img alt=\"\" class=\"alignnone wp-image-5246 size-full\" height=\"1382\" loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-3image-5.jpg\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" width=\"596\"></p> \n<p>このプロセスは初期データセット (v1) から始まり、フィールドの名前変更やデータ型の変更などの更新が発生したかどうかを評価します。更新が検出されると、データセットはバージョン 2 (v2) に進み、潜在的なマージのコンフリクトをチェックします。コンフリクトが見つかった場合、フィールドマッピング（例えば、名前が変更されたフィールドを再マッピングしてビジュアルを復元する）によって解決できるかどうかを判断します。コンフリクトが解決可能な場合、影響を受けたアセットを復旧するためにマッピングが適用されます。解決できない場合（例えば、データ型の変更による場合）、サンプルコードを使用して変更されたフィールドを自動的に検出し、未解決の変更によって破損したフィルターやビジュアルをクリーンアップできます。</p> \n<p>データセットのマージのコンフリクトを検出して処理するためのサンプルコードは、以下の <a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Sample_Merge_Conflict_Resolver/merge_conflict.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">Jupyter ノートブック</a> で入手できます。このノートブックでは、変更されたフィールドを自動的に特定し、フィールドのデータ型の変更などの単純なマッピングの問題を解決し、互換性のない変更によって破損したフィルターをクリーンアップする方法を示しています。</p> \n<p>さらに、QuickSight データセットの更新時にマージのコンフリクトの検出を自動化するためのサンプルコードと GitHub Actions ワークフローを提供しました。Python スクリプト <a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Sample_Merge_Conflict_Resolver/compare_quicksight_datasets.py\" rel=\"noopener noreferrer\" target=\"_blank\">compare_quicksight_datasets.py</a> は、データセットのバージョンを比較して、データ型の変更、フィールド名の変更、フィールドの追加、フィールドの削除を特定します。</p> \n<p>GitHub Actions ワークフロー <a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Sample_Merge_Conflict_Resolver/.github/workflows/compare-quicksight.yml\" rel=\"noopener noreferrer\" target=\"_blank\">compare-quicksight.yml</a> は、比較を実行するために自動的にトリガーされます。<br> 比較結果はリポジトリの新しいアーティファクトとして保存され、BI チームが変更内容を確認し、データセットのバージョン昇格時にコンフリクトを自動的に解決するか、手動での対応を行うかの判断を下すことができます。</p> \n<p>ワークフローを設定して実行するには、以下のステップを完了してください：</p> \n<ol> \n <li>YAML ファイルが正しい GitHub ディレクトリに保存されていることを確認してください。</li> \n</ol> \n<p><code>.github/workflows/compare-quicksight.yml</code>リポジトリは以下のような構造になっているはずです。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">your-repo/\n├── .github/\n│   └── workflows/\n│       └── compare-quicksight.yml \n├── compare_quicksight_datasets.py \n├── ...</code></pre> \n</div> \n<ol start=\"2\"> \n <li>以下の例のように <code>compare-quicksight.yml</code> に有効なトリガーが含まれていることを確認してください。</li> \n</ol> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">name: Compare QuickSight Datasets \n on:\n workflow_dispatch:  # 手動トリガーを許可</code></pre> \n</div> \n<p>この方法により、<strong>Actions</strong> タブからワークフローを手動で実行できます。</p> \n<ol> \n <li>ワークフローファイルをリポジトリにコミットしてプッシュします：</li> \n</ol> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">git add .github/workflows/compare-quicksight.yml \n git commit -m \"Add QuickSight dataset comparison workflow\"\n git push origin main</code></pre> \n</div> \n<ol start=\"2\"> \n <li>GitHub リポジトリのシークレットを追加します： \n  <ol type=\"a\"> \n   <li>GitHub リポジトリに移動し、<strong>Settings, Secrets and variables, Actions</strong> を選択します。</li> \n   <li><strong>New repository secret</strong> を選択します。</li> \n   <li>以下のようなシークレットを追加します： \n    <ol type=\"i\"> \n     <li><code>AWS_ACCESS_KEY_ID</code></li> \n     <li><code>AWS_SECRET_ACCESS_KEY</code></li> \n     <li><code>AWS_REGION</code></li> \n     <li><code>QUICKSIGHT_ACCOUNT_ID</code></li> \n     <li><code>NEW_DATASET_ID</code></li> \n    </ol> </li> \n  </ol> </li> \n <li>ワークフローを実行します： \n  <ol type=\"a\"> \n   <li>GitHub リポジトリに移動します。</li> \n   <li><strong>Actions</strong> タブで、<strong>Compare QuickSight Datasets</strong> を選択します。</li> \n   <li><strong>Run workflow</strong> を選択し、必要な入力情報を提供します。</li> \n  </ol> </li> \n</ol> \n<p>このユーティリティは、バージョン管理やデプロイメントパイプラインの一部として使用できます。また、BI チームは分析やダッシュボードで影響を受けるビジュアルやフィルターを直接確認して更新することで、手動でコンフリクトを解決できます。</p> \n<h2>リソースの削除</h2> \n<p>今後の料金発生を防ぐため、テスト中に作成した S3 バケット、QuickSight データセット、分析、ダッシュボード、サンプルスクリプトで使用したその他のリソースなどを削除してください。</p> \n<h2>まとめ</h2> \n<p>QuickSight API の機能により、大規模な BI アセットを管理するための強力な自動化、ガバナンス、柔軟性が実現可能になります。本記事では、クロスアカウントおよび複数環境のデプロイメント、コンフリクトの検出とガバナンスに API を使用する方法について説明しました。本記事のガイダンスを使用して、QuickSight の信頼性が高くコンフリクトを考慮したデプロイメント手法を確立できます。</p> \n<h3>著者について</h3> \n<p style=\"clear: both\"><strong><img alt=\"\" class=\"wp-image-5230 size-thumbnail alignleft\" height=\"133\" loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/ying-photo-1-100x133.jpeg\" width=\"100\">Ying Wang </strong>は、AWS の Generative AI 組織の Senior Specialist Solutions Architect で、Amazon QuickSight と Amazon Q を専門とし、大規模エンタープライズおよび ISV のお客様をサポートしています。データアーキテクトおよびソフトウェア開発エンジニアリングマネージャーとしての強固な経験を持つとともに、データ分析とデータサイエンスの分野で 16 年の経験を有しています。データアーキテクトとして、お客様のクラウドにおけるエンタープライズデータアーキテクチャソリューションの設計とスケーリングを支援してきました。エンジニアリングマネージャーとしては、エンジニアリングとプロダクトの双方の観点から新機能の提供と製品革新を推進し、QuickSight を通じてお客様のデータの力を引き出すことを可能にしました。</p>"
  },
  {
    "title": "Amazon QuickSight BIOps – パート2 : API を使用したバージョン管理",
    "date": "2025-09-30T06:43:02.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/",
    "content": "<p>本記事は、2025年8月6日に公開された <a href=\"https://aws.amazon.com/jp/blogs/business-intelligence/amazon-quicksight-biops-part-2-version-control-using-apis/\">Amazon QuickSight BIOps – Part 2: Version control using APIs</a> を翻訳したものです。翻訳は ProServe Data Analytics Consultant の西澤 祐介が担当しました。</p> \n<p>この記事では、API駆動のビジネスインテリジェンスオペレーションズ（BIOps）フレームワークの概要を説明します。このフレームワークは、手作業による負荷を軽減し、Amazon QuickSightにおけるライフサイクル管理を改善することを目的としています。</p> \n<p>ビジネスインテリジェンス (BI) 環境が複雑化する中で、ダッシュボード、データセット、デプロイといった作業を手動で管理していると、結果の不整合、バージョンのずれ、コラボレーションの効率低下といった課題につながりがちです。データから得られるインサイトの提供をスケールさせ、ガバナンスを強化し、そして開発、QA（品質保証）、本番といった各環境の信頼性を高める上で、自動化は極めて重要になります。</p> \n<p>DevOps は、ソフトウェア開発と IT 運用を統合することで、デリバリーを加速し、信頼性を向上させるための考え方です。ソフトウェアのワークフローを合理化し、スケールさせるために、DevOps では以下のプラクティスが重視されます。</p> \n<ul> \n <li>継続的インテグレーションと継続的デリバリー（CI/CD）</li> \n <li>Infrastructure as Code (IaC) と Assets as Code (AaC)</li> \n <li>自動化</li> \n <li>モニタリング</li> \n <li>コラボレーションツール（Git、Jira、Slackなど）</li> \n</ul> \n<p>BIOps は、これらの原則を BI のワークフローに応用したものです。アセットのバックアップ、バージョン管理、デプロイを自動化することで、BI チームはダッシュボード、データセット、分析を、一貫性を高め、トレーサビリティを向上させ、より効率的に管理できるようになります。</p> \n<p>このブログシリーズでは、皆様が QuickSight で BIOps のプラクティスを実装し、よりスケーラブルで信頼性の高い BIOps を実現するための方法について解説します。<a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-1-a-no-code-guide-to-version-control-and-collaboration/\">パート1</a>では、ノーコードでのバージョン管理とコラボレーションに関するガイドを提供しました。この記事では、QuickSight API を使用してバージョン管理とロールバックを自動化し、BI アセットのための CI/CD パイプラインを構築する方法について解説します。そして<a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-3-assets-deployment-using-apis/\">パート3</a>では、クロスアカウントおよびマルチ環境でのデプロイ、競合の検出とガバナンスについて取り上げます。</p> \n<h2>ソリューションの概要</h2> \n<p>この記事では、QuickSight における API ベースの BIOps ソリューションの概要を解説し、チームがプログラムによって制御する手法で BI アセットのバージョン管理、デプロイ、ガバナンスを自動化する方法を紹介します。BI エンジニア、DevOps リード、そしてプラットフォーム管理者の方々は、この記事で紹介するコードベースのプラクティスを実践することで、BI ワークフローをスケールさせることができます。</p> \n<h2>前提条件</h2> \n<p>このチュートリアルを進めるにあたり、以下の前提条件が必要です。</p> \n<ul> \n <li><a href=\"https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fportal.aws.amazon.com%2Fbilling%2Fsignup%2Fresume&amp;client_id=signup\">AWS アカウント</a></li> \n <li>&nbsp;以下の AWS サービスへのアクセス権: \n  <ul> \n   <li><a href=\"http://aws.amazon.com/cloudformation\">AWS CloudFormation</a></li> \n   <li><a href=\"https://aws.amazon.com/quicksight/\">Amazon QuickSight</a></li> \n   <li><a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service</a> (Amazon S3)</li> \n   <li><a href=\"https://aws.amazon.com/iam/\">AWS Identity and Access Management</a> (IAM)：QuickSight の<code>Template</code>, <code>Assets-as-Bundle</code>, <code>Create</code>, <code>Update</code>, <code>Delete</code>, <code>Describe API</code>を利用できる権限が必要です。</li> \n  </ul> </li> \n <li>Python の基本的な知識（Python 3.9 以降を推奨）</li> \n <li>SQL の基本的な知識</li> \n <li>最新バージョンの <a href=\"http://aws.amazon.com/cli\">AWS Command Line Interface</a> (AWS CLI) が<a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\">インストール</a>済みであること</li> \n <li><a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/quicksight.html\">Boto3</a> がインストール済みであること</li> \n</ul> \n<p>また、このチュートリアルを始める前に、シリーズの<a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-1-a-no-code-guide-to-version-control-and-collaboration/\">パート1</a>を確認しておくことをお勧めします。</p> \n<h2>QuickSight アセット API の概要</h2> \n<p>QuickSight は、BI アーティファクトを管理するための API ベースのアプローチを複数提供しています。バージョン管理、デプロイの自動化、バックアップといった目的に応じて、それぞれ強みの異なる API を使い分けることができます。</p> \n<p>主なアプローチは以下の3つです。</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/developerguide/create-template.html\">Template API</a> (旧来の方法)</li> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/developerguide/assetbundle-export.html\">Assets-as-Bundle API</a> (新しい方法)</li> \n <li><a href=\"https://community.amazonquicksight.com/t/new-amazon-quicksight-api-capabilities-to-accelerate-your-bi-transformation/11099\">Describe-Definition API</a></li> \n</ul> \n<p>これら3つのアプローチは、いずれもダッシュボード、分析、データセットなどをプログラムで扱うことを可能にしますが、可視性、制御性、そして最新の CI/CD ワークフローとの親和性において大きく異なります。</p> \n<h3>Template API</h3> \n<p>「テンプレート」ベースのアプローチは、<code>CreateTemplate</code> や <code>CreateDashboard</code> といった API を利用し、AWS アカウントや AWS リージョンをまたいで QuickSight のアセットを移行するための従来からの手法でした。従来、「テンプレート」はダッシュボードのバックアップや、他の環境へのアセットのデプロイに使用されてきました。初期の実装では、「テンプレート」の中身は不透明で、BIチームにとっては完全なブラックボックスでした。しかし、<a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeTemplateDefinition.html\">DescribeTemplateDefinition</a> API の登場により、チームは「テンプレート」のJSON 定義を抽出して、内容の確認やバックアップを行えるようになりました。とは言え、「テンプレート」は新しい他の方法に比べて柔軟性に欠け、反復的な開発、フィールドレベルでの編集、あるいはバージョン管理といったワークフローには最適化されていません。</p> \n<p>それでも、Git リポジトリや S3 バケットといった外部のバージョン管理システムやストレージをセットアップせずに、QuickSight 環境内にバックアップを保存したいと考える BI チームにとっては、「テンプレート」は依然として有用です。このため、製品内でのアセット管理を中心に行いたいチームにとって、「テンプレート」は手軽な選択肢となります。</p> \n<p>QuickSight アセットに関する <code>Template API</code> の全リストは以下の通りです。</p> \n<ul> \n <li><span style=\"color: #000000\"><code>CreateTemplate</code></span></li> \n <li><code>DeleteTemplate</code></li> \n <li><code>DescribeTemplate</code></li> \n <li><code>DescribeTemplateDefinition</code></li> \n <li><code>UpdateTemplate</code></li> \n <li><code>UpdateTemplatePermissions</code></li> \n</ul> \n<h3>Assets-as-Bundle API</h3> \n<p>CI/CDパイプラインを導入したり、IaC を実践したりしているチームにとって、モダンな <code>Assets-as-Bundle API</code> と <code>Describe-Definition API</code> は、より高い透明性、柔軟性、そして制御性をもたらします。そのため、今日の多くのエンタープライズ向けのユースケースにおいて推奨されるアプローチとなっています。</p> \n<p><code>Assets-as-Bundle API</code> は、よりモジュール化され、ポータビリティの高いデプロイの選択肢を提供します。この API は、QuickSight のダッシュボードや分析、そしてそれらに関連するアセット（データセット、データソース、テーマ、フォルダ）を、ZIP アーカイブ、または <a href=\"https://aws.amazon.com/cloudformation/\">AWS CloudFormation</a> テンプレートとしてエクスポートします。エクスポートされたアーカイブを展開すれば、アセットのメタデータを JSON ファイルとして確認することは可能ですが、それには手間がかかり、きめ細かいバージョン管理には理想的ではありません。さらに、複数のダッシュボードをエクスポートする際には、複数のバンドル間でデータセットが重複し、冗長な形で含まれてしまう可能性があります。QuickSight のインポート処理はこれらの重複を適切に処理し、意図しない上書きを防いでくれますが、やはりこの手法は、詳細なバージョン管理というよりは、関連アセットをまとめてデプロイする用途に適しています。</p> \n<p>ソースアカウントからバンドルファイルをエクスポートするジョブの開始、追跡、詳細確認には、以下の API を使用します。バンドルファイルとは、呼び出し元が指定したアセットと、オプションでそのアセットが依存するすべてのリソースを含む ZIP ファイル（拡張子は .qs ）のことです。</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StartAssetBundleExportJob.html\">StartAssetBundleExportJob</a> – アセットバンドルファイルをエクスポートするための非同期 APIです。</li> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeAssetBundleExportJob.html\">DescribeAssetBundleExportJob</a> – エクスポートジョブのステータスを取得するための同期 APIです。成功した場合、レスポンスにはバンドルを取得するための署名付き URL が含まれます。</li> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ListAssetBundleExportJobs.html\">ListAssetBundleExportJobs</a> – 過去のエクスポートジョブを一覧表示するための同期 API です。リストには、過去15日間の完了したジョブと実行中のジョブが両方含まれます。</li> \n</ul> \n<p>以下の API は、バンドルファイルを入力として受け取り、ターゲットのアカウントでアセットを新規作成または更新するインポートジョブの開始、追跡、詳細確認を行います。</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StartAssetBundleImportJob.html\">StartAssetBundleImportJob</a> – アセットバンドルファイルのインポートを開始するための非同期 API です。</li> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeAssetBundleImportJob.html\">DescribeAssetBundleImportJob</a> – インポートジョブのステータスを取得するための同期 API です。</li> \n <li><a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ListAssetBundleImportJobs.html\">ListAssetBundleImportJobs</a> – 過去のインポートジョブを一覧表示するための同期 API です。リストには、過去15日間の完了したジョブと実行中のジョブが両方含まれます。</li> \n</ul> \n<h3>Describe-Definition API</h3> \n<p>`Describe-Definition API` は、各アーティファクトの内部的な JSON 構造を、透過的かつフィールドレベルのフォーマットで公開します。この定義ファイルは Git で追跡したり、プルリクエストを通じてレビューしたり、対応する <a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateDashboard.html\">Update API</a> で更新したりすることが可能です。そのため、CI/CD パイプラインや IaC プラクティスとの統合に最適な手法と言えます。主なトレードオフは、データセットやデータソースといった依存関係を個別に扱う必要がある点です。これらはダッシュボードや分析の定義には自動でバンドルされないためです。</p> \n<p><code>Describe-Definition API</code> には以下が含まれます。</p> \n<ul> \n <li><code>DescribeDataSource</code></li> \n <li><code>DescribeDataSet</code></li> \n <li><code>DescribeAnalysisDefinition</code></li> \n <li><code>DescribeDashboardDefinition</code></li> \n</ul> \n<p>実際の現場では、多くの BI チームは両方のアプローチを併用しています。アセットをまとめてデプロイする際には <code>Assets-as-Bundle</code> を、そして、きめ細かいバージョン管理や反復開発には <code>Describe-Definition</code> を利用する、といった使い分けです。それぞれの API をいつ使うべきか理解することで、ガバナンスの強化、監査性の向上、そして環境間でのスムーズなアセットの移行が可能になります。</p> \n<h3>各手法の比較</h3> \n<p>以下の表は、これら3つの API 手法の主なユースケースとデータの保管場所をまとめたものです。</p> \n<table style=\"height: 217px;border-color: #000000\" border=\"1\" width=\"800\" cellspacing=\"1\" cellpadding=\"1\"> \n <tbody> \n  <tr> \n   <td><strong>手法</strong></td> \n   <td><strong>主なユースケース</strong></td> \n   <td><strong>用途</strong></td> \n   <td><strong>保管場所</strong></td> \n  </tr> \n  <tr> \n   <td>Template API</td> \n   <td>製品内でのバックアップ、レガシーなデプロイ</td> \n   <td>UI 中心のチーム、シンプルなバックアップ</td> \n   <td>QuickSight 内</td> \n  </tr> \n  <tr> \n   <td>Describe-Definition API</td> \n   <td>きめ細かいバージョン管理と自動化</td> \n   <td>CI/CD、Git との連携</td> \n   <td>Git, Amazon S3, コードリポジトリ</td> \n  </tr> \n  <tr> \n   <td>Assets-as-Bundle API</td> \n   <td>依存関係を含めた環境単位のデプロイ</td> \n   <td>開発環境から本番環境への展開、一括移行</td> \n   <td>Amazon S3, ローカルのZIPアーカイブ</td> \n  </tr> \n </tbody> \n</table> \n<p>QuickSight APIに関するより詳細な情報については、<a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/Welcome.html\">QuickSight API リファレンス</a> や <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/quicksight.html\">Boto3 QuickSight ドキュメント</a>をご参照ください。</p> \n<h2>BI アーティファクトのバージョン管理におけるベストプラクティス</h2> \n<p>これ以降のセクションでは、単一アカウント内でのダッシュボードのバージョン管理に関するベストプラクティスを解説します。</p> \n<p>QuickSight において、「ダッシュボード」は他の人が見れるように設定された、「分析」のスナップショットです。一方、「分析」は、BI チームが開発や改善を繰り返すための作業用アセットです。QuickSight の UI 上では、バージョン管理機能は「ダッシュボード」に対してのみ提供されています。これは、「分析」がエンドユーザーに公開されることはなく、常に開発中のものと見なされているためです。</p> \n<p>しかし、<code>Describe-Definition API</code>のようなプログラム的な手法を用いると、分析の各要素（フィルター、計算フィールド、ビジュアル、パラメーターなど）を、モジュール化されたコードブロックとして扱うことができます。これにより、チームは構造化されたコード駆動の方法で「分析」を管理し、バージョンを記録していくことが可能になります。結果として、複数の作成者が並行して共同作業を進められるようになります。そのため、<code>Describe-Definition API</code>を利用する際には、「分析」自体のバージョン管理も重要なプラクティスであると我々は考えています。</p> \n<h3>Template API を利用したバージョン管理</h3> \n<p>以前のブログ記事「<a href=\"https://aws.amazon.com/blogs/big-data/biops-amazon-quicksight-object-migration-and-version-control/\">BIOps: Amazon QuickSight object migration and version control</a>」では、テンプレートベースのアプローチを用いて QuickSight のダッシュボードのバージョン管理を実装する方法を解説しました。その記事の執筆時点では、「テンプレート」が、「ダッシュボード」のバージョン管理を行うための唯一利用可能なメカニズムでした。</p> \n<p>次の図は、そのソリューションで用いたアーキテクチャを示したものです。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-2image-1.jpg\"></p> \n<p>このワークフローは以下のステップで構成されます。</p> \n<ol> \n <li>まず、BI 開発者が「分析」を作成し、それに基づいて「テンプレート」を保存します。これらがバージョン1のアセットとなります。</li> \n <li>この「分析」は「ダッシュボード」として公開され、QA チームがこのバージョン1の「ダッシュボード」に対してテストを実施します。</li> \n <li>QA テストの後、BI 開発者は「分析」の改修を続け、バージョン2を構築します。</li> \n <li>更新された「分析」は、バージョン2の「ダッシュボード」として公開されます。</li> \n <li>QA チームはバージョン2の「ダッシュボード」をテストし、結果に応じて以下のアクションのいずれかを実行します。 \n  <ol> \n   <li>テストに合格した場合： BI 管理者は「テンプレート」を更新し、バージョン2の内容を反映させます。</li> \n   <li>問題が発見された場合： BI 開発者は分析上で修正を試みます。 \n    <ol> \n     <li>問題が修正可能な場合、バージョン2の開発が継続されます。</li> \n     <li>問題が修正不可能な場合、BI 管理者はバックアップ用の「テンプレート」を使ってバージョン1にロールバックできます。</li> \n    </ol> </li> \n  </ol> </li> \n <li>QuickSight には、作成者がセッション中に以前のバージョンに戻せる Undo 機能があります。もし Undo の履歴がリセットされた場合（例えばデータセットの置換など）、あるいは以前に安定版として確認済みの状態へのロールバックが必要になった場合は、BI 管理者はバージョン1の「テンプレート」と <code>UpdateAnalysis API</code> を使って分析を復元できます。</li> \n <li>BI 開発者は、この復元されたバージョン1の「分析」をベースに作業を再開し、次の安定バージョンを目指して開発サイクルを繰り返します。</li> \n</ol> \n<h3>Describe-Definition API を利用したバージョン管理</h3> \n<p>次の図は、<code>Describe-Definition API</code>と <code>Create</code>または<code>Update API</code>を利用して、QuickSight アセットのバージョン管理を実装するためのアーキテクチャを示したものです。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-2image-2.jpg\"></p> \n<p>ワークフローは以下のステップで構成されます。</p> \n<ol> \n <li>アセットの作成と保存 \n  <ol> \n   <li>BI チームは、<code>Describe-Definition API</code>のレスポンス構文を参考に、プログラムで QuickSight アセットの構築を開始できます。ダッシュボードや分析は、シート、計算フィールド、ビジュアル、フィルター、パラメーターといった JSON ベースの構成要素を使って構築可能です。同様に、データセットも物理テーブルと論理テーブルのマッピングを定義する JSON 構造を用いて作成できます。QuickSight のアセットは構造化された JSON 形式に従っているため、コード駆動の開発に適しています。</li> \n   <li>学習のハードルを下げるために、まず QuickSight コンソールを使ってアセットを作成し、その設定が要件を満たしていることを確認した上で、<code>Describe-Definition API</code>でアセットの定義を抽出する方法もあります。抽出した JSON 定義は、Git、Amazon S3、あるいは社内のコードリポジトリといったバージョン管理が可能な場所に保存できます。これは、UI ベースの開発からコード駆動の開発へスムーズに移行するのに役立ちます。</li> \n   <li>チームが既に本番環境にアセットをデプロイ済みで、そこからプログラムによるワークフローに移行したい場合は、本番アカウントから直接<code>Describe-Definition API</code>で定義を抽出できます。その定義を開発環境のソースリポジトリ（Git や Amazon S3 など）に保存し、今後の開発やデプロイの起点として利用することが可能です。</li> \n  </ol> </li> \n <li>JSON 定義のデプロイと可視化<br> BI チームが JSON 定義の開発を完了したら、<code>Create</code>または<code>Update API</code>（<code>CreateDashboard</code>, <code>UpdateAnalysis</code>, <code>UpdateDataSet</code>など）を使ってアセットをデプロイし、QuickSight コンソール上で直接内容を可視化します。これにより、コードからビジュアルへのシームレスな移行が実現し、バージョン管理されている定義が UI に一貫して反映されるようになります。</li> \n <li>テストと本番環境へのデプロイ<br> 開発環境や QA 環境にアセットをデプロイした後、BI チームはテストを実施し、アセットが機能面・ビジュアル面で要件を満たしているか検証します。検証後、テスト済みの定義を同じ<code>Create</code>または<code>Update API</code>を使って本番アカウントへデプロイすることで、統制の取れた一貫性のあるリリースプロセスを実現できます。更新された分析を QA という名前のフォルダにデプロイする<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Assets_as_Code/analysis_promote_to_qa_folder.py\">サンプルコード</a>、QA アカウントへデプロイする<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Assets_as_Code/migration/incremental_migration.py\">サンプルコード</a>を用意してますのでご確認下さい。</li> \n</ol> \n<p>以下の<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Assets_as_Code/analysis_scenario_1_dev_operation.py\">サンプルコード</a>は、「分析」の定義を取得し、dev という名前のフォルダにコピーします。これにより、BI チームはアセットをプログラムで開発・管理できるようになります。</p> \n<pre><code class=\"lang-python\">def describe_analysis_definition(session, id):\n    qs = session.client('quicksight')\n    sts_client = session.client(\"sts\")\n    account_id = sts_client.get_caller_identity()[\"Account\"]\n    try:\n        response = qs.describe_analysis_definition(\n            AwsAccountId=account_id,\n            AnalysisId=id)\n    except Exception as e:\n        return ('Faild to describe analysis: ' + str(e))\nelse:\t\n   return response\ntry:\n    sample_analysis = func.describe_analysis_definition(qs_session, analysisid)\n    print('Successfully get sample analysis contents.')\nexcept Exception as e:\n    faillist.append({\n        \"Action\": \"scenario_1_dev: get sample analysis contents\",\n        \"Error Type\": \"describe_analysis_contents Error\",\n        \"AnalysisID\": analysisid,\n        \"Name\": 'template_1',\n        \"Error\": str(e)\n    })\nnew_id = 'copy_t_1_' + str(int(time.time()))\nnew_name = 'copy_t_1'\ntry:\n    res = func.copy_analysis(qs_session, sample_analysis, new_id, new_name, 'owner', dev_config[\"assets_owner\"])\nexcept Exception as e:\n    faillist.append({\n        \"Action\": \"scenario_1_dev: copy analysis\",\n        \"Error Type\": \"copy_analysis Error\",\n        \"AnalysisID\": analysisid,\n        \"Name\": 'template_1',\n        \"Error\": str(e)\n    })\ntime.sleep(20)\nstatus = func.check_object_status('analysis', new_id, qs_session)\nprint('Copy status of analysis ' + new_id + ' is ' + status)\nif status == 'CREATION_SUCCESSFUL':\n    res = func.locate_folder_of_asset(qs_session, new_id, dev_config[\"dev_folder\"], 'ANALYSIS')\n    print('Successfully copied analysis ' + new_id + ' in dev account/folder.')</code></pre> \n<p>以下の<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/blob/main/1_BIOps/Assets_as_Code/analysis_scenario_2_dev_operation.py\">サンプルコード</a>は、「分析」を定義し、計算フィールド、パラメーター、フィルターをプログラムで追加するものです。これらの二次的なアセット（計算フィールド、フィルター、パラメーター）は、再利用可能なコードブロックとして共有ライブラリに保存されます。</p> \n<pre><code class=\"lang-python\">{\n      \"most_recent\": {\n          \"DataSetIdentifier\": \"ds_assets_as_code\",\n          \"Name\": \"most_recent\",\n          \"Expression\": \"max({date_time})\"\n        }\n    ,\n      \"Calculated TimeFrame\": {\n          \"DataSetIdentifier\": \"ds_assets_as_code\",\n          \"Name\": \"Calculated TimeFrame\",\n          \"Expression\": \"datediff(${StartDate},${Enddate},'DD')\"\n      }\n}\n\"\"\"\nNow, please add CalculatedFields\n\"\"\"\nf = open('Assets_as_Code/library/2nd_class_assets/analysis_cf_library.json')\nl_cf = json.load(f)\ncf_name = 'most_recent'\ntry:\n    res = func.update_analysis(qs_session,new_id, new_name, new_analysis, 'CalculatedFields', l_cf[cf_name])\nexcept Exception as e:\n    faillist.append({\n        \"Action\": \"scenario_2_dev: add CalculatedFields\",\n        \"Error Type\": \"update_analysis Error\",\n        \"AnalysisID\": new_id,\n        \"Name\": new_name,\n        \"Error\": str(e)\n    })\nprint(cf_name + \" is successfully added into analysis \" + new_name)\n\"\"\"\nNow, please add parameters (keyword: ParameterDeclarations)\n\"\"\"\nnew_analysis = func.describe_analysis_definition(qs_session, new_id)\nf = open('Assets_as_Code/library/2nd_class_assets/parameter_library.json')\nl_p = json.load(f)\np_name = \"StartDate\"\ntry:\n    res = func.update_analysis(qs_session,new_id, new_name, new_analysis, 'ParameterDeclarations', l_p[p_name])\nexcept Exception as e:\n    faillist.append({\n        \"Action\": \"scenario_2_dev: add ParameterDeclarations\",\n        \"Error Type\": \"update_analysis Error\",\n        \"AnalysisID\": new_id,\n        \"Name\": new_name,\n        \"Error\": str(e)\n    })\nprint(p_name + \" is successfully added into analysis \" + new_name)</code></pre> \n<p>ビルド済みの関数群は <a href=\"https://github.com/aws-samples/sample-aws-sa-genai/tree/main/1_BIOps/Assets_as_Code/src\">GitHub</a> で公開されています。<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/tree/main/1_BIOps/Assets_as_Code/library\">ライブラリ</a>、<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/tree/main/1_BIOps/Assets_as_Code/utils\">ユーティリティ</a>、<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/tree/main/1_BIOps/Assets_as_Code/config\">設定サンプル</a>、<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/tree/main/1_BIOps/Assets_as_Code/log\">ロギングヘルパー</a>といったその他の補助コードは、以下の<a href=\"https://github.com/aws-samples/sample-aws-sa-genai/tree/main/1_BIOps/Assets_as_Code\">ディレクトリ</a>に格納されています。</p> \n<p>次のスクリーンショットは、AaC（Assets as Code）アプローチにおけるサンプルコードのディレクトリ構造を示したものです。パッケージ全体をダウンロードし、独自のAaCソリューションを構築するためのベストプラクティスとしてご活用ください。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-2image-3.png\"></p> \n<p>このアーキテクチャでは、バージョン管理は Git リポジトリや Amazon S3 のバージョニング機能といった外部の仕組みで扱われます。このアプローチにより、BI チームはアセットを並行開発したり、計算フィールド、フィルター、ビジュアルといった二次的なアセットを再利用したりすることが可能になります。例えば、チームは計算フィールドの定義を、標準化された名前を持つ独立した JSON オブジェクトとして保存できます。これにより、複数の分析やダッシュボードをまたいで再利用できるようになります。この手法のさらなるメリットとしては、プルリクエストによる行単位のコードレビュー、以前のバージョンへの簡単なロールバック、そして CI/CD ワークフローとのシームレスな統合などが挙げられます。</p> \n<p>まとめると、このパターンは QuickSight を完全にコード駆動のプラットフォームへと変革し、インフラと BI アセットをコードとして扱うことを可能にします。</p> \n<h3>QuickSight UI と API を併用したハイブリッドワークフローによるバージョン管理</h3> \n<p>BI チームは、このアーキテクチャを拡張してハイブリッドモデルを構築することもできます。つまり、開発は QuickSight UI で行い、バージョン管理を API 経由で行うというモデルです。このアプローチでは、チームは QuickSight コンソール上で対話的にアセットの構築や更新を続けます。開発が完了し、アセットがテストに合格したら、チームは <code>Describe-Definition API</code> を使って更新された JSON 定義を抽出し、Git や Amazon S3 といったバージョン管理リポジトリに保存します。</p> \n<p>このモデルは、UI ベース開発の容易さと柔軟性を、コードベースのバージョン管理が持つ構造性やトレーサビリティと組み合わせるものです。プログラムによるワークフローへ移行しようとしているBI チームにとっては、まさに両者の良いとこ取りと言えるでしょう。</p> \n<p>次の図は、UI ベースの開発とコードベースのバージョン管理が持つ構造性やトレーサビリティを組み合わせたアーキテクチャを示しています。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/07/31/BI-5149-part-2image-4.jpg\"></p> \n<p>ワークフローは以下のステップで構成されます。</p> \n<ol> \n <li>BI の作成者は、ダッシュボード、分析、データセット、データソース、テーマを QuickSight コンソール上で直接開発します。</li> \n <li>開発が完了し、アセットが機能面・ビジュアル面のテストに合格したら、チームは <code>Describe-Definition API</code>を使ってアセットの定義をエクスポートし、Git やAmazon S3 に保存します。</li> \n <li>検証済みのアセットは、<code>Create</code>または<code>Update API</code>を使って本番環境にデプロイされます。</li> \n <li>作成者は、次のバージョンに向けてUI 上で同じアセットの開発を再開します。</li> \n <li>作成したバージョンはテストされます。 \n  <ol> \n   <li>テストに合格した場合：リポジトリにあるバージョン管理された JSON 定義を更新し、ステップ6に進みます。</li> \n   <li>テストに失敗した場合：Git や Amazon S3 に保存しておいた以前の定義を使い、<code>Update API</code>を介して QuickSight UI 上のアセットをロールバックします。</li> \n  </ol> </li> \n <li>更新された、あるいはロールバックされた定義を本番アカウントにデプロイすることで、安定したバージョン管理下でのリリースを実現します。</li> \n</ol> \n<h3>Amazon EventBridge を利用した QuickSight のバージョン管理自動化</h3> \n<p><a href=\"https://aws.amazon.com/eventbridge/\">Amazon EventBridge</a> を利用すると、個々の QuickSight アセット（分析、ダッシュボード、VPC 接続など）やフォルダ構造への変更を、アセットレベルのイベントとしてほぼリアルタイムに捉え、監視することができます。ここで言うイベントには、アセットの作成、更新、削除、フォルダ構成の変更などが含まれます。詳細については、「<a href=\"https://aws.amazon.com/blogs/business-intelligence/automate-your-amazon-quicksight-assets-deployment-using-the-new-amazon-eventbridge-integration/\">Automate your Amazon QuickSight assets deployment using the new Amazon EventBridge integration</a>」をご参照ください。</p> \n<p>QuickSight と EventBridge を連携させることで、BI チームは特定のアセットやフォルダが変更された際に、後続のワークフロー（例えば <a href=\"http://aws.amazon.com/lambda\">AWS Lambda </a>や <a href=\"https://aws.amazon.com/step-functions/\">AWS Step Functions</a> ）を自動的にトリガーするルールを定義できます。これにより、アセット定義のエクスポート、Git や Amazon S3 へのスナップショット保存、監査やロールバックのためのタグ付けといったバージョン管理プロセスがシームレスになります。結果として、チームは手動での介入なしにガバナンスを自動化し、環境間の一貫性を維持できるようになります。</p> \n<h3>Assets-as-Bundle APIを利用したバージョン管理</h3> \n<p><code>Assets-as-Bundle API</code> をバージョン管理に利用することは推奨しません。この API の主なユースケースは、ダッシュボードとその依存関係にあるアセットを環境間で移行（例えば、開発環境から QA、本番環境へ）することです。バンドルファイルは技術的には保存して再利用できますが、きめ細かい追跡、比較、モジュール開発にはあまり適していません。適切なバージョン管理のためには、<code>Describe-Definition API</code> を Git や Amazon S3 ベースのストレージと組み合わせて利用してください。</p> \n<h2>クリーンアップ</h2> \n<p>将来的な課金を防ぐため、テスト中に作成した S3 バケット、QuickSight のデータセット、分析、ダッシュボード、その他サンプルスクリプトで利用したアセットなどのリソースは削除してください。</p> \n<h2>まとめ</h2> \n<p>この記事で解説した QuickSight API の機能は、BI アセットを大規模に管理するための強力な自動化、ガバナンス、そして柔軟性をもたらします。これらの API により、アセットのライフサイクルを完全にコントロールし、CI/CD パイプラインや Git ベースのワークフロー、カスタムツールとシームレスに連携させることが可能になります。ダッシュボードのバージョン管理、環境をまたいだデプロイ、スキーマ競合の解決などを簡単に行うことができます。</p> \n<p>きめ細かい制御、監査性、アカウントやリージョンをまたいだ再現可能なデプロイが必要な場合は、API を利用してください。スピード、使いやすさ、あるいは手軽なイテレーションを優先する場合は、QuickSight コンソールを利用しましょう。多くのチームにとっては、QuickSight コンソールで開発し、変更のキャプチャを API で行うというハイブリッドなアプローチが、両方の長所を活かす最良の方法となるでしょう。</p> \n<p>BIOps プラクティスを導入することで、BI チームはデリバリーをスケールさせ、リスクを低減し、一回限りの開発から、信頼性が高く統制の取れたインサイトの創出へと移行することができます。</p> \n<p><a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-3-assets-deployment-using-apis/\">パート3</a> では、クロスアカウントおよびマルチ環境でのデプロイ、そして競合の検出とガバナンスについて解説します。</p>"
  },
  {
    "title": "Amazon QuickSight BIOps – パート1 : バージョン管理とコラボレーションのためのノーコードガイド",
    "date": "2025-09-30T06:42:17.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-1-a-no-code-guide-to-version-control-and-collaboration/",
    "content": "<p>本記事は、2025年8⽉6⽇に公開された <a href=\"https://aws.amazon.com/jp/blogs/business-intelligence/amazon-quicksight-biops-part-1-a-no-code-guide-to-version-control-and-collaboration/\">Amazon QuickSight BIOps – Part 1: A no-code guide to version control and collaboration</a> を翻訳したもの です。翻訳は Public Sector PSA の西川継延が担当しました。</p> \n<p>ビジネスインテリジェンス（BI）チームが成長するにつれて、ダッシュボード、データセット、分析の管理はますます複雑になります。明確なバージョン管理なしでのコラボレーションは、作業の上書き、レポートの不整合、本番環境でのエラーにつながる可能性があります。ビジネスのステイクホルダーは迅速なインサイトを要求しますが、BI 作成者は変更を間違いなく繰り返し、自信を持ってデプロイするためのツールを欠いていることがよくあります。</p> \n<p>DevOps の原則に着想を得たビジネスインテリジェンスオペレーション（BIOps）は、BI プロセスにバージョン管理と共同開発を導入します。この記事では、<a href=\"https://aws.amazon.com/quicksight/\">Amazon QuickSight</a> のノーコードのコンソール機能を使用して BIOps を実装する方法を説明します。ダッシュボードのバージョン管理、ビジュアルの再利用、並行でのコラボレーション、そして更新の安全なデプロイを、すべて QuickSight UI を通じて行う方法を紹介します。私たちのフレームワークは、QuickSight に組み込まれたバージョン管理ツールを使用して、チームが管理を合理化し、手作業を削減するのに役立ちます。このコード不要のアプローチは、BI アナリストとダッシュボード作成者の両方がこれらのプラクティスをすぐに採用するのに役立ちます。</p> \n<h2>QuickSight の基本</h2> \n<p>このセクションでは、Amazon QuickSight におけるビジネスインテリジェンスオペレーション（BIOps）の基本を紹介します。QuickSight のアセットがどのように分類されるか、基礎となる権限モデル、そして私たちのオペレーションを導く不可欠な BIOps の原則という3つの主要な領域を検証します。</p> \n<h3>アセットの分類</h3> \n<p>QuickSight はアセットを4つのカテゴリに整理し、それぞれが BI ワークフローで特定の目的を果たします。</p> \n<ul> \n <li><strong>メインアセット</strong> – これらは中核となる構成要素であり、QuickSight コンソール上でスタンドアロンのオブジェクトとして表示されます。これらのアセットは相互に依存しています。例えば、分析はデータセットに依存し、データセットはデータソースに依存します。 \n  <ul> \n   <li>データソースは、<a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a>、<a href=\"https://aws.amazon.com/athena/\">Amazon Athena</a>、<a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service</a> (Amazon S3) などのシステムに接続します。</li> \n   <li>データセットはデータソースから構築され、結合、カスタム SQL、計算フィールドを含むことができます。</li> \n   <li>分析は、ビジュアルを構築するためのインタラクティブな環境です。</li> \n   <li>ダッシュボードは、分析が公開されたもので、読み取り専用のバージョンです。</li> \n   <li><a href=\"https://aws.amazon.com/q/\">Amazon Q</a> のトピックは、自然言語クエリのためのセマンティックレイヤーを定義します。</li> \n  </ul> </li> \n <li><strong>補助アセット</strong> -これらはユーザーエクスペリエンスを向上させますが、QuickSight UI では主要なオブジェクトではありません。例えば、テーマはダッシュボードや分析のスタイルを定義しますが、QuickSight コンソール上ではスタンドアロンのアセットとしてリストされません。しかし、テーマは API を介してプログラム的にスタンドアロンのオブジェクトとして管理でき、<code>list</code>、<code>describe</code>、<code>update</code>、<code>delete</code> などの操作をサポートします。</li> \n <li><strong>セカンドクラスアセット</strong> – これらはメインアセット内の内部コンポーネントであり、カスタム SQL、テーブル、フィルター、計算フィールド、パラメータなどが含まれます。これらの要素は QuickSight コンソール UI 上ではスタンドアロンのオブジェクトではなく、直接的なリスト (<code>list</code>) や詳細表示 (<code>describe</code>) の API コールを通じてもアクセスできません。代わりに、データセット、分析、またはダッシュボードの定義内で定義されます。これらは QuickSight コンテンツのロジック、構造、およびインタラクティビティを定義する上で重要な役割を果たします。</li> \n <li><strong>フォルダ</strong> – これらはメインアセットを階層構造に整理するために使用される管理アセットです。個人用または共有フォルダを作成してアセットを分類できます。フォルダはアクセス権限をサポートし、1つのアセットは複数のフォルダに存在できます。</li> \n</ul> \n<h3>権限モデル</h3> \n<p>QuickSight のメインアセット、補助アセット、および管理アセットは、安全なコラボレーションのためにユーザーおよびグループレベルの権限をサポートしています。</p> \n<h3>BIOps の基本ワークフロー</h3> \n<p>BIOps には３つのコア機能が含まれます。</p> \n<ul> \n <li><strong>アセットのバックアップと復元</strong> – これは通常、AWS アカウントごと、または AWS リージョンごとにスコープが設定されます。このプロセスにより、誤った削除、サービスの中断、またはデータの破損が発生した場合に QuickSight アセットを復元できることが保証されます。</li> \n <li><strong>バージョン管理</strong> – これは同じ AWS アカウント内で適用でき、BI チームはアセット定義（例えば、データセットやダッシュボード）への変更を追跡したり、以前のバージョンにロールバックしたり、時間の経過とともに異なる開発ブランチを維持したりできます。</li> \n <li><strong>デプロイメント</strong> – これは環境間（例えば、開発アカウントからテスト、QA、本番アカウントへ）およびリージョン間（例えば、<code>us-east-1</code> から <code>us-west-2</code> へアセットをデプロイ）でのアセットの昇格をサポートします。</li> \n</ul> \n<p>BIOps ワークフローを使用すると、チームはアセットレベルとフォルダレベルの両方でデプロイとバックアップを管理できます。ダッシュボードをデプロイする際、チームは機能をサポートするために依存アセット（データセット、データソース、テーマ）を含めることができます。フォルダレベルの操作により、関連するアセットを単一のパッケージとして昇格させることが可能になります。AWS アカウント間でのデプロイには、慎重な権限管理が必要です。アセットタイプにはユーザーまたはグループの権限があり、セキュリティを維持し、依存関係の破損を防ぐために、ターゲット環境で適切に再作成する必要があります。</p> \n<p>次の図は、BIOps ワークフローの概要を説明したものです。バージョン管理は、QuickSight コンソール UI を通じても実現できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-biops-basic-wf.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-164840 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-biops-basic-wf.jpg\" alt=\"\" width=\"1024\" height=\"910\"></a></p> \n<h2>QuickSight ダッシュボードの構築と公開</h2> \n<p>次のグラフに示すように、QuickSight のダッシュボード開発プロセスは、BI 作成者から始まります。BI 作成者は、アクセス管理を簡素化するためにグループにまとめることができます。</p> \n<h2><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI_Dev_Life_Cycle.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-164839 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI_Dev_Life_Cycle.png\" alt=\"\" width=\"728\" height=\"1142\"></a></h2> \n<p>作成者はまず、QuickSight を Amazon Redshift などのストレージシステムに接続してデータソースを作成します。次に、変換、結合、カスタムフィールドを追加してデータセットを構築します。データセットの鮮度は、手動またはスケジュールされた更新によって維持され、モニタリング機能も備わっています。</p> \n<p>これらのデータセットを使用して、作成者はビジュアルとインタラクティブなコンポーネントを備えた分析を作成します。一貫した組織のブランディングのためにテーマを適用することができます。最終ステップは、分析をダッシュボードとして公開し、特定のユーザーやグループと共有することです。このプロセスにより、ガバナンスを維持しながら、スケーラブルなセルフサービス BI が可能になります。</p> \n<h2>ソリューションの概要</h2> \n<p>この記事では、３つの主要な QuickSight 機能について説明します。</p> \n<ol> \n <li>コンソール UI を通じた<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/04/amazon-quicksight-dashboard-versioning-publish-analysis-dashboard/\">ダッシュボードのバージョン管理</a></li> \n <li>異なる分析からダッシュボードを公開することによる並行でのチームコラボレーション</li> \n <li>他の分析やダッシュボードから<a href=\"https://docs.aws.amazon.com/quicksight/latest/user/import-visuals.html\">ビジュアルをインポート</a>することによるコンテンツの再利用</li> \n</ol> \n<p>QuickSight コンソールのこれらの新機能により、ノーコードのインターフェースを通じて効率的な BI コラボレーションとダッシュボードのライフサイクル管理が可能になります。作成者は以下のことができます。</p> \n<ul> \n <li>ダッシュボードとデータセットのバージョン履歴を追跡する</li> \n <li>ダッシュボードを以前のバージョンにロールバックする</li> \n <li>アセットを手動で複製する</li> \n <li>分析とダッシュボード間でビジュアルをインポートおよびエクスポートする</li> \n <li>アセットの説明を通じて変更を文書化する</li> \n <li>ブックマークを使用してパーソナライズされたビューを作成する</li> \n <li>元に戻す（undo）とやり直し（redo）機能で分析の編集を管理する</li> \n</ul> \n<p>これらの機能は、コーディングの経験を必要とせずに、合理化されたガバナンスとチームコラボレーションをサポートします。</p> \n<p>この記事では、ノーコードでUIベースのワークフローに焦点を当てます。このシリーズの <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/\" target=\"_blank\" rel=\"noopener\">パート 2</a> と <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-3-assets-deployment-using-apis/\" target=\"_blank\" rel=\"noopener\">パート 3</a> では、QuickSight API とプログラム可能なアプローチを使用した自動化されたガバナンスとデプロイについて説明します。</p> \n<h2>UI ベースのデータセットとダッシュボードのバージョン管理</h2> \n<p>QuickSight は 2021 年後半にネイティブな <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/dataset-versioning.html\">データセットのバージョン管理</a> を導入しました。ユーザーは、QuickSight コンソール UI 内で直接、最大 1,000 の公開済みバージョンを追跡および管理できます。データセットの所有者は、過去の状態をプレビューしたり、以前のバージョンに戻したり、安全に編集したりできます。これには、互換性のない変更（削除されたソースや無効な計算など）に対する保護機能が含まれています。</p> \n<p>2025 年 4 月、QuickSight は&nbsp;<a href=\"https://docs.aws.amazon.com/quicksight/latest/user/publishing-a-previous-dashboard-version.html\">ダッシュボードのバージョン管理</a> を導入し、バージョン管理機能をデータセットから完全なダッシュボードへと拡張しました。ダッシュボードの所有者は、UI を通じてバージョンの管理、変更の追跡、以前の状態への復元を、コードを書くことなく行えるようになりました。技術チームは引き続き API ベースの自動化を選択するかもしれませんが、アナリストやビジネスユーザーはこれらの機能を利用して、エンドツーエンドのダッシュボードライフサイクル管理を容易に行うことができます。</p> \n<p>次の図は、QuickSight のダッシュボード開発における、バージョン管理された継続的インテグレーションと継続的デリバリー（CI/CD）のワークフローを示しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-3.jpeg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164841\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-3.jpeg\" alt=\"\" width=\"1288\" height=\"976\"></a></p> \n<p>ワークフローは、分析の作成と編集（バージョン 1）から始まり、次にそれをダッシュボードバージョン 1 として公開します。QA テストの後、ダッシュボードが合格すれば、分析はバージョン 2 に更新され、再公開されます。QA テストがどの時点でも失敗した場合、チームは現在のバージョンの編集を続けるか、以前のバージョンにロールバックすることができます。このサイクルは、公開、テスト、更新という反復的な開発を続け、変更が本番環境に到達する前に検証されることを保証します。「元に戻す」「やり直し」アクションは分析内の変更をサポートし、バージョンのロールバックは BI チームの安全性と俊敏性を高めます。</p> \n<h3>分析における軽微な編集のための「元に戻す」「やり直し」</h3> \n<p>QuickSight で分析を編集する際、作成者は <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/saving-changes-to-an-analysis.html\">「元に戻す」および「やり直し」</a> オプションを使用して、変更が永続的になることを心配せずに実験できます。分析内で最大 200 のアクションを元に戻したり、やり直したりすることができ、ツールバーのアイコン（次のスクリーンショットを参照）を使用してアクセスできます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-4.jpeg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164842\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-4.jpeg\" alt=\"\" width=\"1288\" height=\"471\"></a></p> \n<h3>ダッシュボードの公開とバージョン履歴</h3> \n<p>分析がダッシュボードとして公開されると、QuickSight は自動的に新しいバージョンを作成します。ダッシュボードの所有者は、<strong>バージョン履歴</strong>を表示することでこれらのバージョンを管理できます。そのためには、ダッシュボードを開き、上部ツールバーのバージョン履歴アイコンを選択します（次のスクリーンショットを参照）。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164843\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-5.jpg\" alt=\"\" width=\"1080\" height=\"338\"></a></p> \n<p>これにより、現在公開されているバージョンと、タイムスタンプや各バージョンを公開したユーザーを含むすべての以前のバージョンのリストが表示されるペインが開きます。そこから、必要に応じて以前に公開されたバージョンを確認、比較、復元できます。この機能は、ダッシュボードの変更履歴を明確に追跡でき、所有者はコンテンツがどのように変化してきたかを把握することができます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-6.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164844\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-6.jpg\" alt=\"\" width=\"1036\" height=\"1206\"></a></p> \n<p>間違いが発見されたり、以前のバージョンが好まれたりした場合、所有者はワンクリックでダッシュボードを以前のバージョンにロールバックできます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164845\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-7.jpg\" alt=\"\" width=\"1262\" height=\"294\"></a></p> \n<p>このバージョン管理機能は、公開された各ダッシュボードの完全なスナップショットを保持することで、手動での再作業を削減します。他のバージョンへのアクセスを失うことなく以前のバージョンを復元でき、安定性を維持しながら迅速なイテレーション（反復）を可能にします。</p> \n<h2>UI ベースの並行作成とコラボレーション</h2> \n<p>次の図は、単一の QuickSight 開発アカウント内で複数の作成者が並行してコラボレーションする方法を示しています。共有フォルダ「QA Assets」は、再利用可能なコンテンツを一元管理する場所として機能し、作成者はダッシュボードを拡張したり、ビジュアルを再利用したり、バージョンを独立して管理したりできます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164846\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-8.jpg\" alt=\"\" width=\"1468\" height=\"896\"></a></p> \n<p>この例では、３人の作成者が共有の開発ワークフローに貢献しています。</p> \n<ul> \n <li>Ying は分析 1 を作成し、それをダッシュボード 1 として公開し、チームのための再利用可能なアセットを確立します。</li> \n <li>Julia は分析 2 を作成し、ダッシュボード 1 から選択したビジュアルをインポートします。これにより、既存の作業を基に構築しながら、独自のバージョンを維持できます。その後、ダッシュボード 2 を公開します。</li> \n <li>Rushabh はダッシュボード 2 の「<strong>名前を付けて保存</strong>」オプションを使用して分析 3 を作成し、さらにカスタマイズしてダッシュボード 3 を公開します。Rushabh は、分析 3 を公開してダッシュボード 1 を置き換えることで、ダッシュボード 1 を更新することもできます。</li> \n</ul> \n<p>このアプローチは 2 つの主要な利点をサポートします。</p> \n<ul> \n <li><strong>並行開発</strong> – 各作成者は、共有アセットを参照しながら独立して作業します。これにより、上書きや競合の変更のリスクなしに、複数のダッシュボードや機能を同時に開発できます。</li> \n <li><strong>副次的な変更を伴わない安全な修正</strong> – 本番のダッシュボードに迅速な修正が必要な場合、作成者は公開されたバージョンから開始し、ターゲットを絞った編集を行い、再公開することができます。これにより、開発中の元の分析にある未完成のビジュアルや実験的な変更を導入することがありません。</li> \n</ul> \n<p>これらの機能を組み合わせることで、バージョンの追跡可能性が促進され、リスクが最小化され、大規模なコラボレーションが合理化されます。共有フォルダとモジュール式のワークフローにより、QuickSight はエンタープライズ BI チームにとって強力なプラットフォームとなります。</p> \n<h3>ダッシュボードを分析として保存</h3> \n<p>公開後、ダッシュボードはさらなる変更のために分析として <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/copying-a-dashboard.html\">保存</a> できます。作成者は、次のスクリーンショットに示すように、「<strong>名前を付けて保存</strong>」オプション（フロッピーディスクアイコン）を使用して、利用中のダッシュボードから新しい分析を作成できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164847\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-9.jpg\" alt=\"\" width=\"1052\" height=\"336\"></a></p> \n<p>新しい分析は個人のリストに表示され、自由に編集できます。元のダッシュボードに影響を与えることなく、ビューをカスタマイズしたり、ビジュアルを試したりできます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164848\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-10.jpg\" alt=\"\" width=\"1596\" height=\"490\"></a></p> \n<h3>他の分析やダッシュボードからビジュアルをインポート</h3> \n<p>QuickSight の <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/import-visuals.html#import-visual-procedure\">ビジュアルのインポート機能</a> を使用すると、分析間でダッシュボードコンポーネントを効率的に再利用し、標準化できます。分析ツールバーから「ビジュアルのインポート」を選択し、共有または個人のアセットを参照して 1 つ以上のビジュアルをインポートします。クエリ、フォーマット、インタラクションを含むインポートされたビジュアルは、現在の分析にコピーされ、元のソースに影響を与えることなく独立してカスタマイズできます。この機能により、ダッシュボードの開発が合理化され、ビジュアルの一貫性が促進され、チーム間の重複が削減されます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164849\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-11.jpg\" alt=\"\" width=\"1098\" height=\"156\"></a></p> \n<h3>分析からダッシュボ​​ードを公開</h3> \n<p>QuickSight で<strong>既存のダッシュボードを置き換える</strong>には、公開時に「既存のダッシュボードを置き換える」を選択します。これにより、セキュリティ設定や E メールレポートの設定に影響を与えることなく、ダッシュボードが新しい変更で更新されます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-12.jpg\"><img loading=\"lazy\" class=\"size-full wp-image-164870 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-12.jpg\" alt=\"\" width=\"1042\" height=\"490\"></a>ダッシュボードを分析として保存する、任意の分析からダッシュボードを公開する、他の分析やダッシュボードからビジュアルをインポートするなどの機能を組み合わせることで、BI チームは開発ワークフローにおいて強力な柔軟性を得ることができます。チームはダッシュボードを並行して開発でき、複数の作成者が異なる機能やビジュアルに独立して取り組むことができます。また、元の分析にある進行中または実験的なビジュアルを誤って本番バージョンに導入することなく、本番ダッシュボードの問題を安全に修正することもできます。このモジュール式で管理されたアプローチは、本番環境での安定性を維持しながら、アジャイルなイテレーション（反復）をサポートします。</p> \n<h3>ダッシュボードを壊さずにデータセットを置き換える</h3> \n<p>QuickSight のフィールドタイプは、ビジュアル、フィルター、計算がどのように機能するかを決定します。データセットのスキーマ変更が分析の要件と競合すると、ダッシュボードの障害が発生する可能性があります。次のスクリーンショットは、フィルターとビジュアライゼーションのキーフィールドとして <code>SaleDate</code> を使用して構築された、映画チケット販売ダッシュボードの例です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164850\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-13.jpg\" alt=\"\" width=\"1598\" height=\"1164\"></a></p> \n<p>データセットが更新されました。この更新中に、<code>SaleDate</code> は Date（日付）フィールドから Integer（整数）に変更されました。<a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164851\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-14.jpg\" alt=\"\" width=\"1204\" height=\"1322\"></a></p> \n<p>再公開後、ダッシュボードは <code>SaleDate</code> に関連付けられたビジュアルを読み込むことに失敗しました。影響を受けた各ビジュアルには、「データセットが変更されすぎたため、QuickSight が分析を自動的に更新できませんでした」というメッセージが表示されました。</p> \n<p>円グラフのレンダリングが停止し、時間比較のビジュアルが失敗し、<code>SalesDate</code> のフィルターコントロールが機能しなくなりました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-15.jpeg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-164852\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/BI-5149-image-15.jpeg\" alt=\"\" width=\"1287\" height=\"834\"></a></p> \n<p>すでにダッシュボードを動かしているデータセットのスキーマを更新する際、データ型の不一致（フィールドを Date から Integer や String に変更するなど）は、ビジュアルが破損する一般的な原因です。</p> \n<p>スキーマの変更が意図的な場合は、次のことを行う必要があります。</p> \n<ul> \n <li>影響を受けるフィルターを再作成する</li> \n <li>新しいデータ型を認識するようにビジュアルを更新する</li> \n</ul> \n<p>スキーマの変更が意図的でない場合は、次のことができます。</p> \n<ul> \n <li>不要な変更が含まれていない以前のデータセットバージョンに戻す</li> \n</ul> \n<p>QuickSight でデータセットを置き換える際、フィールドマッピングの不一致によるビジュアルの破損も一般的なリスクです。これを軽減するために、QuickSight は現在、次のアクションを実行します。</p> \n<ul> \n <li>不一致が検出された場合にフィールドマッピングを更新するようユーザーに自動的に促す</li> \n <li>スキーマの類似性に基づいてフィールドを自動的にマッピングしようと試みる</li> \n <li>スキーマが完全に一致しない場合にレビューのための不一致ダイアログを表示する</li> \n</ul> \n<p>一致しない、または不整合なフィールドは手動で調整する必要があります。QuickSight は検出された不一致に対してマッピングを強制しますが、ユーザーが提供したマッピングの正確性を検証しません。スキップされたり不適切なマッピングは、依然としてビジュアルの破損を引き起こします。正しいフィールドマッピングにより、ビジュアルが新しいデータセットで期待通りにレンダリングされることが保証されます。</p> \n<h2>まとめ</h2> \n<p>新しい QuickSight コンソール機能により、ダッシュボードとデータセットのライフサイクルをコードフリーで管理できます。チームは、バージョン管理、ロールバック機能、並行開発、ビジュアルの再利用を活用して、より安全で効率的なワークフローを作成できます。</p> \n<p>自動化、CI/CD 統合、またはプログラムによるガバナンスを必要とするチームのために、このシリーズの <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-2-version-control-using-apis/\" target=\"_blank\" rel=\"noopener\">パート 2</a> と <a href=\"https://aws.amazon.com/jp/blogs/news/amazon-quicksight-biops-part-3-assets-deployment-using-apis/\" target=\"_blank\" rel=\"noopener\">パート 3</a> では、API ベースの BIOps ワークフローについて説明します。</p> \n<h3>著者について</h3> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-164857\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/ying-photo-100x133-1.jpeg\" alt=\"\" width=\"100\" height=\"133\"><strong>Ying Wang</strong> は、AWS のジェネレーティブ AI 組織に所属するシニアスペシャリストソリューションアーキテクトで、Amazon QuickSight と Amazon Q を専門とし、大企業や ISV のお客様をサポートしています。彼女はデータアナリティクスとデータサイエンスで 16 年の経験を持ち、データアーキテクトおよびソフトウェア開発エンジニアリングマネージャーとしての強力なバックグラウンドを持っています。データアーキテクトとして、Ying は顧客がクラウドでエンタープライズデータアーキテクチャソリューションを設計し、スケールするのを支援しました。エンジニアリングマネージャーとしての役割では、新機能を提供し、エンジニアリングと製品の両方の観点から製品イノベーションを推進することで、顧客が QuickSight を通じてデータの力を解き放つことを可能にしました。</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft size-full wp-image-164856\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/08/julia-100x102-1.jpg\" alt=\"\" width=\"100\" height=\"102\"><strong>Julia Flash</strong> は、AWS のジェネレーティブ AI 組織に所属するシニアビジネスディベロップメントスペシャリストで、北米のエンタープライズセグメント向けのQuickSightエンゲージメントをリードしています。AI、コーディング、製品戦略で 12 年の経験を持ち、エンジニア、テクニカルプロダクトマネージャー、特許を持つイノベーターとしての深いバックグラウンドを持っています。Julia は AI ソリューションの設計と開発、オープンソースのデータサイエンスへの貢献、そして影響力の大きい顧客対応のエンゲージメントを提供してきました。今日、彼女は引き続き顧客と協力し、QuickSight の大規模な採用を推進しています。</p>"
  },
  {
    "title": "Web 標準動向 2025年9月版",
    "date": "2025-09-30T04:32:04.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/cybozu_frontend/articles/web_standards_monthly_202509",
    "content": "こんにちは！ サイボウズ株式会社 フロントエンドエンジニアの mehm8128 (@mehm8128) です。\n\n はじめに\n今月から「Web 標準動向」が始まります。\nサイボウズは 2025 年 4 月より、W3C のメンバーに加入しました。\nhttps://blog.cybozu.io/entry/joining-w3c\n標準化プロセスに関わることができるようになるための最初の一歩として、フロントエンドエンジニアの一部のメンバーは積極的に Web 標準のキャッチアップを行っています。\nそこで、毎月メンバーが興味を持った Web 標準に関する話題や、実際に標準化プロセスに関わることがで..."
  },
  {
    "title": "Codex CLI を初めて使う人向けの実践ガイド",
    "date": "2025-09-30T04:13:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/hokuto_tech/articles/97fa88f7805a23",
    "content": "この記事は「Claude Code を初めて使う人向けの実践ガイド」を OpenAI Codex CLI 前提で全面的に書き直したものです。\nhttps://openai.com/ja-JP/codex/\nCodex は Claude Code のようにターミナルで動作するローカルのコーディングエージェントで、コードの生成・編集、テストの実行、各種ツール（MCP）連携まで自然言語で指示できます。\n\n 導入手順\nnpm install -g @openai/codex\n\n# mise (https://mise.jdx.dev/)を使っている場合\nmise install npm:@ope..."
  },
  {
    "title": "「あなたもAIで簡単に稼げる！！」に蹴りを入れるまで。~Youtube動画自動生成までの道のり",
    "date": "2025-09-30T00:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/xtm_blog/articles/da1eba90525f91",
    "content": "これは、AIで簡単に稼げるという話が本当なのか、自分で検証してみた話です。\n\n YouTubeで収益化を目指す\nAIを使いこなす組織の一員として働いている身として、世の中に溢れる「AIで簡単に稼げる！」という驚き屋の方々の発言を見るたびに、なんかイラッとしてたんですよね。\nhttps://www.wantedly.com/companies/company_7297732\nでも、ただ批判するのは簡単なのですが、自分がAIで一円も稼いでいないのに「そんなの無理だよ」とか「そんなのは簡単だ」とか言うのは、なんか微妙じゃないですか。なので、まずは自分でちょっとでも稼いでから発言しようと思ったわ..."
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.35",
    "date": "2025-09-29T23:42:37.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.35",
    "content": "### Core Changes\n\n- Turbopack: add separate turbopackPersistentCachingForBuild/ForDev flags: #84215\n- Revert \"Add a --webpack flag and default --turbopack to true (#84216)\": #84348\n- Upgrade React from `df38ac9a-20250926` to `d15d7fd7-20250929`: #84347\n- Mark React Compiler integration as stable: #84220\n\n### Example Changes\n\n- Use Array.from to avoid @ts-ignore when copying i18n.locales: #82148\n\n### Misc Changes\n\n- [test] Stop downloading unused test browsers when generating PR stats: #84329\n- docs: remove repeated to: #84325\n- Turbopack: Use more robust logic for absolute and percent-encoded URLs in source maps received from loaders: #84255\n\n### Credits \n\nHuge thanks to @eps1lon, @sokra, @lukesandberg, @Anshuman71, @bgw, and @RobertFent for helping!\n"
  },
  {
    "title": "DuckDB-Wasm, MapLibre GL JS, CloudFlare Pagesを使って、オープンデータを可視化してみたときの学び",
    "date": "2025-09-29T22:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ckreal/articles/db3617de448bb4",
    "content": "\n 1.どんなことをしたのか？\n個人の勉強がてら、行政組織のデータを使って、下記のようなサイト(以下、まちきずき)を作ってます。\nhttps://machikizuki.ckreal.net/\n\n\nPC\n\n\n\nモバイル\n\n\n\n技術的には、SSG（静的サイトジェネレーター）の Astro を使って、Cloudflare Pages でホスティングしており、DuckDB-Wasm を使ってブラウザ内で Parquet 形式のデータを検索できるようにしています。\nブラウザ内に OPFS でデータを保存しているので、OPFS Explorer の Chrome 拡張を使うと、保存されているデータ..."
  },
  {
    "title": "Claude Sonnet 4.5 発表関連情報まとめ",
    "date": "2025-09-29T18:18:18.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/schroneko/articles/claude-sonnet-4-5",
    "content": "!\nこの記事は人力で書きました。\n\n\n tl;dr\n\nClaude Sonnet 4.5 が発表されたよ\nコーディング性能はあらゆるモデルの中で一番高いよ\nミスアライメントがすべてのモデルの中で最も低いよ\nOpus 4.1 と比べても全体的に性能が向上しているよ\nClaude Code が v 2.0.0 にアプデされたよ\nClaude Code にチェックポイント機能がついたよ（ESC x2 か /rewind）\nClaude Code SDK が Claude Agent SDK にリネームされたよ\nClaude for Chrome がウェイトリスト登録者全員に解放されたよ\nCla..."
  },
  {
    "title": "初心者のための最短でPythonを学ぶ本",
    "date": "2025-09-29T12:16:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/matsuno0125ai/books/9dee2356178cbc",
    "content": "この本は、プログラミング初心者の方が最短でPythonでコーディングができるようになるための本です。余計な前置きなしでPythonの基本だけを一直線に身につける入門書です。変数・型・演算子、if文・for文・while文・例外処理・関数・リスト・辞書・クラス、そしてパッケージ管理と主要ライブラリ、PEP8まで最短経路でテンポよく学習できる内容になっています。"
  },
  {
    "title": "パスキー認証に対する脅威と対策 (2025秋)",
    "date": "2025-09-29T10:26:20.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mixi/articles/3237e8d5c18a62",
    "content": "ritouです。\nここ数年、ユーザー認証のお話をさせていただいている中、最近ようやく「パスキー認証はね、入れとかないと」みたいな雰囲気になってきましたが、しかしその一方で、「パスキー認証のこういうところが好きになれない」といったご意見も当初からいただいています。今回は、その中の「こうしたらやられる」と言う主張、つまりパスキー認証に対する現状の脅威、考えられる対策 について整理しましょう。\n\n ユーザー認証の現状とこれから\nユーザー認証はここ数年、脅威の認識と対策の繰り返しの中で変化してきました。\nパスキー登場までの経緯については、 “パスワードレス認証への道\" ユーザー認証の変遷とパスキ..."
  },
  {
    "title": "豪州政府が AWS Wickr で実現する同盟国・同志国とのセキュアな通信",
    "date": "2025-09-29T09:28:04.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/how-aws-wickr-can-enable-secure-communications-for-the-australian-government-and-its-allies/",
    "content": "<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/Blog_Header_JA_20250929_AU-NSD_Wickr.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166001\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/Blog_Header_JA_20250929_AU-NSD_Wickr.png\" alt=\"豪州政府が AWS Wickr で実現する同盟国・同志国とのセキュアな通信\" width=\"1762\" height=\"992\"></a></p> \n<p>本ブログは 2025 年 4 月 24 日に公開された AWS Public Sector ブログ「<a href=\"https://aws.amazon.com/jp/blogs/publicsector/how-aws-wickr-can-enable-secure-communications-for-the-australian-government-and-its-allies/\">How AWS Wickr can enable secure communications for the Australian Government and its allies</a>」を翻訳したものです。</p> \n<p>メッセージングアプリケーションは、オーストラリア人のコミュニケーション方法においてますます中核的な存在となっています。<a href=\"https://www.acma.gov.au/publications/2023-12/report/communications-and-media-australia-how-we-communicate\">オーストラリア通信メディア庁 (ACMA)</a> の調査によると、オーストラリア人の約 5 人中 4 人が個人的な目的でメッセージングアプリケーションを使用していることが分かりました。これらのアプリは特に若いオーストラリア人の間で普及しており、18～24 歳の 92%、25～34 歳の 89% がつながりや交流のためにこれらのアプリを使用していると報告されています。</p> \n<p>また、<a href=\"https://www.apsc.gov.au/sites/default/files/2021-03/APS_Workforce_strategy_2025.pdf\">Australian Public Service (APS) Workforce Strategy 2025</a> (オーストラリア公共サービス人材戦略 2025) では、2025 年までに APS の労働力の半分がデジタルネイティブである Y 世代と Z 世代で構成されるようになることが認識されています。このように変わりゆく労働力構成を考慮すると、友人や家族とのチャットに使用するアプリと同じようなツールが職場でのコミュニケーションにおいても求められるようになることは自然な流れのように考えられます。</p> \n<p>しかし、一般消費者向けのメッセージングアプリケーションの使用は、オーストラリア政府機関にとって重大なセキュリティと主権のリスクをもたらし、政府の情報管理義務を満たすことを困難にしています。<a href=\"https://www.naa.gov.au/information-management/managing-information-assets/types-information/managing-social-media-and-instant-messaging-im\">Official guidance from the National Archives of Australia</a> (NAA: オーストラリア国立公文書館) の公式ガイダンスでは、「オーストラリア政府業務の一環として作成または受信されたインスタントメッセージの投稿は連邦記録である」と明確に述べられています。 <a href=\"https://www.anao.gov.au/\">Australian National Audit Office</a> (ANAO: オーストラリア会計検査院) は、<a href=\"https://www.defence.gov.au/\">国防省</a>のハンター級フリゲート艦プロジェクトの管理に関する業績監査報告書において、プロジェクトの記録管理の弱点を指摘し、特に国防省職員によるコンシューマーメッセージングアプリケーションの使用について「Signal、Zoom、WhatsApp などのアプリケーションは、公式情報の送信や保存に使用することはできない」と<a href=\"https://www.anao.gov.au/work/performance-audit/department-defences-procurement-hunter-class-frigates#footnote-166\">具体的に言及</a>しています。</p> \n<h2>セキュアでコンプライアントなメッセージング</h2> \n<p><a href=\"https://aws.amazon.com/wickr/\">Amazon Web Services (AWS) Wickr</a> は、エンドツーエンド暗号化メッセージングおよびコラボレーションサービスであり、政府機関が機密情報を保護し、<a href=\"https://www.legislation.gov.au/C2004A02796/2019-04-25/text\">Australia’s Archives Act 1983</a> (オーストラリアの公文書館法) などの法的要件を満たすために必要な高度なセキュリティ、管理制御、およびデータ保持機能を提供します。</p> \n<p>Wickr は、1 対 1 およびグループメッセージング、音声・ビデオ通話、ファイル共有、画面共有、位置情報共有を 256 ビット暗号化で保護します。データは、あるエンドポイントから別のエンドポイントへ移動する際に、不正アクセス、傍受、改ざんから保護されます。コンテンツの復号化に必要なキーにアクセスできるのは、意図された受信者のみであり、AWS でさえアクセスできません。Wickr は 2023 年 10 月に <a href=\"https://aws.amazon.com/about-aws/whats-new/2023/10/aws-wickr-aws-asia-pacific-sydney-region/\">AWS シドニーリージョン</a>で開始されました。</p> \n<p>きめ細かい管理制御により、ユーザーをセキュリティグループに編成し、そのレベルでの機能やコンテンツへのアクセスを制限できます。Wickr ネットワーク管理者は、望ましい結果を達成するためにカスタマイズされたポリシーを各グループに適用できます。パスワードのリセットやプロファイルのリモート削除が可能で、紛失または盗難されたデバイスに起因するデータ漏洩のリスクを軽減できます。</p> \n<p>Wickr ネットワーク管理者は、Wickr ネットワーク内の内部および外部コミュニケーションにデータ保持を設定および適用できます。これには、ゲストユーザー、外部チーム、その他のパートナーネットワークとの会話が含まれるため、組織との間で送受信されるメッセージやファイルを、完全にお客様の管理下にあるプライベートデータストアに保持でき、オーストラリア政府の記録管理義務への準拠をサポートします。</p> \n<p>Wickr は、<a href=\"https://www.cyber.gov.au/irap\">Information Security Registered Assessors Program</a> (IRAP: 情報セキュリティ登録評価者プログラム) プロセスに基づき、<a href=\"https://aws.amazon.com/blogs/security/2023-h2-irap-report-is-now-available-on-aws-artifact-for-australian-customers/\">独立した評価者による監査を受け</a>、 <a href=\"https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/ism\">Information Security Manual PROTECTED</a> (ISM: 情報セキュリティマニュアル準拠) レベルの要件を満たしていることを認定されました。この認定により、各省庁は、Wickr の使用に関して、情報管理および記録保持の要件に加えて、PROTECTED セキュリティ分類までの情報の取り扱いに関する要件を満たすことができます。</p> \n<p>Wickr は、ユーザーやチームが他の組織の Wickr ネットワーク内のユーザーとセキュアに通信できるよう、ネットワークフェデレーションを提供します。ユーザーグループを特定のフェデレーションルールに割り当て、選択した機関やパートナーへのアクセスを制限し、個々のセキュリティグループに対してゲストユーザーアクセス機能を許可または無効にできます。</p> \n<p>Wickr は現在、アジアパシフィック (シンガポール、シドニー、東京)、カナダ (中部)、ヨーロッパ (フランクフルト、ロンドン)、および米国の米国東部 (バージニア北部) リージョンの AWS リージョンで利用可能であり、2024 年には追加のリージョンが開始される予定です。これにより、確立された同盟国・同志国、新興パートナーとのセキュアなコラボレーションを迅速かつ簡単に設定できます。例えば、次の図に示すように、オーストラリア政府機関は、英国、米国、日本政府の対応機関と Wickr ネットワークフェデレーションを設定できます。</p> \n<div id=\"attachment_165987\" style=\"width: 949px\" class=\"wp-caption alignnone\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/067.AWS_2025.png\"><img aria-describedby=\"caption-attachment-165987\" loading=\"lazy\" class=\"size-full wp-image-165987\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/067.AWS_2025.png\" alt=\"\" width=\"939\" height=\"547\"></a>\n <p id=\"caption-attachment-165987\" class=\"wp-caption-text\">図 1. AWS シドニー、ロンドン、東京、バージニア北部リージョン間の Wickr フェデレーション</p>\n</div> \n<h2>コミュニケーションを保護する</h2> \n<p>従業員は今後も、友人や家族とのチャットや職場での生産性向上のためにメッセージングアプリを使い続けるでしょう。これらのアプリの多くは政府機関にリスクをもたらしますが、Wickr はエンドツーエンド暗号化と管理制御、データ保持、データレジデンシー制御を組み合わせることで、お客様の目標達成と、内部およびオーストラリアの主要セキュリティパートナーとの安全なコミュニケーションを支援します。</p> \n<p>詳細については、<a href=\"https://aws.amazon.com/wickr/\">AWS Wickr のウェブページ</a>をご覧になるか、<a href=\"mailto:wickr-interest@amazon.com\">メール</a>にてお問い合わせください。</p> \n<h2>著者について</h2> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/Andrew_McBride.jpg\" alt=\"Andrew McBride\" width=\"130\">\n  </div> \n  <h4 class=\"lb-h4\">Andrew McBride</h4> \n  <p>Andrew は オーストラリアのキャンベラを拠点に、国家安全保障・防衛 (NSD) セクターのお客様を担当する AWS のシニアソリューションアーキテクトです。Andrew は 20 年以上の経験を持ち、実践的なアナリストやソフトウェア開発者から戦略的計画まで幅広く携わってきました。オーストラリア国立大学の National Security College にて国家安全保障政策の修士号を取得しています。</p> \n </div> \n <p>このブログは WWPS Proposal Writer 中村昌幸が翻訳しました。</p> \n</footer>"
  },
  {
    "title": "週刊AWS – 2025/9/22週",
    "date": "2025-09-29T02:16:20.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-weekly-20250922/",
    "content": "<p>みなさん、こんにちは。ソリューションアーキテクトの西村です。<br> 今週も <a href=\"https://aws.amazon.com/jp/blogs/news/tag/%E9%80%B1%E5%88%8Aaws/\">週刊AWS</a> をお届けします。</p> \n<p>2025 年 10 月 6 日(月) に 「<a href=\"https://aws.amazon.com/startups/events/tranium-model-knowledge-share-20251006\" target=\"_blank\" rel=\"noopener\">Trainium x モデル開発最前線！ – カラクリ、Upstage、AWS 3社合同セミナー</a>」というイベントが開催されます。普段 AI を利用されている方は多くいると思いますが、LLM 開発をするといった機会はそう多くないと思います。本セミナーでは、AWS が最新世代の AI 学習チップ「Trainium2」の技術アップデートと性能優位性から始まり、Upstage 社の先進的な AI Solution と Karakuri 社と開発した最新版の LLM 詳細、そして Trainium でコスト効率良く学習させた技術ノウハウがお聞きいただけます。これからのAI時代に先駆け、AI 導入を具体的に検討している企業の方にとって技術選定の判断材料などの知識を得られる機会となります。ぜひご登録ください。</p> \n<p>それでは、先週の主なアップデートについて振り返っていきましょう。</p> \n<p><span id=\"more-165628\"></span></p> \n<h4>2025年9月22日週の主要なアップデート</h4> \n<ul> \n <li>9/22(月) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-flow-designer-analytics-mode/\" target=\"_blank\" rel=\"noopener\">Amazon Connect フローデザイナーでアナリティクスモードをサポート開始</a><br> Amazon Connect のフローデザイナーで新しい分析モードが利用可能になりました。この機能により、顧客が IVR や自動応答システムのどこでエラーになったり離脱したりするかを可視化できます。例えば会話型AIのやり取りがエージェントキューへの転送につながった回数や、フロー設定のエラーによって顧客が間違ったキューに振り分けられた回数を確認することができます。これまでフローの問題点を特定するのは困難でしたが、データに基づいて改善点を見つけられるため、より良い顧客体験を提供できます。詳細は<a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/monitor-flow-performance.html\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-contact-lens-redaction-7-languages/\" target=\"_blank\" rel=\"noopener\">Amazon Connect Contact Lens が 5つの追加言語で機密データ編集機能を提供開始</a><br> Amazon Connect Contact Lens で機密データの自動編集機能が ５つの言語 (フランス語、ポルトガル語、イタリア語、ドイツ語、スペイン語) に対応しました。これまで英語のみだった個人情報やクレジットカード番号などの自動マスキング機能が多言語で利用できるようになり、グローバル企業のコールセンターでも顧客プライバシーを効率的に保護できます。詳細は<a href=\"https://aws.amazon.com/connect/contact-lens/\" target=\"_blank\" rel=\"noopener\">こちらの公式ページをご参照ください。</a></li> \n  </ul> </li> \n <li>9/23(火) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ec2-r8gb-instances/\" target=\"_blank\" rel=\"noopener\">Amazon EC2 R8gb インスタンスが一般提供</a><br> Amazon EC2 R8gb インスタンスが一般提供されました。AWS Graviton4 プロセッサを搭載し、従来の Graviton3 と比較して最大 30% のコンピューティング性能向上を実現します。最大 150 Gbps の EBS 帯域幅により、高性能データベースや NoSQL データベースのワークロードで優れたパフォーマンスを発揮できます。最大 768 GiB のメモリと 200 Gbps のネットワーク帯域幅を提供し、大規模なアプリケーションにも対応可能です。バージニア北部リージョンとオレゴンリージョンで利用できます。</li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-rds-cross-region-cross-account-snapshot-copy/\" target=\"_blank\" rel=\"noopener\">Amazon RDS がリージョン間およびアカウント間スナップショットコピーを発表</a><br> Amazon RDS で、スナップショットの別リージョン・別アカウントへのコピーが 1 回の操作で実行できるようになりました。従来は 2 段階の操作が必要でしたが、今回のアップデートで中間スナップショットが不要となり、コスト削減と復旧時間の短縮を実現できます。ランサムウェア攻撃やリージョン障害時のデータ保護に特に有効で、カスタムスクリプトによる監視も不要になります。詳細は<a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/aws-license-manager-shared-managed-active-directory\" target=\"_blank\" rel=\"noopener\">AWS License Manager が AWS Managed Active Directory における複数アカウントの共有機能サポート開始</a><br> AWS License Manager で複数のAWSアカウント間でのAWS Managed Active Directoryの共有をサポートしました。これまで各 AWS アカウントごとに Active Directory を設定する必要がありましたが、複数アカウント間で一つの Directory を共有できるようになります。Microsoft Office や Visual Studio のライセンス管理を一元化でき、IT 運用の負荷軽減とコスト削減が期待できます。詳細は<a href=\"https://docs.aws.amazon.com/license-manager/\" target=\"_blank\" rel=\"noopener\">こちらのユーザーガイドをご参照ください。</a></li> \n  </ul> </li> \n <li>9/24(水) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ec2-auto-scaling-forced-cancellation-instance/\" target=\"_blank\" rel=\"noopener\">Amazon EC2 Auto Scaling でインスタンスリフレッシュの強制キャンセルをサポート</a><br> Amazon EC2 Auto Scaling で、インスタンスリフレッシュの強制キャンセル機能が追加されました。従来はインスタンスの起動や終了処理の完了を待つ必要がありましたが、今回のアップデートにより即座にキャンセルできるようになりました。アプリケーションデプロイでサービス障害が発生した際など、緊急時に素早く別のデプロイを開始できるため、システムの復旧時間を大幅に短縮できます。詳細は<a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/cancel-instance-refresh.html#cancel-instance-refresh-cli\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/aws-announces-unlimited-network-burst-duration-i8g-i7i\" target=\"_blank\" rel=\"noopener\">AWS が EC2 I8g および I7i インスタンスで無制限のネットワークバースト期間を発表</a><br> AWS が EC2 I7i と I8g インスタンス (4xlarge より大きいサイズ) でネットワーク帯域幅のバースト時間制限を撤廃しました。従来はクレジット方式で一定時間のみ最大性能を発揮できましたが、今回のアップデートで常時安定した高速ネットワーク通信が可能になります。データベースやリアルタイム分析など、継続的な高スループットが必要なワークロードで予測可能なパフォーマンスを実現できます。</li> \n  </ul> </li> \n <li>9/25(木) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/postgresql-180-amazon-rds-database-preview-environment/\" target=\"_blank\" rel=\"noopener\">PostgreSQL 18.0 が Amazon RDS データベースプレビュー環境で利用可能に</a><br> Amazon RDS for PostgreSQL 18.0 が<a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-db-instance-in-preview-environment.html\" target=\"_blank\" rel=\"noopener\">プレビュー環境</a>で利用可能になりました。新機能として、マルチカラム B-tree インデックスの skip scan サポートや、並列 GIN インデックス構築、タイムスタンプベースの UUIDv7 サポートが追加されています。本番環境への導入前に、最新の PostgreSQL 機能を安全にテストできるため、アプリケーションの互換性確認やパフォーマンス検証に活用できます。プレビュー環境のインスタンスは最大 60 日間保持され、オハイオリージョンの料金体系が適用されます。詳細は<a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/PostgreSQLReleaseNotes/postgresql-versions.html#postgresql-version18\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/preview-amazon-s3-tables-console\" target=\"_blank\" rel=\"noopener\">S3 コンソールで Amazon S3 Tables のプレビューが可能に</a><br> Amazon S3 Tables を S3 コンソールから直接確認できるようになりました。これまで SQL クエリを書く必要がありましたが、今回のアップデートでテーブルのスキーマやサンプルデータをコンソール上で手軽に確認できます。データの構造や内容を素早く把握したい場面で特に便利で、セットアップも不要です。詳細は<a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables.html\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/aws-network-firewall-enhances-application-layer-traffic-controls\" target=\"_blank\" rel=\"noopener\">AWS Network Firewall がアプリケーション層トラフィック制御を強化</a><br> AWS Network Firewall でアプリケーション層のトラフィック制御が強化されました。従来は複数のパケットに分割された TLS や HTTP 通信の監視が困難でしたが、新しいデフォルトルールにより複雑なカスタムルールを書かずに適切にセキュリティ制御できるようになります。現代の暗号化技術や大きな HTTP リクエストにも対応し、セキュリティチームの運用負荷を軽減しながら強固な保護を実現できます。詳細は<a href=\"https://docs.aws.amazon.com/network-firewall/\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n  </ul> </li> \n <li>9/26(金) \n  <ul> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ebs-size-provisioned-performance-gp3-volumes/\" target=\"_blank\" rel=\"noopener\">Amazon EBS が汎用 (gp3) ボリュームの最大サイズとプロビジョンドパフォーマンスを増加</a><br> Amazon EBS の汎用 SSD (gp3) ボリュームが大幅にパワーアップしました。容量は従来の 16 TiB から 64 TiB へ 4 倍に、IOPS は 16,000 から 80,000 へ 5 倍に、スループットは 1,000 MiB/s から 2,000 MiB/s へ 2 倍に拡張されています。これまで複数のボリュームを組み合わせて使っていた大容量アプリケーションも、単一の gp3 ボリュームで対応可能になり、運用がシンプルになります。コンテナ環境や単一ボリューム構成のアプリケーションに特に効果的です。詳細は<a href=\"https://docs.aws.amazon.com/ebs/latest/userguide/general-purpose.html\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-rds-db2-offers-reserved-instances\" target=\"_blank\" rel=\"noopener\">Amazon RDS for Db2 でリザーブドインスタンスの提供を開始</a><br> Amazon RDS for Db2 で Reserved Instances の提供が開始されました。On-Demand と比較して最大 47% のコスト削減が可能です。サイズフレキシビリティ機能により、同じインスタンスファミリー内であれば購入した Reserved Instance の割引が自動的に異なるサイズのインスタンスにも適用されます。例えば db.r7i.2xlarge の Reserved Instance を購入すると、2 つの db.r7i.xlarge インスタンスに割引が適用されるため、柔軟な運用とコスト最適化を両立できます。詳細は<a href=\"https://aws.amazon.com/rds/reserved-instances/\" target=\"_blank\" rel=\"noopener\">こちらのドキュメントをご参照ください。</a></li> \n   <li><a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/aws-clean-rooms-incremental-id-mapping-entity-resolution\" target=\"_blank\" rel=\"noopener\">AWS Clean Rooms が AWS Entity Resolution による増分 ID マッピングをサポート</a><br> AWS Clean Rooms で AWS Entity Resolution を使った増分 ID マッピング処理がサポートされました。これまでは全データを処理する必要がありましたが、新規・変更・削除されたレコードのみを処理できるようになり、リアルタイムでのデータ同期が可能になります。測定事業者が広告主や出版社との共同分析において、オフライン購入データを常に最新状態で維持でき、キャンペーン効果の継続測定とコスト削減を同時に実現できます。</li> \n  </ul> </li> \n</ul> \n<p>徐々に涼しくなったとはいえ、いきなり暑くなったりとまだまだ残暑は続きそうです。体調管理に気をつけてお過ごしください。</p> \n<p>それでは、また来週！</p> \n<h1>著者について</h1> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2024/10/30/tdmnishi_profile.jpg\" alt=\"Tadami Nishimura\" width=\"150\">\n  </div> \n  <h3 class=\"lb-h4\"><a href=\"https://x.com/tdmnishi\" target=\"_blank\" rel=\"noopener\">西村 忠己(Tadami Nishimura) / @tdmnishi</a></h3> \n  <p>AWS Japan のソリューションアーキテクトとして、小売・消費財業種のお客様を担当しています。データガバナンスの観点から、お客様がデータ活用を効果的に行えるようなデモンストレーションなども多く行っています。好きなサービスは Amazon Aurora と Amazon DataZone です。趣味は筋トレで、自宅に徒歩０分のトレーニングルームを構築して、日々励んでいます。</p> \n </div> \n</footer>"
  },
  {
    "title": "週刊生成AI with AWS – 2025/9/22週",
    "date": "2025-09-29T00:57:36.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/weekly-genai-20250922/",
    "content": "<p>みなさん、こんにちは。AWS ソリューションアーキテクトの木村です。<br> 週末に屋外プールに行ったのですが暑かったり寒かったりと温度対策に苦戦しながらも季節の変わり目を感じました。</p> \n<p>9 月 30 日 に「<a href=\"https://aws-experience.com/apj/smb/event/a9fb2855-8aae-43ed-b8bd-3e5cb537682c\">Amazon Q Developer Meetup #3　生成AIの利用を中心としたソフトウェア開発の新しいアプローチであるAI-DLCおよびその活用実績のご紹介</a>」というイベントが開催されます。AI‑DLC (AI 駆動開発ライフサイクル) の概念と実際のインパクトをお伝えします。また実際の開発の中にその手法を取り入れた経験談もお客様事例としてご紹介いただきます。ぜひご参加ください！</p> \n<p>「<a href=\"https://pages.awscloud.com/jp-genai-accelerator-program-reg.html\">AWS ジャパン生成 AI 実用化推進プログラム</a>」も非常に多くの申し込みをいただいています。引き続き募集中ですのでよろしくお願いします。</p> \n<p>それでは、9 月 22 日週の生成 AI with AWS 界隈のニュースを見ていきましょう。</p> \n<p><span id=\"more-165919\"></span></p> \n<p><strong>さまざまなニュース</strong></p> \n<ul> \n <li style=\"list-style-type: none\"> \n  <ul> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/tokio-marine-ai-dlc/\"><strong>AWS生成AI国内事例ブログ「東京海上日動システムズ株式会社様の AWS 生成 AI 事例：金融業界初 AI-DLC Unicorn Gym による開発変革への挑戦」を公開</strong></a><br> 東京海上日動システムズ株式会社様が金融業界初となる AI-DLC Unicorn Gym を2025年8月に実施しました。本ブログでは、開発生産性の抜本的向上を目指す AI-DLC（AI-Driven Development Life Cycle）の取り組みについて紹介しています。AI-DLC（AI-Driven Development Life Cycle）は要件定義からリリースまでの開発プロセス全体に AI を組み込む手法で、従来2週間かかっていた1スプリントを1日や半日の「Bolt」という単位に圧縮する開発手法(<a href=\"https://aws.amazon.com/jp/blogs/news/ai-driven-development-life-cycle/\">参考</a>)です。2日間のワークショップで実際に動作するシステムの初期版を4つのチームが完成させた成果をレポートしています。</li> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/deepseek-v3-1-now-available-in-amazon-bedrock/\"><strong>ブログ記事「DeepSeek-V3.1 モデルが Amazon Bedrock で利用可能に」を公開</strong></a><br> DeepSeek-V3.1 モデルが Amazon Bedrock でフルマネージド基盤モデルとして利用可能になりました。本ブログでは、思考モードと非思考モードを切り替えられるハイブリッドオープンウェイトモデルである点や、以前のバージョンのモデルと比較してツール使用とエージェントタスクにおいてパフォーマンスが改善された点を解説しています。また100超の言語サポートや具体的な使用開始手順も含めて紹介しています。</li> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/qwen-models-are-now-available-in-amazon-bedrock/\"><strong>ブログ記事「Qwen モデルが Amazon Bedrock で利用可能に」を公開</strong></a><br> Alibaba の Qwen3 モデル4種類 (Qwen3-Coder-480B-A35B-Instruct、Qwen3-Coder-30B-A3B-Instruct、Qwen3-235B-A22B-Instruct-2507、Qwen3-32B) が Amazon Bedrock で利用可能になりました。本ブログでは、各モデルの特徴やユースケースの違い、エージェンティック機能・ハイブリッド思考モード・ロングコンテキスト処理などの新機能について詳しく説明しています。</li> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/migrate-from-anthropics-claude-3-5-sonnet-to-claude-4-sonnet-on-amazon-bedrock/\"><strong>ブログ記事「Amazon Bedrock における Anthropic の Claude 3.5 Sonnet から Claude 4 Sonnet に移行する」を公開</strong></a><br> 本ブログでは、Amazon Bedrock における Anthropic の Claude 3.5 Sonnet から Claude 4 Sonnet への移行方法を解説しています。Claude 4 Sonnet はコンテキストウィンドウが 1M トークンに拡張され、ネイティブ推論メカニズムや高度なツール使用機能を導入しています。API の変更点、プロンプトエンジニアリングの考慮事項、新しい拡張思考機能の戦略的活用方法など移行のポイントを紹介しています。</li> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/harness-amazon-bedrock-agents-to-manage-sap-instances/\"><strong>ブログ記事「Amazon Bedrock エージェントで SAP インスタンスを管理」を公開</strong></a><br> 本ブログでは、Amazon Bedrock Agentsを活用してSAPインスタンスの開始と停止、ヘルス状態とパラメータ値の確認などの基本的なSAP運用タスクの実行を支援する使用例を紹介しています。SAPControl Web サービスと連携する Lambda 関数の作成から Bedrock エージェントの設定まで、自然言語で SAP システムを操作できるソリューションの構築手順を解説しています。</li> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/interactive-code-review-with-amazon-q-developer-for-github/\"><strong>ブログ記事「Amazon Q Developer for GitHub によるインタラクティブなコードレビュー体験の紹介」を公開</strong></a><br> 本ブログでは、Amazon Q Developer for GitHub に新たに追加された対話型コードレビュー機能について紹介しています。/q コマンドによるインタラクティブな質問機能、スレッド化された検出結果の要約表示、GitHub 内での変更適用など、コードレビューの効率化を実現する新機能を紹介しています。この新機能により、コードレビューの待ち時間が短縮が期待されます。</li> \n   <li><a href=\"https://aws.amazon.com/jp/blogs/news/accelerate-ai-agent-development-with-the-nova-act-ide-extension/\"><strong>ブログ記事「Nova Act IDE 拡張機能で AI エージェント開発を加速」を公開</strong></a><br> Nova Act IDE 拡張機能が発表され、Visual Studio Code、Cursor、Kiro などの IDE から直接ブラウザ自動化エージェントを構築できるようになりました。本ブログでは、自然言語でワークフローを記述してスクリプトを生成する機能、ノートブックスタイルのビルダーモード、統合されたブラウザテスト機能など、Nova Act 拡張機能の主要な特徴と使用方法を紹介しています。</li> \n  </ul> </li> \n</ul> \n<p><strong>サービスアップデート</strong></p> \n<ul> \n <li style=\"list-style-type: none\"> \n  <ul> \n   <li><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2025/09/amazon-nova-act-extension-build-test-ai-agents-ide/\"><strong>Amazon Nova Act 拡張機能: IDE 内で AI エージェントを構築・テスト</strong></a><br> Amazon Nova Act 拡張機能 が発表されました。Amazon Nova Act は、Webブラウザ上でアクションを実行するためのAIモデルです。本機能は、Visual Studio Code や Cursor などの IDE 内で Web ベースの自動化エージェント開発ができる拡張機能です。従来はコーディングとテスト環境の複数のツールを行き来する必要がありましたが、自然言語でのスクリプト作成からブラウザテストまでを 1 つの画面で完結できるようになりました。IDE の拡張機能マーケットプレイスから無償で利用可能です。詳細は<a href=\"https://aws.amazon.com/blogs/aws/accelerate-ai-agent-development-with-the-nova-act-ide-extension\">こちらの Blog 記事</a>をご参照ください。</li> \n   <li><a href=\"https://aws.amazon.com/jp/about-aws/whats-new/2025/09/amazon-bedrock-agentcore-runtime-browser-code-interpreter-vpc-privatelink-cloudformation-tagging/\"><strong>Amazon Bedrock AgentCore Runtime、Browser、Code Interpreter が VPC、AWS PrivateLink、CloudFormation、およびタグ付けのサポートを追加</strong></a><br> Amazon Bedrock AgentCore の Runtime、Browser、Code Interpreter が VPC 接続、AWS PrivateLink、CloudFormation、タグ付けに対応しました。これまでインターネット経由でのアクセスが必要だった AI エージェントが、VPC 内のプライベートリソース (データベースや内部 API) に直接安全に接続できるようになります。CloudFormation によるインフラ自動化とタグ付けによるコスト管理も可能になり、エンタープライズ環境での AI エージェント運用がより実用的になりました。現在プレビュー版でバージニア北部、オレゴン、シドニー、フランクフルトリージョンで利用可能です。詳細は<a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/agentcore-vpc.html\">こちらのドキュメント</a>をご参照ください。</li> \n  </ul> </li> \n</ul> \n<h1>著者について</h1> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2024/09/22/2JuY68JnyuKVqUN1727048653_1727048687.png\" alt=\"Naoto Kimura\" width=\"150\">\n  </div> \n  <h4 class=\"lb-h4\"><a href=\"https://x.com/_kimunao\" target=\"_blank\" rel=\"noopener\">木村 直登(Naoto Kimura)</a></h4> \n  <p>AWS Japan のソリューションアーキテクトとして、製造業のお客様に対しクラウド活用の技術支援を行なっています。最近は AI Agent と毎日戯れており、AI Agent 無しでは生きていけなくなっています。好きなうどんは’かけ’です。</p> \n </div> \n</footer>"
  },
  {
    "title": "Gitコマンド覚えなくてOK！VSCode「Git Graph」で始める超かんたんGit入門 | 初心者向け基本操作・使い方ガイド",
    "date": "2025-09-28T12:10:43.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/rikuogawa/articles/083025a97ede40",
    "content": "こんにちは！\n「gitのコマンドって多すぎて、覚えるだけで疲れるんだよなあ…」と思ったことはありませんか？\nよく「エンジニアならgitくらいは暗記して当然！」なんて空気がありますが、正直それで挫折する人も多いはずです。ぼくも昔は「git push ってどっちが先だっけ？ pull だっけ？」と毎回ググっていました。\nでも、安心してください。\n実は コマンドを全部覚えなくても、マウスぽちぽちだけでgit操作はできる んです。\n今回紹介するのは VSCode の拡張機能「Git Graph」。\nGUIで直感的に操作できる ので、最初にこれを使うだけで「gitの苦手意識」がかなり減ります。\n今..."
  },
  {
    "title": "GPUなしローカルでも高速・高精度なOCRができるOnnxOCRが凄い",
    "date": "2025-09-28T10:36:19.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/harumikun/articles/fb9c435acf4070",
    "content": "社内のDXを進めていく中でアナログデータをOCRするという要件がそこそこあるのですが、お堅い企業だとクラウド利用禁止だったり低スペPCしかなかったりの制約があり、エッジで動作する汎用OCRで何か良いのないかなーと探していたら、素晴らしいライブラリを見つけました。\n日本語で紹介している記事が全く見つからなかったので、AI驚き屋みたいに紹介していきます。\n\n OnnxOCRとは\nhttps://github.com/jingsongliujing/OnnxOCR\nOnnxOCRとは、PaddleOCRをベースにした軽量なOCRでpaddlepaddle深層学習フレームワークなしでも動作し、高..."
  }
]