[
  {
    "title": "vercel/next.js – v15.6.0-canary.42",
    "date": "2025-10-03T23:47:21.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.42",
    "content": "### Core Changes\n\n- telemetry track mcp server usage: #84471\n- simplify the way we check for turbopack config to ensure we support an empty turbopack object: #84494\n- perf: Use synchronous IO when cleaning `distDir` in `next dev` and `next build`: #84472\n- Make turbopack the default bundler for custom servers: #84281\n- [segment cache]: fix interception route handling: #84497\n- Upgrade React from `a757cb76-20251002` to `85c427d8-20251003`: #84496\n\n### Misc Changes\n\n- fix: Missing link in Lazy Loading docs: #84473\n- docs: simplify streaming metadata: #84253\n- make withRspack idempotent: #84482\n- Turbopack: Use strongly consistent reads in `random_change` unit test: #84505\n\n### Credits \n\nHuge thanks to @huozhi, @joao4xz, @icyJoseph, @lukesandberg, @bgw, and @ztanner for helping!\n"
  },
  {
    "title": "AWS DMS データの再同期によるデータ一貫性",
    "date": "2025-10-03T09:41:20.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-dms-data-resync/",
    "content": "<p><em>本投稿は、 Suchindranath Hegde と Mahesh Kansara と Sridhar Ramasubramanian による記事 「<a href=\"https://aws.amazon.com/jp/blogs/database/data-consistency-with-aws-dms-data-resync/\" target=\"_blank\" rel=\"noopener\">Data consistency with AWS DMS data resync</a>」を翻訳したものです。</em></p> \n<p>この投稿では、<a href=\"https://aws.amazon.com/dms/\" target=\"_blank\" rel=\"noopener\">AWS Database Migration Service</a> の データの再同期機能について詳しく説明します。これは DMS バージョン 3.6.1 で導入された機能で、データベース移行中のデータの不整合を検出して解決するので、手動による修正が必要ありません。<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html\" target=\"_blank\" rel=\"noopener\">データの再同期</a> を使用することで、ソースとターゲットデータベース間のデータ検証によって特定されたデータの不整合が識別され、対処されます。ここでは、データの再同期機能を有効にする手順と、例を通じてデータの不整合を特定する方法について説明します。</p> \n<p>データの再同期が利用可能になる前は、データの不整合に対してユーザーの介入が必要でした。例えば、フルロードと変更データキャプチャ (CDC) のタスクでテーブルの再ロードを実行したり、ターゲットのレコードを手動で更新したりする必要がありました。データの再同期は、AWS DMS が Oracle か SQL Server から PostgreSQL か <a href=\"https://aws.amazon.com/rds/aurora/features/\" target=\"_blank\" rel=\"noopener\">Amazon Aurora PostgreSQL </a>への移行をサポートしているすべての <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\" target=\"_blank\" rel=\"noopener\">リージョン</a> で利用可能です。</p> \n<h2>AWS DMS データの再同期の設定</h2> \n<p>データの再同期は、DMS データ検証で特定された不一致を読み取り、ソースから現在の値を取得し、それをターゲットに適用してターゲット上のレコードを同期することによって実行されます。フルロードのみのタスクの場合、再同期が有効になっていると、すべてのテーブルが検証された直後に実行されます。CDC タスクの場合、再同期はタスク設定を通じてスケジュールする必要があり、その時点で、タスクは CDC とデータ検証を一時停止することで書き込みの競合を最小限に抑えます。</p> \n<p><a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html#CHAP_DataResync.Bestpractices\" target=\"_blank\" rel=\"noopener\">ベストプラクティス</a>で推奨されているように、ソースデータベースのアクティビティが少ないタイミングに、再同期ウィンドウを短時間でスケジュールすることをお勧めします。これにより、CDC が一時停止することによるレイテンシーのスパイクを最小限に抑えることができます。</p> \n<p>データの再同期を設定するには、タスクの<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Task.CDC.html\" target=\"_blank\" rel=\"noopener\">作成</a>または<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.Modifying.html\" target=\"_blank\" rel=\"noopener\">変更</a>時に有効にする必要があります。AWS DMS コンソールで、<strong>データの再同期</strong>の下にある<strong>再同期のスケジュール</strong>を選択します。以下のスクリーンショットに示すとおりです。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65470\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-1-3-1.png\" alt=\"\" width=\"2238\" height=\"482\"></p> \n<p>再同期スケジュールは、Cron 式を使用してデータ再同期の実行をスケジュールします。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">* * * * * \n| | | | | \n| | | | | \n| | | | +---- Day of Week (0-6) \n| | | +------ Month (1-12)\n| | +-------- Day of Month (1-31)\n| +---------- Hour (0-23)\n+------------ Minute (0-59)</code></pre> \n</div> \n<p>例えば、以下の設定では、データの再同期を土曜日の深夜に実行するようにスケジュールしています：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">\"ResyncSettings\": \n{\n    \"EnableResync\": true,\n    \"ResyncSchedule\": \"0 0 * * 6\", // Run Saturday at midnight \n    \"MaxResyncTime\": 360,  // Run for maximum of 360 minutes, or 6 hours \n    \"ValidationTaskId\": \"\" //Optional, used only if validation is performed as a separate Validation only task \n}</code></pre> \n</div> \n<p>その他の例については、<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html#CHAP_DataResync.configurations\" target=\"_blank\" rel=\"noopener\">データ再同期の設定と例</a>を参照してください。</p> \n<p>AWS DMS はデータ再同期で PostgreSQL ターゲットエンドポイントに <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.html#CHAP_DataResync.Troubleshooting.v2table\" target=\"_blank\" rel=\"noopener\">awsdms_validation_failures_v2</a> テーブルを作成します。このテーブルの構造は、以下のスクリーンショットに示されています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65471\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-2-2-1.png\" alt=\"\" width=\"2886\" height=\"726\"></p> \n<p>このテーブルは、検証プロセス中にプライマリキーを使用してソースのデータを参照することで、ターゲットテーブルの不一致を追跡し対処するために参照されます。AWS DMS バージョン 3.6.1 以上にタスクをアップグレードまたは移行する際、アップグレード前に発生した検証の失敗は自動的に再同期されません。アップグレードによる検証の失敗に対処するには、テーブルの再ロードまたは再検証を開始する必要があります。アップグレード後に発生する新しい検証の失敗は、<code>awsdms_validation_failures_v2</code> テーブルを通じて追跡され、再同期されます。</p> \n<p>再同期実行中に、AWS DMS はタスクタイプに応じて以下の一連のステップを実行します。各ステップについて、タスクタイプに応じて以下のメッセージが CloudWatch ログに記録されます：</p> \n<p>フルロード と CDC タスク、または CDC タスクの場合：</p> \n<ol> \n <li>再同期実行のトリガー： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Data Resync Manager schedule window time matched to start resync</code></pre> \n  </div> </li> \n <li>検証の一時停止： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Trying to STOP validation before resync process. (resync_manager.c:331)</code></pre> \n  </div> </li> \n <li>CDC の一時停止： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Data Resync Manager sending command to sorter to PAUSE applying changes to target.</code></pre> \n  </div> </li> \n <li>テーブルの再同期： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[RESYNC_UNLOAD ]I: Sent ctrl command for Resync Unload of table with id: 1</code></pre> \n  </div> </li> \n <li>CDC の再開： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Data Resync Manager sending command to sorter to RESUME applying changes to target</code></pre> \n  </div> </li> \n <li>検証の再開： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC ]I: Trying to RESUME validation after resync process</code></pre> \n  </div> </li> \n</ol> \n<p>フルロードのみのタスクの場合、検証プロセスが完了した後に再同期マネージャーがトリガーされるため、スケジュールを指定する必要はありません。</p> \n<ol> \n <li>再同期実行のトリガー： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[DATA_RESYNC     ]I:  Data Resync Manager sending command to start up resync subtasks</code></pre> \n  </div> </li> \n <li>テーブルの再同期： \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">[TASK_MANAGER    ]I:  All tables are loaded. Validation is finished. Waiting for resync to finish...  (replicationtask.c:4953)\n [DATA_RESYNC     ]I:  Stopped Data Resync Manager, exiting thread \n</code></pre> \n  </div> </li> \n</ol> \n<h2>AWS DMS データの再同期のユースケース</h2> \n<p>AWS DMS のデータの再同期が有効なユースケースはいくつかあります。このセクションでは、2 つの例を見ていきます。</p> \n<h3>ターゲットでレコードの誤削除</h3> \n<p>最初に検討するユースケースは、ターゲット上のレコードが誤って削除された場合です。このユースケースを説明するために、REVIEWS という名前のテーブルを Oracle から PostgreSQL に移行します。フルロードが完了した後、ターゲット上の数レコードを誤って削除します。以下の例では、ターゲット上の特定のレコードを削除するために、ターゲットに対して Data Manipulation Language (DML) ステートメントを実行します：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; delete from dms_test.reviews where review_id=8193 ;\n DELETE 1</code></pre> \n</div> \n<p>このシナリオでは、テーブルの再検証を試みるとデータ不整合が発生します。これは、以下のコマンドを入力するか、AWS コンソールで確認することができます：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">aws dms  describe-table-statistics --replication-task-arn arn:aws:dms:us-east-1:xxxxxxxxxxxx:task:xxxxxxxxxxxx --filters Name=table-name,Values=\"REVIEWS\"\n\n{\n    \"TableStatistics\": [ \n        {\n            \"SchemaName\": \"DMS_TEST\",\n            \"TableName\": \"REVIEWS\",\n            \"Inserts\": 0,\n            \"Deletes\": 0,\n            \"Updates\": 0,\n            \"Ddls\": 0,\n            \"AppliedInserts\": 0,\n            \"AppliedDeletes\": 0,\n            \"AppliedUpdates\": 0,\n            \"AppliedDdls\": 0,\n            \"FullLoadRows\": 3500,\n            \"FullLoadCondtnlChkFailedRows\": 0,\n            \"FullLoadErrorRows\": 0,\n            \"FullLoadStartTime\": \"2025-06-03T14:24:23.062000-05:00\",\n            \"FullLoadEndTime\": \"2025-06-03T14:24:25.408000-05:00\",\n            \"FullLoadReloaded\": false,\n            \"LastUpdateTime\": \"2025-06-03T14:35:12.009000-05:00\",\n            \"TableState\": \"Table completed\",\n            \"ValidationPendingRecords\": 0,\n<strong> \"ValidationFailedRecords\": 1,</strong>\n            \"ValidationSuspendedRecords\": 0,\n<strong> \"ValidationState\": \"Mismatched records\"</strong>\n        }\n    ] \n}</code></pre> \n</div> \n<p>データの再同期が有効になっている場合、ソースをチェックし、ターゲットに再適用することでこれらの不整合が処理されます。次の例では、<code>public.awsdms_validation_failures_v2</code> テーブルに反映されたレコードを確認できます。ここでは、<code>RESYNC_ACTION</code> が <code>UPSERT</code> であることから、ターゲットに再適用されたことがわかります。<code>RESYNC_TIME</code> は、アクションが実行されたタイムスタンプを示しています。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; select * from public.awsdms_validation_failures_v2 ;\n-[ RECORD 1 ]-+---------------------------\n RESYNC_ID     | 1029 \n TASK_NAME     | BESR3KWW2FCLLH4AJBFSEYSNW4 \n TABLE_OWNER   | dms_test \n TABLE_NAME    | reviews \n FAILURE_TIME  | 2025-06-03 19:33:26.410998 \n KEY_TYPE      | Row \n KEY           | {                         +\n              |         \"key\":  [\"8193\"]  +\n              | }\n FAILURE_TYPE  | MISSING_TARGET \n DETAILS       |\n RESYNC_RESULT | SUCCESS \n RESYNC_TIME   | 2025-06-03 19:35:06.322 \n RESYNC_ACTION | UPSERT</code></pre> \n</div> \n<p>CDC 中にターゲットで誤って数件のレコードを削除してしまうシナリオを想像してみてください。例えば、以下の SQL コマンドでは、ターゲット上の 20 件のレコードをランダムに削除します：</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; delete from dms_test.reviews where ctid in (select ctid from dms_test.reviews order by RANDOM() LIMIT 20);\n DELETE 20</code></pre> \n</div> \n<p>データの再同期がこれらのレコードを処理し、ターゲットに正常に適用されたことを確認できます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; select \"TABLE_OWNER\", \"TABLE_NAME\",\"RESYNC_ACTION\", \"FAILURE_TYPE\", \"RESYNC_RESULT\",count(*) from public.awsdms_validation_failures_v2 group by \"TABLE_OWNER\", \"TABLE_NAME\",\"RESYNC_ACTION\", \"FAILURE_TYPE\", \"RESYNC_RESULT\";\n-[ RECORD 1 ]-+---------------\n TABLE_OWNER | dms_test \n TABLE_NAME | reviews \n<strong>RESYNC_ACTION | UPSERT FAILURE_TYPE | MISSING_TARGET RESYNC_RESULT | SUCCESS count | 21</strong></code></pre> \n</div> \n<p>これまで説明したフルロードと CDC の両方のシナリオでは、データの再同期にテーブルの再検証が必要です。これにより、すべてのデータの不整合が適切に特定され、修正されます。この再検証が必要なのは、ターゲットの変更が AWS DMS によって行われたものではないためです。</p> \n<h3>テーブルエラー後の CDC タスクの再開</h3> \n<p>別のユースケースとして、移行中にテーブルがエラー状態になり、そのテーブルの変更がターゲットにレプリケートされない場合があります。この場合、タスクの実行中にテーブルを<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.ReloadTables.html\" target=\"_blank\" rel=\"noopener\">再ロード</a>することができます。ただし、CDC のみのタスクの場合、テーブルが失敗した時の LSN からタスクを再開する必要があります。AWS DMS タスク中に複数のテーブルがある場合、特定の時間枠から DMS タスクを開始すると、変更がターゲットに再度適用される場合があります。</p> \n<p>Oracle から PostgreSQL に ADMIN スキーマの 5 つのテーブルを移行するシナリオを考えてみましょう。次のスクリーンショットでは、5 つのテーブルのうち 3 つがエラーで終了しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65472\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-3-2.jpeg\" alt=\"\" width=\"1287\" height=\"561\"></p> \n<p>CloudWatch ログから、これらのテーブルが異なるタイムスタンプでエラーになったことがわかります。テーブルが異なるタイムスタンプで失敗したため、テーブルがエラーになった最も早いタイムスタンプを CDC 開始時間として使用し、これら 3 つのテーブルで CDC のみのタスクを作成する必要があります。この場合、最も早いタイムスタンプは <code>2025-06-05T03:40:13</code> です。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\"><strong>2025-06-05T03:40:13</strong> [TASK_MANAGER ]W: Table 'ADMIN'.'DMST1' was errored/suspended (subtask 0 thread 1). \n\n 2025-06-05T03:47:53 [TASK_MANAGER ]W: Table 'ADMIN'.'DMST2' was errored/suspended (subtask 0 thread 1). \n\n 2025-06-05T03:52:32 [TASK_MANAGER ]W: Table 'ADMIN'.'DMST5' was errored/suspended (subtask 0 thread 1). </code></pre> \n</div> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65473\" src=\"https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2025/09/02/image-4.jpeg\" alt=\"\" width=\"1122\" height=\"586\"></p> \n<p>データの再同期中に、検出された競合が解消されたことを確認できます。以下のスクリーンショットに示されています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-65474\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-5-1-1.jpeg\" alt=\"\" width=\"1287\" height=\"289\"></p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-sql\">dmsdb=&gt; select * from public.awsdms_validation_failures_v2 ;\n-[ RECORD 1 ]-+---------------------------\n RESYNC_ID     | 9949 \n TASK_NAME     | 6LOQBMAKQFDELB5WQB5BPG5Q74 \n TABLE_OWNER   | admin \n TABLE_NAME    | dmst1 \n FAILURE_TIME  | 2025-06-05 05:26:58.027987 \n KEY_TYPE      | Row \n KEY           | {                         +\n              |         \"key\":  [\"101\"]   +\n              | }\n FAILURE_TYPE  | MISSING_TARGET \n DETAILS       |\n RESYNC_RESULT | SUCCESS \n RESYNC_TIME   | 2025-06-05 05:30:06.423 \n RESYNC_ACTION | UPSERT</code></pre> \n</div> \n<h2>Conclusion</h2> \n<p>この投稿では、データの再同期について紹介し、その設定方法と、検証中にデータ再同期を使用して不整合を確認および修正できる 2 つのユースケースについて説明しました。詳細については、<a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.DataResync.html\" target=\"_blank\" rel=\"noopener\">AWS DMS データの再同期</a>を参照してください。</p> \n<h3>著者について</h3> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"aligncenter size-full wp-image-29797\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-6-1-1.jpeg\" alt=\"Suchindranath Hegde\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Suchindranath Hegde</h3> \n  <p><a href=\"https://www.linkedin.com/in/suchindranath-hegde/\" target=\"_blank\" rel=\"noopener\">Suchindranath</a> は Amazon Web Services のシニアデータ移行スペシャリストソリューションアーキテクトです。彼はお客様と協力して、AWS DMS を使用した AWS へのデータ移行に関するガイダンスと技術支援を提供しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"aligncenter size-full wp-image-29797\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-7-1-1.jpeg\" alt=\"Mahesh Kansara\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Mahesh Kansara</h3> \n  <p><a href=\"https://www.linkedin.com/in/mahesh-kansara/\" target=\"_blank\" rel=\"noopener\">Mahesh</a> は Amazon Web Services のデータベースエンジニアリングマネージャーです。彼は開発チームやエンジニアリングチームと緊密に連携して、移行およびレプリケーションサービスを改善しています。また、お客様と協力して、データベースや分析のさまざまなプロジェクトに関するガイダンスや技術支援を行い、AWS を使用する際のソリューションの価値向上を支援しています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img loading=\"lazy\" class=\"aligncenter size-full wp-image-29797\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/19/image-8-4.jpeg\" alt=\"Sridhar Ramasubramanian\" width=\"120\" height=\"160\">\n  </div> \n  <h3 class=\"lb-h4\">Sridhar Ramasubramanian</h3> \n  <p><a href=\"https://www.linkedin.com/in/sridhar-r/\" target=\"_blank\" rel=\"noopener\">Sridhar</a> はAWS Database Migration Service チームのデータベースエンジニアです。彼はAWSのお客様のニーズにより合うように、DMS サービスの改善に取り組んでいます。</p> \n </div> \n</footer>"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.41",
    "date": "2025-10-03T09:33:30.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.41",
    "content": "### Misc Changes\n\n- Turbopack: Only benchmark file IO on `next dev`: #84474\n- Turbopack: improve incremental build performance when deployment id changes: #84460\n\n### Credits \n\nHuge thanks to @bgw and @sokra for helping!\n"
  },
  {
    "title": "AWS Summit Japan 2025 AI健康アプリ「HugWay」を支えるAWSアーキテクチャ：テオリア・テクノロジーズの認知症プラットフォーム戦略",
    "date": "2025-10-03T08:17:44.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-summit-japan-2025-theoria-technologies-hugway-aws-architecture/",
    "content": "<p>このブログは、テオリア・テクノロジーズ株式会社と、アマゾン ウェブ サービス ジャパン合同会社 ソリューション アーキテクト 椎名優司による共著です。</p> \n<p>2025 年 6 月 25 日、26 日に幕張メッセで開催された <a href=\"https://aws.amazon.com/jp/summits/japan/\">AWS Summit Japan 2025</a> では、EXPO として AWS Village と呼ばれる展示エリアが用意され、90 を超える AWS 最新テクノロジー展示、先進企業 50 社による AWS 活用事例、パートナーによる 130 以上のソリューション展示など、270 を超える展示を行いました。その中に展開された Industries Pavilion では、各業界向けの最新の AWS ソリューションの展示や、実際に AWS を活用している企業のブースも併設されました。 テオリア・テクノロジーズ株式会社は Industries Pavilion のヘルスケア・ライフサイエンス業界向けブースに出展されました。</p> \n<p>今回のブログでは、Industries Pavilion のテオリア・テクノロジーズ株式会社ブースで展示されたAI健康アプリ「<a href=\"https://www.hugway.theo-one.com/\">HugWay(はぐうぇい)</a>」について、プラットフォーム概要やAWS アーキテクチャをご紹介します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/aws_summit_japan_2025_theoria-booth.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-166301\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/aws_summit_japan_2025_theoria-booth.png\" alt=\"\" width=\"700\" height=\"568\"></a></p> \n<h2>テオリア・テクノロジーズの認知症プラットフォーム事業とAI健康アプリ「HugWay」</h2> \n<p>テオリア・テクノロジーズは「認知症との向き合い方を、テクノロジーで変えていく。」をミッションに掲げ、エーザイグループの一員として認知症という社会課題の解決を目指しています。</p> \n<p>エーザイが創薬で貢献する一方、テオリアはデータサイエンス技術を中心に、「認知症にかかわる全ての人が自分らしくいるための『羅針盤』となる」世界を目指します。その核となるのが、認知症に関する様々なソリューションや人々をつなぐ「認知症プラットフォーム」の構築です。</p> \n<p>運動プログラムや食事指導、治療薬やデジタルを活用したものなど多岐にわたるソリューションを線で繋げ、一人ひとりへの「体験の最適化」を目指します。具体的には、健常・未病の方向けに認知機能の低下のリスクに「そなえる」、認知機能の低下が顕著になった方向けに医療機関受診・診断・治療への橋渡しを行う「つながる」、認知症やMCI（軽度認知障害）の診断後の治療・介護を「ささえる」の3つの領域でサービス開発を進め、ポータルサイト「<a href=\"https://theotol.soudan-e65.com/\">テヲトル</a>」がこれらを横断します。</p> \n<p>「そなえる」領域のサービスである脳に良い生活習慣をサポートするアプリ「<a href=\"https://www.hugway.theo-one.com/\">HugWay（はぐうぇい）</a>」は、2025年6月16日にリリースしたAIを搭載した健康管理アプリケーションです。「HugWay」は、ユーザーに寄り添うAIパートナーとの対話を中心に、歩数管理、睡眠管理、活動記録、脳に良い生活習慣コンテンツ、そして楽しく続けられる脳トレゲーム（ブレインワークアウト）を提供し、多くの人が抱える「漠然とした認知症への不安」や「義務感があって健康活動が続けられない」「老後の健康不安」といった悩みを解決します。</p> \n<h3>脳に良い生活習慣をサポートするアプリ「HugWay（はぐうぇい）」の特徴</h3> \n<h4>AIパートナーとの会話と記録</h4> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_01_hugmaru.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166230 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_01_hugmaru.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<p>AIパートナー「ハグまる」と日常の出来事や感じたことなど好きなテーマで話す事ができます。AIパートナーがユーザー自身の事や話した内容の一部を覚えて、寄り添った会話が特徴です。話せば話すほどにAIパートナーの「ハグまる」がユーザーの事を理解してくれて、共感し、時には健康に関するヒントや新しい活動を提案します。過去の会話内容も踏まえてパーソナライズされたコミュニケーションを提供し、孤独感の解消やモチベーション維持に繋げます。また、会話の記録はアプリで確認してふりかえる事ができます。</p> \n<h4>歩数や睡眠などの活動管理</h4> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_02_activity_logging.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166231 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_02_activity_logging.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<p>日々の歩数や活動量、睡眠データ、毎日の会話を自動で記録し、ダッシュボードで分かりやすく可視化します。歩数の目標設定機能もあり、AIパートナーとの会話の中で褒められたりと楽しみながら健康習慣の定着をサポートします。</p> \n<h4>脳活コンテンツ</h4> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_03_brain_workout.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166233 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_03_brain_workout-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<p>脳トレゲームとしてブレインワークアウトを搭載。計算問題や記憶ゲームなど、スキマ時間に手軽に楽しく取り組める全10種類のゲームです。脳の活性化を促し、認知機能の維持をサポートします。その他にも脳の健康情報サイトである「<a href=\"https://nou-lab.theo-one.com/\">脳ラボ</a>」と連携し、脳の健康を意識した食事や睡眠、運動などのコンテンツを提供します。</p> \n<h3>こんな方におすすめ</h3> \n<h4>脳の健康が気になる方</h4> \n<p>「何となく認知症は不安」、「とりあえず脳トレはやってるけど、認知症のそなえはよくわからない」といった方へ脳に良い生活習慣のサポートを「HugWay」が行います。</p> \n<h4>健康改善が必要な方</h4> \n<p>健康診断の結果や体調の変化を機に、生活習慣を見直したいと考えている方に、「HugWay」が寄り添います。</p> \n<h4>アクティブなシニア層</h4> \n<p>趣味や社会との繋がりを大切にし、これからも活動的な生活を送りたい方を「HugWay」が応援します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_04_conversation.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-166250 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_04_conversation-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\"></a></p> \n<h3>「HugWay」のシステム設計と運用基盤</h3> \n<p>「HugWay」 では、生成 AI によるユーザーの会話体験を中核に据え、継続利用を促す話題創出に向けた機能拡張性を担保しました。さらに、スケールと安全性を高めるために当社独自の ID 基盤を活用し、API ゲートウェイを開発して、モバイルからバックエンド、データ基盤までを疎結合のマイクロサービス群として設計しています。これにより、新しい会話体験や外部データ連携を小さく素早く追加可能にしました。また、トラフィックのスパイク時にも安定したレスポンスを維持し、ゼロトラスト前提の認証・認可でユーザーデータを保護します。さらに、DevOps 体制のもとで CI/CD とオブザーバビリティ基盤を活用し、継続的なフィードバックを取り込むことで、機能改善の速度とサービスの信頼性を同時に高めています。</p> \n<h3>「HugWay」のAWSアーキテクチャのご紹介</h3> \n<p>サービスとしてAPI機能を提供するバックエンド環境と、生成AIのオブザーバビリティ環境について紹介します。</p> \n<p>API を提供するバックエンドは AWS App Runner を中核に据え、オートスケーリングと負荷分散を適切に設計しています。構成は、当社 ID 基盤と連携する認証サーバー、生成 AI と連携するチャットサーバー、その他のアプリ機能を担うメインサーバーの3サーバー構成です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_01.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-166252\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_01-1024x582.png\" alt=\"\" width=\"1024\" height=\"582\"></a></p> \n<p><a href=\"https://aws.amazon.com/jp/apprunner/\">AWS App Runner</a>はウェブアプリケーションを自動的に構築するサービスであり、トラフィックに合わせてスケールし、Amazon Bedrockを含むほかAWSサービスとシームレスに連携させることができます。AWS App Runnerはフルマネージドサービスであり、インフラの構築や運用は不要です。開発者はコンテナレジストリに保存されているコンテナイメージ、もしくはレポジトリでホストされているコードをソースとして使用することでサービス(上記構成では各機能をもつサーバー)をデプロイできます。</p> \n<p><a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a>は生成AIアプリケーションやエージェントを構築するためのサービスであり、「HugWay」ではユーザーとAIパートナーの間でパーソナライズされたコミュニケーションを実現するために利用しています。ユーザーとの会話を実現するためにAIチャットサーバーが<a href=\"https://docs.aws.amazon.com/ja_jp/bedrock/latest/userguide/conversation-inference.html\">Converse API</a>を用いてAmazon Bedrockを利用しているほかに、会話内容からユーザーの特徴や傾向を分析したり、シームレスな会話体験を提供するため会話内容を要約して<a href=\"https://aws.amazon.com/jp/rds/aurora/\">Amazon Aurora</a>に保存し適宜参照し会話に活かすことで、ユーザーに寄り添った会話を実現しています。</p> \n<p>生成 AI のテレメトリーは過渡期にあり選定が難しかったため、「HugWay 」では OpenTelemetry を採用しその時最適なソリューションを選択する方法を採用しました。ベンダーに依存しない形でアプリケーションの観測性を高め、生成テキストの安全性検証や表現ルールの策定に活用しています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_02.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-166255\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/hugway_architecture_02-1024x577.png\" alt=\"\" width=\"1024\" height=\"577\"></a></p> \n<h2>おわりに</h2> \n<p>本ブログでご紹介したテオリア・テクノロジーズ株式会社の展示や関連する AWS サービスに関して、ご興味・ご質問をお持ちのお客様は<a href=\"https://aws.amazon.com/jp/contact-us/sales-support/\">お問い合わせフォーム</a>もしくは担当営業までご連絡ください。</p> \n<h2>著者について</h2> \n<h3>テオリア・テクノロジーズ株式会社</h3> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/tadashi_ota-150x150.png\">\n  </div> \n  <p><strong>太田 忠 (Tadashi Ota)</strong> プロダクトマネージャー<br> 予防、ヘルスケア領域を担当しており、認知症のそなえを推進しています。プロダクトマネジメントの他に事業戦略や組織、採用など幅広く活動しています。</p> \n </div> \n</footer> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/keigo_ando-150x150.png\">\n  </div> \n  <p><strong>安藤 圭吾 (Keigo Ando)</strong> プロダクト開発部シニアソフトウェアエンジニア<br> バックエンド・インフラを中心に、何でもやる縁の下の力持ちを目指しています。</p> \n </div> \n</footer> \n<h3>アマゾン ウェブ サービス ジャパン合同会社</h3> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img class=\"alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/yuji_shiina-150x150.jpg\">\n  </div> \n  <p><strong>椎名 優司 (Yuji Shiina) </strong> ソリューションアーキテクト<br> ヘルスケア・ライフサイエンス領域のお客様を中心に、クラウド利用の技術支援を通じてお客様のご要望を具現化するための活動をしています。</p> \n </div> \n</footer>"
  },
  {
    "title": "AIはどこまでテストができるのか？AIテストエージェントの現在地と課題",
    "date": "2025-10-03T07:15:43.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/ubie_dev/articles/dc6a0d8f74fd76",
    "content": "UbieでQAエンジニアをしているMayです。\nUbieでは、「テクノロジーで人々を適切な医療に案内する」というミッションの実現に向け、症状検索エンジン「ユビー」などのプロダクトを開発しています。事業が急成長するなかで、開発の質とスピードの両立は欠かせません。AI活用が当たり前になっていく中、Ubieでも「AI主導開発」を掲げ取り組んでいます。今回は「AI主導開発」の一角をなす、「自律テスト」についてお話します。\n\n AI-native Engineeringの到来とUbieの戦略\n最近、AIを使ったソフトウェア開発が、いよいよ現実的になってきました。AnthropicとCursorのエ..."
  },
  {
    "title": "AWS Parallel Computing Service (PCS)を利用したスケーラブルなクライオ電子顕微鏡データ解析環境",
    "date": "2025-10-03T06:07:18.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/scalable-cryo-em-on-aws-parallel-computing-service-pcs/",
    "content": "<p><img loading=\"lazy\" class=\"alignright size-full wp-image-4661\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/boofla88_a_close_up_image_of_a_protein_taken_by_an_electron_mic_dadd2dd4-f163-4c2b-9d71-bdc09c6b335d.png\" alt=\"Scalable Cryo-EM on AWS Parallel Computing Service (PCS)\" width=\"380\" height=\"212\"></p> \n<p>クライオ電子顕微鏡（Cryo-EM）は、創薬研究者が創薬に不可欠な生体分子の三次元構造を決定することを可能にします。Cryo-EMの導入が進むにつれ、科学者やITシステム管理者は、これらの顕微鏡によって毎日生成される数テラバイトのデータを効率的に処理する方法を模索してきました。これらの処理パイプラインには、スケーラブルで多様なワークロードに対応できるコンピューティング環境と、高速かつコスト効率に優れたストレージが必要です。</p> \n<p>AWS Parallel Computing Service (PCS)は、クラウドでハイパフォーマンスコンピューティング(HPC)クラスタを展開・管理するためのマネージドサービスです。Cryo-EMにPCSを使用することで、構造生物学者にとって一貫したユーザー体験を維持しながら、HPCインフラの構築と管理に伴う差別化につながらない重労働を軽減し、研究に迅速に取り掛かることができます。</p> \n<p>この投稿では、PCS上でCryo-EMに使用できる推奨リファレンスアーキテクチャを紹介し、一般的なアプリケーションである <a href=\"https://guide.cryosparc.com/processing-data/get-started-with-cryosparc-introductory-tutorial\">CryoSPARC</a> を使用した具体例を示します。また、可視化ツールとして <a href=\"https://www.cgl.ucsf.edu/chimerax/\">ChimeraX</a> について紹介し、一般的にクラウドでCryo-EMを実行するためのベストプラクティスについても解説します。</p> \n<h2>アーキテクチャの概要</h2> \n<div id=\"attachment_4649\" class=\"wp-caption aligncenter\" style=\"width: 2140px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4649\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.46.48@2x.png\" alt=\"Figure 1 - Architecture overview of CryoSPARC on AWS. The Slurm controller is deployed in an AWS service account, and the compute and storage resources are deployed in the user AWS account. FSx for Lustre and Amazon Elastic File Store (EFS) are both mounted to the cluster.\" width=\"2130\" height=\"1158\" aria-describedby=\"caption-attachment-4649\"></p> \n <p id=\"caption-attachment-4649\" class=\"wp-caption-text\">図1 – AWS上のCryoSPARCのアーキテクチャ概要。SlurmコントローラはAWSサービスアカウントに配置され、コンピュートとストレージリソースはユーザーAWSアカウントに配置されます。クラスタにはFSx for LustreとAmazon Elastic File Store (EFS)がマウントされています。</p> \n</div> \n<h2>セットアップと前提条件</h2> \n<p>PCSドキュメントに記載されている<a href=\"https://docs.aws.amazon.com/pcs/latest/userguide/getting-started_prerequisites.html\">前提条件</a>に加え、CryoSPARCのライセンスが必要です。ライセンスなしでこのガイドに従ってPCSクラスタを作成することは可能ですが、最終的にはソフトウェアをインストールしてテストジョブを実行するためにライセンスが必要になります。ライセンスを取得するには、<a href=\"https://guide.cryosparc.com/licensing\">Structura Biotechnology </a>にお問い合わせください。</p> \n<h2>共有ストレージを使用したクラスタの作成</h2> \n<p><a href=\"https://github.com/aws-samples/aws-hpc-recipes/\">HPC Recipes Library</a> は AWS のエンジニアリングチームとアーキテクチャチームが作成したテンプレートを共有するGitHubの公開リポジトリです。これにより、面倒な構築手順なしにHPCインフラをクラウド上に展開できます。この例に適した共有ストレージを備えたPCSクラスタを作成するには、AWS CloudFormationを使用してクラスタ全体を迅速に起動する <a href=\"https://github.com/aws-samples/aws-hpc-recipes/tree/main/recipes/pcs/getting_started\">PCS guidance for a one-click deployment</a>&nbsp;を利用できます。</p> \n<p>CloudFormationが起動するとパラメータ指定の画面が表示されます。ここにクラスターのログインノードにアクセスするためのSSHキーをプルダウンで指定するオプションが表示されます。その他のフィールドはすべてそのままにしておき、<strong>Create</strong> を選択してください。これにより、必要なネットワークの前提条件、ログインノードグループを含むクラスター、単一のデモ用コンピューティングノードグループ、/home用のEFSファイルシステム、および/shared用のLustreファイルシステムが作成されます。。</p> \n<p>準備が整うと<a href=\"https://us-east-2.console.aws.amazon.com/cloudformation/home?region=us-east-2#/stacks?filteringText=cryosparc&amp;filteringStatus=active&amp;viewNested=true\">CloudFormation console</a>&nbsp;に以下のスタックが表示されるはずです。図2はCloudFormationのスクリーンショットで、各スタックにデプロイされた内容の簡単な説明が含まれています。</p> \n<div id=\"attachment_4650\" class=\"wp-caption aligncenter\" style=\"width: 2196px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4650\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.47.28@2x.png\" alt=\"Figure 2: CloudFormation stacks created by hpc recipes template.\" width=\"2186\" height=\"746\" aria-describedby=\"caption-attachment-4650\"></p> \n <p id=\"caption-attachment-4650\" class=\"wp-caption-text\">図2: hpcレシピテンプレートによって作成されたCloudFormationスタック</p> \n</div> \n<p>また、PCSクラスタを手動で作成する場合や、アカウント内の既存のリソースを使用する場合は <a href=\"https://docs.aws.amazon.com/pcs/latest/userguide/getting-started.html\">PCS User Guide</a> の手順に従ってこれらのリソースを設定するだけです。</p> \n<h2>LustreファイルシステムのスループットのためのFSxの調整</h2> \n<p><a href=\"https://us-east-2.console.aws.amazon.com/cloudformation/home?region=us-east-2#/stacks?filteringText=cryosparc&amp;filteringStatus=active&amp;viewNested=true\">CloudFormation console</a> で<strong>View Nested </strong>のラジオスライダーをクリックして、デプロイしたテンプレートから作成されたさまざまなスタックを確認します。<strong>get-started-cfn-FSxLStorage</strong> で始まるスタックを見つけてクリックします。コンソールの右側にスタック情報が表示されたら、<strong>Outputs</strong> タブをクリックし、後ほど使用する <strong>FSxLustreFilesystemId</strong>&nbsp;の値をメモします。</p> \n<div id=\"attachment_4651\" class=\"wp-caption aligncenter\" style=\"width: 2016px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4651\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.48.08@2x.png\" alt=\"Figure 3: FSx for Lustre CloudFormation stack created by hpc recipes template.\" width=\"2006\" height=\"1338\" aria-describedby=\"caption-attachment-4651\"></p> \n <p id=\"caption-attachment-4651\" class=\"wp-caption-text\">図 3: hpc レシピテンプレートによって作成された FSx for Lustre CloudFormation スタック</p> \n</div> \n<p>CryoSPARC のインストールを成功させるには、FSx for Lustre システムのストレージ単位あたりのスループットを 250 MB/s/TiB に更新する必要があります。この処理には最大 20 分かかる場合がありますので、残りのクラスター設定を進める間、ファイルシステムの更新がバックグラウンドで完了する時間を確保するため、今すぐコマンドを実行しましょう。</p> \n<pre><code class=\"lang-bash\">aws fsx update-file-system \\\n    --file-system-id $FSX-LUSTRE-ID \\\n    --lustre-configuration PerUnitStorageThroughput=250\n</code></pre> \n<h2>追加のノードグループとキューの作成</h2> \n<p>最初のクラスタ作成が完了したら、いくつかのコンピュートノードグループとキューを作成します。AWS PCSのコンピュートノードグループは、Amazon Elastic Compute Cloud (Amazon EC2)のノード(インスタンスと呼称されます)の論理的な集合体です。これらは、あなたがジョブを実行する一時的なマシンとなります。AWS PCSキューは、スケジューラのネイティブ実装であるワークキューを軽量に抽象化したものです。ジョブはキューに投入され、キューは1つ以上のコンピュートノードグループにマッピングされます。CryoSPARCでは、レーンはPCSキューに相当します。</p> \n<p><code>compute-cpu</code>（c5a.8xlargeインスタンス）、<code>compute-single-gpu</code>（g6.4xlarge）、<code>compute-multi-gpu</code>（g6.48xlarge）の3つの新しい計算ノードグループを作成し、これらの計算ノードグループをそれぞれのキューにマッピングします。これらのインスタンスタイプは、私たちの内部テストに基づいて選定されました。処理パイプライン内の個々のタスクのスケーラビリティに関する詳細な説明は <a href=\"https://guide.cryosparc.com/setup-configuration-and-management/cryosparc-on-aws/performance-benchmarks\">CryoSPARC performance benchmarks</a> にて選定理由が説明されています。</p> \n<p>これらのノードグループはPCSコンソールから作成できますが、ここではAWS CLIで作成する方法を紹介します。このコマンドを実行して、<code>compute-1</code> の PCS Compute Node GroupのAMI ID、Instance Profile、Launch Template IDを取得し、出力を保存します。次の一連のコマンドでこれを使用して、追加のコンピュートノードグループを作成します:</p> \n<pre><code class=\"lang-bash\">aws pcs get-compute-node-group \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-identifier compute-1 \n</code></pre> \n<p>以下のコマンドを実行し、各コマンドの出力から計算ノードグループ名とIDを保存します。これを使用して、これらのノードグループをキューにマッピングします：</p> \n<pre><code class=\"lang-bash\">aws pcs create-compute-node-group \\\n    --compute-node-group-name compute-cpu \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --region $REGION \\\n    --subnet-ids $PRIVATE_SUBNET_ID \\\n    --custom-launch-template id=$COMPUTE_LT_ID,version='1' \\\n    --ami-id $AMI_ID \\\n    --iam-instance-profile $INSTANCE_PROFILE_ARN \\\n    --scaling-config minInstanceCount=0,maxInstanceCount=2 \\\n    --instance-configs instanceType=c5a.8xlarge\naws pcs create-compute-node-group \\\n    --compute-node-group-name compute-single-gpu \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --region $REGION \\\n    --subnet-ids $PRIVATE_SUBNET_ID \\\n    --custom-launch-template id=$COMPUTE_LT_ID,version='1' \\\n    --ami-id $AMI_ID \\\n    --iam-instance-profile $INSTANCE_PROFILE_ARN \\\n    --scaling-config minInstanceCount=0,maxInstanceCount=2 \\\n    --instance-configs instanceType=g6.4xlarge\naws pcs create-compute-node-group \\\n    --compute-node-group-name compute-multi-gpu \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --region $REGION \\\n    --subnet-ids $PRIVATE_SUBNET_ID \\\n    --custom-launch-template id=$COMPUTE_LT_ID,version='1' \\\n    --ami-id $AMI_ID \\\n    --iam-instance-profile $INSTANCE_PROFILE_ARN \\\n    --scaling-config minInstanceCount=0,maxInstanceCount=2 \\\n    --instance-configs instanceType=g6.48xlarge\n</code></pre> \n<p>以下のコマンドを実行して、ノードグループの作成状況を確認します：</p> \n<pre><code class=\"lang-bash\">aws pcs get-compute-node-group --region $region \\\n    --cluster-identifier $cluster-name \\\n    --compute-node-group-identifier $node-group-name\n</code></pre> \n<p>3つのノードグループそれぞれのステータスが <code>ACTIVE</code> になったら、キューの作成に進むことができます。各キューは1つ以上のノードグループにマッピングされ、これらのノードグループはキューに到着したジョブを処理するための一時的なインスタンスを供給する役割を担います。このクラスタでは、各キューを単一のノードグループにマッピングします。</p> \n<p><code>$NODE_GROUP_ID</code> はノードグループ名と同じではないことに注意してください。</p> \n<pre><code class=\"lang-bash\">aws pcs create-queue \\\n    --queue-name cpu-queue \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-configurations \ncomputeNodeGroupId=$COMPUTE_CPU_NODE_GROUP_ID\naws pcs create-queue \\\n    --queue-name single-gpu-queue \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-configurations computeNodeGroupId=$COMPUTE_SINGLE_GPU_NODE_GROUP_ID\naws pcs create-queue \\\n    --queue-name multi-gpu-queue \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --compute-node-group-configurations computeNodeGroupId=$COMPUTE_MULTI_GPU_NODE_GROUP_ID\n</code></pre> \n<p>次に、キューが正常に作成されたことを確認します：</p> \n<pre><code class=\"lang-bash\">aws pcs get-queue --region $REGION \\\n    --cluster-identifier $PCS_CLUSTER_NAME \\\n    --queue-identifier $PCS_QUEUE_NAME\n</code></pre> \n<p>ステータスが <strong>ACTIVE</strong>&nbsp;を返したら、キューの作成は完了です。クラスタログインノードにログインして、CryoSPARCをインストールします。</p> \n<p>Amazon EC2のコンソールを開き <strong>Instances</strong>に移動します。 <strong>検索バー</strong>で <code>aws:pcs:compute-node-group-id = <em>&lt;LOGIN_COMPUTE_NODE_GROUP_ID</em>&gt;</code> を検索し、<em>&lt;LOGIN_COMPUTE_NODE_GROUP_ID&gt;</em> をログインノードグループのIDに置き換えてエンターキーを押します。このインスタンスを選択し、<strong>Connect</strong>を選択します。次のページで、<strong>Session Manager</strong>を選択し、<strong>Connect</strong>を選択します。ブラウザのタブでターミナルセッションが開きます（これはSession Managerの優れた機能です）。ターミナルで、ユーザを<code>ec2-user</code>に変更します。ec2-userは、ジョブの投入と管理を行うSlurmの権限を持つクラスタ内のユーザです。</p> \n<pre><code class=\"lang-bash\">sudo su - ec2-user</code></pre> \n<p>クラスタのログインノードに接続したら、次のコマンドを実行して追加のSlurmパーティションを確認します：</p> \n<pre><code class=\"lang-bash\">sinfo</code></pre> \n<p>以下のように表示されます：</p> \n<pre><code class=\"lang-bash\">PARTITION AVAIL TIMELIMIT NODES STATE NODELIST\ndemo up infinite 4 idle~ compute-1-[1-4]\nsingle-GPU up infinite 4 idle~ single-GPU-[1-4]\nCPU up infinite 4 idle~ CPU-[1-4]\nmulti-GPU up infinite 4 idle~ multi-GPU-[1-4]</code></pre> \n<p>クラスタにログインできたので、CryoSPARCをインストールしてテストデータセットをダウンロードします。</p> \n<h2>CryoSPARCのインストールとテストデータセットのダウンロード</h2> \n<p>CryoSPARCのインストールとセットアップを簡単にするために、共有ファイルシステムにアプリケーションをインストールし、クラスタのキュー名に基づいてレーンを登録するシェルスクリプトを用意しました。これにアクセスするには、<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html\">キーペアを生成して</a>ログインノードにSSH接続します。ログインノードに接続したら、スクリプトをダウンロードして実行可能ファイルにしてください：</p> \n<pre><code class=\"lang-bash\">wget https://raw.githubusercontent.com/aws-samples/cryoem-on-aws-parallel-cluster/refs/heads/main/parallel-computing-service/pcs-cryosparc-post-install.sh</code></pre> \n<p>スクリプトを実行し、インストール用の共有ファイルシステムを指定します。<code>$LICENSE_ID</code>をCryoSPARCのライセンスに置き換えてください。最大1時間かかります。</p> \n<pre><code class=\"lang-bash\">chmod +x pcs-cryosparc-post-install.sh\nsudo ./pcs-cryosparc-post-install.sh $LICENSE_ID /shared/cryosparc /shared/cuda 11.8.0 11.8.0_520.61.05 /shared\n</code></pre> \n<p>インストールが完了したら、CryoSPARCサーバーを起動します：</p> \n<pre><code class=\"lang-bash\">/shared/cryosparc/cryosparc_master/bin/cryosparcm start</code></pre> \n<p>ログインノードを再起動した場合、CryoSPARCサーバーのstartコマンドを再度実行する必要があります。このコマンドを起動テンプレートのEC2ユーザーデータセクションに追加することで、このプロセスを自動化できます。Amazon EC2ユーザーデータの操作については <a href=\"https://docs.aws.amazon.com/pcs/latest/userguide/getting-started.html\">PCS User Guide</a>を参照してください。</p> \n<p>サーバーが正常に起動し、 <code>CryoSPARC master started</code> という確認メッセージが表示されたら、新しいユーザーを作成します：</p> \n<pre><code class=\"lang-bash\">cryosparcm createuser \\\n--email \"&lt;youremail@email.com&gt;\" \\\n--password \"&lt;yourpassword&gt;\" \\\n--username \"&lt;yourusername&gt;\" \\\n--firstname \"yourname&gt;\" \\\n--lastname \"&lt;yourlastname&gt;\"\n</code></pre> \n<p>完了したら、ログインノードからログアウトしてください。</p> \n<h2>CryoSparc UIへのアクセス</h2> \n<p>次に、先に生成したEC2キーペアを使用してSSHトンネルをCryoSPARCのログインノードに設定します：</p> \n<pre><code class=\"lang-bash\">ssh -i /path/to/key/key-name -N -f -L \\ localhost:45000:localhost:45000 ec2-user@publicIPofyourinstance</code></pre> \n<p>これを実行した後、ウェブブラウザで <a href=\"http://localhost:45000/\">http://localhost:45000</a>&nbsp;にアクセスすると、CryoSPARC のログイン画面が表示されます。</p> \n<div id=\"attachment_4652\" class=\"wp-caption aligncenter\" style=\"width: 1830px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4652\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.58.05@2x.png\" alt=\"Figure 4: From the web browser login page, access CryoSPARC using the newly create user credentials.\" width=\"1820\" height=\"920\" aria-describedby=\"caption-attachment-4652\"></p> \n <p id=\"caption-attachment-4652\" class=\"wp-caption-text\">図4: ウェブブラウザのログイン画面から、新しく作成したユーザー認証情報を使ってCryoSPARCにアクセスします。</p> \n</div> \n<h2>テストジョブの実行</h2> \n<p>sharedディレクトリにテストデータ用のデータフォルダを作成し、以下のコマンドでテストデータセットをダウンロードします：</p> \n<pre><code class=\"lang-bash\">mkdir /shared/data\ncd /shared/data\n/shared/cryosparc/cryosparc_master/bin/cryosparcm downloadtest\ntar -xf empiar_10025_subset.tar\n</code></pre> \n<p>このステップの完了には数分かかります。</p> \n<p>このテストでは、データセットをLustreファイルシステムに直接ダウンロードしています。本番環境では、Amazon Simple Storage Service (Amazon S3)にデータセットを保存し、Amazon S3とAmazon Fsx for Lustreファイルシステム間で <a href=\"https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\">Data Repository Association</a> (DRA) を使用することをお勧めします。1つのCryo-EMサンプルのサイズは数十テラバイトになることがあり、組織は定期的にペタバイトの顕微鏡データを保存しているため、このようにAmazon S3とFSx for Lustreを使用すると、コストを大幅に削減できます。DRA をセットアップするには <a href=\"https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html\">FSx for Lustre documentation</a>を参照してください。</p> \n<p>テストデータセットのダウンロードが完了したら <a href=\"https://guide.cryosparc.com/processing-data/get-started-with-cryosparc-introductory-tutorial\">Get Started with CryoSPARC Tutorial</a>&nbsp;の手順に従って、Import Movies ジョブを実行します。ジョブのキューを選択すると、Slurmクラスタのキューが表示されます。Import Moviesジョブの<code>compute-cpu</code>レーンを選択します：</p> \n<div id=\"attachment_4653\" class=\"wp-caption aligncenter\" style=\"width: 1030px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4653\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-09.59.32@2x.png\" alt=\"Figure 5: CryoSPARC configured lanes with the same names as PCS queues as part of the installation. Choose compute-cpu for the Import Movies job.\" width=\"1020\" height=\"1160\" aria-describedby=\"caption-attachment-4653\"></p> \n <p id=\"caption-attachment-4653\" class=\"wp-caption-text\">図5：CryoSPARCは、PCSキューと同じ名前でレーンを構成しています。ムービーのインポートジョブにcompute-cpuを選択します</p> \n</div> \n<p>ジョブを実行します。CryoSPARC UIのEvent Logの下に、このようなSlurmサブミッションが表示されるはずです：</p> \n<div id=\"attachment_4654\" class=\"wp-caption aligncenter\" style=\"width: 2234px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4654\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-10.00.20@2x.png\" alt=\"Figure 6: Successful CryoSPARC job submission.\" width=\"2224\" height=\"746\" aria-describedby=\"caption-attachment-4654\"></p> \n <p id=\"caption-attachment-4654\" class=\"wp-caption-text\">図6: 成功したCryoSPARCジョブ投入</p> \n</div> \n<p>ターミナルに戻ってログインノードから<code>squeue</code>コマンドを実行すると、クラスタ上で実行されているジョブを確認できます：</p> \n<pre><code class=\"lang-bash\">JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n    1 compute-c cryospar ec2-user CF       1:02      1 compute-cpu-1\n</code></pre> \n<p><code>sinfo</code> を実行して、ジョブ用に割り当てられているノードを確認します：</p> \n<pre><code class=\"lang-bash\">PARTITION          AVAIL  TIMELIMIT  NODES  STATE NODELIST\ndemo                  up   infinite      4  idle~ compute-1-[1-4]\ncompute-cpu           up   infinite      1   mix# compute-cpu-1\ncompute-cpu           up   infinite      3  idle~ compute-cpu-[2-4]\ncompute-single-GPU    up   infinite      4  idle~ compute-single-gpu-[1-4]\ncompute-multi-GPU     up   infinite      4  idle~ compute-multi-gpu-[1-4]\n</code></pre> \n<p>このノードは、EC2によってAWSアカウントにプロビジョニングされたシングルインスタンスです。EC2コンソールで確認できます。ジョブは数分で正常に完了するはずです。これ以上ジョブをキューに投入しなければ、最後のジョブが完了した数分後にそのインスタンスが動的に終了するのがわかります。</p> \n<h2>可視化と次のステップ</h2> \n<p>可視化パッケージのような追加アプリケーションをクラスタ共有ストレージにインストールすることができます。</p> \n<p>ChimeraXは構造生物学者によく使われている可視化アプリケーションです。この記事では取り上げませんが、ログインノードにAmazon DCVを設定することで、クラスタ上でこれを実行することができます。DCVは、デスクトップとクラウド間で低レイテンシー、高解像度のリモート可視化を提供し、手元の環境とクラウド間の時間とコストのかかるデータ移動を不要にします。</p> \n<div id=\"attachment_4655\" class=\"wp-caption aligncenter\" style=\"width: 2170px\"> \n <p><img loading=\"lazy\" class=\"size-full wp-image-4655\" src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/12/17/IMG-2024-12-17-10.01.33@2x.png\" alt=\"Figure 7: Screenshot of results from EMPIAR 10288 Sample, run through CryoSPARC, and visualized using ChimeraX.\" width=\"2160\" height=\"1494\" aria-describedby=\"caption-attachment-4655\"></p> \n <p id=\"caption-attachment-4655\" class=\"wp-caption-text\">図7: CryoSPARCで実行し、ChimeraXで可視化したEMPIAR 10288サンプルの結果のスクリーンショット。</p> \n</div> \n<h2>環境の削除</h2> \n<p>AWS CLIを使用して、まず以下のコマンドを使用して<code>cpu-queue</code>、<code>single-gpu-queue</code>、<code>multi-gpu-queue</code>を削除することで、この投稿で構築した環境を削除できます：</p> \n<pre><code class=\"lang-bash\">aws pcs delete-queue --cluster-identifier &lt;pcs_cluster_name&gt; --queue-identifier &lt;pcs_queue_name&gt;</code></pre> \n<p>次に、以下のコマンドで <code>compute-cpu</code>, <code>compute-single-gpu</code> と <code>compute-multi-gpu</code>&nbsp;の各コンピュートノードグループを削除します：</p> \n<pre><code class=\"lang-bash\">aws pcs delete-queue --cluster-identifier &lt;pcs_cluster_name&gt; --compute-node-group-identifier &lt;pcs_compute_node_group_name&gt;</code></pre> \n<p>最後に、次のコマンドを使用してCloudFormationテンプレートを削除することで、PCSクラスタとそれで作成されたすべてのリソースを削除します：</p> \n<pre><code class=\"lang-bash\">aws cloudformation delete-stack --stack-name &lt;pcs_cloudformation_stack name&gt;</code></pre> \n<h2>結論</h2> \n<p>AWS Parallel Computing Service は、 Cryo EM をクラウドで実行するためのパワフルでスケーラブルなソリューションを提供し、研究者が新しい科学的発見を解き放つことを可能にします。</p> \n<p>AWS上のスケーラブルでオンデマンドなコンピューティングにより、科学者のアイデアや意欲の成長に合わせて要求に応えることができます。多様なワークロードに対応できるコンピューティングでAWS PCSを構成し、利用可能になった最新のインスタンスタイプで状態を保つことができます。Amazon DCVを使用してPCSに統合された高解像度、低レイテンシーの可視化により、科学者はデスクトップから直接、完全なCryo-EMワークフローを実行できます。</p> \n<p>お客様がクライオ電子顕微鏡（Cryo-EM）のデータ解析環境にAWSを選択するメリットは、研究者にとってスケーラビリティ、柔軟性、最終的な効率性をもたらすことができることです。</p> \n<p>本ガイドでは、PCS上でCryo-EMジョブを実行する方法の一例を紹介します。構造生物学者は、1つのサンプルを処理する際に複数のアプリケーションを使用し、組織内の研究グループ間でデータセットを共有することがよくあります。AWS Professional ServicesとClovertexのようなAmazon Partner Network (APN)のメンバーは、組織のニーズに合わせてこの初期システムのスケールアウトを支援することができます。詳細については、AWSアカウントチームにお問い合わせいただくか ask-hpc@amazon.com までご連絡ください。<br> \n <!-- '\"` --></p> \n<div>\n 本ブログ記事は、プロフェッショナルサービスの山下が翻訳しました。原文は\n <a href=\"https://aws.amazon.com/jp/blogs/hpc/scalable-cryo-em-on-aws-parallel-computing-service-pcs/\">こちら</a>です。\n</div> \n<div></div> &nbsp;\n<p></p> \n<h2>著者について</h2> \n<footer> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2024/03/18/CleanShot-2024-03-18-at-14.47.15.png\" alt=\"Marissa Powers\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Marissa Powers</h3> \n  <p>Marissa Powers は、ハイパフォーマンスコンピューティング(HPC)とライフサイエンスに特化したAWSのスペシャリストソリューションアーキテクトです。彼女は計算神経科学の博士号を持っており、創薬ワークロードを加速するために研究者や科学者と働くことを楽しんでいます。ボストンに家族と住んでおり、ウィンタースポーツとアウトドアの大ファンです。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2025/01/06/IMG-2025-01-06-09.24.26@2x.png\" alt=\"Juan Perin\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Juan Perin</h3> \n  <p>Juan Perin は、HPCとストレージを専門とするヘルスケアとライフサイエンスのスペシャリストです。ライフサイエンス分野の研究開発で深い経験を持ち、テクノロジーとサイエンスの応用のギャップを埋めることに喜びを感じています。ニューヨーク近郊に住み、3人の男の子の父親として多忙な日々を送っています。</p> \n </div> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/e6c3dd630428fd54834172b8fd2735fed9416da4/2025/01/06/IMG-2025-01-06-09.24.12@2x.png\" alt=\"Rye Robinson\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Rye Robinson</h3> \n  <p>Rye Robinson は、AWSのHPCを専門とするライフサイエンス・ソリューション・アーキテクトです。お客様が新技術や最先端技術を活用し、多様な複雑な課題を解決するお手伝いをすることが喜びです。仕事以外では、完璧なエスプレッソを淹れるための探求を続けています。</p> \n </div> \n</footer> \n<footer> \n <h2>翻訳者について</h2> \n <div class=\"blog-author-box\"> \n  <div class=\"blog-author-image\">\n   <img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/03/202412-myself_x125.png\" alt=\"Tomoya Yamashita\" width=\"125\">\n  </div> \n  <h3 class=\"lb-h4\">Tomoya Yamashita</h3> \n  <p>山下 智也(Tomoya Yamashita)は<a href=\"https://aws.amazon.com/jp/professional-services/\">Professional Services</a>のコンサルタントです。大規模なマイグレーションやDBマイグレーションチームに所属しています。HPC、ライフサイエンスをはじめエッジの効いたマイグレーションを推進することを楽しんでいます。最近は一緒に年を取ってきた老犬のお世話を日課にしています。</p> \n </div> \n</footer> \n<p>\n <!-- '\"` --></p> \n<footer> \n <div class=\"blog-tag-list\">\n  TAGS:\n  <br> \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/cryo-em/\" rel=\"tag\">Cryo-EM</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/elastic-fabric-adapter/\" rel=\"tag\">Elastic Fabric Adapter</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/research-computing/\" rel=\"tag\">Research Computing</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/storage/\" rel=\"tag\">Storage</a>, \n  <a href=\"https://aws.amazon.com/blogs/hpc/tag/visualization/\" rel=\"tag\">visualization</a>\n </div> \n</footer>"
  },
  {
    "title": "Amazon Connect Cost Insight Dashboard によるコストの可視化と最適化",
    "date": "2025-10-03T05:39:04.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/visualize-and-optimize-your-amazon-connect-costs-with-the-cost-insight-dashboard/",
    "content": "<p>コンタクトセンターのリーダーは、情報に基づいた適切な運用上の意思決定を行うために、<a href=\"https://aws.amazon.com/jp/connect/\">Amazon Connect</a> のコストの可視性の向上を常に求めています。この記事では、生の請求データを実用的なインサイトに変換する強力なソリューションである Amazon Connect Cost Insight Dashboard をご紹介します。このツールは、コンタクトセンターの最適化に特化して設計された包括的なコスト分析機能を提供し、サービスの品質・優秀性を維持しながら効率化の機会を特定することを可能にします。</p> \n<p>Amazon Connect Cost Insight Dashboard は、コンタクトセンターの財務的なパフォーマンスについて、包括的に可視化します。月次のコストトレンドを追跡し、サービスコンポーネント別にコストを分解し、通話国や通話の方向に関わらずテレフォニー費用を分析します。このダッシュボードは、チャネル別のコスト比較、地域別のコスト分析を可能にし、コンタクトあたりのコストなどの主要な効率性に関わるメトリクスを提供します。この強力なツールは、コンタクトセンターマネージャーが情報に基づいた意思決定を行い、運用を最適化するために、必要なデータを提供します。</p> \n<h2>仕組み</h2> \n<p>このソリューションは、以下のように AWS サービスを利用し、請求データをアクセスしやすいインサイトに加工します。</p> \n<div id=\"attachment_165844\" style=\"width: 1440px\" class=\"wp-caption aligncenter\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/arch-1-1.png\"><img aria-describedby=\"caption-attachment-165844\" loading=\"lazy\" class=\"size-full wp-image-165844\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/arch-1-1.png\" alt=\"アーキテクチャ図\" width=\"1430\" height=\"546\"></a>\n <p id=\"caption-attachment-165844\" class=\"wp-caption-text\">図 1: Cloud Intelligence Dashboards Framework のアーキテクチャ概要</p>\n</div> \n<ol> \n <li>AWS コストと使用状況レポート (AWS CUR) が詳細なコストデータを S3 バケットに配信</li> \n <li>AWS Glue crawler がコスト情報のデータカタログを作成・更新</li> \n <li>Amazon Athena が情報をクエリし、関連する Amazon Connect のデータを処理</li> \n <li>Amazon QuickSight がこれらのデータからインタラクティブな可視化を提供</li> \n</ol> \n<h2>Amazon Connect のコスト分析に役立つ 6 つのビュー</h2> \n<p><strong>Overview (概要):</strong> Amazon Connect の使用状況とコストに対する概要レベルの可視化を提供します。Amazon Connect のサービスと通話料を分割して表示できす。また月次のトレンドや当月のメトリクスを表示できます。インバウンドおよびアウトバウンド通話の上位国を特定できます。アカウント、リージョン、サービス別にコストを分類できます。</p> \n<p><strong>Contact Center:</strong> Amazon Connect が有効化されたアカウント内での AWS サービス全体のコストを追跡します。より明確に可視化するため Amazon Connect のコストを除外したサービスのトレンドを表示します。Amazon Lex、Amazon DynamoDB、Amazon S3 などのコンタクトセンターソリューションに統合されるサービスの利用増加のパターンを明らかにできます。また、それらの月次分析が可能です。このビューでは、コンタクトセンターソリューション全体の完全なコストをマッピングできます。例えば、棒グラフでは（Amazon Connect のコストを除いた）サービスタイプ別のコンタクトセンターでの使用状況を表示でき、Amazon Connect と併用されている追加サービスのコストが確認できます。これにより、顧客は Amazon Connect サービスを超えた全体の技術的な支出を理解できます。</p> \n<p><strong>Amazon Connect:</strong> Amazon Connect サービスコストを通話料と切り離して確認できます。複数のリージョンとアカウント間での使用パターンをマッピングでき、サービスコンポーネントの詳細な内訳（エンドカスタマーの通話分数、チャットインタラクション、タスク、エージェント評価）を表示できます。各サービスコンポーネントの単位あたりコストを計算できます。</p> \n<p><strong>Telecom:</strong> コンタクトセンターの通話料の分析のためのビューです。インバウンド/アウトバウンドの時間(分)と通話料のタイプを分類できます。国別にテレコムの使用状況とコストをマッピングでき、世界地図上でグローバルな通話料の状況を可視化できます。コスト影響の多い上位の要素と高額な通話先を特定できます。</p> \n<p><strong>Daily usage (日次使用状況):</strong> 過去 30 日間の詳細な使用状況ビューを提供します。データをインバウンド、アウトバウンド、電話番号のコストに分類できます。特定の日、国、通話へのドリルダウンが可能です。バブルチャートを使用してコストと利用量、価格の関係を可視化できます。個別の通話コストの調査に役立つビューです。</p> \n<p><strong>Call Details (通話詳細):</strong> コンタクト ID ごとの使用タイプを集約できます。通話コストと通話時間の分布を可視化します。最も高額で最も長時間の通話にフラグを立てたり、国別の通話時間パターンを表示することができます。特定の通話詳細と使用タイプの詳細な分析に役立ちます。</p> \n<p><strong>Contact Search (問い合わせ検索):</strong> 特定の問い合わせに対する高度なフィルタリングを提供します。価格、通話時間、国による検索が可能です。コンタクトセンター使用状況を地理的ビューで確認できます。個別の問い合わせコストと特性の詳細分析が可能です。</p> \n<h2>Amazon Connect Cost Insight Dashboard のデモ</h2> \n<p>実際にデプロイする前にダッシュボードの機能を体験したい場合、<a href=\"https://cid.workshops.aws.dev/demo?dashboard=amazon-connect-cost-insight-dashboard\">インタラクティブなデモをご覧ください</a>。このデモではサンプルデータを使用して、ダッシュボードの直感的なインターフェースと強力な可視化機能を紹介しています。</p> \n<div id=\"attachment_165845\" style=\"width: 1440px\" class=\"wp-caption aligncenter\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Picture2-12-1.png\"><img aria-describedby=\"caption-attachment-165845\" loading=\"lazy\" class=\"size-full wp-image-165845\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Picture2-12-1.png\" alt=\"Amazon Connect Cost Insight Dashboard\" width=\"1430\" height=\"742\"></a>\n <p id=\"caption-attachment-165845\" class=\"wp-caption-text\">図 2: Amazon Connect Cost Insight Dashboard のデモ</p>\n</div> \n<p>このデモでは、サービスコンポーネント別のコスト内訳、地域別支出比較、チャネルコスト分析などの主要機能に触れることができます。FinOps チーム、コンタクトセンターマネージャー、DevOps エンジニア、ビジネスリーダーは、これらのインサイトが各役割と責任にどのように活用、適用できるかすぐに確認できます。</p> \n<h2>コンタクトセンターのコスト最適化の例</h2> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/example_1-1-1.gif\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-165849\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/example_1-1-1.gif\" alt=\"コスト分析の例\" width=\"1280\" height=\"720\"></a></p> \n<h3>高額な通話の調査によるコスト分析</h3> \n<p>Call Details ビューにアクセスすることで、最もコストの高い上位 50 件の通話を特定し分析することができます。例えば $0.62 の通話を例にします。この特定のデータポイントを選択すると、ビューが即座にフィルタリングされ、その完全な内訳が表示されます。ダッシュボードでは、エンドカスタマーとフリーダイヤルの分単位のコストの両方が表示され、$0.62 に積み上がるコストの単価・要素が表示されます。高額な通話に対して、この詳細な可視化を行うことで、高コストなやり取りのパターンを特定し、的を絞ったコスト最適化戦略とより効率的なリソース配分を可能にします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/3-1.gif\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-165850\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/3-1.gif\" alt=\"コスト分析の例\" width=\"1280\" height=\"720\"></a></p> \n<h3>国別の通話時間ベースのコスト分析</h3> \n<p>国別の通話時間分布により、10 秒の短い通話から 20 分の長時間の通話まで、異なる時間別のセグメントにわたるコストパターンが明らかになります。例えば、ベルギーの通話パターンを調べるために、その時間のセグメントを選択すると、関連するすべてのコンタクト ID がインタラクティブにバブルとして表示され、それぞれに関連するコストが表示されます。特定の問い合わせをクリックすると、エンドカスタマーとフリーダイヤル分数の詳細なコスト内訳が表示されます。この詳細なビューを Contact Lens の分析と組み合わせることで、どの通話時間と国がより高いコストを発生させるかを特定し、国際通話ルーティングの最適化、人員配置の調整、運用費用削減のためのプロセス改善について、データに基づいた意思決定を可能にします。</p> \n<h2>アクションを起こしましょう</h2> \n<p>Amazon Connect のコストを完全に可視化しましょう。このダッシュボードは、すべてのチャネルにわたる使用パターンとコストを明らかにし、最適化の機会のすばやい特定に役立ちます。 このソリューションを実装し、コンタクトセンターのコストを最適化するために、<a href=\"https://docs.aws.amazon.com/ja_jp/guidance/latest/cloud-intelligence-dashboards/connect-cost-insight.html\">ワークショップガイドにアクセス</a>してください。</p> \n<h2>筆者紹介</h2> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/paras-150x150-1.png\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Paras Babbar</strong> は AWS の Enterprise Support Lead および Connect スペシャリストで、顧客が堅牢で効率的なクラウドソリューションを構築するためのガイダンスの提供に長けています。彼はコンタクトセンターの革新と複雑なビジネス課題への取り組みを専門とし、顧客の成功を推進する革新的な戦略を一貫して提供しています。\n </div> \n</div> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Alex_Yankovskyy_Photo-1-1.jpg\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Alex Yankovskyy</strong> は AWS Telecom のソリューションアーキテクトで、コンタクトセンターおよびカスタマーエクスペリエンスのソリューションにおいて 15 年の経験を持っています。彼は様々な業界の企業が Amazon Connect を使用してコンタクトセンターを変革することを支援し、AI 統合と運用効率に焦点を当てています。Alex は 12 の AWS 認定資格を保有しています。\n </div> \n</div> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/WhatsApp-Image-2025-09-24-at-2.21.54-PM-1.jpeg\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Baraa Elkosh</strong> は AWS Telecom のソリューションアーキテクトで、コンタクトセンターおよびカスタマーエクスペリエンスのソリューションにおいて 15 年の経験を持っています。彼は様々な業界の企業が Amazon Connect を使用してコンタクトセンターを変革することを支援し、AI 統合と運用効率に焦点を当てています。Alex は 12 の AWS 認定資格を保有しています。\n </div> \n</div> \n<div style=\"align-items: center;margin: 20px 0\"> \n <p><img style=\"width: 150px;height: 150px;margin-right: 20px\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/26/Screenshot-2024-12-05-at-00.51.16-1.png\" alt=\"Paras Babbar\"></p> \n <div>\n  <strong>Mariia Poliak</strong> は AWS のクラウドオペレーションアーキテクト（COA）で、クラウドコスト最適化に情熱を持っています。Enterprise Support 組織内で働く彼女は、顧客が AWS サービスから最大の価値を得ながら、最適なクラウド利用のプラクティスを実現できるよう支援しています。\n </div> \n</div> \n<p>翻訳はテクニカルアカウントマネージャー高橋が担当しました。原文は<a href=\"https://aws.amazon.com/jp/blogs/contact-center/visualize-and-optimize-your-amazon-connect-costs-with-the-cost-insight-dashboard/\">こちら</a>です。</p>"
  },
  {
    "title": "Claude Codeで開発する時こそ「ユビキタス言語辞書」を作ろう！",
    "date": "2025-10-03T02:37:53.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/minedia/articles/cb2313fcc47ceb",
    "content": "\n 3秒まとめ 📝\nClaude Codeと一緒にユビキタス言語辞書を自動更新する仕組みを実装してみました！\n\nAIツール時代の新たな課題は「用語の齟齬によるAIの誤った解釈」だった！\nAIの「忘れっぽさ」への対処法が意外すぎる\n既存システムとの整合性は段階的移行で解決できる\n\n\n どんな人向けの記事？ 🎯\nこの記事は、以下のような方に読んでもらいたいです！\n\n\nシステム開発のチームリーダーの方: 「チーム内で用語がバラバラで困ってる...」でお困りの方\n\nAI活用エンジニアの方: 「Claude Codeが思った通りに動いてくれない！」に興味がある方\n\nDDD実践者の方: 「ユビキタス..."
  },
  {
    "title": "TiDB User Day 2025 に参加なぅ",
    "date": "2025-10-03T02:11:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/awache/articles/45f533aa295713",
    "content": "今年も TiDB User Day に参加しています！\n去年に引き続き今年もライブブログやってみようと思います。(めっちゃ久々ｗ)\n最初のセッションはごめんなさい、ちょっといろいろあってライブブログはスキップしています\n\n 東京ガス内製開発チームリーダーが語る TiDB本番運用の今\n\n\n 講演者\n東京ガス株式会社　リビング戦略部 デジタルプロダクト推進グループ\nPlatform Team Lead　青木 翔平 氏\nSoftware Engineering Team Lead　中島 潤耶 氏 → 迫田 賀章氏\n\n東京ガス\n\n第３創業期\n\n脱炭素化による地球環境への貢献 &amp; デジタル..."
  },
  {
    "title": "AWS Weekly Roundup: Amazon S3、Amazon Bedrock AgentCore、AWS X-Ray など (2025 年 9 月 29 日)",
    "date": "2025-10-03T01:36:29.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-weekly-roundup-amazon-s3-amazon-bedrock-agentcore-aws-x-ray-and-more-september-29-2025/",
    "content": "<p>皆さん、信じられますか? 早いもので、今年も年末がすぐそこまでやって来ています。AWS re:Invent が開催日を迎えるのもあっという間です! 米国ラスベガスで毎年行われる AWS 最大のイベントは 12 月 1 日から 12 月 5 日の日程で開催され、私たちが取り組んできた数多くの事柄が発表およびリリースされます。チケットをまだ購入していない場合は <a href=\"https://reinvent.awsevents.com/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS re:Invent 2025 のチケットを購入</a>して、このイベントを実際に体験しましょう。ラスベガスに行けなくても心配ありません。数々の発表を情報が入り次第お伝えする AWS ニュースブログをチェックしてください。</p> \n<p>これから re:Invent までの間にもエキサイティングな新しいリリースがまだまだたくさん行われるので、いつものように9 月 22 日週のハイライトを簡単に振り返って最新のリリースを見ていきましょう。まずは、最も人気のあるサービスの 1 つである <a href=\"https://aws.amazon.com/s3/?trk=835ac318-3bae-4494-ad9e-0565dcf139a3&amp;sc_channel=ps&amp;ef_id=Cj0KCQjw3OjGBhDYARIsADd-uX5JtgvrKScev7JcmxEu0VToxQK090GmEaV8sCCAG8koo0hE9kYGLVgaAi5rEALw_wcB:G:s&amp;s_kwcid=AL!4422!3!638364429346!e!!g!!amazon%20s3!19096959014!142655567183&amp;gad_campaignid=19096959014&amp;gbraid=0AAAAADjHtp-yHEG9mIOoojJR9iAsewUDU&amp;gclid=Cj0KCQjw3OjGBhDYARIsADd-uX5JtgvrKScev7JcmxEu0VToxQK090GmEaV8sCCAG8koo0hE9kYGLVgaAi5rEALw_wcB\">Amazon S3</a> です。</p> \n<p><span style=\"text-decoration: underline\"><strong>S3 の更新<br> </strong></span>S3 チームは、S3 の使用をさらに向上させるために懸命に取り組んできました。今月だけでも、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/aws-s3-batch-operations-managing-buckets-console/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">S3 バッチオペレーションのターゲット一括選択</a>、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-s3-conditional-deletes-s3-general-purpose-buckets/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">S3 汎用バケットでの条件付き削除のサポート</a>、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/malware-protection-s3-file-size-archive-scanning-limits/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">マルウェア防止のためのファイルサイズとアーカイブスキャンの制限拡張</a>などがリリースされました。</p> \n<p>9 月 22 日週は、<strong>AWS コンソールでの</strong> <strong>Amazon S3 Tables プレビュー機能の追加</strong>により、新たな S3 マイルストーンが達成されました。今後は、コンソールから直接 S3 テーブルを確認することで、SQL を記述しなくてもテーブルのデータ構造と内容を簡単に理解できるようになります。簡単に表示できるこの特徴量は、S3 Tables がサポートされているすべてのリージョンで今すぐ利用でき、発生するコストはテーブルプレビューを表示するために必要な S3 リクエストの料金のみです。</p> \n<p><span style=\"text-decoration: underline\"><strong>その他のリリース</strong></span><br> 9 月 29 日週はすばらしい機能をリリースしたその他サービスのハイライトをいくつかご紹介します。</p> \n<p>Amazon Bedrock AgentCore が<strong>エンタープライズ統合オプションと自動化オプションを拡大</strong> – Bedrock AgentCore サービスは、新たに <a href=\"https://aws.amazon.com/vpc/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">Amazon VPC</a> 接続、<a href=\"https://aws.amazon.com/privatelink/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS PrivateLink</a>、<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS CloudFormation</a>、リソースタグをサポートすることで<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-bedrock-agentcore-runtime-browser-code-interpreter-vpc-privatelink-cloudformation-tagging/\">エンタープライズ対応性をレベルアップ</a>し、開発者がセキュリティやインフラストラクチャの自動化よりよく制御できるようにしました。スケーラブルなエージェントデプロイ用の AgentCore Runtime、ウェブインタラクション用の AgentCore Browser、セキュアなコード実行用の AgentCore Code Interpreter のどれを使用しているかにかかわらず、これらの機能強化によって、プライベートリソースへのアクセス、インフラストラクチャのデプロイ自動化、系統立ったリソース管理の維持をセキュアに実行できる AI エージェントのデプロイが可能になります。</p> \n<p>AWS X-Ray が<strong>より優れたエラー検出のためのスマートサンプリングを導入</strong> – AWS X-Ray が、<a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-adaptive-sampling.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">定義した制限内でトレースキャプチャ率を自動的に調整する適応型サンプリング</a>の提供を開始しました。この機能は、DevOps チームや SRE が通常の操作時にオーバーサンプリングを行うことなく重要な問題を検出できるようにします。新機能には、異常発生時にサンプリングを増加させる Sampling Boost や、ターゲットを絞りこんだエラートレースを行う Anomaly Span Capture などがあり、チームはコストを抑えながら必要なときに高度なオブザーバビリティを実現できます。</p> \n<p><a href=\"https://aws.amazon.com/clean-rooms/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS Clean Rooms</a> が段階的な ID マッピングでリアルタイムコラボレーションを強化 – AWS Clean Rooms では、<a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS Entity Resolution</a> を使用した新規、変更済み、削除済みのレコードのみでの ID マッピングテーブルの更新が可能になり、コラボレーター間でのデータ同期化をより効率的かつタイムリーに行えるようになりました。この改善は、広告効果測定プロバイダーがプライバシーコントロールを維持しながら広告主やパブリッシャーとの最新データセットを維持するために役立ち、データセット全体を再処理しなくても常時オンのキャンペーン効果測定が可能になります。</p> \n<p><span style=\"text-decoration: underline\"><strong>要点だけを簡潔に</strong></span><br> チームやワークロードに大いに役立つと思われる更新をいくつか簡単に紹介します。</p> \n<p>EC2 インスタンスタイプはどんどん更新されるので、最新タイプを完全に把握しておくのも大変です。<a href=\"https://aws.amazon.com/compute-optimizer/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS Compute Optimizer</a> では、最新の C8、M8、R8、I8 ファミリーを含めた 99 のインスタンスを追加でサポートするようになりました。</p> \n<p>e スポーツでは、1 ミリ秒たりとも無駄にできません! <a href=\"https://aws.amazon.com/gamelift/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">Amazon GameLift</a> が米国ダラスに新しい Local Zone を立ち上げ、テキサス州のプレイヤーはより近い場所に設置された超低レイテンシーゲームサーバーを利用できるようになりました。</p> \n<p>大規模な Amazon EC2 デプロイを管理するときは、コントロールがすべてです! Amazon EC2 の<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">許可された AMI 設定がマーケットプレイスコード、廃止時、作成日、命名パターンでのフィルタリングのサポートを開始</a>しました。これは、非準拠イメージの使用防止に役立ちます。さらに、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-ec2-auto-scaling-forced-cancellation-instance/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\"> EC2 Auto Scaling ではインスタンスの更新を即座に強制キャンセル</a>できるようになり、重要なデプロイ中の制御をより迅速に行えるようになりました。</p> \n<p>よりインテリジェントでセキュアなカスタマーサービスをさまざまな言語で実現しましょう! Amazon Connect が、より優れたカスタマージャーニーインサイトを得るために<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-flow-designer-analytics-mode/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">フローデザイナーの分析を強化</a>し、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-associate-custom-attributes-interaction-segments/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">正確なインタラクション追跡のためのカスタム属性</a>を追加するとともに、<a href=\"https://aws.amazon.com/about-aws/whats-new/2025/09/amazon-connect-contact-lens-redaction-7-languages/?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">Contact Lens の機密データ秘匿化機能を拡張</a>してさらに 7 つの欧米言語をサポートするようになりました。</p> \n<p>9 月 29 日週のニュースは以上です!</p> \n<p>世界中で開催される<a href=\"https://aws.amazon.com/events/explore-aws-events?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">今後の AWS イベントのすべて</a>を忘れずにチェックしましょう。テクノロジー業界の気の合う仲間たちとすばらしい 1 日を過ごしながら、たくさんの人々と出会い、たくさんの事柄を学べる無料のイベントに参加するエキサイティングな機会が盛りだくさんです。</p> \n<p>賞金を掛けて勝負したいと考えているなら、特別なイベントへの参加期間が終了間近です! 10 月 20 日まで続く <a href=\"https://info.devpost.com/blog/aws-ai-agent-global-hackathon?trk=ac97e39c-d115-4d4a-b3fe-c695e0c9a7ee&amp;sc_channel=el\">AWS AI Agent Global Hackathon</a> は、AWS の包括的な生成 AI スタックを使用して革新的な AI エージェントを構築するというまたとない機会を開発者に提供します。45,000 USD を超える賞金と独占的な市場参入機会を獲得できるグローバルなコンペであなたの創造性と技術力を披露するチャンスをお見逃しなく。</p> \n<p>9 月 22 日週のリリースから、役に立つ機能やエキサイティングな機能を見つけていただけたでしょうか。AWS では、毎週月曜日にウィークリーレビューを公開して AWS の最新情報を皆さんにお届けしています。このページをブックマークして、10 月 6 日週もまたお会いしましょう!</p> \n<p><a href=\"https://link.codingmatheus.com/linkedin\">Matheus Guimaraes | @codingmatheus</a></p> \n<p>原文は<a href=\"https://aws.amazon.com/jp/blogs/aws/aws-weekly-roundup-amazon-s3-amazon-bedrock-agentcore-aws-x-ray-and-more-september-29-2025/\">こちら</a>です。</p>"
  },
  {
    "title": "vitejs/vite – v7.1.9",
    "date": "2025-10-03T00:41:51.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.9",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.9/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "【AWS Skill Builder】スキルプロファイル を利用して AWS の学習成果を共有しましょう",
    "date": "2025-10-02T23:41:28.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/showcase-your-aws-achievements-with-the-new-skills-profile/",
    "content": "<p>本ブログは、2025 年 9 月 23 日に Adam Balest によって執筆された「<a href=\"https://aws.amazon.com/jp/blogs/training-and-certification/showcase-your-aws-achievements-with-the-new-skills-profile/\">Showcase your AWS achievements with the new Skills Profile</a>」を翻訳したものです。</p> \n<p>AWS Training and Certification では、AWS のスキルと成果を共有したい学習者のために、AWS Skill Builder の新機能「スキルプロファイル」の提供を開始しました。これは、AWS 認定、学習成果、デジタルバッジを 1 つの共有可能なプロファイルで紹介する強力な新しい方法です。スキルプロファイルにはカスタマイズ可能な共有オプションがあり、可視性と信頼性を高めながら、学習者それぞれのクラウドスキルを伝えるために使用できます。</p> \n<p>スキルプロファイルは Skill Builder にサインインしている学習者が利用でき、AWS の学習成果を公開できる中心的な場所となります。あなたが意欲的なクラウドプラクティショナーであろうとベテランエキスパートであろうと、あなたのスキルプロファイルはあなたの AWS スキルのショーケースとなり、LinkedIn などのプラットフォームや求人応募で、同僚や採用マネージャーにすぐに共有可能です。</p> \n<blockquote>\n <p><em>「スキルプロファイルでは、AWS の学習過程と、私が身に付けたスキルを簡単に紹介できます。認定資格や学習のマイルストーンをわかりやすい形式で共有できます。スクリーンショットや色々な場所に散らばったリンクは必要ありません。」— AWS Skill Builderの学習者</em></p>\n</blockquote> \n<h3>学習から専門的な評価へ</h3> \n<p>専門的なプラットフォームでのソーシャルラーニングの広がりにより、学習者が信頼性の高い一貫した方法で専門知識を示すことが不可欠になっています。スキルプロファイルは、プライベートな学習記録と、公開される専門的な評価の間のギャップを埋めるものです。</p> \n<p>Skill Builder 内の学習者ダッシュボードはプライベートである一方、スキルプロファイルは公開共有を目的に設計されています。AWS の認定資格、Skill Builder での学習成果、Cloud Quest のバッジ、その他の達成項目などを紹介できます。表示内容を完全にコントロールできるため、自分がプロファイルで共有したい内容を伝えることができます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/02/skill_builder_skills_profile.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-166218\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/02/skill_builder_skills_profile.png\" alt=\"\" width=\"842\" height=\"1024\"></a></p> \n<h3>スキル共有を通じたつながりの構築</h3> \n<p>スキルプロファイルは、クラウドの専門知識を可視化し、共有可能にすることで、学習者と組織の双方に新たな価値をもたらします。認証された AWS での実績を共有することで、新たな職業的なつながり、コラボレーション、キャリアの機会への扉が開かれます。</p> \n<p>学習者にとっては、熱心に培ってきたスキルを示す手段となり、組織や採用担当者にとっては、クラウド人材を発見し検証するための信頼できる情報源となります。これらの共有プロファイルにより、スキルを持つ専門家と、現在および将来の機会との間により強固なつながりが生まれます。</p> \n<p>今後、スキルプロファイルは、特定のスキルや AWS クラウドでの成果に基づいて組織や採用担当者が人材を発見するのを助ける機能に加えて、さらに多くの共有可能な実績を含むように拡張される予定です。</p> \n<h3>スキルプロファイルの始め方</h3> \n<p>スキルプロファイルを使い始めるには、AWS Skill Builder にサインインし、画面右上の「アカウント」より「プロフィール」に移動し、スキルプロファイルを作成・カスタマイズします。そこから、表示する実績を選択し、ヘッドライン (オプション) を挿入して、プロファイルのリンクをネットワークと共有できます。</p> \n<p>次の役職に就くことを目指している場合でも、最近の認定資格を紹介したい場合でも、AWS で学んだことを誇りを持って共有したい場合でも、スキルプロファイルを使用して自分のクラウド専門知識を世界に共有できます。</p> \n<p>あなたの AWS ストーリーを共有する準備はできましたか ? 今すぐ AWS Skill Builder にサインインして、スキルプロファイルを作成しましょう !</p> \n<hr> \n<p>翻訳は Technical Instructor の 室橋 弘和 が担当しました。</p>"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.40",
    "date": "2025-10-02T23:40:43.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.40",
    "content": "### Core Changes\n\n- Revert \"Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\"\": #84394\n- Optimize isMetadataRoute function: #84409\n- [ci]: split clientSegmentCache test runners off from experimental: #84440\n- [Cache Components] Fix caching in `generateMetadata`/`generateViewport`: #84228\n- Upgrade React from `86181134-20251001` to `a757cb76-20251002`: #84463\n- [segment cache]: fix trailingSlash handling with output: export: #84465\n- perf: Use a more aggressive retry loop for `recursiveDelete`: #84444\n- [Cache Components] Dim logs after prerender aborts: #84153\n\n### Misc Changes\n\n- [ci]: remove PPR-specific CI jobs: #84439\n- docs: Verbose troubleshooting for unconfigured hosts: #84271\n- Update Rspack production test manifest: #84398\n- Add gt-next to i18n list: #84396\n- [ci]: fix build-output-prerender to support segment cache env: #84467\n- [ci]: fix app-static snapshots with clientSegmentCache: #84468\n\n### Credits \n\nHuge thanks to @lukesandberg, @ztanner, @timneutkens, @icyJoseph, @unstubbable, @vercel-release-bot, @bgw, @brian-lou, and @gnoff for helping!\n"
  },
  {
    "title": "ターミナル派待望の GitHub Copilot CLI 使い方まとめ",
    "date": "2025-10-02T23:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/10q89s/articles/4a42fb779fde89",
    "content": "こんにちは、URBAN HACKS サーバーサイドエンジニアの池田です。\n2025/9/25に GitHub Copilot CLI が public preview 版で登場しました！\n業務で GitHub Copilot をメインに使っている私にとっては待望の CLI です！\nhttps://github.blog/changelog/2025-09-25-github-copilot-cli-is-now-in-public-preview/\nなお、GitHub Copilot CLI は以下の有料プランで利用可能です。\n\nGitHub Copilot Pro\nGitHub Cop..."
  },
  {
    "title": "AWS製AIエージェントOSS Strands Agentsの主要機能ハンズオン",
    "date": "2025-10-02T14:32:49.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/medurance/articles/strands-agents-hands-on",
    "content": "\n 0. はじめに\nMeduranceエンジニアの深田翔です。本記事では、AWSから公開されたOSSのAIエージェントSDK「Strands Agents」の主要機能を実際に触ってみた内容をまとめました。\n公式サイトのユーザーガイドから特に重要と思われる機能をピックアップして説明して触りました。詳細な仕様や最新情報は公式ドキュメントを参照ください。\n本記事では主に以下の内容を紹介します：\n\nStrands Agentsの基本概念とAgent Loop\nエージェントの基本的な使い方とプロンプト設定\nセッション管理（ローカル/S3/カスタムDB）とその戦略\nHooksによるコールバック設定\n..."
  },
  {
    "title": "浮動小数点数に1を掛ける操作は最適化できるか／浮動小数点数のビット列表現のカノニカル性について",
    "date": "2025-10-02T13:14:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mod_poppo/articles/floating-point-canonicity",
    "content": "浮動小数点数に1を掛ける関数を考えます：\nvoid multiply_one(double *x)\n{\n    static const volatile double one = 1.0;\n    *x *= one;\n}\n数学的には、この関数は入力をそのまま返す関数（恒等関数）です。浮動小数点数の場合はどうでしょうか？特に、この関数は、入力として与えられた浮動小数点数のビット列表現を変えるでしょうか？\n多くの人は「変えないでしょ」「変わったとしても違いは重要じゃない」と思われるかもしれませんが、これはコンパイラーの最適化を考える上では重要な問題になります。もちろん、「浮動小数点数の細..."
  },
  {
    "title": "エンジニアになって1年目に読み終わった本を振り返る",
    "date": "2025-10-02T12:22:52.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/prevent/articles/9fa89a131f765f",
    "content": "\n はじめに\nこんにちは！PREVENTで働いているバックエンドエンジニアのとぴ（@topi_log）と申します！\n2024年10月にPREVENTにジョインしてから丸っと1年が経ちました。月日が経つのは早いですね。\n良い区切りなので、この1年で読んだ本を振り返りながらまとめました。\n\n 読み終わった本たち\nざっくりグループ分けしてみました（AIが）\nそれぞれ簡単に読んだ感想も添えていきます。\n\n ビジネス・コンサルティング\n\n コンサル一年目が学ぶこと 新人・就活生からベテラン社員まで一生役立つ究極のベーシックスキル30選\nhttps://amzn.asia/d/gToV8TS\nコンサ..."
  },
  {
    "title": "vitejs/vite – v7.1.8",
    "date": "2025-10-02T06:15:47.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.8",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.8/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – create-vite@8.0.2",
    "date": "2025-10-02T05:51:22.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/create-vite%408.0.2",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/create-vite@8.0.2/packages/create-vite/CHANGELOG.md) for details."
  },
  {
    "title": "物体検出モデルの推論高速化入門",
    "date": "2025-10-02T03:43:47.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/eversteel_tech/articles/51f9b749b8f051",
    "content": "\n はじめに\n株式会社EVERSTEELで機械学習エンジニアをしている加藤です。\n機械学習システムの運用において、推論の高速化は重要な課題です。特にリアルタイムでの処理が求められるアプリケーションでは、レスポンス時間の短縮がユーザー体験に直結します。また、クラウド環境のコスト削減やエッジデバイスのリソース制約など、様々な観点から推論の効率化が必要とされます。\n本記事では特に物体検出モデルのCPU推論に焦点を当て、ディープラーニングモデルの推論を高速化する方法を紹介するとともに、それらのベンチマーク結果を共有します。\n\n 「鉄ナビ検収AI」における推論高速化ニーズ\n弊社では鉄スクラップの画..."
  },
  {
    "title": "Claude Code卒業！GitHub Copilotに乗り換えます！",
    "date": "2025-10-02T03:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/flinters_blog/articles/db9e9e90ea8dde",
    "content": "\n 【導入】 すべての始まりは、一枚の「AI利用ランキング」だった\nこんにちは、FLINTERS新卒エンジニアの野崎です。\n突然ですが、皆さんはAIコーディングツール、活用していますか？\n僕は8月頃から使えるようになった「Claude Code」にドハマりし、まさに\"ゴリゴリ使い倒す\"日々を送っていました。アイデアを壁打ちすれば設計のヒントをくれ、エラーコードを投げれば一瞬で解決策を示してくれる。まるで魔法使いのようなその力に、僕は完全に心酔していました。\nしかし、そんな僕にある転機が訪れます。毎月発表される社内のAI利用状況レポートで、なんと僕が Claude Code利用者ランキング..."
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.39",
    "date": "2025-10-01T23:45:39.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.39",
    "content": "### Core Changes\n\n- Update otel test assertions and pages span_name: #84393\n- [Breaking] Bump minimum TypeScript version to 5.1.0: #84384\n- Upgrade React from `d15d7fd7-20250929` to `ef889445-20250930`: #84383\n- [Breaking] Remove deprecated `unstable_rootParams`: #84373\n- [metadata] remove falsy dynamicParams approach: #84405\n- fix: next rspack binding NextExternalsPlugin: #84303\n- Development: Skip route matching when there is an existing match: #84227\n- Revert \"auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents\": #84419\n- Upgrade React from `ef889445-20250930` to `548235db-20251001`: #84416\n- [Breaking] Update default browserslist config: #84401\n- Upgrade React from `548235db-20251001` to `1bd1f01f-20251001`: #84417\n- Allow `metadataBase` to be a string URL in addition to `URL` instance: #84297\n- Upgrade React from `1bd1f01f-20251001` to `86181134-20251001`: #84427\n- [mcp] logging file should be reset for each session: #84425\n\n### Misc Changes\n\n- Update failing e2e deploy tests: #84395\n- Turbopack: Webpack loader `this.fs.readFile`: #83313\n- Improve tests: #84374\n- Revamp Next.js boilerplate: #81945\n- Add test for twoslash: #84267\n- Docs/project structure polish: #84386\n- Bump to swc v44: #84420\n- Turbopack: don't fail for parse errors in tracing: #84408\n- Update Rspack development test manifest: #84365\n- Update Rspack production test manifest: #84366\n\n### Credits \n\nHuge thanks to @ijjk, @mischnic, @devjiwonchoi, @chloe-yan, @huozhi, @SyMind, @timneutkens, @ztanner, @sireesha-siri, @unstubbable, and @vercel-release-bot for helping!\n"
  },
  {
    "title": "facebook/react – 19.2.0 (Oct 1, 2025)",
    "date": "2025-10-01T21:50:48.000Z",
    "source": "GitHub",
    "url": "https://github.com/facebook/react/releases/tag/v19.2.0",
    "content": "Below is a list of all new features, APIs, and bug fixes.\r\n\r\nRead the [React 19.2 release post](https://react.dev/blog/2025/10/01/react-19-2) for more information.\r\n\r\n## New React Features\r\n\r\n- [`<Activity>`](https://react.dev/reference/react/Activity): A new API to hide and restore the UI and internal state of its children.\r\n- [`useEffectEvent`](https://react.dev/reference/react/useEffectEvent) is a React Hook that lets you extract non-reactive logic into an [Effect Event](https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event).\r\n- [`cacheSignal`](https://react.dev/reference/react/cacheSignal) (for RSCs) lets your know when the `cache()` lifetime is over.\r\n- [React Performance tracks](https://react.dev/reference/developer-tooling/react-performance-tracks) appear on the Performance panel’s timeline in your browser developer tools\r\n\r\n## New React DOM Features\r\n\r\n- Added resume APIs for partial pre-rendering with Web Streams:\r\n  - [`resume`](https://react.dev/reference/react-dom/server/resume): to resume a prerender to a stream.\r\n  - [`resumeAndPrerender`](https://react.dev/reference/react-dom/static/resumeAndPrerender): to resume a prerender to HTML.\r\n- Added resume APIs for partial pre-rendering with Node Streams:\r\n  - [`resumeToPipeableStream`](https://react.dev/reference/react-dom/server/resumeToPipeableStream): to resume a prerender to a stream.\r\n  - [`resumeAndPrerenderToNodeStream`](https://react.dev/reference/react-dom/static/resumeAndPrerenderToNodeStream): to resume a prerender to HTML.\r\n- Updated [`prerender`](https://react.dev/reference/react-dom/static/prerender) APIs to return a `postponed` state that can be passed to the `resume` APIs.\r\n\r\n## Notable changes\r\n\r\n- React DOM now batches suspense boundary reveals, matching the behavior of client side rendering. This change is especially noticeable when animating the reveal of Suspense boundaries e.g. with the upcoming `<ViewTransition>` Component. React will batch as much reveals as possible before the first paint while trying to hit popular first-contentful paint metrics.\r\n- Add Node Web Streams (`prerender`, `renderToReadableStream`) to server-side-rendering APIs for Node.js\r\n- Use underscore instead of `:` IDs generated by useId\r\n\r\n## All Changes\r\n\r\n### React\r\n\r\n- `<Activity />` was developed over many years, starting before `ClassComponent.setState` (@acdlite @sebmarkbage and many others)\r\n- Stringify context as \"SomeContext\" instead of \"SomeContext.Provider\" (@kassens [#33507](https://github.com/facebook/react/pull/33507))\r\n- Include stack of cause of React instrumentation errors with `%o` placeholder (@eps1lon [#34198](https://github.com/facebook/react/pull/34198))\r\n- Fix infinite `useDeferredValue` loop in popstate event (@acdlite [#32821](https://github.com/facebook/react/pull/32821))\r\n- Fix a bug when an initial value was passed to `useDeferredValue` (@acdlite [#34376](https://github.com/facebook/react/pull/34376))\r\n- Fix a crash when submitting forms with Client Actions (@sebmarkbage [#33055](https://github.com/facebook/react/pull/33055))\r\n- Hide/unhide the content of dehydrated suspense boundaries if they resuspend (@sebmarkbage [#32900](https://github.com/facebook/react/pull/32900))\r\n- Avoid stack overflow on wide trees during Hot Reload (@sophiebits [#34145](https://github.com/facebook/react/pull/34145))\r\n- Improve Owner and Component stacks in various places (@sebmarkbage, @eps1lon: [#33629](https://github.com/facebook/react/pull/33629), [#33724](https://github.com/facebook/react/pull/33724), [#32735](https://github.com/facebook/react/pull/32735), [#33723](https://github.com/facebook/react/pull/33723))\r\n- Add `cacheSignal` (@sebmarkbage [#33557](https://github.com/facebook/react/pull/33557))\r\n\r\n### React DOM\r\n\r\n- Block on Suspensey Fonts during reveal of server-side-rendered content (@sebmarkbage [#33342](https://github.com/facebook/react/pull/33342))\r\n- Use underscore instead of `:` for IDs generated by `useId` (@sebmarkbage, @eps1lon: [#32001](https://github.com/facebook/react/pull/32001), [https://github.com/facebook/react/pull/33342](https://github.com/facebook/react/pull/33342)[#33099](https://github.com/facebook/react/pull/33099), [#33422](https://github.com/facebook/react/pull/33422))\r\n- Stop warning when ARIA 1.3 attributes are used (@Abdul-Omira [#34264](https://github.com/facebook/react/pull/34264))\r\n- Allow `nonce` to be used on hoistable styles (@Andarist [#32461](https://github.com/facebook/react/pull/32461))\r\n- Warn for using a React owned node as a Container if it also has text content (@sebmarkbage [#32774](https://github.com/facebook/react/pull/32774))\r\n- s/HTML/text for for error messages if text hydration mismatches (@rickhanlonii [#32763](https://github.com/facebook/react/pull/32763))\r\n- Fix a bug with `React.use` inside `React.lazy`\\-ed Component (@hi-ogawa [#33941](https://github.com/facebook/react/pull/33941))\r\n- Enable the `progressiveChunkSize` option for server-side-rendering APIs (@sebmarkbage [#33027](https://github.com/facebook/react/pull/33027))\r\n- Fix a bug with deeply nested Suspense inside Suspense fallback when server-side-rendering (@gnoff [#33467](https://github.com/facebook/react/pull/33467))\r\n- Avoid hanging when suspending after aborting while rendering (@gnoff [#34192](https://github.com/facebook/react/pull/34192))\r\n- Add Node Web Streams to server-side-rendering APIs for Node.js (@sebmarkbage [#33475](https://github.com/facebook/react/pull/33475))\r\n\r\n### React Server Components\r\n\r\n- Preload `<img>` and `<link>` using hints before they're rendered (@sebmarkbage [#34604](https://github.com/facebook/react/pull/34604))\r\n- Log error if production elements are rendered during development (@eps1lon [#34189](https://github.com/facebook/react/pull/34189))\r\n- Fix a bug when returning a Temporary reference (e.g. a Client Reference) from Server Functions (@sebmarkbage [#34084](https://github.com/facebook/react/pull/34084), @denk0403 [#33761](https://github.com/facebook/react/pull/33761))\r\n- Pass line/column to `filterStackFrame` (@eps1lon [#33707](https://github.com/facebook/react/pull/33707))\r\n- Support Async Modules in Turbopack Server References (@lubieowoce [#34531](https://github.com/facebook/react/pull/34531))\r\n- Add support for .mjs file extension in Webpack (@jennyscript [#33028](https://github.com/facebook/react/pull/33028))\r\n- Fix a wrong missing key warning (@unstubbable [#34350](https://github.com/facebook/react/pull/34350))\r\n- Make console log resolve in predictable order (@sebmarkbage [#33665](https://github.com/facebook/react/pull/33665))\r\n\r\n### React Reconciler\r\n\r\n- [createContainer](https://github.com/facebook/react/blob/v19.2.0/packages/react-reconciler/src/ReactFiberReconciler.js#L255-L261) and [createHydrationContainer](https://github.com/facebook/react/blob/v19.2.0/packages/react-reconciler/src/ReactFiberReconciler.js#L305-L312) had their parameter order adjusted after `on*` handlers to account for upcoming experimental APIs\r\n\r\n## eslint-plugin-react-hooks@6.1.0\r\n\r\n**Note:** Version 6.0.0 was mistakenly released and immediately deprecated and untagged on npm. This is the first official 6.x major release and includes breaking changes. \r\n\r\n- **Breaking:** Require Node.js 18 or newer. ([@michaelfaith](https://github.com/michaelfaith) in [#32458](https://github.com/facebook/react/pull/32458))\r\n- **Breaking:** Flat config is now the default `recommended` preset. Legacy config moved to `recommended-legacy`. ([@michaelfaith](https://github.com/michaelfaith) in [#32457](https://github.com/facebook/react/pull/32457))\r\n- **New Violations:** Disallow calling `use` within try/catch blocks. ([@poteto](https://github.com/poteto) in [#34040](https://github.com/facebook/react/pull/34040))\r\n- **New Violations:** Disallow calling `useEffectEvent` functions in arbitrary closures. ([@jbrown215](https://github.com/jbrown215) in [#33544](https://github.com/facebook/react/pull/33544))\r\n- Handle `React.useEffect` in addition to `useEffect` in rules-of-hooks. ([@Ayc0](https://github.com/Ayc0) in [#34076](https://github.com/facebook/react/pull/34076))\r\n- Added `react-hooks` settings config option that to accept `additionalEffectHooks` that are used across exhaustive-deps and rules-of-hooks rules. ([@jbrown215](https://github.com/jbrown215)) in [#34497](https://github.com/facebook/react/pull/34497)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9",
    "date": "2025-10-01T20:37:10.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9.2",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n* *No specific changes for TypeScript 5.9.2 (Stable)*\r\n\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9 RC",
    "date": "2025-10-01T20:35:11.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9-rc",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9-rc/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9 Beta",
    "date": "2025-10-01T20:32:50.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9-beta",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9-beta/).\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.8.3",
    "date": "2025-10-01T20:29:30.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.8.3",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/).\r\n\r\n* [fixed issues query for Typescript 5.8.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.1%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.2 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.2%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.8.3 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.8.3%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "microsoft/TypeScript – TypeScript 5.9.3",
    "date": "2025-10-01T19:06:07.000Z",
    "source": "GitHub",
    "url": "https://github.com/microsoft/TypeScript/releases/tag/v5.9.3",
    "content": "Note: this tag was recreated to point at the correct commit. The npm package contained the correct content.\r\n\r\nFor release notes, check out the [release announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-5-9/)\r\n\r\n* [fixed issues query for Typescript 5.9.0 (Beta)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.0%22+is%3Aclosed+).\r\n* [fixed issues query for Typescript 5.9.1 (RC)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.1%22+is%3Aclosed+).\r\n* *No specific changes for TypeScript 5.9.2 (Stable)*\r\n* [fixed issues query for Typescript 5.9.3 (Stable)](https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=milestone%3A%22TypeScript+5.9.3%22+is%3Aclosed+).\r\n\r\nDownloads are available on:\r\n* [npm](https://www.npmjs.com/package/typescript)"
  },
  {
    "title": "uvxで誰でも使えるPython自作ツールを手軽に公開する方法",
    "date": "2025-10-01T14:39:30.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/karaage0703/articles/3ce79805245fef",
    "content": "\n uvxとは？\nuvxは、Pythonのパッケージマネージャーuvの一部で、PyPIに公開せずともGitHubリポジトリから直接Pythonツールを実行できる便利な機能です。本記事では、誰でも簡単にuvxで動作するツールを作成・公開する方法を解説します。\n本記事の前提として、uvの基本を理解していて、セットアップが完了している必要があるため、uvを全く知らない方や、セットアップしていない方は、以下の記事を参照してください。\nhttps://zenn.dev/karaage0703/articles/029b45ff78bc57\nuvxはuv tool runのエイリアスです。uv to..."
  },
  {
    "title": "株式会社ケアネット様の AWS 生成 AI 事例「医師向け情報サービスにおける大規模 AI ライティングシステムの実装」のご紹介",
    "date": "2025-10-01T10:40:34.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-carenet/",
    "content": "<p>みなさん、こんにちは。AWS ソリューションアーキテクトの森です。<br> 2025 年も多くのお客様に生成 AI の活用にチャレンジいただいております。特に注目すべきは、生成 AI をコアビジネスの価値向上や成長加速に繋げる事例が増えてきていることです。今回ご紹介するのは、医療従事者向けの情報サービスを提供する株式会社ケアネット様が、AWS の生成 AI サービスである Amazon Bedrock を活用して、医師向け情報サービスの価値を大幅に向上させた事例です。</p> \n<h2>ケアネット様の状況と課題</h2> \n<p>株式会社ケアネット様は、医療従事者向けプラットフォームを基盤に、医療の人材・教育・経営関連の事業から新薬の開発・治験普及を支援する事業まで、医療・医薬分野の専門サービスを幅広く展開しています。</p> \n<p>その中でも、日常臨床に役立つ医療・医学情報を提供する医師向けの会員制サイト「CareNet.com」は、ケアネット様の主力サービスとなっており、日本全国の医師数の約70%に相当する24万人が登録しています。CareNet.comでは、臨床医による連載やガイドライン解説などの臨床で役立つコンテンツや、医学誌に掲載された論文を厳選し日本語で要約したニュース記事を配信したりしています。しかし、忙しい医師にとっては次のような点が課題となっていました：</p> \n<ul> \n <li>膨大な医学情報の処理：年間 150 万件以上の医学文献が発表される中、臨床医が最新情報を継続的に取得することが困難</li> \n <li>情報提供の限界：従来の人力によるニュース作成では 1 日約 10 件程度しか提供できず、医師の情報ニーズを十分に満たせていなかった</li> \n</ul> \n<p>これらの課題を解決するため、ケアネット様は生成 AI を活用した新サービス「CareNet Academia（ケアネットアカデミア）」の開発に着手しました。ケアネットアカデミアは、「限られた時間で専門分野の知識を効率よくアップデートしたい」といった臨床現場のニーズに応えるスマホ対応ブラウザアプリケーションです。膨大な医学文献（米国国立医学図書館（NLM）が提供する医学文献データベース PubMed）のアブストラクト情報を読み込み、各医師ごとの関心に合わせて生成 AI が自動でニュース記事を選定・作成し、その内容がメールで配信されます。関心のあるトピックス（診療科や疾患）については利用開始時に選択可能となっており、配信されたニュース記事を評価することでより有益な情報を配信できるようになります。</p> \n<div style=\"text-align: center\">\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image1-1-1.png\"><img loading=\"lazy\" class=\"wp-image-166023\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image1-1-1-300x185.png\" alt=\"\" width=\"428\" height=\"264\"></a>\n <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image2-1-1.png\"><img loading=\"lazy\" class=\"wp-image-166022\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/29/image2-1-1-300x240.png\" alt=\"\" width=\"329\" height=\"263\"></a>\n</div> \n<h2>ソリューション</h2> \n<p>ケアネットアカデミアで配信する記事を作成するために、Amazon Bedrock を活用した大規模 AI ライティングシステムを構築しました。具体的には、Anthropic 社が開発した LLM である Claude を使ってニュース記事を自動生成し、独自開発のレコメンデーションAIと組み合わせることで、個々の医師に最適化された情報配信を実現しています。</p> \n<p>本記事では、特に Amazon Bedrock を活用した AI ライティングシステムについて詳細に解説します。</p> \n<h2>主な機能</h2> \n<p>AI ライティングシステム（Amazon Bedrock を活用した機能）</p> \n<ul> \n <li>Claude を活用して医学文献から記事を自動生成</li> \n <li>Claude を使って医学文献を整理・要約</li> \n <li>解説記事の自動生成</li> \n</ul> \n<h2>Amazon Bedrock 選定理由</h2> \n<p>ケアネット様が Amazon Bedrock を選定した主な理由は以下の通りです：</p> \n<p><strong>セキュリティとデータ保護</strong></p> \n<ul> \n <li>データが AWS 内に閉じるため、会員情報、医療情報のセキュリティを確保</li> \n <li>転送中・保管時のデータ暗号化により、機密性の高い会員情報、医療情報を安全に処理</li> \n</ul> \n<p><strong>信頼性と品質</strong></p> \n<ul> \n <li>Amazon Bedrock の SLA が定義されており、安定したサービス品質を確保</li> \n</ul> \n<p><strong>スケーラビリティ</strong></p> \n<ul> \n <li>クロスリージョン推論機能を活用し、大量のリクエストを並列処理</li> \n <li>短時間で多数の記事を生成・処理することが可能</li> \n</ul> \n<h2>導入効果</h2> \n<p>Amazon Bedrock を活用した新機能の導入により以下の効果が得られました：</p> \n<ol> \n <li><strong>情報提供量の飛躍的増加</strong> \n  <ul> \n   <li>1日あたりの記事生成数が最大5,000件に拡大（従来比約500倍）</li> \n   <li>医師が必要とする幅広い医学情報をカバー</li> \n  </ul> </li> \n <li><strong>医師の情報収集効率化</strong> \n  <ul> \n   <li>膨大な医学文献から必要な情報だけを抽出・要約して提供</li> \n   <li>医師の情報収集時間の短縮と、より効率的な臨床判断をサポート</li> \n  </ul> </li> \n</ol> \n<p>また、CareNet Academiaをお使いいただいているユーザーの継続率は60%を超えていることからも、医師からの高い満足度が伺えます。さらに、ユーザーからの追加機能の要望（関心のある疾患カテゴリの追加）に迅速に対応したことで、「非常に有用で助かっている」という声も届いています。ケアネット様の CTO である榊原海様からは「Amazon Bedrock の活用で、AWS の統合されたセキュアなインフラ内でAI処理の大規模並列実行を実現できました。」とコメントを頂戴しています。</p> \n<h2>まとめ</h2> \n<p>本事例は、医療情報という専門性の高い分野において、生成 AI を活用してビジネスの価値向上に繋げた優れた事例です。Amazon Bedrock のセキュリティ、信頼性、スケーラビリティを活かし、医師向け情報サービスの質と量を大幅に向上させることに成功しました。</p> \n<p>特に注目すべきは、単に業務効率化だけでなく、医師の情報収集をサポートし、最終的には医療の質向上に貢献するという社会的意義の高いユースケースである点です。AWS は今後も、このような社会的価値の創出に貢献できるよう、安全で信頼性の高い生成 AI サービスの提供を続けてまいります。</p> \n<p>生成 AI を活用したビジネス価値の向上や、AWS が提供する様々なサービスの選択肢にご興味をお持ちの方は、お気軽にお問い合わせください。</p> \n<p>ソリューションアーキテクト 森 瞭輔</p>"
  },
  {
    "title": "AI時代におけるBIツールのあり方について",
    "date": "2025-10-01T07:39:03.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/cavernaria/articles/f857da8ffc9db0",
    "content": "!\nポジショントーク感というか、かなりバイアスがかかっている感が否めないので、ゴマ塩程度に読んでください\n\nカスタマーサクセスマネージャー初級の玉井です。\n仕事でBIツールを扱っている以上、昨今の生成AIとの関係性をちょこちょこ聞かれるのですが、最近それが急激に増えてきました。なので、ちょっと自分の考えを整理するためにポエムをしたためたいと思います。\n\n データ分析と生成AIの今\nBIツールというのは、基本的には「データを可視化して分析するツール」ですが、最近の生成AIの成長が凄まじく、「BIツール無くても、AIにデータ分析を任せられるんちゃうの？」「AI使えば直接データと会話できるやん..."
  },
  {
    "title": "【Tauri】Rust から低遅延にフロントエンドにデータをストリーミングする",
    "date": "2025-10-01T05:26:29.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/gemcook/articles/b08ab45c5ed0e5",
    "content": "\n はじめに\n個人開発で、OSC で送られてきた値を Rust で受信し、それを低遅延でフロントエンドに転送してリアルタイムに更新したい要件がありました。公式ドキュメントを確認したところ、目的に合う Channel API があったため、学習を兼ねて記事にまとめました。\n!\nプッシュ通知など比較的シンプルな双方向通信で十分なケースでは、Listen というAPIを利用するのが適していそうです。\n\n\n OSCとは\nOSC（Open Sound Control）は、MIDIの後継として設計された、音楽やメディア制御に特化した高速かつ柔軟な通信プロトコルです。シンプルな構造で低遅延性があり、音..."
  },
  {
    "title": "Next.js × Hono × モノレポで実践する「リアルオプション戦略」：初期の開発速度と将来の柔軟性を両立させるWebシステム設計",
    "date": "2025-10-01T03:38:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/assign/articles/083dfb24afd335",
    "content": "\n はじめに\nASSIGN CTOの須永と申します。\n弊社では転職エージェントの支援品質の高度化・顧客価値の最大化を目指し、面談・選考管理、\n各種書類作成、求人マッチング、データ分析などの機能を持つ業務管理システムを内製で開発しています。\n昨年度からは新たに新卒就活支援事業を開始し、転職支援事業と同様に業務管理システムの開発プロジェクトを本格的に推進することになりました。\nこの記事では、上記システムの設計で採用した「リアルオプション戦略」に基づく技術選定の背景と、その具体的な内容についてご紹介します。\n\n プロジェクトにおける不確実性\nこのプロジェクトには、いくつかの大きな制約や考慮すべ..."
  },
  {
    "title": "Cursor の新機能「Browser Automation」を使ってみた",
    "date": "2025-10-01T01:27:07.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/nix/articles/8751bf909737e2",
    "content": "\n はじめに\n週末のドライブが趣味の @___nix___ です。\n\n 背景\n最近、気になっている方は気になっているかと思いますが、Cursor の Tools に表示されている「Browser Automation」とは何だろう？どうやって使うのだろう？という疑問に答える内容になっています。\n\n\n 概要\nCursor の新機能「Browser Automation」を紹介する前に現在の状況も含めてまとめておきましょう。\nAIを活用してブラウザを操作することができれば今までの手作業が自動化できると誰もが夢見ているかと思います（E2Eテストもね）。そんな中で生まれたのが ブラウザ操作型のM..."
  },
  {
    "title": "C++を使った数値計算ライブラリの整備で辛かったこと",
    "date": "2025-10-01T00:23:04.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/h_shinaoka/articles/896539019fdd08",
    "content": "\n まえがき\nこの記事はC++を批判する意図はなく, 過去10年以上の数値計算ライブラリの開発経験を共有する目的で書かれている.\n\n まとめ\n特に, 標準的なパッケージマネージャー, コンパイラー, ビルドシステムの不在が辛い. 以下に項目ごとに具体的な感想を書いていこう.\n\n 標準的なパッケージマネージャーの不在\nJulia, Rustなどに存在する統一されたパッケージマネージャーがC++には存在しない. これにより, 以下の困難が生じる.\n\n自分が開発しているライブラリを機能ごとに分割しづらい. 例えば, いくつかのライブラリで共通の機能 (例えば, full-pivoting LU..."
  },
  {
    "title": "IVR による電話注文から Amazon Pay 決済へ – Amazon Connect で実現する新しい注文導線の構築アイデア",
    "date": "2025-10-01T00:21:39.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/ivr-amazonpay/",
    "content": "<h2>はじめに</h2> \n<p>近年、IT の急速な進歩と共に EC 市場は急速に拡大し、様々な顧客ニーズに応えるため EC サイトや決済手段も多様化する中、「電話」という従来からのチャネルの重要性は今なお低下することはありません。シニア層や IT に不慣れな方への対応や緊急時の問い合わせなど、電話での対応が必要とされるシーンは決して少なくなく、むしろ事業者様とお客様をつなぐ接点として大きな価値をもたらす役割を担っています。<br> その一方で、コンタクトセンターにおける人手不足やコストの課題は、業界共通の大きな悩みであることも事実です。オペレータの負荷軽減や業務効率化、運用コストの削減を目指す中で注目される技術として <a href=\"https://aws.amazon.com/jp/what-is/interactive-voice-response/\">IVR (Interactive Voice Response)</a> があります。IVR は電話による顧客対応を自動化する技術として活用されており、音声ガイダンスに従ってキーパッドから番号を入力する、あるいはユーザーが発話することで、その内容に応じて様々なサービスを利用できるシステムです。この技術により、ヒューマンオペレーターの対応を減らし必要な場面にだけオペレーターが介在できるため、人手不足の課題解決につながり、見方を変えると、オペレータ対応を真に必要とするお客様に絞った対応ができるため、問い合わせ窓口としての満足度向上にも貢献できます。<br> ここで注目したいのが、AWS が提供するクラウドベースのコンタクトセンターサービス <a href=\"https://aws.amazon.com/jp/connect/\">Amazon Connect</a> と AI による柔軟な対話を実現する <a href=\"https://aws.amazon.com/jp/lex/\">Amazon Lex</a> です。従来の定型フレーズによる音声ガイダンスでは無機質な印象もあった IVR ですが、AI や 音声合成マークアップ言語 (SSML) など、多様な機能を活用することで、より自然で温かみのあるインタラクションを AWS で実現することができます。そもそも、従来のオンプレミスのコンタクトセンター基盤の IVR にこうした最新のテクノロジーを組み込もうとした場合、時間やコストが制約になることもあります。これに対し、Amazon Connect と Amazon Lex はわずか数クリックでデプロイすることができ、料金についても初期費用不要の従量課金モデルでサービスを利用することが可能です。そのため、スモールスタートで素早く取り組みを開始し、事業成長とともに規模をスケールすることができます。<br> また、<a href=\"https://pay.amazon.co.jp/\">Amazon Pay</a> は Amazon が提供する ID 決済サービスで、Amazon アカウントを持っていればどなたでも利用できる簡単・便利な決済サービスです。<a href=\"https://www.amazon.co.jp/\">amazon.co.jp</a> を普段からご利用いただいているお客様はすでに Amazon アカウントをお持ちですので、Amazon Pay をすぐに利用できます。<a href=\"https://pay.amazon.co.jp/merchant-stories\">Amazon Pay が導入されている EC サイト</a>では、Amazon アカウントに登録されたお支払い方法・お届け先住所を利用できるため、最短 3 ステップでお買い物が完了します。Amazon Pay を IVR による電話注文と統合することで、電話口でのやり取りから Web 決済までスムーズかつセキュアに完結し、これまで抱えていた「電話口でのクレジットカード番号の伝達」や「注文導線における入力操作の手間」というお客様の不安・不満、さらには事業者様が懸念する「購入からの途中離脱」の解消につながります。<br> 本記事では、Amazon Connect および Amazon Lex を活用した IVR による電話注文から Amazon Pay での Web 決済につなげる新しい購入体験のシナリオや構成例についてご紹介します。お客様の利用シーンや属性に合わせて選択可能な最適なチャネルを提供し、コンタクトセンタービジネスをさらに拡張するアプローチのきっかけとなれば幸いです。</p> \n<h2>電話注文時のユーザー体験</h2> \n<p>本記事では電話注文のシーンに焦点を置き、電話注文の開始から決済完了までの一連の流れを想定します。<br> お客様がカタログやテレビショッピングで見た電話番号を入り口とし、どういった体験ができるかのアイデアをご紹介します。<br> 一例ではありますが、以下のようなフローをユーザー体験として想定できます。</p> \n<ol> \n <li><strong>電話をかけて、商品名・購入数 を電話口で伝える。</strong></li> \n <li><strong>注文を電話口で確認したら、電話をかけた端末に SMS メッセージを受信する。</strong></li> \n <li><strong>SMS のリンクから Web に遷移し、Amazon Pay で決済を行う。</strong></li> \n</ol> \n<p>手順 1, 2 のフローは電話口でのインタラクションとなり、手順 3 は、Web での決済操作となるイメージです。<br> 電話口でのインタラクションは IVR によって実現が可能です。つまりオペレータの介在なしに電話でのフローは完結できます。<br> 例えば、以下のような対話イメージを IVR によって実現できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image001-1.png\"><img loading=\"lazy\" class=\"size-large wp-image-164483 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image001-1-1024x448.png\" alt=\"\" width=\"1024\" height=\"448\"></a></p> \n<h2>IVR による電話注文を実現する AWS のサービス</h2> \n<p>電話口での IVR は <a href=\"https://aws.amazon.com/jp/connect/\">Amazon Connect</a> と <a href=\"https://aws.amazon.com/jp/lex/\">Amazon Lex</a> で構築が可能です。<br> Amazon Connect は AWS が提供するクラウドベースのコンタクトセンターサービスで、Web コンソールの UI 上でブロックをつなげることで、コンタクトフローを簡単に構築することができます。そのブロックの中の一つに、Amazon Lex を呼び出すブロックがあります。Amazon Lex は 会話型インターフェースを構築する、いわゆるチャットボットのサービスです。Amazon Lex を Amazon Connect と統合することで、電話口での対話を実現することができます。Amazon Lex では注文を処理するためのインテントを構築し、Amazon Connect のフローの中で呼び出すように構築が可能です。「買い物したい」という発話によって、構築した注文処理のインテントが発動し、最後の注文確認までの会話フローを構築することができます。<br> また、Amazon Lex から AWS Lambda を呼び出すことも可能なため、Amazon Lex のインテントの中で注文確認ができれば AWS Lambda を呼び出し、注文情報をデータベースなどに保管するような構築イメージになります。</p> \n<p>なお、SMS メッセージの送信についても AWS で実現することができ、例えば、Amazon SNS のサービスに SMS メッセージを送信する機能があります。Amazon Connect では発信者の電話番号を取得することができ、さらにコンタクトフローの中で AWS Lambda に電話番号情報を渡して実行することも可能です。そのため、Lambda 関数にて Amazon SNS から SMS 送信を行うよう実装することで、Amazon Connect から連携された電話番号をもとに発信者であるお客様に SMS メッセージを送信することを実現できます。</p> \n<p>上記のように、多様な機能を提供する AWS のサービスを組み合わせることで、IVR による電話注文から SMS の送信まで、すべてを AWS でシンプルに実現できると考えています。電話注文でのインタラクションから SMS 送信までのアーキテクチャ例を以下に掲載いたしますので、ご参考にいただけますと幸いです。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image002.png\"><img loading=\"lazy\" class=\"alignnone wp-image-164470 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image002-1024x682.png\" alt=\"\" width=\"1024\" height=\"682\"></a></p> \n<p>本記事冒頭でも言及した通り AWS は従量課金モデルであるため、スモールスタートで「まず試してみる」といったことが可能です。新しい機能の導入・拡張に AWS は非常に親和性が高いです。</p> \n<h2>Amazon Pay による Web 決済</h2> \n<p>続いて、Web での決済操作の導線イメージをご紹介します。<br> ここでまずは簡単に Amazon Pay の紹介をいたします。</p> \n<h3>Amazon Pay とは</h3> \n<p><a href=\"https://pay.amazon.co.jp/\">Amazon Pay</a> は Amazon のお客様向けに提供されている ID 決済サービスで、<a href=\"https://pay.amazon.co.jp/merchant-stories\">Amazon Pay を導入されている事業者様</a>の EC サイトにてご利用いただけます。<br> Amazon Pay のご利用に新たな専用アカウント・アプリの登録は必要ありません。<br> Amazon アカウントをお持ちのお客様、つまり <a href=\"https://www.amazon.co.jp/\">amazon.co.jp</a> を普段からご利用いただいているお客様であれば、その Amazon アカウントに登録されているお支払い方法・お届け先住所を利用することができるため、購入したい EC サイトにて新たにクレジットカードや住所情報登録の手間が軽減され、スピーディーかつ安心してお買い物を楽しむことができます。また、Amazon Pay ではクレジットカードだけでなく、Amazon ギフトカードやあと払い（ペイディ）、メルペイ、パートナーポイントによるお支払いも可能です。<br> Amazon Pay に関する詳しい情報、および導入を検討される事業者様は、<a href=\"https://pay.amazon.co.jp/\">Amazon Pay の公式ページ</a>、または<a href=\"https://pay.amazon.co.jp/resources/dekiru-amazonpay\">こちらのページ</a>から無料でダウンロードできる資料にてご説明しておりますので、ご参照ください。</p> \n<h3>Amazon Pay での決済イメージ</h3> \n<p>Amazon Pay の概要を掴めたところで、決済操作の導線イメージをご紹介します。「電話注文時のユーザー体験」の章にて記載した手順 3 に相当する箇所のご紹介となります。<br> 簡易な例ではございますが、以下に購入フローのイメージを掲載します。上部の水色のエリアが事業者様の EC サイト、下部のオレンジのエリアが Amazon 側のページ (Amazon Hosted Page) を表しています。<br> Amazon Pay ではこのように、EC サイトと Amazon Hosted Page を行き来することで決済を進めることが基本となります。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image003.jpg\"><img loading=\"lazy\" class=\"size-large wp-image-164484 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image003-1024x636.jpg\" alt=\"\" width=\"1024\" height=\"636\"></a></p> \n<p>流れとしては、ユーザーに SMS が到達し、そこに記載された URL をクリックすることで、電話口での注文情報が反映されたカートページに遷移します。今回 SMS での送信としているのは、Amazon Connect で発信者の電話番号が取得できるためであり、他の手段で URL を送付する方法も考えられます。URL をクリックし Web ページに表示された Amazon Pay ボタンをクリックすることで、Amazon Hosted Page に遷移します。ユーザーはお持ちの Amazon アカウントでログインし、そのアカウントに登録されているお支払方法およびお届け先住所を選択、あとは EC サイト側で注文確定ボタンを押すことで Amazon Pay の決済を完了することができます。<br> このように、Amazon アカウントを持ったユーザーであれば、電話注文から購入完了までの一連の流れを、途中での入力の手間などなくスムーズに完結できるよう実装することが可能です。<br> Amazon Pay を事業者様サイトに組み込む方法については、<a href=\"https://developer.amazon.com/ja/docs/amazon-pay-checkout/introduction.html\">Amazon Pay インテグレーションガイド</a>にて記載がございますので、適宜ご参照ください。<br> （EC サイトへの Amazon Pay 導入には<a href=\"https://pay.amazon.co.jp/signup\">お申し込み</a>が必要です。）</p> \n<h2>IVR × Amazon Pay 導入のメリット</h2> \n<p>IVR による電話注文から、Amazon Pay での Web 決済に引き込むことで以下の観点でメリットがあると考えています。</p> \n<ul> \n <li><strong>待ち時間の軽減</strong><br> IVR での自動応答がない場合、電話注文が殺到すると、オペレータに接続されるのを待つ時間が長くなってしまい、お客様の体験は低下します。 IVR による自動応答で一部の通話に対応することができれば、待ち呼数が減ることになり、有人対応を必要とするお客様もオペレータに繋がりやすくなります。</li> \n <li><strong>購入離脱の削減と在庫確保の安心感</strong><br> オペレータと繋がらないことで今まで購入から離脱していたお客様を救うことができます。また、IVR によって商品の在庫状況をすぐに確認できるようになるため、例えば、期間限定商品の注文に対して、電話注文でまずは在庫を確保することでお客様の安心感や満足度を向上させることもできると考えられます。</li> \n <li><strong>有人対応が必要なお客様への手厚いサポート</strong><br> IVR による電話注文の導入により、その利用者だけでなく、一方でそれを利用しないお客様に対してもメリットがあると考えられます。例えば、高齢者やまだ Web 操作に不安がある方からの問い合わせや、注文トラブルなどの緊急の問い合わせに対して、オペレータをさらに動員させることできます。つまり、オペレータの対応が真に必要なお客様に対するサポートにより時間を充てられることにつながるため、コールセンターとしての質やお客様満足度の向上につながると考えられます。</li> \n <li><strong>電話口でのクレジットカード番号情報の伝達が不要、後払いによる支払い不安からの解消</strong><br> Amazon Pay による Web での決済導線に誘導することで、電話口でクレジットカード番号を伝える必要がなくなります。加えて、商品と併せて配送する請求書でお客様からの入金を待つという決済モデルから解放され、支払い不安が解消されます。お客様および EC サイトを持つ事業者様双方においてメリットが出てくるポイントです。</li> \n</ul> \n<h2>利用シーン</h2> \n<p>利用シーンとしては、以下の場面が例として考えられます。</p> \n<ul> \n <li><strong>テレビ/ラジオ ショッピング</strong></li> \n <li><strong>カタログ通販</strong></li> \n <li><strong>チケット予約</strong></li> \n <li><strong>ホテル予約</strong></li> \n <li><strong>飲食店予約時の事前決済</strong></li> \n</ul> \n<p>上記のユースケースや本記事にて紹介したフローはあくまで例ではございますので、他にも適用できる場面や取り入れられるフローなどがあるかと思います。イメージを膨らましていただくための一助となれば幸いです。</p> \n<h2>Outbound Call による Amazon Pay 決済</h2> \n<p>本記事でご紹介した構想は、テレビやカタログで見た電話番号に対してお客様から電話をかけるといったシーンを想定しておりました。一方、Amazon Connect では Outbound Call の機能があり、Amazon Connect からお客様に対して電話を発信することができます。<br> また、Amazon Pay では Payment Method On File (PMOF) という機能があります。<br> PMOF という機能は、購入者が商品を初回購入するタイミング、あるいはマイページなどから事前に支払い方法を登録することで、以降の購入時は事業者の任意のタイミングでその購入者が登録した支払い方法に対して課金することができる機能です。<br> 支払い方法の事前設定を必要とする事業者や、購入者の操作なしに取引を処理する必要がある事業者に有用な機能です。<br> IVR を使った Amazon Connect からの Outbound Call と Amazon Pay の PMOF の機能を統合することで、お客様の再購入をサポートする体験を実現することも可能です。<br> （現時点におきまして、PMOF は Amazon Pay の担当者より個別でご案内をした事業者様のみご利用いただける限定機能となっております。導入のご検討・PMOF の技術資料をお求めの場合は Amazon Pay への<a href=\"https://pay.amazon.co.jp/signup\">お申し込み</a>後、担当者へご相談ください。）</p> \n<p>流れとしては、初回の購入時あるいは事前に PMOF によって支払い方法を登録します。<br> 初回の購入時から例えば 2 週間経過したタイミングで、その購入者に対して Amazon Connect から Outbound Call をかけます。<br> Outbound Call の中でお客様が購入の意思を示すことで、事前に PMOF にて登録した決済方法に対して請求をかけることができます。<br> これにより、再購入の際に Web 決済導線を再度操作することなく完結することができ、簡単でスムーズな購入体験を実現できます。<br> PMOF による支払い方法の登録を行った以降における Outbound Call での IVR 対話イメージ例を参考までに掲載いたします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image004-1.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-164485\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/02/IVR-image004-1-1024x440.png\" alt=\"\" width=\"1024\" height=\"440\"></a></p> \n<p>上記のイメージ例では、お客様は最短 1 クリックのキーパッド操作で購入まで完了できるため、非常に手軽でスムーズな購入体験になります。<br> 認証コードによる本人確認や、注文から 60 分間は注文を取り消せるようにするといったオペレーションを組み込むことで、さらなる安心感を付加することもアイデアとしてあるかと思います。</p> \n<p>なお、関連する記事といたしまして、取引内容の確認・承認を Amazon Connect の Outbound Call で自動化する技術ブログ <a href=\"https://aws.amazon.com/jp/blogs/contact-center/automate-transaction-confirmation-using-outbound-calls-with-amazon-connect/\">Automate transaction confirmation using outbound calls with Amazon Connect</a> もございますので、よろしければ参考にしてみてください。</p> \n<p>最後に、Outbound Call に関して <a href=\"https://aws.amazon.com/jp/connect/outbound/\">Amazon Connect Outbound Campaign</a> という機能もございます。この機能はアウトリーチすべきお客様のセグメントを作成し、適切なタイミング、適切なチャネル（音声通話、SMS、Email等）でプロアクティブなアプローチを実現することができます。ここに IVR を活用することもでき、オペレータが不要な大規模なアウトリーチも可能です。ぜひご検討材料の一つとしていただけますと幸いです。</p> \n<h2>まとめ</h2> \n<p>本記事では、AWS で実現する IVR と Amazon Pay を統合することによって、電話注文から決済までを実現する構想についてご紹介しました。IVR を構成する AWS のサービスについても触れ、AWS を活用することでシンプルかつスモールスタートで始められる点、加えて柔軟に機能拡張していくことができる点も AWS 活用の大きな強みです。すでにコンタクトセンターを導入されている事業者様におきましても、IVR による電話注文のチャネルだけを切り出す形で AWS にて実現することも考えられます。また、Amazon Connect で実現するコンタクトセンターの柔軟性は <a href=\"https://aws.amazon.com/jp/bedrock/\">Amazon Bedrock</a> や <a href=\"https://aws.amazon.com/jp/connect/q/\">Amazon Q in Connect</a> と組み合わせることで、生成 AI の技術要素を盛り込みさらに広げていくこともできると考えています。<br> 本記事でご紹介した対話フローや AWS 構成図は一例ではございますので、事業者様の取り扱う商材や社内要件、ターゲットとするお客様、必要となる機能によっても変わってくる部分があるかと思いますが、電話注文のチャネルを拡張するためのアイデアの一助となりましたら幸いでございます。</p> \n<h2>著者</h2> \n<p><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/03/niwaya.jpg\"><img loading=\"lazy\" class=\"alignleft size-thumbnail wp-image-164514\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/03/niwaya-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\"></a>庭屋 郁基</strong><br> アマゾンジャパン合同会社<br> Amazon Payments Japan 事業部<br> Solutions Architect</p>"
  },
  {
    "title": "vercel/next.js – v15.6.0-canary.38",
    "date": "2025-09-30T23:40:39.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v15.6.0-canary.38",
    "content": "### Core Changes\n\n- Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\": #84389\n\n### Misc Changes\n\n- Turbopack: trace module.createRequire: #84335\n\n### Credits \n\nHuge thanks to @mischnic and @lukesandberg for helping!\n"
  },
  {
    "title": "成田空港におけるドーリー動態管理システム「DOLYS」をAWSに構築",
    "date": "2025-09-30T12:48:20.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/jal-dolys/",
    "content": "<h2>はじめに</h2> \n<p>本稿は、日本航空株式会社デジタルEX企画部 空港オペレーショングループの橋本様よりご寄稿いただいた、成田空港でのドーリー運用効率化を目的とした動態管理システム導入プロジェクトの取り組みをご紹介します。</p> \n<h2>開発の経緯</h2> \n<p>空港内では、航空機に搭載する貨物や手荷物の入ったコンテナを運ぶために、『ドーリー』と呼ばれる台車を利用しています。<br> ドーリーは動力を持っておらず、牽引車で複数台連結して使用されます。航空機からコンテナを降ろすときも、航空機にコンテナを搭載するときも、必ずコンテナと同じ台数のドーリーが必要となります。</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys1.png\" alt=\"航空機からコンテナを降ろし、ドーリーに載せ替える\"><br> 航空機からコンテナを降ろし、ドーリーに載せ替える</p> \n<table> \n <tbody> \n  <tr> \n   <td><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys2.png\" alt=\"使用中のドーリー（コンテナあり）\" width=\"265\"></td> \n   <td><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys3.png\" alt=\"コンテナ搭載前のドーリー\" width=\"265\"></td> \n   <td><img src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys4.png\" alt=\"ドーリーに設置されたIoT機器\" width=\"265\"></td> \n  </tr> \n  <tr> \n   <td>使用中のドーリー（コンテナあり）</td> \n   <td>コンテナ搭載前のドーリー</td> \n   <td>ドーリーに設置されたIoT機器</td> \n  </tr> \n </tbody> \n</table> \n<p>しかし、成田空港では以下のような課題に直面していました。</p> \n<ul> \n <li>ドーリーの利用は、複数のグループ会社にまたがるため、各社で連絡を取り合いながら、利用するドーリーをそれぞれ確保している。</li> \n <li>未使用のドーリーが空港内のどこに何台あるのか把握する手段が無く、利用の度に各社の現場作業者が捜索をしている。</li> \n <li>ドーリーの稼働状況が分からず適正数が配備されているか不明。</li> \n</ul> \n<p>成田空港内には多くのドーリー置き場や貨物上屋が点在しており、場合によっては移動に30分以上を要することもあります。そのため、ドーリーを見つけるだけでも多大な時間と労力がかかり、業務の効率性を損なう原因となっていました。</p> \n<p>これらの課題を解決すべく、IoTデバイスとクラウド技術を活用した「DOLYSプロジェクト」を立ち上げました。</p> \n<h2>DOLYS導入の目指すもの</h2> \n<p>本プロジェクトの核となるのは、成田空港内の約3,040台のドーリーに装着したIoTデバイスを活用することで位置情報をリアルタイムに管理し、これを可視化するシステムです。このシステムにより以下の具体的な改善目標を掲げました。</p> \n<p>1.ドーリー捜索時間の削減<br> IoTデバイスでリアルタイムに位置を管理することで、ドーリーを探す時間を削減し、業務効率を向上。</p> \n<p>2.ドーリー稼働率の向上による台数削減<br> 効率的な運用管理により、必要な台数を最適化し、ドーリーおよびカートの台数の削減。</p> \n<h2>プロジェクト体制とアプローチ</h2> \n<p>本プロジェクトでは、成田空港におけるドーリーの運用を効率化するシステムを低コスト・短期間で構築することを目指し、アジャイル開発を採用しました。この手法により、現場の課題や要望を迅速にシステムに反映しながら、稼働までのリードタイムを最小化しました。</p> \n<p>特徴的なポイントとして、本プロジェクトでは、JALのグループ企業である<a href=\"http://www.jgsgroup.co.jp\" target=\"brank\" rel=\"noopener\">JALグランドサービス</a>、<a href=\"https://www.jalcargoservice.com\" target=\"brank\" rel=\"noopener\">JALカーゴサービス</a>、<a href=\"https://www.jalsky.co.jp\" target=\"brank\" rel=\"noopener\">JALスカイ</a>といった複数のグループ会社の現場からの意見を広く取り入れ、現場と開発チームとの連携を密接に構築。現場スタッフを主要ステークホルダーに位置付け、ユーザー目線のシステムを実現しました。</p> \n<p>また、プロジェクトは「必要機能のみに絞る」という方針を掲げ、シンプルかつ実用性重視のシステム設計を行ったことが特徴です。<br> <img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys5.png\" alt=\"システムのアーキテクチャ\" width=\"265\" height=\"265\"></p> \n<h2>システムのアーキテクチャ</h2> \n<p>AWSを基盤にしたサーバーレスアーキテクチャを採用しています。<br> システムの規模やデータ量に応じたリソースの自動スケールが可能となり、運用コストを最小化しました。また、サーバーレスの特性を活かし、迅速な開発と変更対応も可能になっています。<br> また、本システムはJALグループの統合クラウドプラットフォームである<a href=\"https://aws.amazon.com/jp/solutions/case-studies/jal-nec/\" target=\"brank\" rel=\"noopener\">CIEL/S</a>上に構築することで、AWSの柔軟性を活用しつつ、同グループに求められるITガバナンス要件と高いセキュリティ基準を満たしました。</p> \n<p>IoT技術とAWSのクラウドサービスを組み合わせることで、IoTデバイスからのリアルタイム位置情報を効率的に収集し、ドーリーの位置情報可視化および運用の最適化を実現しました。</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/08/27/jal-dolys6.png\" alt=\"DOLYS画面（成田空港の概略図にリアルタイムでドーリー台数を表示）\" width=\"265\" height=\"265\"><br> ※DOLYS画面（成田空港の概略図にリアルタイムでドーリー台数を表示）</p> \n<p>また、現場作業者はiPadなどのタブレット端末を活用し、直感的にドーリーの場所を検索・確認できます。ダッシュボードでは「エリア・スポットごとのドーリー配置台数」や「各会社の必要数」をリアルタイム表示し、機材の種類やコンテナ搭載の有無など細かい条件による検索機能も備えているため、現場の即時対応力と業務効率を大幅に向上させています。</p> \n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/09/12/jal-dolys7.png\" alt=\"アーキテクチャ概略図\" width=\"265\" height=\"265\"><br> ※アーキテクチャ概略図</p> \n<h2>想定効果と今後の展望</h2> \n<p>本システムの導入により、以下の効果が見込まれます。</p> \n<p>1.稼働率の向上に伴い、新規購入台数および点検費用の削減が可能となります。具体的には、年間で56台（約7％減）の更新台数削減により、約7,170万円のコスト削減が期待されます。</p> \n<p>2.所在の見える化により、捜索時間と燃料消費の削減が実現します。年間で約14,157時間の捜索時間が削減され、燃料も約66,361リットル（約760万円相当）が節約されます。<br> 加えてCO2排出量は年間約171トン削減され、環境負荷の軽減にも寄与します。<br> ※CO2算出方法：66,361[ℓ]×0.00258[t-CO2/ℓ]=171[t]</p> \n<p>現在は成田空港で運用が進んでいますが、同様の仕組みを羽田空港にも展開する計画が進行中です。これにより、複数の主要空港でのドーリー運用効率が向上し、さらに標準化された管理体制が構築される見込みです。</p> \n<p>現行のDOLYSは主に「ドーリーの現在位置」と「利用可否ステータス（積載検知）」を確認する機能で活用されていますが、将来的には以下のようなデータ分析機能の追加が構想されています。</p> \n<p>稼働率の分析：ドーリーの使用頻度や運用状況を可視化。過剰な配備や不足を是正。<br> リソースマネジメント：人だけでなく、設備などのリソースを最適化し、全体の運用効率を最大化。<br> これらのデータ分析機能により、コスト削減と業務改善をさらに推進します。</p> \n<h2>まとめ</h2> \n<p>本稿でご紹介した「DOLYSプロジェクト」は、成田空港におけるドーリー管理の課題を起点に、IoTとクラウド技術を融合させた革新的なソリューションを実現しました。AWSを活用したサーバーレスアーキテクチャにより、低コストかつ迅速なシステム構築を可能とし、現場のニーズに対応したシンプルで使いやすい管理環境を提供しています。</p> \n<p>導入効果として、稼働率向上による更新台数の削減や捜索時間・燃料消費の大幅な削減が想定されており、コストメリットだけでなく環境負荷の低減にも寄与しています。今後は、羽田空港への展開をはじめ、データ分析機能の充実によるさらなるリソース最適化を目指し、運用効率化に貢献してまいります。</p> \n<p>本プロジェクトは、現場を中心に据えたアジャイル開発の好例であり、デジタル化推進における成功モデルとして、今後のさらなる業務改革の礎となることを期待しています。</p> \n<hr> \n<div class=\"blog-author-box\">\n <strong><a href=\"https://www.jal.co.jp/\">日本航空株式会社</a></strong>\n <br> \n <strong>デジタルEX企画部空港オペレーショングループ</strong>\n <br> \n <strong>橋本 隆彦</strong>\n <br> 2008年、日本航空のグランドハンドリング業務を担う株式会社JALグランドサービスに入社。\n <br> 現場業務を経験後、2018年より社内システム開発に関する業務などを担当。\n <br> 2024年より現職に従事。DOLYSや空港オペレーション系システムを担当。\n</div> \n<div class=\"blog-author-box\">\n <strong><a href=\"https://www.jal.co.jp/\">日本航空株式会社</a></strong>\n <br> \n <strong>グランドハンドリング企画部BPR推進グループ</strong>\n <br> \n <strong>村上 忠</strong>\n <br> 1993年、日本航空のグランドハンドリング業務を担う株式会社JALグランドサービスに入社。\n <br> 現場業務・間接業務（安全品質・生産計画担当）を経験後、2022年より現職に従事。\n <br> DOLYSを含む空港ハンドリングの生産性向上施策を担当。\n</div> \n<div class=\"blog-author-box\">\n <strong><a href=\"https://www.jaldx.co.jp/\">JALデジタル株式会社</a></strong>\n <br> \n <strong>デジタル開発部第1グループ</strong>\n <br> \n <strong>篠原 奈都未</strong>\n <br> 2018年、日本航空のITを担う株式会社JALインフォテック（現：JALデジタル株式会社）に入社。\n <br> 業務システムの基盤維持管理を担当。\n <br> 2021年より現職に従事。\n <br> クラウドネイティブ技術を活用したアプリ開発やアジャイル開発推進を担当。\n</div>"
  },
  {
    "title": "バイブコーディングという地獄",
    "date": "2025-09-30T09:17:08.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/fugafuga/articles/9f999869812c17",
    "content": "\n AIに全てを任せた危険な実験\nClaude Code（月100ドル）に課金し、バイブコーディングに挑戦してみました。\n（バイブコーディングとは、AIに振動的に高速でコードを生成・修正させ続ける開発スタイルです。）\n今回は危険を承知でAWSの認証情報まで渡し、デプロイも含めて完全にAI任せにするという実験を1か月間行いました。\n結論から言うと、最初の1週間は天国、その後は地獄でした。\n\n 最初の1週間\n初週の生産性はとても良かったです。\nエラーが出ても、そのままClaudeに投げれば瞬時に解決策を提示し、修正までしてくれます。UIデザインも仕様書を渡せばモダンなコンポーネントが次々と生..."
  },
  {
    "title": "全プロセスが一秒止まる不具合、原因はLinuxカーネルにあり？",
    "date": "2025-09-30T08:00:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/turing_motors/articles/a460fe08b54253",
    "content": "\n はじめに\n完全自動運転の実現を目指すスタートアップ「チューリング」でエンジニアをしています、坂本です。私が所属しているDrivingSystemチームでは、組み込みLinuxをベースに、自動運転システムと、自動運転モデル学習用データ収集システムを開発しています。\n組み込みLinuxの開発を行っていると、カーネルの挙動、周辺デバイスとの組み合わせ等によって、思いがけない不具合に遭遇することが少なくありません。この記事では、実際にシステム開発中に遭遇した再現が難しく、原因の切り分けに時間を要した不具合について紹介していきます。同じように組込みLinuxや自動運転ソフトウェアの開発に携わっ..."
  }
]