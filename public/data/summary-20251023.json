[
  {
    "title": "Kiro によるマルチモーダル開発：設計から完成まで",
    "date": "2025-10-23T12:12:39.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/multimodal-development-with-kiro-from-design-to-done/",
    "content": "<p>本記事は 2025 年 10 月 21 日に公開された Kandyce Bohannon による “<a href=\"https://kiro.dev/blog/multimodal-development-with-kiro-from-design-to-done/\" target=\"_blank\" rel=\"noopener\">Multimodal Development with Kiro: From Design to Done</a>” を翻訳したものです。</p> \n<p>ソフトウェアアーキテクチャとエンジニアリングは、アートでありサイエンスでもあります。私たちは複雑な問題を解決するエレガントな設計を作り上げますが、初期設計から最終デプロイまでのどこかで、そのビジョンが失われてしまうことがあります。多くの開発者やアーキテクトの方なら、これを身をもって経験したことがあるでしょう。システム図を何時間もかけて完璧に仕上げても、実装がその設計からどんどん逸れていってしまうのです。要件が変わり、開発者があなたの書いた図を異なって解釈し、気がつくと美しいアーキテクチャは、デプロイされる前から時代遅れになった妥協の寄せ集めになってしまいます。</p> \n<p>従来のシステム開発は破綻しています。図と実際にデプロイされるコードの間のギャップは時間を無駄にし、技術的負債を生み出し、的外れなシステムを提供します。しかし、そうである必要はありません。</p> \n<p>私は最近、Kiro を使って金融取引システムを構築する際に、この課題に正面から取り組みました。これは、アーキテクチャの失敗が実際の金銭的損失やコンプライアンス上の悪夢につながるようなプロジェクトです。従来なら ER 図（エンティティ・リレーションシップ図）をデータベーススキーマに落とし込み、UML（統一モデリング言語）図をサービスインターフェースに変換するのに数週間かかるところを、Kiro のマルチモーダルなエージェントチャットを使うことで、ホワイトボードに描いたスケッチが数日で本番コードに変わりました。</p> \n<p>Kiro がどのように視覚的な図とコード、ドキュメントを同時に処理することで、私の開発プロセスを根本から変えたのか。そして、あなたのプロセスもどう変えられるのかをご紹介します。</p> \n<h2>ホワイトボードの写真から TypeScript モデルへ</h2> \n<p>私はほとんどのプロジェクトと同様に、ホワイトボードと数本のマーカーから始めました。私がスケッチした ER 図 は、金融取引システムの中核となるエンティティを示していました。口座に接続されたユーザーがポジションを保持し、注文を実行して取引が行われます。そして、それらすべてがリアルタイムの市場データによって支えられています。</p> \n<p>ここで Kiro のマルチモーダル機能が真価を発揮します。私は図を手動で変換する代わりに、ホワイトボードの写真を直接 Kiro にアップロードし、構築したいものについて会話を始めました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/1-multimodal-development-with-kiro-from-design-to-done-original.png\"><img class=\"alignnone size-full wp-image-167777\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/1-multimodal-development-with-kiro-from-design-to-done-original.png\" alt=\"\" width=\"3840\" height=\"2160\"></a></p> \n<p>Kiro は単に画像を見るだけでなく、手描きの図で表現されたエンティティ、関係、ビジネスロジックを理解しました。数分以内に、視覚的な入力を分析し、私が描いたものだけでなく、実際の金融取引システムに必要な暗黙の要件を捉えた包括的な仕様を作成しました。</p> \n<p>視覚的な図は Kiro に構造的なコンテキストを提供してくれました。そして、チャットでの会話を通じて、どの図でも捉えることのできないビジネスのニュアンスを追加できました。私たちはコンプライアンスと規制要件、レイテンシに対する期待値、セキュリティの考慮事項について議論しました。やり取りのたびに、Kiro は私の元の視覚的設計と完璧な整合性を保ちながら仕様を更新してくれました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/2-multimodal-development-with-kiro-from-design-to-done-original.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167778\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/2-multimodal-development-with-kiro-from-design-to-done-original.png\" alt=\"\" width=\"3840\" height=\"2160\"></a></p> \n<p>ここで Kiro のマルチモーダルアプローチがその価値を証明します。Kiro は私の ER 図を受け取り、ホワイトボードのスケッチに対応する実際の TypeScript モデルを生成しました。生成されたコードは構文的に正しいだけでなく、元の図で暗示されていたビジネスロジック、関係、制約も含んでいました。User、Account、Order、Trade、Position などのエンティティは、適切な検証、関係、メソッドを持つ完全に形成された TypeScript クラスになりました。</p> \n<p>途中で Kiro に作成するように頼んで生成されたクラスとデータベーススキーマを見ると、ホワイトボードに描いた単純な ER 図がプロダクション対応のシステムにどう進化したかがわかりました。最初は考えていなかった追加のオブジェクトタイプとの関係まで発見されました。たとえば、監査証跡、ユーザー権限、ポートフォリオ階層、実際の金融取引システムに不可欠な規制コンプライアンスフィールドなどです。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/3-multimodal-development-with-kiro-from-design-to-done-original.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167779\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/3-multimodal-development-with-kiro-from-design-to-done-original.png\" alt=\"\" width=\"2376\" height=\"1705\"></a></p> \n<h2>アーキテクチャの議論からインフラストラクチャ図へ</h2> \n<p>金融取引システムのスケーラビリティ、セキュリティ、デプロイ要件についての会話に基づいて、Kiro は包括的なクラウドに依存しない Kubernetes アーキテクチャを作成しました。この計画とともに、Kiro はシステムアーキテクチャを視覚化する Mermaid 図を含むドキュメントを作成しました。図は有益でしたが、読みやすさを向上させ、さまざまな表示プラットフォームでより良いスケーリングを可能にするために、SVG 形式に変換するよう Kiro に依頼しました。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/diagram-multimodal-development-with-kiro-from-design-to-done-original.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167780\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/diagram-multimodal-development-with-kiro-from-design-to-done-original.png\" alt=\"\" width=\"1976\" height=\"1608\"></a></p> \n<p>Kiro のアーキテクチャ設計は、金融取引システム特有のパフォーマンスとコンプライアンス制約に対処しました。低レイテンシ取引サービスは、CPU ピニングと最適化されたネットワーク構成を特徴とする専用ノードプールにデプロイされました。データ層は、複数のアベイラビリティゾーンに分散された StatefulSets で実行される PostgreSQL と TimescaleDB を通じて高可用性を実現しました。イベント駆動メッセージングは、注文処理とリアルタイム市場データストリーミングに Kafka を使用し、包括的なセキュリティはネットワークポリシー、ポッドセキュリティ標準、シークレット管理のための HashiCorp Vault を実装しました。システムは、改変不能なの監査ログ、データレジデンシー制御、自動コンプライアンス監視を通じて規制コンプライアンスを念頭に置いて設計されました。</p> \n<p>Kiro は、金融取引システムがデプロイ環境間での移植性を必要とすることを理解していました。設計されたアーキテクチャは、Amazon EKS (AWS)、Google Kubernetes Engine (Google Cloud)、Azure Kubernetes Service (Azure)、またはオンプレミス Kubernetes クラスターで変更なしに実行され、クラウドに依存しないままコンテナ化されたアプリケーションの業界ベストプラクティスを組み込んでいます。</p> \n<p>このアーキテクチャ図は次のフェーズのインプットになりました。視覚的な Kubernetes アーキテクチャと議論のコンテキストの両方を使用して、Kiro はアーキテクチャの決定を実装する完全な Kubernetes マニフェストを生成しました。生成された Infrastructure as Code（IaC）には、コンプライアンスと環境管理のための適切なラベリングを持つ名前空間の組織、各コンポーネントに最適化されたアンチアフィニティルールとリソース制限を持つサービスデプロイメント、永続ボリューム要求を持つデータベースの StatefulSet 構成が含まれていました。ネットワークポリシーはサービス間のマイクロセグメンテーションを実装し、金融ワークロード向けにカスタムメトリクスを使用したHorizontal Pod Autoscalerが設定されました。Horizontal Pod Autoscaler がありました。これらすべてが Kubernetes のベストプラクティスに従ってセキュリティを確保していました。</p> \n<p>生成された Kubernetes リソースには、本番環境対応の構成が含まれていました。たとえば、Pod Disruption Budget、リソースクォータ、モニタリング用のアノテーションなどです。Kiro は、私たちの上流のアーキテクチャ設計に関する会話を、クラウドネイティブのベストプラクティスに則りながら、特定の要件にも対応したデプロイ可能なインフラストラクチャへと変換してくれました。</p> \n<h2>マルチモーダルの利点と結果</h2> \n<p>このアプローチが非常に強力だった理由は、Kiro が画像を処理できるという点だけではありません。Kiro は視覚的な図を理解し、会話のコンテキストを維持し、生成されたコードファイルを参照しながら、これらすべての異なる入力タイプにわたって一貫性を保つことができたのです。そして同時に、実装の細部を超えて考えるよう私に問いかけてくれました。</p> \n<p>従来の AI 開発ツールでは、各フェーズで別々の操作が必要でした。たとえば、図を解釈するツール、仕様書を生成する別のツール、コード生成のための 3 番目のツール、インフラストラクチャ計画のためのさらに別のツールなどです。そして、それぞれのツールを使う度に、引き継ぎによりコンテキストが失われ、不整合が生じ、手動での調整が必要になっていました。結果として、数週間の追加開発時間と、各ツールの出力が元の設計意図から逸脱することによる大幅な変更が発生していました。</p> \n<p>Kiro のエージェントベースのアプローチは、開発プロセス全体を通じてトレーサビリティを維持できるようになります。3 日間、およそ約 15 時間の開発時間の後、私は最初に描いたビジュアル設計に一致する、ほぼ完成状態の金融取引システムが出来上がっていました。生成されたコードは、私がスケッチしたエンティティと関係を直接反映しており、会話を通じて明らかになったすべての複雑な追加の情報を取り込んでいました。各フェーズは次のフェーズに情報を引き継ぎつつ、元のホワイトボードのスケッチへのトレーサビリティを維持していました。Kiro はコンプライアンスやパフォーマンス、スケーラビリティといった複雑な技術的課題に対しても、私と一緒に取り組み、安心して解決へ導いてくれました。</p> \n<p>最も重要なのは、Kiro のエージェントは単にコードを生成するだけではなかったという点です。設計上の判断に対して意見を述べたり、規制対応のための改善を提案したり、当初は想定していなかったパフォーマンスのボトルネックを特定したりしてくれました。このような共同作業のアプローチによって、さまざまなツールやセッションに分断されることなく、最初に描いた設計ビジョンを一貫して維持することができました。</p> \n<h2>これからはマルチモーダル</h2> \n<p>この経験は、「AI エージェントが複数のタイプの入力を同時に理解し処理できるときに、どれほどの可能性があるか」を示しています。ホワイトボードの写真から生成されたコード、アーキテクチャ図からインフラストラクチャ構成まで、各ステップは設計の整合性を維持しながら前のステップの上に構築されます。</p> \n<p>もし、せっかくの美しい設計とは切り離された実装になるのを見るのにうんざりしているなら、マルチモーダル開発をぜひ試してください。手描きの図から始めて、Kiro にアップロードし、視覚的な設計を理解させ、プロダクションまで一貫してその整合性を維持するのを手伝ってもらいましょう。これからの開発は「ビジュアル設計」と「コード生成」のどちらかを選ぶのではありません。両方をシームレス扱える AI を活用し、最初に描いたビジョンを損なうことなく、そのままプロダクションまで無傷で届けられる未来が始まっています。</p> \n<p>図からデプロイまでの道のりをスムーズにする準備はできていますか？<a href=\"https://kiro.dev/downloads/\" target=\"_blank\" rel=\"noopener\">Kiro を無料で始めて</a>、マルチモーダル開発をぜひ自分で体験してみてください！自分の図をアップロードするだけで、視覚的な設計から動作するコードへのシームレスな移行を体験できます。</p> \n<p><a href=\"https://x.com/kirodotdev\" target=\"_blank\" rel=\"noopener\">X</a> や <a href=\"https://www.linkedin.com/showcase/kirodotdev\" target=\"_blank\" rel=\"noopener\">LinkedIn</a> であなたの体験をぜひシェアしてください。<a href=\"https://discord.com/invite/kirodotdev\" target=\"_blank\" rel=\"noopener\">Discord コミュニティ</a> に参加して、マルチモーダル開発を使って作業の流れを変革している他の開発者とつながりましょう。</p> \n<p>設計と実装の間のギャップはもう存在する必要がありません。マルチモーダル AI を使えば、あなたの図はそのままコードになり、あなたのビジョンはこれまでよりも速く、より正確に現実のものになります。</p> \n<p>翻訳は App Dev Consultant 宇賀神が担当しました。</p>"
  },
  {
    "title": "カスタムパーミッションを使用した Amazon Quick Suite 機能のガバナンス自動化",
    "date": "2025-10-23T08:37:55.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/automate-governance-of-amazon-quick-suite-features-using-custom-permissions/",
    "content": "<p>本記事は、2025 年 10 ⽉ 9 ⽇に公開された <a href=\"https://aws.amazon.com/jp/blogs/business-intelligence/automate-governance-of-amazon-quick-suite-features-using-custom-permissions/\">Automate governance of Amazon Quick Suite features using custom permissions</a> を翻訳したもの です。翻訳は Public Sector PSA の西川継延が担当しました。</p> \n<p>Amazon QuickSight は、2025 年 10 月 9 日に <a href=\"https://aws.amazon.com/quicksuite/\" target=\"_blank\" rel=\"noopener\">Amazon Quick Suite</a> へと進化し、単一の BI 製品から、ビジネスインサイト、リサーチ、自動化のための AI エージェントを含む包括的なスイートへと拡張され、統合されたエクスペリエンスを提供します。Quick Suite は、セキュリティとユーザーアクセスポリシーを維持しながら、ユーザーがよりスマートかつ迅速に作業できるよう支援します。あらゆるスキルレベルのビジネスユーザーが、数日ではなく数分で関連するデータソース全体から回答を見つけ、自然言語でデータを分析し、洗練されたビジュアライゼーションを作成し、ツールを切り替えることなくインサイトに基づいてすぐに行動し、あらゆるタスクを自動化できます。これらの機能強化の中核にあるのは、構造化データソースと非構造化データソースの統合であり、これが <a href=\"https://docs.aws.amazon.com/quicksuite/latest/userguide/what-is.html\" target=\"_blank\" rel=\"noopener\">強力な新機能</a> を推進しています。</p> \n<p>Quick Suite は、洗練された権限管理システムを提供します。アカウント、ロール、ユーザーレベルにまたがるこのマルチティアアプローチにより、組織は特定のニーズに合わせた正確なアクセス制御を実装できます。現在のアーキテクチャの主要な機能強化の 1 つにより、管理者は最小権限の原則を適用し、シームレスなユーザーエクスペリエンスを維持しながら、アカウントレベルで特定の機能へのユーザーアクセスを制限できるようになりました。きめが粗い制御、きめ細やかな制御の両方を提供することで、Quick Suite は、エンタープライズグレードのセキュリティとコンプライアンス基準を遵守しながら、最新の AI イノベーションを自信を持って採用できるよう企業を支援します。このイノベーションと制御のバランスにより、Quick Suite は、現代のデータ分析と AI 駆動の意思決定の複雑さに対応する組織にとって、極めて重要なツールとして位置づけられています。</p> \n<p>この記事では、カスタムパーミッションを使用してアカウントレベルで機能レベルの制限をプログラムで実装する包括的なガイドを提供します。これにより、組織は生成 AI の最新イノベーションを採用しながら、エンタープライズグレードのセキュリティ、コンプライアンス、制御をサポートできます。新規および既存の Quick Suite アカウントサブスクリプションの両方で、アカウントレベルで AI ベースの機能をオフにするためのカスタムパーミッションの適用方法について説明します。</p> \n<h2>ソリューション概要</h2> \n<p>このソリューションは、Quick Suite と以下の AWS サービスを使用して、AWS アカウントにカスタムパーミッションを適用します。</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/cloudtrail/?icmpid=docs_homepage_mgmtgov\" target=\"_blank\" rel=\"noopener noreferrer\">AWS CloudTrail</a> は、AWS アカウントのガバナンス、コンプライアンス、運用監査、リスク監査を可能にするサービスです。<br> <a href=\"http://aws.amazon.com/console\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Management Console</a>、<a href=\"http://aws.amazon.com/cli\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Command Line Interface</a> (AWS CLI)、AWS SDK および API を通じて実行されたアクションを含む、AWS アカウントで実行されたアクションを記録します。</li> \n <li><a href=\"https://docs.aws.amazon.com/eventbridge/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon EventBridge</a> は、イベントを使用してアプリケーションコンポーネントを接続するサーバーレスサービスで、スケーラブルなイベント駆動型アプリケーションを簡単に構築できます。<br> イベントに一致するルールを作成し、1 つ以上のターゲット関数またはストリームにルーティングできます。</li> \n <li><a href=\"https://docs.aws.amazon.com/lambda/?icmpid=docs_homepage_compute\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Lambda</a> は、サーバーのプロビジョニングや管理なしに、アプリケーションやバックエンドサービスのコードを実行できるサーバーレスのイベント駆動型コンピューティングサービスです。<br> 200 以上の AWS サービスや Software as a Service (SaaS) アプリケーションから Lambda をトリガーでき、使用した分だけ料金を支払います。</li> \n <li><a href=\"https://docs.aws.amazon.com/cloudformation/?icmpid=docs_homepage_mgmtgov\" target=\"_blank\" rel=\"noopener noreferrer\">AWS CloudFormation</a> は、宣言型言語でテンプレートを記述することで、AWS およびサードパーティのリソースをモデル化、プロビジョニング、管理できる Infrastructure as Code (IaC) サービスです。<br> AWS リソースのコレクションを単一のユニットとして作成および管理でき、反復可能な方法でインフラストラクチャを作成および維持することが簡単になります。</li> \n <li><a href=\"https://aws.amazon.com/iam/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Identity and Access Management</a> (IAM) は、ユーザーの AWS リソースへのアクセスを安全に制御するのに役立ちます。<br> IAM を使用して、誰が AWS リソースを使用できるか (認証)、どのリソースを使用できるか、どのように使用できるか (認可) を制御できます。<br> 詳細については、<a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\" target=\"_blank\" rel=\"noopener noreferrer\">IAM User Guide</a> を参照してください。</li> \n</ul> \n<h2>シナリオ 1: 新規 Quick Suite アカウントサブスクリプション</h2> \n<p>次の図は、新しい Quick Suite アカウントサブスクリプションのソリューションアーキテクチャを示しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-5981 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/image-17.png\" alt=\"\" width=\"734\" height=\"356\"></p> \n<p>このソリューションアーキテクチャは CloudFormation スタックとしてパッケージ化されており、AWS アカウントに必要なリソースをデプロイします。これらのリソースは、新しい Quick Suite サブスクリプションの作成時にトリガーされる準備が整っています。サブスクリプションは、AWS CLI、コンソール、またはその他のプログラムによるアプローチを通じて作成できます。スタックをデプロイすると、EventBridge が 2 分ごとにルールをトリガーして Lambda 関数を実行します。このルールは、Quick Suite へのサブスクリプションが正常に完了した後に無効化されます。この関数は、パブリック Quick API を通じてアカウントレベルでカスタムパーミッションの作成と割り当てをオーケストレーションします。このコードを通じて作成される特定のカスタムパーミッションは、アカウントレベルで新しい Quick Suite AI 機能を無効化します。</p> \n<p>このアプローチは、BI 専用の機能のための環境を用意したい場合や、新機能をより広範囲に採用するための評価中に一時的に新機能を無効にしたい場合に最適です。テスト目的など、異なるユーザーに異なるカスタム権限のセットを適用する方法の詳細については、<a class=\"c-link c-message_attachment__title_link\" href=\"https://aws.amazon.com/blogs/business-intelligence/establishing-enterprise-governance-in-amazon-quick-suite-using-custom-permissions/\" target=\"_blank\" rel=\"noopener noreferrer\" data-qa=\"message_attachment_title_link\"><span dir=\"auto\">Establishing enterprise governance in Amazon Quick Suite using custom permissions</span></a> を参照してください。</p> \n<h3>前提条件</h3> \n<p>以下の前提条件を満たしている必要があります:</p> \n<ul> \n <li>既存の Quick Suite サブスクリプションがないこと</li> \n <li>AWS アカウントへの管理者アクセス権限</li> \n <li>CloudTrail が有効化されていること</li> \n <li>EventBridge が有効化されていること</li> \n</ul> \n<h3>CloudFormation によるリソースの作成</h3> \n<p>次の手順に従って、CloudFormation でリソースを作成します。</p> \n<ol> \n <li><strong>Launch Stack</strong> を選択して、アカウントレベルのカスタムアクセス許可を自動的に適用するために必要なリソースをプロビジョニングします。</li> \n</ol> \n<p><a href=\"https://console.aws.amazon.com/cloudformation/home#/stacks/new?&amp;templateURL=https%3A%2F%2Fws-assets-prod-iad-r-iad-ed304a55c2ca1aee.s3.us-east-1.amazonaws.com%2F56fa0cf7-a3d1-474f-8b2c-4befcaa99da8%2Famazon_quick_custom_permissions_for_new_account.yml\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignnone wp-image-1745 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2024/01/26/DBS_Blogs_BI-2129-launch_stack.png\" alt=\"Launch Stack\" width=\"107\" height=\"20\"></a></p> \n<ol start=\"2\"> \n <li><strong>Next</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5957\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-3.png\" alt=\"\" width=\"1431\" height=\"652\"></p> \n<ol start=\"3\"> \n <li>スタックの名前 (例: <code>custom-permissions-qs-stack</code>) を入力し、<strong>Next</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5958\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-4.png\" alt=\"\" width=\"1431\" height=\"659\"></p> \n<ol start=\"4\"> \n <li>各種リソースの IAM ポリシーとロールの作成を確認し、<strong>次へ</strong>を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5959\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-5.png\" alt=\"\" width=\"1431\" height=\"319\"></p> \n<ol start=\"5\"> \n <li>設定を確認し、<strong>Submit</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5960\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-6.png\" alt=\"\" width=\"1431\" height=\"652\"></p> \n<h2>シナリオ 2: 既存の Quick Suite アカウントサブスクリプション</h2> \n<p>このセクションでは、既存の Quick Suite アカウントサブスクリプション用にデプロイする CloudFormation テンプレートを提供します。</p> \n<h3>前提条件</h3> \n<p>以下の前提条件を満たしている必要があります:</p> \n<ul> \n <li>既存の Quick Suite サブスクリプション</li> \n <li>AWS アカウントへの管理者アクセス</li> \n</ul> \n<h3>CloudFormation によるリソースの作成</h3> \n<p>以下の手順に従って、リソースを作成します。</p> \n<ol> \n <li><strong>Launch Stack</strong> を選択して、リソースをプロビジョニングします:</li> \n</ol> \n<p><a href=\"https://console.aws.amazon.com/cloudformation/home#/stacks/new?&amp;templateURL=https%3A%2F%2Fws-assets-prod-iad-r-iad-ed304a55c2ca1aee.s3.us-east-1.amazonaws.com%2F56fa0cf7-a3d1-474f-8b2c-4befcaa99da8%2Famazon_quick_custom_permissions_for_existing_account.yml\" target=\"_blank\" rel=\"noopener\"><img loading=\"lazy\" class=\"alignnone wp-image-4332 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/03/20/BI-4029-launch_stack.png\" alt=\"\" width=\"107\" height=\"20\"></a></p> \n<ol start=\"2\"> \n <li><strong>Next</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5962\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-8.png\" alt=\"\" width=\"2990\" height=\"1294\"></p> \n<ol start=\"3\"> \n <li>スタックの名前 (例: <code>quicksight-custom-permissions</code>) を入力し、<strong>Next</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5963\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-9.png\" alt=\"\" width=\"2984\" height=\"1262\"></p> \n<ol start=\"4\"> \n <li>Lambda 関数の IAM ポリシーとロールの作成を確認し、<strong>Next</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5964\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-10.png\" alt=\"\" width=\"2986\" height=\"1292\"></p> \n<ol start=\"5\"> \n <li>設定を確認し、<strong>Submit</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5965\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-11.png\" alt=\"\" width=\"2988\" height=\"1294\"></p> \n<p>CloudFormation テンプレートは、AWS アカウントに必要なリソースを作成します。スタックをデプロイすると、パブリック Quick API を通じてアカウントレベルでカスタムパーミッションの作成と割り当てを調整する Lambda 関数が自動的にトリガーされます。このコードを通じて作成される特定のカスタムパーミッションは、アカウントレベルで新しい Quick Suite AI 機能を無効にします。</p> \n<h2>ソリューションの検証</h2> \n<p>設定を検証するには、以下の手順を実行してください。</p> \n<ol> \n <li>Quick Suite のホームページに移動し、すべての新しい AI 機能がオフになっていることを確認します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5966\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-12.png\" alt=\"\" width=\"2561\" height=\"1139\"></p> \n<ol start=\"2\"> \n <li>または、管理者として、右上隅のユーザーアイコンを選択して <strong>Manage account</strong> ページに移動します。</li> \n <li>ランディングページで、新しい AI 機能を制限するカスタムパーミッションがアカウントレベルで適用されていることを確認します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5967\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-13.png\" alt=\"\" width=\"2554\" height=\"839\"></p> \n<ol start=\"4\"> \n <li>これらの権限をさらにカスタマイズするには、<strong>Manage</strong> を選択し、プロファイルの横にあるオプションメニュー (3 つのドット) を選択して、<strong>Edit</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5968\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-14.png\" alt=\"\" width=\"2553\" height=\"510\"></p> \n<ol start=\"5\"> \n <li>各機能が選択されていることを確認し、その特定の機能が制限されていることを示します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5969\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-15.png\" alt=\"\" width=\"2549\" height=\"1056\"></p> \n<h2>クリーンアップ</h2> \n<p>クリーンアップするには、CloudFormation スタックを削除して、スタック内にプロビジョニングされたリソースを削除します。</p> \n<ol> \n <li>CloudFormation コンソールのナビゲーションペインで、<strong style=\"font-weight: bold\">スタック</strong>を選択します。</li> \n <li>作成したスタックを選択し、<strong style=\"font-weight: bold\">削除</strong>を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5970\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/bi-7124-16.png\" alt=\"\" width=\"2616\" height=\"854\"></p> \n<p>これにより、CloudTrail イベント、EventBridge ルール、Lambda 関数、および各リソースに関連するロールとポリシーが削除されます。</p> \n<h2>まとめ</h2> \n<p>この投稿では、新規および既存の Quick Suite サブスクリプションの両方に対して、新しい AI 機能を制限するカスタムパーミッションをプログラムで適用する方法を示しました。このソリューションにより、これらの機能をアカウントレベルで自動的に無効化することが可能になります。アカウント内の異なるユーザーに異なるパーミッションセットを適用できます。たとえば、アカウント内のすべてのユーザーに展開する前にテストを行う指定されたユーザーセットを持つことができます。詳細については、<a class=\"c-link c-message_attachment__title_link\" href=\"https://aws.amazon.com/blogs/business-intelligence/establishing-enterprise-governance-in-amazon-quick-suite-using-custom-permissions/\" target=\"_blank\" rel=\"noopener noreferrer\" data-qa=\"message_attachment_title_link\"><span dir=\"auto\">Establishing enterprise governance in Amazon Quick Suite using custom permissions</span></a> を参照してください。</p> \n<p>組織が Quick Suite 内で AI を活用した分析と自動化機能を採用し続ける中、堅牢なカスタムパーミッションフレームワークは、イノベーションを安全に、そして組織のガバナンス要件に沿って進めることを支援します。このアクセス制御への包括的なアプローチにより、Quick Suite は単なる強力な分析サービスではなく、組織のニーズとともに成長する、安全でエンタープライズ対応のソリューションとして位置づけられます。</p> \n<p>カスタムパーミッションを適切に設定することで、組織が Quick Suite の高度な機能の使用を拡大する際に、セキュリティ体制の強化、規制コンプライアンス、運用上の信頼性を実現できます。詳細については、<a href=\"https://docs.aws.amazon.com/quicksuite/latest/userguide/create-custom-permisions-profile.html\" target=\"_blank\" rel=\"noopener noreferrer\">Creating a custom permissions profile in Amazon Quick Suite</a> を参照してください。</p> \n<p>ご質問やフィードバックがございましたら、コメントをお寄せください。</p> \n<p>さらなる議論や質問への回答を得るには、<a href=\"https://community.amazonquicksight.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Quick Suite Community</a> をご確認ください。</p> \n<h3>著者について</h3> \n<p style=\"clear:both\"> <strong><img loading=\"lazy\" class=\"size-full wp-image-2923 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2024/08/14/sribahet.jpg\" alt=\"\" width=\"100\" height=\"90\">Srikanth Baheti</strong> は、Amazon Quick Suite の Specialized World Wide プリンシパルソリューションアーキテクトです。コンサルタントとしてキャリアをスタートし、複数の民間企業や政府機関で働いてきました。その後、PerkinElmer Health and Sciences および eResearch Technology Inc で勤務し、AWS サービスとサーバーレスコンピューティングを使用した高トラフィックの Web アプリケーションや、レポーティングプラットフォーム向けの高度にスケーラブルで保守性の高いデータパイプラインの設計と開発を担当しました。 </p> \n<p style=\"clear:both\"> <strong><img loading=\"lazy\" class=\"size-thumbnail wp-image-5971 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/andyxson-100x100.png\" alt=\"\" width=\"100\" height=\"100\">Andy Son </strong>は、Amazon Quick Suite のソリューションアーキテクトです。AWS に入社する前は、プリセールスエンジニアとして、さまざまな業界のクライアントと協力し、アナリティクスの導入と実装を成功に導いてきました。 </p> \n<p style=\"clear:both\"> <strong><img loading=\"lazy\" class=\"size-thumbnail wp-image-4895 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/05/13/addasine-100x133.jpg\" alt=\"\" width=\"100\" height=\"133\">Ashok Dasineni </strong>は、Amazon Quick Suite のソリューションアーキテクトです。AWS に入社する前は、銀行および金融分野のクライアントや組織と協力し、不正行為の調査と防止に注力していました。ビジネスプロセスの改善、コスト削減、収益増加のための革新的なソリューションを設計・実装し、世界中の企業がデータを通じて最高の可能性を達成できるよう支援してきました。 </p> \n<p style=\"clear:both\"> <strong><img loading=\"lazy\" class=\"size-thumbnail wp-image-5391 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/08/28/Vaidy-100x128.jpg\" alt=\"\" width=\"100\" height=\"128\">Vaidy Janardhanam</strong> は AWS のソリューションアーキテクトで、生成 AI ビジネスインテリジェンスに注力しています。Vaidy は、お客様がクラウド上でデータおよび分析アプリケーションを設計・構築するのを支援しています。AWS サービスを使用して、世界中のお客様の本番環境への移行を加速してきました。</p>"
  },
  {
    "title": "カスタムパーミッションを使用した Amazon Quick Suite のエンタープライズガバナンスの確立",
    "date": "2025-10-23T08:29:14.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/establishing-enterprise-governance-in-amazon-quick-suite-using-custom-permissions/",
    "content": "<p>本記事は、2025 年 10 ⽉ 9 ⽇に公開された <a href=\"https://aws.amazon.com/jp/blogs/business-intelligence/establishing-enterprise-governance-in-amazon-quick-suite-using-custom-permissions/\">Establishing enterprise governance in Amazon Quick Suite using custom permissions</a> を翻訳したもの です。翻訳は Public Sector PSA の西川継延が担当しました。</p> \n<p>Amazon QuickSight は、2025 年 10 月 9 日に <a class=\"c-link\" href=\"https://aws.amazon.com/quicksuite/\" target=\"_blank\" rel=\"noopener noreferrer\" data-sk=\"tooltip_parent\" data-stringify-link=\"https://docs.aws.amazon.com/quicksuite/latest/userguide/what-is.html\">Amazon Quick Suite</a> へと進化し、単一の BI 製品から、ビジネスインサイト、リサーチ、自動化のための AI エージェントを含む包括的なスイートへと拡張されます。Quick Suite は、セキュリティとユーザーアクセスポリシーを維持しながら、ユーザーがよりスマートかつ迅速に作業できるよう支援します。あらゆるスキルレベルのビジネスユーザーが、数日ではなく数分で関連するデータソース全体から重要な情報を見つけ、自然言語でデータを分析し、洗練されたビジュアライゼーションを作成し、ツールを切り替えることなくインサイトに基づいてすぐに行動し、あらゆるタスクを自動化できます。これらの機能強化の中核にあるのは、構造化データと非構造化データソースの統合であり、スイートの強力な新機能を推進しています。</p> \n<p>今日の急速に進化する生成 AI の状況において、企業は環境内でユーザーが利用できる機能や能力に対する堅牢なガバナンスと正確な制御をますます重視しています。Amazon QuickSight が Amazon Quick Suite へと進化し、幅広いエージェント型 AI 機能を導入する中で、安全でスケーラブルかつ柔軟なアクセス管理の必要性がこれまで以上に重要になっています。<br> が<br> これに対処するため、Quick Suite では、Manage Quick Suite コンソールからアクセス可能な、強化された<a href=\"https://docs.aws.amazon.com/quicksuite/latest/userguide/create-custom-permisions-profile.html\" target=\"_blank\" rel=\"noopener noreferrer\">カスタム権限</a>コントロールを導入しています。これらのコントロールは、きめが粗い制御ときめ細やかな制御の両方のアクセス制限をサポートしており、管理者がシームレスで生産的なユーザーエクスペリエンスを維持しながら、特定の機能へのユーザーアクセスを制限することで、最小権限の原則を実施するのに役立ちます。</p> \n<p>Quick Suite の権限は、アカウントレベル、ロールレベル、ユーザーレベルの 3 つの階層レベルで構成されています。明確な優先順位モデルにより、ユーザーレベルの権限はロールレベルの権限を上書きし、ロールレベルの権限はアカウントレベルの権限よりも優先されます。この柔軟なアーキテクチャにより、管理者は組織の特定のニーズに合わせてセキュリティポリシーをカスタマイズできます。</p> \n<p>このブログ記事では、カスタムパーミッションを使用して、機能レベルおよびオペレーションレベルのガバナンスを実装するための包括的なガイドを提供します。これにより、組織は生成 AI の最新イノベーションを自信を持って採用しながら、エンタープライズグレードのセキュリティ、コンプライアンス、制御を提供できます。</p> \n<h2>カスタムパーミッションのメリット</h2> \n<p>Amazon Quick Suite のカスタムパーミッションは、セキュリティの強化、ガバナンスの向上、ユーザーエクスペリエンスの改善といった戦略的な利点を提供します。これらのメリットを理解することで、管理者はこの機能を効果的に活用する方法について、情報に基づいた意思決定を行うことができます。</p> \n<p>主な利点は次のとおりです。</p> \n<ul> \n <li>セキュリティとコントロール \n  <ul> \n   <li><strong style=\"font-weight:bold\">最小権限の原則</strong>: ユーザーアクセスを必要な機能のみに制限します。</li> \n   <li><strong style=\"font-weight:bold\">きめ細かなアクセス制御</strong>: 機能の利用可能性を正確に制御します。</li> \n   <li><strong style=\"font-weight:bold\">マルチレベル管理</strong>: アカウント、ロール、ユーザーレベルで権限を制御します。</li> \n   <li><strong style=\"font-weight:bold\">ニアリアルタイムの適用:</strong> カスタム権限は適用後すぐに有効になるため、サインアウトして再度サインインする必要はありません。</li> \n  </ul> </li> \n <li>柔軟性とスケーラビリティ \n  <ul> \n   <li><strong style=\"font-weight:bold\">階層的なオーバーライド</strong>: ユーザー権限はロール権限をオーバーライドし、ロール権限はアカウント権限をオーバーライドします。</li> \n   <li><strong style=\"font-weight:bold\">対象を絞った例外</strong>: グループ全体に影響を与えることなく、個々のユーザーに対して特定のアクセスルールを作成します。</li> \n   <li><strong style=\"font-weight:bold\">動的な調整</strong>: ビジネスニーズの変化に応じて権限を変更します。</li> \n  </ul> </li> \n <li>エンタープライズ機能 \n  <ul> \n   <li><strong style=\"font-weight:bold\">包括的なカバレッジ</strong>: すべての主要な機能 (Flows、Research、Chat Agents、Dashboards) へのアクセスを制御します。</li> \n   <li><strong style=\"font-weight:bold\">複数の実装オプション</strong>: コンソールインターフェイスまたは CLI や API を使用してプログラムで管理します。</li> \n  </ul> </li> \n <li>運用上のメリット \n  <ul> \n   <li><strong style=\"font-weight:bold\">バランスの取れたイノベーション</strong>: 適切なコントロールを維持しながら、高度な機能の使用を保護します。</li> \n   <li><strong style=\"font-weight:bold\">一貫した適用</strong>: 大規模な組織全体でセキュリティポリシーを統一的に適用します。</li> \n   <li><strong style=\"font-weight:bold\">生産性の維持</strong>: ユーザーエクスペリエンスを損なうことなくアクセスを制限します。</li> \n  </ul> </li> \n</ul> \n<p>これらのメリットにより、組織は適切なガバナンスを維持しながら、Amazon Quick Suite の機能を安全に使用できます。</p> \n<h2>一般的なユースケース</h2> \n<p>Quick Suite でカスタムパーミッションを活用するユースケースの例には、以下のようなものがあります。</p> \n<ul> \n <li>アカウントレベルで、すべての新しい Quick Suite 機能にグローバルな制限を適用する。</li> \n <li>特定のユーザーセットに対して新機能へのアクセスを許可し、他のすべてのユーザーに対してはアクセスを制限する。このアプローチにより、より広範な展開の前に、特定のユーザーセットによる新機能の制御されたテストと評価が可能になります。</li> \n <li>アカウントレベルで特定の機能を制限するとともに、ロールレベルで新しいデータソースを作成する機能など、より詳細な機能を制御する。</li> \n</ul> \n<h2>カスタム権限管理の前提条件</h2> \n<p>Amazon Quick Suite の管理者は、自動的にカスタムパーミッションを管理する権限を取得するわけではありません。これは、特に役割の分離とアクセス制御が重要なエンタープライズ環境において、カスタムパーミッション管理を厳格に制御するために設計された意図的なセキュリティ対策です。適切な <a href=\"https://aws.amazon.com/iam/\" target=\"_blank\" rel=\"noopener\">AWS Identity and Access Management (IAM)</a> パーミッションがない場合、Quick Suite 管理者は、カスタムパーミッション設定にアクセスするために必要な IAM パーミッションがロールに不足していることを示すブロックメッセージに遭遇します。</p> \n<p>Amazon Quick Suite 内でカスタムパーミッションを効果的に管理するには、次の前提条件を満たす必要があります。</p> \n<ul> \n <li><strong style=\"font-weight:bold\">Quick Suite Admin Pro または Admin ロール: </strong>Quick Suite Admin または Admin Pro ロールが割り当てられている必要がありますが、これだけではカスタム権限を管理するアクセス権は付与されません。この機能には、追加の権限 (以下の通り) が必要です。</li> \n <li><strong style=\"font-weight:bold\">コア IAM 権限: </strong>IAM ユーザーまたはロールは、Quick Suite 内でカスタム権限を管理するために、以下のコア権限を持っている必要があります。これらの権限は明示的に付与する必要があり、Quick Suite 内でカスタム権限プロファイルを管理するために不可欠です。</li> \n</ul> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n&nbsp;&nbsp; &nbsp;\"Version\": \"2012-10-17\",\n&nbsp;&nbsp; &nbsp;\"Statement\": [ \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Effect\": \"Allow\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Action\": [ \n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"quicksight:CreateCustomPermissions\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"quicksight:DeleteCustomPermissions\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"quicksight:DescribeCustomPermissions\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"quicksight:ListCustomPermissions\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"quicksight:UpdateCustomPermissions\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Resource\": \"arn:aws:quicksight:*:*:*\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; ] \n}\n</code></pre> \n</div> \n<p><em>注意: インターフェースには Quick Suite と表示されますが、すべての API オペレーションと IAM アクセス許可は、既存の Amazon QuickSight の命名規則を引き続き使用します。IAM ポリシーの設定や AWS CLI および API 呼び出しを使用する際には、この違いを念頭に置くことが重要です。</em></p> \n<ul> \n <li><strong style=\"font-weight:bold\">IAM フェデレーションまたは IAM Identity Center</strong>: 組織の構成に応じて、AWS アカウント所有者は必要なコアカスタムパーミッションを作成し、これらのパーミッションを特定のグループとユーザーに割り当てる必要があります。パーミッションは IAM フェデレーションまたは IAM Identity Center で管理できます。 \n  <ul> \n   <li>IAM フェデレーションの場合、必要なコアカスタムパーミッションを持つ特定の IAM ロールを Quick Suite 管理者に割り当てます。承認されると、これらの管理者はすべてのレベル (アカウント、ロール、ユーザー) でカスタムパーミッションを設定できます。</li> \n   <li>IAM Identity Center の場合、上記のパーミッションを持つ<a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/howtocreatepermissionset.html\" target=\"_blank\" rel=\"noopener noreferrer\"><strong style=\"font-weight:bold\">アクセス許可セット</strong></a>を作成し、カスタムパーミッションを管理するための適切なパーミッションを持つユーザーまたはグループに割り当てます。</li> \n  </ul> </li> \n</ul> \n<p>以下は、IAM Identity Center が有効化されたアカウントのユーザーから見たアクセスポータルのスクリーンショットです。このユーザーには、必要なコアカスタムパーミッションを含む <code>aqs-custompermission</code> パーミッションセットが割り当てられています。</p> \n<p>これらのアクセス許可セットは、AWS アクセスポータルで利用可能なロールとして表示されます。複数のアクセス許可セットに割り当てられたユーザーは、アクセスポータルにサインインし、アカウントを選択して、スクリーンショットに示されているように割り当てられたアクセス許可セットを選択できます。管理者ユーザーは、Quick Suite にアクセスし、Quick Console に移動して、エンタープライズ要件を満たすカスタムアクセス許可を設定できます。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5643\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/image7.png\" alt=\"\" width=\"1488\" height=\"319\"></p> \n<p><strong>Manage Quick Suite Console: Custom permissions</strong> へのアクセスは、ショートカットを使用するか、コンソールの左パネルにある <strong>Permissions</strong> セクションに移動することで管理できます。</p> \n<h2>複数レベルにわたるカスタムパーミッション</h2> \n<p>管理者は、カスタム権限プロファイルを作成して適用することで、Amazon Quick Suite の機能へのアクセスを管理できます。これらの権限は、アカウントレベルで適用して Quick Suite 全体の機能へのきめが粗いアクセスを管理することも、ユーザーまたはロールレベルで適用して特定の機能へのきめきめ細やかなアクセスを制御することもできます。</p> \n<p>ベストプラクティスとして、管理者はアカウントレベルで Chat Agents、Integrations、Flows、Automate、Knowledge Base、Spaces、Research、Dashboards、Analyses などの機能を制限または無効化できます。ユーザーまたはロールレベルでは、管理者は Quick Suite 内の個々の機能を制限するために、より詳細な制御を定義できます。</p> \n<p>設定可能な機能の完全なリストについては、<a href=\"https://docs.aws.amazon.com/quicksuite/latest/userguide/create-custom-permisions-profile.html\" target=\"_blank\" rel=\"noopener noreferrer\">カスタムパーミッション</a>のドキュメントを参照してください。</p> \n<p>それでは、カスタムパーミッションを使用して機能や能力を管理および制限する方法を見ていきましょう。まず Quick Suite コンソール UI を使用し、次に API を使用します。</p> \n<h3>Flows</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して Quick Flows を無効にすることができます。</p> \n<h4>アカウント内の Flows の制限</h4> \n<p>Amazon Quick Suite アカウントのすべてのユーザーに対して Flows の使用を制限するには、次の手順に従ってください。</p> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account、Permissions、Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Flows</strong> チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>Restrict-Flows</code>) を入力して、<strong>Create</strong> を選択します。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/flow-1.gif\" width=\"1920\" height=\"1080\"><strong>Profiles</strong> ページにリダイレクトされます。</p> \n<ol start=\"6\"> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の三点リーダー) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5644\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/image8.png\" alt=\"\" width=\"611\" height=\"334\"></p> \n<p>適用されると、Quick Suite アカウントのすべてのユーザーに対して Flows が制限されます。</p> \n<h4>制限付き Flows の体験</h4> \n<p>アカウントレベルで Flows が制限されている場合の影響は次のとおりです。</p> \n<ul> \n <li><strong style=\"font-weight:bold\">ユーザーエクスペリエンスへの影響</strong> \n  <ul> \n   <li><strong>Flows</strong> オプションが左側のナビゲーションメニューに表示されなくなり、エンドユーザーにとってこの機能の可視性が失われます。</li> \n   <li>ユーザーは、反復的なタスクを自動化するための新しい Flows を作成できなくなります。</li> \n   <li>チャットフッターの Flows メニューアイコンが非表示になり、この機能へのエントリーポイントが削除されます。</li> \n   <li>ユーザーは既存の Flows にアクセスしたり実行したりできなくなり、Flows とのすべてのユーザーレベルのインタラクションが事実上無効になります。</li> \n  </ul> </li> \n <li><strong style=\"font-weight:bold\">サービス全体への影響</strong> \n  <ul> \n   <li>Flows がアカウントレベルで制限されると、ユーザーまたはロールレベルでのより具体的な機能によって上書きされない限り、アカウント全体のすべてのユーザーに対してこの機能が完全に無効になります。</li> \n   <li>Flows 関連のすべての機能 (作成、実行、アクセス) が一律に制限され、サービス全体で制限が一貫して適用されます。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/flows-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>Automate</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して Automate を無効にできます。</p> \n<h4>アカウントでの Automate の制限</h4> \n<p>Amazon Quick Suite アカウントのすべてのユーザーに対して Automate の使用を制限するには、次の手順に従ってください。</p> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Automate</strong> チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>Restrict-Automations</code>) を入力し、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の三点リーダー) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限付き Automate の使用体験</h4> \n<p>Automate がアカウントレベルで制限されている場合の影響は次のとおりです:</p> \n<ul> \n <li><strong style=\"font-weight:bold\">ユーザーエクスペリエンスへの影響</strong> \n  <ul> \n   <li>左側のナビゲーションメニューから <strong>Automate</strong> オプションが削除され、ユーザーは自動化インターフェースにアクセスできなくなります。</li> \n   <li>ユーザーは新しい自動化プロジェクトやタスクを作成できなくなります。</li> \n   <li>既存の自動化タスクやプロジェクトへのアクセスがブロックされ、ユーザーはそれらを実行できなくなります。</li> \n   <li>ユーザーは以前に作成した自動化タスクやプロジェクトを変更できなくなります。</li> \n   <li>実行されたタスクの実行ステータスの確認を含む、自動化のパフォーマンスを監視する機能が非表示になります。</li> \n   <li>ナビゲーションパネルの Automate セクションが完全に非表示になり、この機能へのすべてのエントリーポイントが削除されます。</li> \n  </ul> </li> \n <li><strong style=\"font-weight:bold\">サービス全体への影響</strong> \n  <ul> \n   <li>Automate 機能がアカウントレベルで制限されると、アカウント全体のすべてのユーザーに対してこの機能が完全に無効化されます。</li> \n   <li>自動化に関連するすべての機能 (作成、変更、実行、監視) が体系的に無効化されます。</li> \n   <li>これにより、管理上の制限への完全なコンプライアンスが確保され、サービス全体で自動化関連機能とのあらゆる形式のインタラクションが防止されます。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/automate-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>スペース</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して Spaces を無効にできます。</p> \n<h4>アカウント内の Spaces の制限</h4> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Spaces </strong>チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>restrict-spaces</code>) を入力して、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の三点リーダー) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限付き Spaces の体験</h4> \n<p>アカウントレベルで Spaces が制限されている場合の影響は次のとおりです。</p> \n<ul> \n <li><strong style=\"font-weight: bold\">ユーザーインターフェースへの影響</strong> \n  <ul> \n   <li>左側のナビゲーションメニューとすべてのインターフェースから Spaces オプションが削除されます。</li> \n   <li>ユーザーは新しいスペースを作成したり、既存のスペースにアクセスしたりすることができなくなります。</li> \n  </ul> </li> \n <li><strong style=\"font-weight: bold\">サービス全体への影響</strong> \n  <ul> \n   <li>Space 内のカスタムナレッジハブ組織機能が利用できなくなります。</li> \n   <li>すべてのコラボレーティブワークスペースへのアクセスが制限されます。</li> \n   <li>Space 共有機能とコラボレーション機能が非表示になります。</li> \n   <li>チャットエージェント: \n    <ul> \n     <li>チャットエージェントインターフェース内で Spaces オプションが表示されなくなります。</li> \n     <li>チャットアシスタント/エージェント内でリソースを選択するためのドロップダウンメニューに Spaces が含まれなくなります。</li> \n    </ul> </li> \n   <li>リサーチエージェント: \n    <ul> \n     <li>リサーチエージェント内に Spaces を含めるオプションが利用できなくなります。</li> \n    </ul> </li> \n   <li>Spaces 機能がアカウント全体で完全に無効化されます。</li> \n  </ul> </li> \n</ul> \n<p>アカウントレベルでの Spaces 機能のこの包括的な制限により、ユーザーは Spaces 機能のあらゆる側面を操作したり利用したりすることができなくなります。</p> \n<p>次の GIF は、アカウントレベルの変更を適用する前の Spaces 機能を示しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/space-2.gif\" width=\"1920\" height=\"1080\"></p> \n<p>次の GIF は、アカウントレベルの Spaces 制限が適用された後のエクスペリエンスを示しています。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/space-3.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>アクション</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して Quick Actions を制限できます。</p> \n<h4>アカウント内のアクションの制限</h4> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Actions</strong> チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>restrict-actions</code>) を入力して、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の三点リーダー) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限されたアクションの体験</h4> \n<p>Actions がアカウントレベルで無効化されている場合、サービス全体で以下の制限が適用されます:</p> \n<ul> \n <li><strong style=\"font-weight: bold\">ユーザーインターフェースへの影響</strong> \n  <ul> \n   <li><strong>Connections</strong> メニューの <strong>Integrations</strong> セクションから Actions タブが削除されます。</li> \n   <li>インターフェースメニューからすべてのアクション関連オプションが非表示になります。</li> \n   <li>新しい Actions の作成ができなくなります。</li> \n   <li>既存の Actions へのアクセスがブロックされます。</li> \n   <li>次のスクリーンショットに示すように、Quick Suite ブラウザ拡張機能内のすべてのアクションが呼び出せなくなります。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5651\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/image10.png\" alt=\"\" width=\"1914\" height=\"920\"></p> \n<ul> \n <li><strong style=\"font-weight: bold\">サービス全体への影響</strong> \n  <ul> \n   <li>制限はアカウント内のすべてのスペースに一律に適用されます。</li> \n   <li>チャットエージェントは Actions を呼び出すことができません。</li> \n   <li>Actions に関連する統合機能は無効になります。</li> \n   <li>Action は自動化タスクで利用できません。</li> \n   <li>Quick Dashboard の機能: \n    <ul> \n     <li>Actions は Quick Dashboard のビジュアル内から利用できなくなります</li> \n     <li>ダッシュボード内のテーブルビジュアルで Actions ベースのアラートを設定できません</li> \n    </ul> </li> \n   <li>アカウントレベルの制限により、ユーザーが自動化されたアクションを設定、変更、または呼び出すことを防ぎ、包括的なサービス制御を確保します。これにより、システムの安定性を維持しながら、セキュリティコンプライアンスを保ちます。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/actions-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>チャットエージェント</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して Chat Agents を無効にすることができます。</p> \n<h4>アカウント内のチャットエージェントの制限</h4> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li>Chat Agents チェックボックスを選択し、カスタムアクセス許可プロファイルの名前 (例: <code>Restrict-Chat-Agents</code>) を入力して、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の省略記号) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限付きチャットエージェントの体験</h4> \n<p>Chat Agents がアカウントレベルで無効化されている場合、サービス全体で以下の制限が適用されます。</p> \n<ul> \n <li><strong style=\"font-weight:bold\">ユーザーエクスペリエンスへの影響</strong> \n  <ul> \n   <li>左側のナビゲーションパネルから Chat Agents オプションが削除されます。</li> \n   <li>Quick Suite 内のデフォルトの AI チャットアシスタントである My Assistant がブロックされます。</li> \n   <li>新しいチャット会話の開始が制限されます。</li> \n   <li>既存のチャット履歴へのアクセスが無効になります。</li> \n   <li>チャットインターフェースが完全に非表示になります。</li> \n   <li>保存されたチャット設定にアクセスできなくなります。</li> \n   <li>Quick Suite ブラウザ拡張機能内のすべてのカスタムチャットエージェントが利用できなくなります。</li> \n   <li>Quick Suite ブラウザ拡張機能内の My Assistant エージェントが利用できなくなります。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-5650\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/10/09/image9.png\" alt=\"\" width=\"1912\" height=\"917\"></p> \n<ul> \n <li><strong style=\"font-weight:bold\">サービス全体への影響</strong> \n  <ul> \n   <li>チャット機能がシステムレベルで無効化され、すべてのユーザーに影響を与え、サービス全体の関連コンポーネントが無効化されます。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/chat-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>研究</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して Research Agent を無効にすることができます。</p> \n<h4>アカウント内での Research Agent の制限</h4> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Research</strong> チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>Restrict-Research</code>) を入力して、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の三点リーダー) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限された Research Agent の体験</h4> \n<p>アカウントレベルで Research が無効になっている場合、サービス全体で以下の制限が適用されます:</p> \n<ul> \n <li><strong style=\"font-weight:bold\">ユーザーエクスペリエンスへの影響</strong> \n  <ul> \n   <li>すべてのユーザーの左側のナビゲーションパネルから <strong>Research</strong> オプションが削除されます。</li> \n   <li>ユーザーは新しいリサーチクエリを開始できなくなります。</li> \n   <li>ユーザーは以前のリサーチ履歴にアクセスできなくなります。</li> \n   <li>この機能は表示されなくなり、アクセスできなくなるため、一貫したユーザーエクスペリエンスが保証されます。</li> \n   <li>ユーザーは共有されたリサーチレポートにアクセスできなくなります。</li> \n  </ul> </li> \n <li><strong style=\"font-weight:bold\">サービス全体への影響</strong> \n  <ul> \n   <li>Research Agent はアカウントレベルで完全に無効化されます。</li> \n   <li>すべての AI を活用したリサーチ機能がサービス全体で無効化されます。</li> \n   <li>システムレベルの強制により、ユーザーはこの機能にアクセスできなくなります。</li> \n  </ul> </li> \n</ul> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/research-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>分析</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対して分析機能を無効にすることができます。</p> \n<h4>アカウント内の分析の制限</h4> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Analyses</strong> チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>Restrict-Analyses</code>) を入力して、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の省略記号) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限付き分析の体験</h4> \n<p>アカウントレベルで分析が無効になっている場合、サービス全体で以下の制限が適用されます:</p> \n<ul> \n <li><strong style=\"font-weight: bold\">ユーザーインターフェースへの影響</strong> \n  <ul> \n   <li>Quick Sight メニューの左側のナビゲーションパネルで Analyses オプションが利用できなくなります。</li> \n   <li>データセットからの <strong>Create Analyses</strong> オプションが無効になります。</li> \n   <li>既存の Analyses がユーザーに利用できなくなります。</li> \n   <li>Analyses への直接 URL アクセスがブロックされます。</li> \n   <li>Dashboard の <strong>Save as Analyses</strong> オプションが利用できなくなります。</li> \n   <li>共有フォルダまたはマイフォルダ内の Analyses が無効になります。</li> \n  </ul> </li> \n <li><strong style=\"font-weight: bold\">サービス全体への影響</strong> \n  <ul> \n   <li>Analyses 機能がアカウント全体で完全に無効になります。</li> \n   <li>すべての分析の作成、編集、表示機能がブロックされます。</li> \n  </ul> </li> \n</ul> \n<p>ダッシュボードは分析から構築されますが、分析へのアクセスを制限しても、既存のダッシュボードの機能には影響しません。ユーザーは、ダッシュボードの作成に使用された基礎となる分析にアクセスできなくても、通常どおりダッシュボードを表示して操作できます。この制限により、公開されたダッシュボードコンテンツへのアクセスは継続しながら、すべての分析関連機能をユーザーが利用できないようにします。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/analyses-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>ダッシュボード</h3> \n<p>管理者は、Amazon Quick Suite のアカウントレベルで、すべてのユーザーに対してダッシュボードの作成と編集機能を無効にすることができます。</p> \n<h4>アカウント内のダッシュボードの制限</h4> \n<ol> \n <li>必要な IAM ポリシーが有効になっている管理者ユーザーとして Amazon Quick Suite にサインインします。</li> \n <li>Quick Suite で、右上のユーザープロファイルアイコンをクリックし、<strong>Manage Quick Suite</strong> を選択します。</li> \n <li>左側のナビゲーションで、<strong>Manage Account, Permissions, Custom permissions</strong> を選択します。</li> \n <li><strong>New profile</strong> を選択します。</li> \n <li><strong>Dashboards</strong> チェックボックスを選択し、カスタム権限プロファイルの名前 (例: <code>Restrict-Dashboards</code>) を入力し、<strong>Create</strong> を選択します。<br> <strong>Profiles</strong> ページにリダイレクトされます。</li> \n <li>作成したプロファイルを見つけ、メニューアイコン (縦の三点リーダー) を選択し、<strong>Set as account profile</strong> を選択します。<strong>Confirm account profile restrictions</strong> ダイアログで、<code>confirm</code> と入力し、<strong>Restrict &amp; Save</strong> をクリックします。</li> \n</ol> \n<h4>制限付きダッシュボードの使用体験</h4> \n<p>アカウントレベルで Dashboards が無効になっている場合、サービス全体で以下の制限が適用されます:</p> \n<ul> \n <li><strong style=\"font-weight: bold\">ユーザーインターフェースへの影響</strong> \n  <ul> \n   <li>Quick Sight メニューの左側のナビゲーションパネルから Dashboards オプションが削除されます。</li> \n   <li>ユーザーは既存のダッシュボードにアクセスしたり、新しいダッシュボードを公開したりできなくなります。</li> \n   <li>ダッシュボードへの直接 URL アクセスがブロックされます。</li> \n   <li>お気に入りからダッシュボードオプションが削除されます。</li> \n   <li>既存または新規の分析において、ダッシュボードを公開するオプションが削除されます。</li> \n   <li>ダッシュボードの構築に使用されたデータセットは、使用状況タブからダッシュボードにリダイレクトできなくなります。</li> \n  </ul> </li> \n <li><strong style=\"font-weight: bold\">サービス全体への影響</strong> \n  <ul> \n   <li>制限はアカウント内のすべてのスペースに一律に適用され、既存のダッシュボードはスペースからアクセスできなくなります。</li> \n   <li><strong>Spaces</strong>: スペース内のダッシュボードが制限されます。</li> \n   <li><strong>Research</strong>: ダッシュボードをスペースを通じてソースとして使用できなくなります。</li> \n   <li><strong>Scenarios</strong>: Data to Insights シナリオでは、Quick Sight ダッシュボードからデータを選択するオプションは表示されますが、<strong>Find data</strong> を選択してもダッシュボードにアクセスできません。ダッシュボードがない場合でも、<strong>Upload file</strong> オプションを使用して Scenarios でデータを探索することができます。</li> \n   <li><strong>Stories</strong>: データストーリーを構築する際、ダッシュボードにアクセスできません。その結果、既存のデータストーリーは作成時に使用された元のビジュアルを表示しませんが、その他のすべてのコンテンツは影響を受けません。ピンボードから保存されたビジュアルを使用してデータストーリーを作成し続けることができます。</li> \n  </ul> </li> \n</ul> \n<p>Dashboards 機能はアカウント全体で完全に無効化されます。この制限により、すべてのダッシュボード関連機能がユーザーにアクセス不可能となり、ダッシュボードアクセスに対する包括的な制御を維持しながら、Quick Suite の他の機能を通じた代替的なデータ探索方法を保持します。</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/artifacts/DBSBlogs/BI-7027/dashboard-2.gif\" width=\"1920\" height=\"1080\"></p> \n<h3>機能レベルの制限 (ロールとユーザーレベル)</h3> \n<p>管理者は、すべてのレベルで機能レベルの制限を適用できます。デモンストレーションの目的で、ここではロールレベルとユーザーレベルの設定に焦点を当てます。以下の例は、管理者が機能セット全体を無効にすることなく、より広範な機能内の特定の関数を制限する方法を示しています。</p> \n<ul> \n <li>カスタムプロファイルを作成し、Quick Sight 機能制限の下にある <strong>Creating or updating all data sources</strong> オプションを選択して、他の機能を無効にすることなく機能を非表示にします。</li> \n <li>API を使用して、<strong>Author ロール</strong>にカスタムプロファイルを適用します。</li> \n</ul> \n<p>現在、権限はコンソール UI ではなく、API を使用してロールまたはユーザーレベルでのみ割り当てることができます。ロールレベルの権限を適用する API の詳細については、<strong>ロールのカスタム権限を更新する</strong> セクションを参照してください。</p> \n<ul> \n <li>Author プロファイルを使用してログインし、カスタム権限を検証します。</li> \n</ul> \n<h4>ロールレベルでの機能制限</h4> \n<p>Author ロールのデータソース作成を制限することを検討してください。</p> \n<p>この制限を持つ Author としてログインした場合:</p> \n<ul> \n <li>左パネルの Datasets メニューの data source タブにある Create data source オプションがブロックされます。</li> \n <li>左パネルのメニューで <strong>Data source</strong> タブの Datasets を選択すると、<strong>Create data source</strong> オプションが利用できなくなり、Author ロールを持つユーザーが新しいデータソースを作成できなくなります。</li> \n <li>Author は既存のすべてのデータソースにアクセスできますが、外部アプリケーションやデータベースから新しいデータソースを作成する権限はありません。</li> \n</ul> \n<p><strong style=\"font-weight: bold\">ユーザーレベルでの機能制限</strong></p> \n<p>このアプローチは、管理者が特定の機能へのアクセスを定義されたユーザーセットに制限する必要がある場合に特に有用です。アカウントレベルで制限を適用し、ユーザーレベルで選択的にアクセスを許可することで、承認されたユーザーに対する例外を維持しながら、より広範なアクセスを拒否できます。</p> \n<p>個々のユーザーに対して Chat Agents の作成を制限するには:</p> \n<ol> \n <li>カスタムプロファイルを作成し、Quick Suite の機能制限で「Create Chat Agents」オプションを選択することで、新しいエージェントの作成を制限しつつ、共有されたエージェントとのチャットは可能にします。</li> \n <li>API を使用して、特定のユーザーにカスタムプロファイルを適用します。</li> \n</ol> \n<p>現在、権限はコンソール UI ではなく、API を使用してロールまたはユーザーレベルでのみ割り当てることができます。ロールレベルの権限を適用する API の詳細については、以下の「<strong>ユーザーのカスタム権限を更新する</strong>」セクションを参照してください。</p> \n<ol start=\"3\"> \n <li>同じユーザープロファイルでサインインし、カスタムパーミッションを検証します</li> \n</ol> \n<p>ユーザーがこの制限付きでログインした場合:</p> \n<ul> \n <li><strong>Chat Agents</strong>&nbsp;が左パネルメニューに表示され、正常に表示されます。</li> \n <li>ユーザーはすべてのチャットエージェントのリストを表示し、既存のものにアクセスできますが、チャットエージェントウィンドウにアクセスしている間は <strong>Create Chat Agents</strong> オプションが利用できなくなります。</li> \n <li>ユーザーは既存のすべての Chat Agents にアクセスできますが、新しいチャットエージェントを作成する権限はありません。</li> \n</ul> \n<h3>権限が適用される優先順位</h3> \n<p>Quick Suite アカウントでカスタムパーミッションを効果的に実装するには、異なるパーミッションレベルがどのように相互作用し、互いにオーバーライドするかを理解することが重要です。パーミッションシステムは、複数のカスタムパーミッションセットがユーザーに適用される可能性がある場合に、どのパーミッションが優先されるかを決定する明確な階層構造に従っています。</p> \n<ul> \n <li><strong style=\"font-weight: bold\">ユーザーレベルのカスタム権限</strong>: 個々のユーザーに直接適用されるカスタム権限は、権限階層において最も高い優先度を持ちます。これらの権限は、その特定のユーザーに対するロールレベルの権限やアカウントレベルの権限を上書きするため、管理者はロール全体の権限を変更することなく、特定のユーザーに対して例外を作成できます。</li> \n <li><strong style=\"font-weight: bold\">ロールレベルのカスタム権限</strong>: ロール (Admin、Admin Pro、Author、Author Pro、Reader、または Reader Pro) に適用されるカスタム権限は、それらのロールのデフォルト権限よりも優先されます。カスタム権限プロファイルがロールに割り当てられると、そのロールを持つすべてのユーザーは、ユーザーレベルのカスタム権限で上書きされない限り、それらの制限の対象となります。</li> \n <li><strong style=\"font-weight: bold\">アカウントレベルの権限</strong>: 各ロールに関連付けられた標準権限は、最も低い優先度を持ちます。これらの権限は、カスタム権限 (ユーザーレベルまたはロールレベル) が指定されていない場合、アカウント内のすべてのロールに適用されます。</li> \n</ul> \n<p>大企業である AnyCompany Inc. が Quick Suite でカスタムパーミッションを実装し、さまざまな組織レベルでアクセスを管理する例を考えてみましょう。この組織は、セキュリティ要件と特定のビジネスニーズのバランスを取るために、3 つの異なるパーミッションレイヤーを確立することを目指しています。</p> \n<p>アカウントレベルでは、AnyCompany Inc. のガバナンスポリシーの一環として、Flow 機能が全社的に制限されています。しかし、ビジネスアナリストチーム (全員に Reader Pro ロールが割り当てられている) には、データ機密性プロトコルに沿って、Research と Chat Agents へのアクセスを制限するという追加の制限が必要です。ユーザーレベルでは、特定のビジネスアナリストである John Smith が特別プロジェクトのために昇格されたアクセス権を必要としており、これは権限を細かく設定できることを示しています。</p> \n<p>結果として得られるカスタムパーミッション構造は、アカウント、ロール、ユーザーの各レイヤーが必要に応じてカスタマイズおよびオーバーライドできることを示しています。</p> \n<p><strong style=\"font-weight: bold\">John Smith の結果的なアクセス権限 (ユーザーレベル):</strong></p> \n<ul> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Flows</strong>: アクセス可能 (アカウント制限のユーザーレベルでの上書き)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Research</strong>: アクセス可能 (ロール制限のユーザーレベルでの上書き)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Chat Agents</strong>: 既存のエージェントにアクセス可能 (ロール制限のユーザーレベルでの上書き)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Create Chat Agents</strong>: 制限あり (特定のユーザーレベルでの制限)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>その他すべての機能</strong>: 通常のアクセス</li> \n</ul> \n<p><strong style=\"font-weight: bold\">Reader Pro ロールを持つユーザー (ロールレベル):</strong></p> \n<ul> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Flows</strong>: アクセス可能 (アカウント制限のロールレベルでのオーバーライド)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Research</strong>: 制限あり (ロールレベルでの制限)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Chat Agents</strong>: 制限あり (ロールレベルでの制限)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>その他すべての機能</strong>: 通常のアクセス</li> \n</ul> \n<p><strong style=\"font-weight: bold\">その他すべてのユーザー (アカウントレベル):</strong></p> \n<ul> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Flows</strong>: 制限あり (アカウントレベルのポリシーが適用されます)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>その他すべての機能</strong>: 通常のアクセス</li> \n</ul> \n<p>パイロットフェーズの完了後、AnyCompany Inc は John Smith のカスタム権限プロファイルを更新することを決定しました。元のプロファイルは「Create Chat Agents」機能のみを制限していましたが、改訂されたプロファイルでは、進化するガバナンス要件に合わせて、より広範な制限が導入されています。更新されたカスタム権限プロファイルには、以下の制限が含まれています:</p> \n<ul> \n <li>フロー機能</li> \n <li>リサーチ機能</li> \n <li>チャットエージェントを許可 – <em>既存のエージェントへのアクセスを許可しながら、「チャットエージェントの作成」機能を制限し続けます</em></li> \n</ul> \n<p>変更されたプロファイルが適用されると、John Smith は Flows と Research の両方へのアクセスを失い (以前は保持していた)、新しい Chat Agents の作成は引き続き制限されますが、既存の Chat Agents とその他すべての Quick Suite 機能へのアクセスは保持されます。以下は、John の更新されたアクセス権の概要です。</p> \n<ul> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Flows</strong>: 制限あり (更新されたユーザーレベルの制限により、以前のアクセス権を失います)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Research</strong>: 制限あり (更新されたユーザーレベルの制限により、以前のアクセス権を失います)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Chat Agents</strong>: 既存のエージェントにアクセス可能 (アクセス権が維持されます)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>Create Chat Agents</strong>: 制限あり (以前の制限が継続されます)</li> \n <li><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\"> <strong>その他すべての機能</strong>: 通常のアクセス</li> \n</ul> \n<h3>プログラムによるアプローチを使用したカスタムパーミッション</h3> \n<p>カスタムパーミッションは、AWS CLI または API を使用して実装することもできます。以下の例は、AWS CLI または API を使用して、Flow、Actions、Automate などの新機能や、既存の Quick Sight 機能を無効にする方法を示しています。</p> \n<p>CLI を使用している場合は、次のコマンドを使用して詳細を取得します。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">aws quicksight create-custom-permissions help</code></pre> \n</div> \n<h3>すべてのカスタム権限プロファイルの一覧表示</h3> \n<p>新しいカスタム権限を設定する前に、既存のカスタム権限プロファイルと、Quick Account 内のさまざまなレベルで既に設定されている権限を確認してください。アカウント内のすべてのカスタム権限プロファイルをプログラムで一覧表示するには、次のように list-custom-permissions API を使用します。</p> \n<p><em>注: 以下の例では、&lt;&lt;864571xxxxxx&gt;&gt; をご自身の AWS アカウント ID に置き換えてください。</em></p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">aws quicksight list-custom-permissions --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;</code></pre> \n</div> \n<p>4 つの異なるカスタムパーミッションを持つアカウントでコマンドを実行した後のサンプル出力:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n&nbsp;&nbsp; &nbsp;\"CustomPermissionsList\": [\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Arn\": \"arn:aws:quicksight:us-east-1:864571xxxxxx:custompermissions/deny-actions\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CustomPermissionsName\": \"deny-actions\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Capabilities\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToCsv\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToExcel\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToPdf\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Arn\": \"arn:aws:quicksight:us-east-1:864571xxxxxx:custompermissions/deny-chat-agents\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CustomPermissionsName\": \"deny-chat-agents\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Capabilities\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateChatAgents\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Arn\": \"arn:aws:quicksight:us-east-1:864571xxxxxx:custompermissions/deny-all\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CustomPermissionsName\": \"deny-all\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Capabilities\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToCsv\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToExcel\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToPdf\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Arn\": \"arn:aws:quicksight:us-east-1:864571xxxxxx:custompermissions/res-action\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CustomPermissionsName\": \"res-action\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Capabilities\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Action\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp;],\n&nbsp;&nbsp; &nbsp;\"Status\": 200,\n&nbsp;&nbsp; &nbsp;\"RequestId\": \"8e2e3d34-5553-4477-a0e4-f081295eefe1\"\n}</code></pre> \n</div> \n<p><strong style=\"font-weight:bold\">カスタムパーミッションを使用したアクセス制限</strong></p> \n<p>Amazon Quick Suite でカスタム権限プロファイルを使用して、きめが粗い制御 (機能) またはきめ細やかな制御のアクセス (機能内の機能) を制御します。</p> \n<ol> \n <li>カスタム権限プロファイルを作成します。</li> \n <li>カスタム権限プロファイルを確認します。</li> \n <li>適切なカスタム権限を割り当てます (アカウント、ロール、またはユーザーに対して)。</li> \n <li>割り当てられたカスタム権限を確認します。</li> \n</ol> \n<h3>カスタム権限プロファイルの作成</h3> \n<p><code>create-custom-permissions</code> API は、アカウント、ロール、またはユーザーレベルのプロファイルを含む、さまざまなスコープのカスタム権限プロファイルを作成するために使用されます。単一の機能、複数の機能に対する権限の定義、または Quick Suite や Quick Sight 内の特定の機能の制限をサポートしています。</p> \n<p>以下の機能がサポートされています:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Dashboard\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Analysis\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Automate\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Flow\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"KnowledgeBase\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Action\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Space\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ChatAgent\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Research\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</code></pre> \n</div> \n<p>次の機能がサポートされています。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToCsv\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToExcel\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToPdf\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"PrintReports\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateAndUpdateThemes\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"AddOrRunAnomalyDetectionForAnalyses\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ShareAnalyses\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateAndUpdateDatasets\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ShareDatasets\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"SubscribeDashboardEmailReports\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateAndUpdateDashboardEmailReports\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ShareDashboards\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateAndUpdateThresholdAlerts\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"RenameSharedFolders\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateSharedFolders\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateAndUpdateDataSources\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ShareDataSources\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ViewAccountSPICECapacity\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateSPICEDataset\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToPdfInScheduledReports\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToCsvInScheduledReports\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ExportToExcelInScheduledReports\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"IncludeContentInScheduledReportsEmail\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"PublishWithoutApproval\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"UseBedrockModels\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"CreateChatAgents\": \"DENY\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"UseAgentWebSearch\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"PerformFlowUiTask\": \"DENY\"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</code></pre> \n</div> \n<p>以下のサンプル <code>create-custom-permissions</code> API 呼び出しは、エクスポート機能を制限するプロファイルを作成します。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-shell\">aws quicksight create-custom-permissions --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt; \n--custom-permissions-name deny-all-capabilities &nbsp;--capabilities </code></pre> \n</div> \n<p>以下は <code>customperm.json</code> ファイルの内容です。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Dashboard\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Analysis\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Automate\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Flow\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"KnowledgeBase\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Action\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Space\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ChatAgent\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Research\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</code></pre> \n</div> \n<p>このコマンドが正常に実行されると、次の出力が表示されます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n\"Status\": 201,\n\"Arn\": \"arn:aws:quicksight:us-east-1:&lt;&lt;864571xxxxxx&gt;&gt;:custompermissions/deny-all-capabilities\",\n\"RequestId\": \"c3d0a3e1-0c67-4581-a0d6-58fa9fd6386a\"\n}</code></pre> \n</div> \n<h3>カスタム権限プロファイルの確認</h3> \n<p>カスタム権限プロファイルを作成した後、適切な <code>describe-*-custom-permissions</code> API 関数を使用して確認と検証を行ってください。これにより、権限が意図したとおりに設定され、ガバナンスポリシーと整合していることを確認できます。</p> \n<p><code>describe-custom-permissions</code> API を使用して、新しく作成されたカスタムパーミッションを確認します。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-shell\">aws quicksight describe-custom-permissions &nbsp;--aws-account-id &nbsp;&lt;&lt;864571xxxxxx&gt;&gt;&nbsp;\n--custom-permissions-name &nbsp;&nbsp; deny-all-capabilities</code></pre> \n</div> \n<p>コマンド実行後のサンプル出力:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n\"Status\": 200,\n&nbsp;&nbsp; &nbsp;\"CustomPermissions\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"Arn\": \"arn:aws:quicksight:us-east-1:864571xxxxxx:custompermissions/deny-all-capabilities\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"CustomPermissionsName\": \"deny-all-capabilities\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;\"Capabilities\": {\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Dashboard\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Analysis\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Automate\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Flow\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"KnowledgeBase\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Action\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Space\": \"DENY\",\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ChatAgent\": \"DENY\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\"Research\": \"DENY\"\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp;&nbsp; &nbsp;},\n&nbsp;&nbsp; &nbsp;\"RequestId\": \"8f9df543-c093-47de-92ba-77abe8a9e39c\"\n&nbsp; &nbsp; }</code></pre> \n</div> \n<h3>カスタムパーミッションの割り当て</h3> \n<p>カスタムプロファイルの作成を確認したので、次にそれらをさまざまなレベルで割り当てていきます。まずアカウントレベルから始め、次にロールレベル、最後にユーザーレベルで割り当てます。</p> \n<h4>アカウントのカスタムパーミッションの更新</h4> \n<p>次の例は、<code>UpdateAccountCustomPermission</code> API を使用して、アカウントレベルで割り当てられたカスタムパーミッションを更新する方法を示しています。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-shell\">aws quicksight update-account-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;&nbsp;\n--custom-permissions-name deny-all-capabilities</code></pre> \n</div> \n<p>コマンド実行後のサンプル出力:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n\"RequestId\": \"5e12bf76-0173-4a35-aae7-bb892ffb0138\",\n\"Status\": 200\n}</code></pre> \n</div> \n<h4>ロールのカスタムパーミッションの更新</h4> \n<p>以下の例は、<code>UpdateRoleCustomPermission</code> API を使用して Author ロールのカスタム権限を更新し、このロールを持つユーザーがデータソースを作成できないように制限する方法を示しています。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-typescript\">aws quicksight update-role-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;\n--role AUTHOR --namespace default --custom-permissions-name  deny-datasource</code></pre> \n</div> \n<h4>ユーザーのカスタム権限の更新</h4> \n<p>次の例では、<code>UpdateUserCustomPermission</code> API を呼び出して、ユーザーに割り当てられたカスタムパーミッションを更新し、デフォルトの名前空間内でチャットエージェントを作成する機能を拒否します。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-typescript\">aws quicksight update-user-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;\n--user-name C1-admin --namespace default --custom-permissions-name &nbsp;deny-chat-agents</code></pre> \n</div> \n<h3>ロールに割り当てられたカスタムアクセス許可の確認</h3> \n<p>カスタムパーミッションの割り当てが正常に完了したら、各レベルで設定されたパーミッションを確認し、正確性とコンプライアンスを確保することが重要です。</p> \n<h4>割り当てられたカスタム権限プロファイルの説明 (アカウントレベル)</h4> \n<p>次の例は、アカウントに割り当てられているカスタムアクセス許可プロファイルを返します。なお、アカウントには常に 1 つのカスタムプロファイルのみを割り当てることができます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">aws quicksight describe-account-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;</code></pre> \n</div> \n<p>API の実行が成功すると、次の出力が表示され、deny-all カスタム権限プロファイルがアカウントレベルで適用されます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n&nbsp;&nbsp; &nbsp;\"CustomPermissionsName\": \"deny-all-capabilities\",\n&nbsp;&nbsp; &nbsp;\"RequestId\": \"b430726f-c3ec-4f9b-a55c-4b04d2f3596e\",\n&nbsp;&nbsp; &nbsp;\"Status\": 200\n}</code></pre> \n</div> \n<h4>割り当てられたカスタム権限プロファイルの説明 (ロールレベル)</h4> \n<p>次の例では、Author ロールに割り当てられたカスタムアクセス許可プロファイルを取得します。ロールには、任意の時点で 1 つのカスタムプロファイルのみを割り当てることができることに注意してください。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-typescript\">aws quicksight describe-role-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt; \n--role AUTHOR --namespace default</code></pre> \n</div> \n<p>コマンドが正常に実行されると、次の出力が表示され、<code>deny-datasource</code> プロファイルがロールレベルで適用されます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n \"CustomPermissionsName\": \"deny-datasource\",\n \"RequestId\": \"6b9cc3ff-71f9-4e8e-a588-c48b63fa8696\",\n \"Status\": 200\n }</code></pre> \n</div> \n<h4>割り当てられたカスタム権限プロファイルの説明 (ユーザーレベル)</h4> \n<p>次の例では、ユーザーレベルで割り当てられたカスタムアクセス許可プロファイルを取得します。ユーザーには、任意の時点で 1 つのカスタムプロファイルのみを割り当てることができることに注意してください。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-typescript\">aws quicksight describe-user --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt; \n--user-name &lt;&lt;user-name&gt;&gt; --namespace default\n</code></pre> \n</div> \n<p>コマンドが正常に実行されると、次の出力が表示され、<code>deny-chat-agents</code> プロファイルがユーザーレベルで適用されます。</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-css\">{\n \"Status\": 200,\n \"User\": {\n \"Arn\": \"arn:aws:quicksight:us-east-1:&lt;&lt;864571xxxxxx&gt;&gt;:user/default/C1-author\",\n \"UserName\": \"&lt;&lt;user-name&gt;&gt;\",\n \"Email\": \"c1author@test.com\",\n \"Role\": \"AUTHOR_PRO\",\n \"IdentityType\": \"IAM_IDENTITY_CENTER\",\n \"Active\": true,\n \"PrincipalId\": \"74c80498-5041-70b9-29fd-0df9f9995351\",\n \"CustomPermissionsName\": \"deny-chat-agents\"\n },\n \"RequestId\": \"94ad152c-6021-4f3d-a4d5-2c17696b5859\"\n }</code></pre> \n</div> \n<h3>カスタムアクセス許可の割り当て解除</h3> \n<p>未使用または不要なカスタムパーミッションを定期的にクリーンアップして、安全で適切に管理された環境を維持することをお勧めします。これは、<code>delete-*-custom-permission</code> API を使用して実行できます。この API は、Amazon Quick Suite 内のさまざまなレベルでの割り当て解除をサポートしています。</p> \n<ul> \n <li>カスタム権限プロファイル (アカウントレベル) の割り当て解除のサンプル API:</li> \n</ul> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">aws quicksight delete-account-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;</code></pre> \n</div> \n<ul> \n <li>ロールのカスタム権限の割り当てを解除するサンプル API:</li> \n</ul> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-typescript\">aws quicksight delete-role-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;\n--role AUTHOR --namespace default</code></pre> \n</div> \n<ul> \n <li>ユーザーのカスタム権限を割り当て解除するサンプル API:</li> \n</ul> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-typescript\">aws quicksight delete-user-custom-permission --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt;\n--user-name C1-admin --namespace default</code></pre> \n</div> \n<ul> \n <li>カスタム権限プロファイルのサンプル API を削除します:</li> \n</ul> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-shell\">aws quicksight delete-custom-permissions --aws-account-id &lt;&lt;864571xxxxxx&gt;&gt; \n--custom-permissions-name deny-all-capabilities</code></pre> \n</div> \n<h2>まとめ</h2> \n<p>Amazon Quick Suite の強化されたカスタムパーミッションは、エンタープライズデータガバナンスとセキュリティ管理における大きな進歩を表しています。管理者にアカウント、ロール、ユーザーレベルで機能アクセスに対する詳細な制御を提供することで、組織は特定の運用要件とコンプライアンス基準に沿った高度なセキュリティフレームワークを実装できるようになりました。</p> \n<p>階層的な権限構造では、ユーザーレベルの権限がロールレベルの権限を上書きし、ロールレベルの権限がアカウントレベルの権限を上書きします。この構造により、セキュリティと生産性のバランスを取るために必要な柔軟性が提供されます。このアプローチにより、組織は広範なセキュリティポリシーを確立しながら、全体的なガバナンスを損なうことなく、特定のユーザーやチームに対して的を絞った例外を作成する能力を維持できます。</p> \n<p>直感的な Manage Quick Suite コンソールを通じて実装する場合でも、AWS CLI や API を通じてプログラム的に実装する場合でも、カスタムパーミッションは管理者に次のことを可能にします。</p> \n<ul> \n <li>Research、Automate、Chat Agents などの機密性の高い機能へのアクセスを制限することで、最小権限の原則を適用します。</li> \n <li>きめ細かなユーザーレベルおよびロールレベルのオーバーライドにより、運用の柔軟性を維持します。</li> \n <li>一貫した適用により、大規模なエンタープライズ環境全体でセキュリティポリシーをスケールします。</li> \n <li>動的な権限調整により、進化するビジネスニーズに適応します。</li> \n</ul> \n<p>詳細については、Quick Suite の<a href=\"https://docs.aws.amazon.com/quicksuite/latest/userguide/create-custom-permisions-profile.html\" target=\"_blank\" rel=\"noopener noreferrer\">カスタムパーミッション</a>のドキュメントを参照してください。</p> \n<h3>著者について</h3> \n<p><strong><img loading=\"lazy\" class=\"wp-image-492 size-full alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2023/08/10/raji.png\" alt=\"\" width=\"100\" height=\"112\"> Raji Sivasubramaniam </strong>は、AWS のプリンシパルソリューションアーキテクトで、アナリティクスと AIML を専門としています。Raji は、世界中の Fortune 500 および Fortune 100 企業向けに、エンドツーエンドのエンタープライズデータ管理、ビジネスインテリジェンス、AIML ソリューションのアーキテクチャ設計を専門としています。マネージドマーケット、医師ターゲティング、患者分析など、さまざまな医療データセットを用いた統合医療データとアナリティクスに関する豊富な経験を持っています。</p> \n<p><img loading=\"lazy\" class=\"wp-image-4973 size-full alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/05/20/nkr.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>Neeraj Kumar</strong> は、AWS のシニアワールドワイドソリューションアーキテクトで、組織がデータを活用する方法を変革するエンタープライズ規模のソリューションを設計しています。自動車、製造、通信セクターにおけるデータとアナリティクスの 20 年以上の経験を持ち、Amazon Quick Suite と AI を活用したアナリティクスを使用して画期的なインサイトを引き出すためのグローバルカスタマーへのガイダンスを提供し、統合 AI/BI ランドスケープのモダナイゼーションとデータドリブン変革の加速を支援しています。</p> \n<p><img loading=\"lazy\" class=\"wp-image-4975 size-full alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/d02560dd9d7db4467627745bd6701e809ffca6e3/2025/05/20/salimkn.jpg\" alt=\"\" width=\"100\" height=\"133\"><strong>Salim Khan</strong> は、Amazon Quick Suite のスペシャリストソリューションアーキテクトです。Salim は、エンタープライズビジネスインテリジェンス (BI) ソリューションの実装において 16 年以上の経験を持っています。AWS に入社する前は、自動車、ヘルスケア、エンターテインメント、消費財、出版、金融サービスなどの業界に対応する BI コンサルタントとして働いていました。企業全体にわたって、ビジネスインテリジェンス、データウェアハウス、データ統合、マスターデータ管理ソリューションを提供してきました。</p>"
  },
  {
    "title": "Hono CLI 爆誕",
    "date": "2025-10-23T06:59:08.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/yusukebe/articles/ff69c13ccafb28",
    "content": "これまでHonoは数々の新しいことを提供してきました。正規表現を活かしたルーター、サーバーサイドの軽量JSX、TypeScriptの型によるRPC、Web Standardを使ったマルチランタイム対応などなど。アイデアと実装力で世界と戦って来たわけです。\n本日私達が紹介するのは「Hono CLI」です。\nHono CLIは全く新しいコンセプトのコマンドラインインターフェースです。\n\n\ncreate-* ではありません\nただの開発用（dev&amp;build&amp;deploy）のコマンドではありません\nViteのラッパーではありません\n\n人間とAIのためのCLIです。インストールする..."
  },
  {
    "title": "vitejs/vite – v7.1.12",
    "date": "2025-10-23T06:43:40.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.12",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.12/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "株式会社 WhiteBox 様の AWS 生成 AI 活用事例 : Amazon Bedrock で AI エージェントを活用した次世代飲み会幹事代行システム「KanpAi」を開発。 AI 駆動開発の活用で数か月の開発工数を3週間に削減。",
    "date": "2025-10-23T05:13:47.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-whitebox/",
    "content": "<p><em>本ブログは株式会社 WhiteBox 様と Amazon Web Services Japan 合同会社が共同で執筆いたしました。</em></p> \n<p>みなさん、こんにちは。AWS アカウントマネージャーの中道です。</p> \n<p>伴走型戦略 DX ファームの株式会社情報戦略テクノロジー様のグループ会社で、　IT 案件マッチングプラットフォームを運営する株式会社 WhiteBox 様は、飲み会の幹事の仕事を全て AI エージェントに丸投げできるサービス「KanpAi（カンパイ）」を開発されました。</p> \n<p>本システムの開発においては、AI コーディングエージェントを利用した AI 駆動開発を活用し、通常なら数ヶ月を要する規模の開発を、わずか 3 週間で完成させ、2025年6月26日に開催された「AWS Summit Japan 2025 生成 AI ハッカソン」において最優秀賞を獲得されました。本記事では、AI駆動開発によって作られた AI エージェントシステムである「KanpAi」の詳細についてご紹介いたします。</p> \n<h2></h2> &nbsp;\n<p></p> \n<h2>お客様の状況と経緯</h2> \n<p>株式会社情報戦略テクノロジーグループの株式会社WhiteBox様では、親会社である株式会社情報戦略テクノロジー様の「 IT 業界の構造的課題を解決する」というミッションのもと、常に新しい技術を活用した生産性の高い開発体制を模索されておりました。特に、新規サービスのプロトタイピングにおいては、以下の課題が存在していました。</p> \n<h3><strong>開発速度の限界</strong></h3> \n<p>従来の開発手法では、アイデアの着想から実装、テスト、リリースまでの一連のサイクルに時間がかかり、市場やお客様のニーズに迅速に応えることが難しい場面がありました。特に今回のハッカソンのような極端な短納期開発では、従来の手法では実現が困難でした。</p> \n<h3><strong>リソースの制約</strong></h3> \n<p>少人数のチームで新しいサービスを開発する場合、インフラ構築、バックエンド、フロントエンド、そして本来注力すべきコアなロジック開発まで、一人のエンジニアが担う範囲が広くなり、専門性を活かしきれないという課題がありました。</p> \n<h3><strong>非効率な反復作業</strong></h3> \n<p>アプリケーション開発には、定型的なコードの記述や、APIの接続部分など、多くの反復作業が伴います。これらの作業に時間を取られ、より創造的な機能やユーザー体験の向上といった本質的な価値創出に集中しきれない状況がありました。</p> \n<p>これらの課題を抜本的に解決し、開発者の創造性を最大限に引き出すためのアプローチとして、　AI コーディングエージェントを活用したAI　駆動開発（AI-Driven Development）に大きな可能性を感じていました。</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<h2>ソリューション / 構成内容</h2> \n<p>「KanpAi」は、AI エージェントを用いた次世代の飲み会幹事の代行システムです。予算や人数や好みに合わせたAI によるお店のリサーチと予約、進行状況を把握しお店に出る前に行う二次会の先回り手配を実現します。また、参加者の好みや過去のフィードバック結果を学習させることで、「KanpAi」 を成長させることが可能です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/01-2.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167735 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/01-2.png\" alt=\"\" width=\"567\" height=\"330\"></a></p> \n<p>&nbsp;</p> \n<h3><strong>6つの専門AI エージェントによる自動化</strong></h3> \n<p>システムの核となるのは、それぞれ専門的な役割を持つ6つのAI エージェントです。</p> \n<p><strong>会場リサーチ提案エージェント</strong></p> \n<p>予算や参加人数、条件や要望といった入力情報を元に、最適な会場を選定します。単に条件に合う店を探すだけでなく、なぜその店がおすすめなのかという理由も含めてLINEに通知します。</p> \n<p><strong>Web予約エージェント</strong></p> \n<p>会場の選定が完了したら、Web 予約エージェントが会場のWeb予約システムに自動的にアクセスし、予約を完了させます。予約確認もLINEで即座に通知されます。</p> \n<p><strong>二次会リサーチ提案エージェント</strong></p> \n<p>飲み会当日、二次会会場を探し、提案を行なうエージェントです。一次会の進行状況を把握し、適切なタイミングで二次会会場を自動的に探し提案します。LINEに通知された候補から選択すると、予約エージェントが予約を代行します。</p> \n<p><strong>電話予約エージェント</strong></p> \n<p>Web予約に対応していない店舗に対して、実際に架電を行い、予約を行なうエージェントです。AI音声による自然な会話で予約交渉を行い、電話予約の結果はLINEで通知されます。</p> \n<p><strong>精算計算エージェント</strong></p> \n<p>飲み会後の事後処理として、参加者の役職によって傾斜をかけるなど、事情に合わせた割り勘を提案します。上司は多め、新人は少なめといった、日本の飲み会文化に配慮した柔軟な計算を行うことができるエージェントです。</p> \n<p><strong>継続学習エージェント</strong></p> \n<p>最後に今回の体験のフィードバックを入力することで、「継続学習エージェント」がフィードバックを受け、「KanpAi」は成長していきます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/02-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167737 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/02-1.png\" alt=\"\" width=\"567\" height=\"318\"></a></p> \n<p>&nbsp;</p> \n<p>「KanpAi」のバックエンドは、 AWSのサーバーレスアーキテクチャを全面的に採用し、迅速な開発とスケーラビリティを両立させています。各AI エージェントは独立したマイクロサービスとして機能し、AWS Lambda とAmazon Bedrock で実装されています。</p> \n<h3><strong>Amazon Bedrockによるマルチエージェントの実現</strong></h3> \n<p>本システムの中核であるAI エージェントの思考能力は、Amazon Bedrock を通じて実現しています。例えば、「会場リサーチ提案エージェント」では、ユーザーの要望（予算、エリア、料理の好みなど）を自然言語で理解し、最適な会場を推薦するためにClaude Sonnet 4 を利用しています。思考プロセスを担うLLMを柔軟に選択・変更できるAmazon Bedrock　の利点を活かし、エージェントのタスクごとに最適なモデルを使い分ける構想を持っています。</p> \n<h3><strong>Amazon Rekognition とAmazon Connect の活用</strong></h3> \n<p>飲み会中の写真から盛り上がり度を判定する「カンパイメーター」機能では、画像・動画分析サービスのAmazon Rekognitionを活用し、人物の表情や人数から独自の盛り上がり度スコアを算出しています。また、「電話予約エージェント」では、テキストを自然な音声に変換し、実際にお店へ電話発信を行うためにAmazon Connectを連携させています。これにより、Web予約に対応していないお店へもアプローチが可能となり、ユーザー体験を大きく向上させています。このように、AWSが提供する多様なマネージドサービスとAI サービスを組み合わせることで、アイデアを迅速に形にし、かつ高機能なアプリケーションを短期間で構築を実現されています。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/03-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167739 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/23/03-1.png\" alt=\"\" width=\"567\" height=\"316\"></a></p> \n<h2></h2> &nbsp;\n<p></p> \n<h2>導入効果</h2> \n<h3><strong>AI 駆動開発による開発工数の劇的な削減</strong></h3> \n<p>限られた期間の中、AI 駆動開発の導入を行うことで多機能なアプリケーション開発を実現されました。</p> \n<h3><strong>開発期間を数ヶ月から3週間へ短縮</strong></h3> \n<p>CursorなどのAIコーディング支援ツールを全面的に活用し、定型的なコードやユニットテストの自動生成、コードのリファクタリングなどをAIに任せました。これにより、従来の手法であれば最低でも数ヶ月以上を要する規模のプロジェクトを、わずか3週間で完成させることができました。</p> \n<h3><strong>開発者の創造性を最大化</strong></h3> \n<p>Lambda関数のボイラープレートコード、API連携部分、エラーハンドリングなど、定型的な実装の大部分をAIが担当することで、エンジニアはより創造的で付加価値の高い、AIエージェントのプロンプト設計やビジネスロジックの考案に集中することができました。</p> \n<h3><strong>プロトタイピングの高速化</strong></h3> \n<p>アイデアを即座にコードに落とし込み、動くプロトタイプを短時間で作成できるため、チーム内でのフィードバックサイクルが格段に高速化しました。動くものを短時間で作り、フィードバックを集めてすぐに反映させる、というサイクルを高速に回し続けることで、サービスの方向性を早期に固め、ユーザー体験のブラッシュアップに時間を費やすことができました。</p> \n<p>加えて、株式会社 WhiteBox 様は2025年6月26日に開催された 「AWS Summit Japan 2025 生成AIハッカソン ～それ AIエージェントがやります～」 において 「WhiteBoxお酒同好会」 として参加し、本プロダクトによって最優秀賞を獲得されました。</p> \n<h2></h2> &nbsp;\n<p></p> \n<h2>今後の展望</h2> \n<h3><strong>「KanpAi」のサービス展開</strong></h3> \n<p>ハッカソンでの反響を受け、将来的にはユーザーインターフェースの改善や対応エリアの拡大、個人の好みを学習するパーソナライズ機能の強化など、多くのアイデアを検討されています。一方で「KanpAi」 は技術的な可能性を追求する中で生まれたサービスでもあるため、これまで培った知見をお客様のDX を支援する事業のプロジェクトに活かしていくことを目指されています。</p> \n<p>(※「KanpAi」の正式なリリース時期は現時点では未定となります。)</p> \n<h3><strong>AI エージェントとAI 駆動開発の今後の活用</strong></h3> \n<p>AI駆動開発の手法を「KanpAi」だけでなく、株式会社 WhiteBox 様が提供する全てのサービス、そして株式会社情報戦略テクノロジー様グループが手掛けるDX支援プロジェクト全体へと展開されることを計画されています。 自社内に「AIエージェント開発フレームワーク」を構築し、高品質なAIエージェントを迅速に開発できる体制を整えることで、お客様のビジネス課題を解決するソリューションをこれまで以上のスピードで提供することに取り組まれています。</p> \n<blockquote>\n <p>『 「人にしかできない、創造的な仕事へ誰もが集中できる世界」の実現に向け、今後もAI技術の活用を推進し、IT業界全体の生産性向上に貢献していきたいと考えています。』</p> \n <p>株式会社情報戦略テクノロジー AI Officer　藤本 雅俊 氏</p>\n</blockquote> \n<p>&nbsp;</p> \n<p>Amazon Web Services Japan</p> \n<p>アカウントマネージャー 中道 野々香</p> \n<p>ソリューションアーキテクト 小林 大樹</p>"
  },
  {
    "title": "初等中等教育の課題解決、および教育DX促進に向けた包括的支援プログラム「AWS ITトランスフォーメーションパッケージ教育版（ITX for Education）」を公開",
    "date": "2025-10-23T03:32:00.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/aws-itx-edu/",
    "content": "<p>アマゾン ウェブ サービス ジャパン（以下、AWS）は、官公庁・教育・医療といった公共機関の大規模なクラウド移行を包括的に支援するために、AWSのクラウド移行支援プログラムである<a href=\"https://aws.amazon.com/jp/blogs/news/aws-itx2024-for-public-sector/\">AWS ITトランスフォーメーションパッケージ 公共版（ITX for PS）</a>を2024年6月にリリースし、公共機関におけるデジタル・トランスフォーメーションを支援してきました。そしてこの度、初等中等教育の課題解決、および教育DXの推進支援に向けて、AWSは包括的な支援メニューとして、ITトランスフォーメーションパッケージ教育版（ITX for Education）をリリースしました。このブログでは、ITX for Educationについて詳細を説明します。</p> \n<h2>初等中等教育を取り巻く環境</h2> \n<p>初等中等教育では、2019年12月に文部科学省から発表された「<a href=\"https://www.mext.go.jp/a_menu/other/index_00011111.htm\">GIGAスクール構想</a>」以降、国によるデジタル化の進展が急ピッチで進められてきました。各種EdTechサービスやデジタル教科書の導入、文部科学省CBTシステム「<a href=\"https://www.mext.go.jp/a_menu/shotou/zyouhou/mext_00001.html\">MEXCBT</a>」や「<a href=\"https://support2.mexcbt.mext.go.jp/faq/zenpan/u538gmqt4dkg/\">学習eポータル</a>」の導入・展開、<a href=\"https://www.mext.go.jp/a_menu/shotou/zyouhou/detail/1397369_00002.htm\">次世代校務DX</a>による教員の働き方改革の実現、そしてNext GIGAとしてGIGAスクール構想第二期を迎えました。そして、2025年6月、デジタル庁、総務省、文部科学省、経済産業省から「<a href=\"https://www.digital.go.jp/news/511df327-5ba3-456e-a5cd-2ebeddd8c960\">教育DXロードマップ</a>」が発出され、今後の教育DXの目指すべき姿が示されています。このデジタル化の一連の流れは、政府が進める「<a href=\"https://www.digital.go.jp/resources/standard_guidelines\">クラウド・バイ・デフォルト（Cloud by Default）</a>」の原則に基づいており、AWSは、一貫して、日本の初等中等教育の課題に向き合い、ソリューションを提供することで教育DXの進展に貢献してきました。</p> \n<h2>初等中等教育における課題</h2> \n<p>初等中等教育では3つの主要な課題が顕在化しているといえます。第一に、教職員の業務負担過多により、月45時間を超える時間外勤務の割合が小学校25％、中学校43％、高等学校28％に達し、子供たちと向き合う時間が不足している状況です※。そのため校務DXによる業務効率化とデジタルツールの活用が急務となっています。第二に、一人一台端末は整備されたものの、学習ツールの導入・活用が進まず、子供たちの多様性に対応した個別最適な学習環境の構築が課題となっています。第三に、GIGAスクール構想でデジタル化が進展したものの、教育データを活用したエビデンスベースの指導や学習者へのフィードバックの浸透はこれからです。また、専門知識を必須としない分析ツールの開発もが必要です。これらの課題を解決することにより、すべての子供たちの「自分らしい学び」の実現を目指す必要があります。<br> ※<a href=\"https://www.mext.go.jp/content/20250324-mxt_zaimu-000041069.pdf\">文部科学省令和６年度教育委員会における学校の働き方改革のための取組状況調査</a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド1.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167498\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド1.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>教育DX推進のためのITX for Education</h2> \n<p>ITX for Educationは、教育委員会、提案・構築事業者、EdTech企業を対象としており、三つの柱で構成されています。<br> 一つ目は、次世代校務DX推進です。次世代校務DXではクラウド化、モダン化が不可欠となりますが、AWSでは、教育委員会をはじめ、民間企業、ガバメントクラウドなど、数多くのクラウド移行の実績があり、これらのノウハウが蓄積されています。このノウハウを教育委員会、提案・構築事業者に提供し、スムーズなクラウド移行を支援します。結果として、教職員の負荷軽減を実現し、児童生徒および教員の能力を最大限に活用できる環境構築に寄与します。<br> 二つ目は、多様なEdTechサービスの提供です。教育DX実現のためには、EdTechサービスの活用が不可欠です。AWSでは、多様な学びのための学習環境整備、また、教職員の負荷軽減などに対応したEdTechサービスを教育委員会、提案・構築事業者へ積極的にエンゲージメントします。<br> 三つめは、生成AIによる教育データの分析・活用の推進です。AWSでは、生成AIを活用した教育データの利活用、教職員の負荷軽減、多様な学びのための学習環境整備、それぞれのユースケースを対象とした概念実証（PoC）の実施、プロトタイピングの作成、ソリューションの実装と本番環境への拡張計画の作成を支援します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド2.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167499\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド2.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>次世代校務DX化に向けた豊富なアセスメントプログラム</h2> \n<p>それでは、ITX for Educationの具体的なメニューについてみていきたいと思います。<br> まずは、クラウド化に向けたアセスメントプログラムです。校務支援システムのクラウド化を進めるために重要な、次期システム検討の初期段階でのクラウド化による費用対効果の検証や、実現性の検証を様々なアセスメントにより支援します。経済合理性評価（クラウド・エコノミクス）では、クラウド移行を通じて得られる経済メリット（コスト削減効果）の試算を実施し、具体的な金額ベースで提示します。また、移行方法検討支援では、移行対象システムを俯瞰的に分析し、各教育委員会にマッチした戦略的なクラウド移行パターンを推奨します。また、クラウドによるモダン化を検討中の教育委員会に対しては、モダナイゼーションのポイントや、To-Beアーキテクチャ案を提示します。データベース（DB）移行支援では、脱商用データベースや同一データベースの移行について、移行先となるマネージドサービスの検討を支援します。ライセンス評価支援は、現在のシステム環境を第3者機関により評価し、3rd Partyライセンスを最適化します。これらのアセスメントプログラムは、いずれか一つを選択することも、複数を活用することも可能で、プログラムはAWSの専門チームが支援し、全て無償で提供します。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド3.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167500\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド3.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>次世代校務DX化に向けたデータプラットフォーム検討支援</h2> \n<p>データプラットフォーム検討支援「Data Platform Modernization Assessment(DPMODA)」では、データ駆動型教育や、教育委員会内、学校内のデータを生成AIで最大限活用することを目指すお客様に対して、AWSの専門チームが各教育委員会の現行データ基盤を分析し、モダナイゼーションのポイントや、To-Beアーキテクチャ案を提示します。<br> データプラットフォーム検討支援を通じて、現行データ基盤の成熟度を把握することで、今後の教育データ連携基盤の戦略策定に活用できます。また、To-Beアーキテクチャ検討を通して、現行基盤の単純移行にとどまらず、クラウドでの機能強化のヒントが得られます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/スライド4-1.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167603\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/スライド4-1.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>次世代校務DX化に向けたゼロトラストネットワーク対応支援</h2> \n<p>教育委員会では、これまで校務系ネットワークと学習系ネットワークを分離させる、いわゆるネットワーク分離方式が推奨されてきました。しかしながら、この方式により校務系データと学習系データの連携が困難であり、教育データ利活用の観点で大きな課題となっていました。そこで次世代校務DXでは、校務系システムのクラウド化に伴い、インターネットを通じた、強固なアクセス制御による対策、いわゆるゼロトラスト・ネットワークの構築が推奨されています。ゼロトラスト・ネットワークは、デジタル資産を保護するための概念的なセキュリティモデルと関連メカニズムの集合体であり、単一の製品やソリューションではありません。また、各教育委員会のお客様がどこまで踏み込んだ対策をするかで金額面、構成面で大きな違いが出てきます。AWSでは、これらを踏まえ、専門チームが、お客様の要望を確認し、AWS製品のみならず、3rd Partyソリューションも含めた最適な構成の策定を支援いたします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/スライド5-2.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167604\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/スライド5-2.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>EdTechソリューション エンゲージメント支援</h2> \n<p>教育DXの課題となっているデジタル化による教職員の負担軽減や、多様の学びのための学習環境の整備については、EdTech各社のサービス導入も解決策となります。デジタル化による教職員の負荷軽減に関しては、デジタル採点、Web出願、保護者連絡・集金、コンタクトセンターなどのソリューション導入で、また、多様な学びのための学習環境の整備については、授業支援/学習管理、CBT/分析、デジタル教材/デジタルドリル、英語Speaking、プログラミング/AIなどのソリューション導入で課題解決に貢献します。これらのEdTechソリューションについて、AWSに相談いただくことで、最適なソリューションを提供するEdTech企業にエンゲージメントし、各教育委員会の課題を解決します。なお、ご紹介可能なEdTechサービスは、今後順次追加の予定です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド5-1.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167504\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド5-1.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>教育機関でのデータ利活用と生成AI活用支援</h2> \n<p>生成AIは、その登場以来、様々な企業や公共機関で導入され、大きな業務変革を実現しています。学校現場においても、文部科学省が<a href=\"https://www.mext.go.jp/zyoukatsu/ai/\">学校現場における生成AIの利用について</a>のサイトを立ち上げ、初等中等教育段階の学校現場における生成AIの適切な利活用を実現するための参考となる資料や留意事項を本サイトにまとめており、ガイドラインに沿った積極的な活用を推奨しています。<br> 生成AIは、教育DXの課題となっている教育データ利活用、デジタル化による教職員の負担軽減や、多様な学びのための学習環境の整備、すべてにおいて課題解決へ大きな効果が期待できます。教育データ利活用については、学習分析・データマイニング、教育データの自動レポート作成、予測分析とリスク検知などのユースケースが考えられます。デジタル化による教職員の負担軽減については、教材・コンテンツの作成や、個別最適化されたフィードバックの作成、指導計画策定などのユースケースが考えられます。また、多様な学びのための学習環境の整備については、パーソナライズされた学習体験の提供や、多言語・アクセシビリティ対応、特別支援教育への応用などのユースケースが考えられます。AWSでは、生成AIの専門チームから、これら教育機関向け生成AIユースケースを対象とした概念実証（PoC）の実施、ソリューションの実装と本番環境への拡張計画の作成を支援します。また、必要に応じて生成AIプロトタイプの作成という実装面の支援や、AWSクレジット提供によるコスト負担軽減の支援も実施します。（AWSクレジットの提供については、別途審査があります。）</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド6.png\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-167497\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/スライド6.png\" alt=\"\" width=\"1280\" height=\"720\"></a></p> \n<h2>まとめ</h2> \n<p>冒頭で説明した通り、「GIGAスクール構想」以降、日本の初等中等教育ではデジタル化が目覚ましく進んできました。しかしながら、教育DX実現はこれからです。AWSは、教育DXの実現に向け、ITX for Educationを中心に各教育委員会、提案・構築事業者、EdTech企業を支援し、『誰もが、いつでもどこからでも、誰とでも、自分らしく学べる社会』を目指します。</p> \n<h2>ITX for Educationの始め方</h2> \n<p>ご関心のある方は、1）<a href=\"https://aws.amazon.com/jp/contact-us/\">Webフォーム</a>からお問い合わせ頂く、あるいは 2）パブリックセクター　教育・研究事業本部のメーリングリスト（jp-ps-edu-edt-k12@amazon.com）までご連絡ください。<br> ※ メーリングリスト宛にご連絡をいただく際は、＠が全角になっておりますので、半角に置き換えてください。</p>"
  },
  {
    "title": "Claude Code導入3ヶ月後の社内アンケートから分かったこと",
    "date": "2025-10-23T03:15:02.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/readyfor_blog/articles/a1cfd81a562e07",
    "content": "\n 背景と目的\nClaude Code が ver.1.0.0 になってから 5 ヶ月、弊社が全エンジニアに展開してから 3 ヶ月が経過しました。\nその中で生産性が上がった人とそうでない人が明確に分かれていたり、新たな大変さが生まれてフラストレーションも多く抱えています。\nWeb 開発の現場で LLM 開発を導入することで何に困るのか明確にして次の施策につなげたいと考え、定性・定量の両面からチーム全体の実態調査をしました。\nこれから LLM 導入を考えている、導入後どうしたらいいか悩んでいる人の参考になれば幸いです。\n\n\n 結論の概要\n調査で見えてきたのは、「生産性は確実に上がっている一..."
  },
  {
    "title": "社内AI活用推進のためにAWS S3 Vectorsを使ってみました！（データのベクトル化と投入、検索まで）",
    "date": "2025-10-23T02:44:52.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/fukurou_labo/articles/1b38f6d0940917",
    "content": "\n はじめに\n株式会社フクロウラボで情シスを担当している高島です。\n最近はゼロトラスト推進やSaaS運用・改善にとどまらず、事業をドライブするために「攻めの情シス」業務に注力しようとしています。AI推進を行うべく、社内に点在する膨大なナレッジ（Slack、Notion、PDF資料など）をAIエージェントに学習させ、業務効率化を図るミッションを掲げています。\n最新のLLMも社内の固有ルールは知らないため、当然「RAG (Retrieval-Augmented Generation)」アーキテクチャの採用を決定しました。RAGアーキテクチャを採用する上で、誰もが直面するのが「ベクトルDBをど..."
  },
  {
    "title": "製造・金融・メディア・レジャー ~業界における生成AI活用の最前線~",
    "date": "2025-10-23T02:19:15.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/cutting-edge-applications-of-generative-ai-in-manufacturing-finance-media-leisure-industries/",
    "content": "<h2>生成AIの向かう先</h2> \n<p>2025年10月時点での生成AI活用はまず生産性の向上、つまり人間が行う業務の代わりをさらに効率化していくことに主眼が置かれています。しかしながら生成AIの価値はそれだけにとどまらず、今後は人間の置き換え以上のビジネス効果をもたらすことが期待されます。一般業務の改善の次に来るのは特定の業務や業界に特化したソリューションであると言われています。実際Gartner*は、2027年までに生成AI モデルの半数以上がドメイン固有(特定の産業または業務機能に特化)となると予測しています。これは2024年時点でのドメイン固有の割合1%と比べると飛躍的な伸び率と言えるでしょう。</p> \n<p>参考：<br> “2027年までに企業が利用する生成AI モデルの半数以上がドメイン固有(特定の産業または業務機能に特化)となり、 2024年の1％から大幅に増加する”<br> *Gartner, Generative AI Models, Worldwide, 2023-2029, Q2’25<br> <span id=\"more-167506\"></span></p> \n<h2>それぞれの業界課題と生成AIを使った解決例</h2> \n<p>それでは業界に特化した課題とどのように生成AIがそれらを解決できるのか、いくつかのユースケースを使って解説しましょう。</p> \n<h3>「金融業界向けAIソリューション」</h3> \n<p>金融業界では新たなビジネスモデルを模索する一方、厳格なコンプライアンス対応、レギュレーションの遵守が求められています。例えばコールセンターでの音声データのチェックは、経験のある専門家が音声を聞いてチェックしているケースが多くあります。もちろんすべての音声記録をチェックできればよいのですが現実的には困難でしょう。また大量の作業を行えば、チェックの品質の低下も懸念されます。このような作業に生成AIを活用することで、膨大な音声記録を一定の品質でチェックすることが可能になります。クレジットカードのレギュレーションチェックもとても手間がかかる一方、属人化している業務です。大手クレジットカード会社ですと年に2回の大きなレギュレーションの変更があり、そのドキュメントのページ数は1000ページになることもあります。また変更の内容によっては複数部署での対応が必要となり、その影響範囲と内容の注意点を説明する資料を作ることも大きな負担となっています。こういった課題を解決するために、生成AIを利用して大量の文書を分析し、変更内容や影響範囲をチャットでわかりやすく教えてくれる仕組みが考えられます。</p> \n<h3>「製造業界向けAIソリューション」</h3> \n<p>製造業では生産の自動化が進む一方、人材不足、技術継承が大きな課題となっています。例えば設備管理においては、人がそれぞれ設備を目視でチェック、紙の報告書に記載してあとからパソコンに入力するといったことが行われているケースはまだまだ多いでしょう。加えて何らかの異常を検知した際に正しい判断を、短い時間で行うことは経験者が持つ暗黙知のなせる技とも言えます。こういった属人化を解消するために、例えばアナログメータをAIカメラが読み取り定期的に記録、異常があれば通知する仕組みが考えられます。<br> また過去の記録から最適な対応策をAIがアドバイスする仕組み、手袋をしていてパソコン入力ができない作業者を補助する音声によるデータの記録、マニュアルの必要な部分を読み出して解説する機能などで、生産性の飛躍的な向上を目指します。</p> \n<h3>「エンターテイメント、レジャー業界向けAIソリューション」</h3> \n<p>エンターテイメント、レジャー業界で新たな収益の柱をもたらすことが期待されるのはパーソナライゼーションです。エンターテイメントの世界ではSNSを通じた顧客接点の拡大が重要になってきています。デバイスとしては多くの場合にスマートフォンになるわけですが、通常は横型で作成されている映像コンテンツを縦型にに編集するのは、実は容易ではありません。単純に映像を中央で切り取るとストーリー上重要な部分をカットしてしまうこともあり得るからです。このような作業はとても手間がかかりかつセンスが求められます。AIによるプロフェッショナルなテクニックを用いた編集で短時間に大量のコンテンツ変換ができれば、SNSへの情報発信もタイムリーにできるようになります。レジャー・トラベル業界でもパーソナライゼーションの導入が加速しています。多種多様なサービスを提供するトラベル体験のパーソナライゼーションは、それぞれのサービスごとのAIエージェントとスーパーバイサーエージェントが情報をやり取りすることで実現できます。</p> \n<h2>業界固有の知見を持つパートナーの価値</h2> \n<p>上記のような業界固有のソリューションの開発には、AI技術や実装方法の知識や経験だけではなく、それぞれの業界に高い知見をもつパートナーの存在が欠かせません。AWSには各業界に精通した様々なパートナーが多数存在し、専門知識とソリューションの活用、セキュリティとコンプライアンス、コスト最適化やイノベーションの加速をAWSと一緒にご支援させていただいています。 AWS パートナーは業界の規制や組織構造、プロセスを熟知しており、AI の活用の仕方やビジネス効果を出すためのプロセス等の適切なアドバイスをすることが可能です。実際に上述した業界特有の課題に対して様々な AWS パートナーが AI ソリューションを開発しています。「 AI の導入を考えているけどどこから手を付けてよいかわからない」、「ビジネスとして効果が出せるのか悩んでいる」、「AI 技術の進歩が早く、最適な AI 技術の選択に不安を感じている」といったような課題をお持ちの方にはぜひとも以下に紹介するイベントにご参加いただきたいと思います。</p> \n<h3>AWS Industry GenAI Innovation Dayイベント概要</h3> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Screenshot-2025-10-22-at-13.09.48.png\"><img loading=\"lazy\" class=\"alignnone size-medium wp-image-167625\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Screenshot-2025-10-22-at-13.09.48-300x100.png\" alt=\"\" width=\"300\" height=\"100\"></a></p> \n<p>生成AI（Generative AI）の実用フェーズが加速する中、先進企業はすでに具体的な成果を生み出しています。製造現場のスマート化、金融サービスの革新、レジャーやエンターテインメントの進化など、各業界で実践的なソリューションが次々と実現されています。</p> \n<p>本イベントでは、業界をリードするAWS認定パートナーが、製造、金融など分野における活用事例と導入のポイントをご紹介します。</p> \n<p>各パートナーによる最新ソリューションのプレゼンテーションに加え、特別企画として、AWSガイド付きのブースツアーを予定しております。少人数グループで効率的にすべてのソリューションをご体験いただけます。各ブースでは実機デモを交えながら、貴社特有の課題に対する解決策を専門家と直接ご相談いただける機会がございます。</p> \n<p>また、ブース訪問された方には、AWSオリジナルグッズをご用意しております。<br> ビジネス革新に向けた確かな一歩を踏み出すための、実践的な機会です。<br> 皆様のご参加を心よりお待ちしております。</p> \n<p>※より充実したディスカッションの場とするため、定員を120名とさせていただいております。<br> 定員に達し次第、申し込みを締め切らせていただきます。</p> \n<p><strong>日時：2025 年 11 月 4 日（火）14:00–17:30（13:30 受付開始）</strong><br> <strong>場所：AWS 目黒オフィス 目黒セントラルスクエア 21 階（東京都品川区上大崎 3-1-1）</strong><br> <strong>主催：アマゾン ウェブ サービス ジャパン合同会社</strong><br> <strong>参加費：無料（要事前申込）</strong><br> <strong>参加申込：<a href=\"https://aws-experience.com/apj/smb/event/cc59a7f8-de60-4021-a050-3c62439f4737\">こちらのお申込みフォーム</a>からお申込みください。</strong></p> \n<hr> \n<h3>展示テーマ</h3> \n<p>「金融業界向けAIソリューション」<br> 金融業界では新たなビジネスモデルを模索する一方、厳格なコンプライアンス対応、レギュレーションの遵守が求められています。本イベントではコールセンター等の音声データ分析による金融規制対応の自動化、決済カードレギュレーションチェックプロセス業務効率化、脱属人化を実現するAIソリューションを紹介します。</p> \n<p>「製造業界向けAIソリューション」<br> 製造業では生産の自動化が進む一方、人材不足、技術継承が大きな課題となっています。より少ない人数で質の高い設備管理が行えるような、AIカメラソリューション、設備管理の自動化、作業実績の自動記録からマニュアルの音声での呼び出しまで、製造・プラントの現場で役に立つソリューションをご紹介します。</p> \n<p>「エンターテイメント、レジャー業界向けAIソリューション」<br> エンターテイメント、レジャー業界で新たな収益の柱としてより適切なパーソナライゼーションが期待されています。顧客接点の可能性を広げるSNS向け動画自動編集、個人に最適化された旅行体験を提供する最新のAIサービスをご紹介します。</p> \n<hr> \n<h3>来場者特典</h3> \n<p>事前お申込みのうえ当日ブースツアーで５箇所以上にご参加いただきましたお客様へ<strong>先着 100 名限定</strong>で、イベント特製の持ち運び可能コンパクトPCスタンドをプレゼントいたします！</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/image-20-3.png\"><img loading=\"lazy\" class=\"alignnone size-medium wp-image-167623\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/image-20-3-300x128.png\" alt=\"\" width=\"300\" height=\"128\"></a></p> \n<p>※ 画像はイメージです。実物と異なる場合がございます。<br> 当日はソリューションプロバイダー各社の展示ブースで製品デモをご覧いただけるほか、各社と個別にご相談できる機会も提供いたします。</p> \n<p><a href=\"https://aws-experience.com/apj/smb/event/cc59a7f8-de60-4021-a050-3c62439f4737\">こちらのお申込みフォーム</a>からお申込みください。<br> 皆様のご参加を楽しみにお待ちしております！</p>"
  },
  {
    "title": "[Next.js] URL末尾に .md つけたらMarkdownをそのまま返す！",
    "date": "2025-10-23T01:32:11.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/chot/articles/nextjs-md-suffix",
    "content": "Next.jsのドキュメントやQiitaなどでは、URLの末尾に .md を付けるとページ内容を生のMarkdownで取得できます。AIエージェントにコンテキストを渡したり、別クライアントから取り込んだりするのに便利なパターンです。\nこの記事では Rewrites + Route Handlers（App Router） で、/post/hello はHTML、/post/hello.md は text/markdown を返す“二刀流配信”を実装します。\n\n 前提\n\nNext.js 16.0.0 (App Router)\nReact 19.2.0\nMarkdownでコンテンツを管理して..."
  },
  {
    "title": "『MCPたくさん入れたいけどコンテキストが...』を解決した話",
    "date": "2025-10-23T01:21:57.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/bm_sms/articles/modular_mcp_context_optimize",
    "content": "\n はじめに\nMCP (Model Context Protocol) が Anthropic から公開されてもうすぐ1年[1]になりますね。\n各社ベンダーや個人が便利な MCP を公開しできることが増えていく一方で、MCP をたくさん登録しておくことによるコンテキストの肥大化問題にも焦点が当たるようになってきました。\n単一の MCP サーバーから複数のツールが登録され、それぞれのツールに対する description・スキーマ情報がすべてシステムプロンプトとして読まれるため、たまに使う MCP も雑に追加していくとコンテキストを圧迫してしまうよね、というものです。\n下記の記事で詳しく説..."
  },
  {
    "title": "複数の Docker Compose 環境を同時に立ち上げる",
    "date": "2025-10-23T00:32:10.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/socialdog/articles/multiple-docker-compose-up",
    "content": "\n はじめに\nDocker Compose を利用して開発環境を構築するプロジェクトは多いと思います。\nClaude Code をはじめとするコーディングエージェントの普及により、git-worktree を使って複数の作業ブランチを並行して開発することが増えてきました。Docker Compose で構築する開発環境は、ワークツリーが違えどほとんどの場合同じような構成になるため、ワークツリーごとに環境を立ち上げようとすると、コンテナ名やポートの衝突といった問題が発生します。\nSocialDog では、git-worktree を使った開発においても、これらの問題が生じないよう手順をドキ..."
  },
  {
    "title": "vercel/next.js – v16.0.1-canary.0",
    "date": "2025-10-22T23:46:21.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.1-canary.0",
    "content": "### Misc Changes\n\n- docs: create-next-app react-compiler and new prompts: #85213\n- docs: cache components - introduction: #85196\n- docs: use cache feedback: #85169\n- docs: stabilize apis in docs: #85219\n- docs: revalidateTag immediate expiration in Route Handlers: #85223\n- Docs/use cache feedback 2: #85222\n- docs: added `use cache: remote` docs: #85145\n- docs: proxy runtime defaults to nodejs: #85204\n- chore: cache components feedback: #85241\n\n### Credits \n\nHuge thanks to @icyJoseph, @wyattjoh, and @devjiwonchoi for helping!\n"
  },
  {
    "title": "増えすぎた GitHub Actions を「3 層アーキテクチャ」で整理した話",
    "date": "2025-10-22T12:34:00.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/simpleform_blog/articles/99cea8c1af0657",
    "content": "\n はじめに\nGitHub Actions (GHA)、便利ですよね。\n便利なんですが、じゃんじゃん作るとワークフローが増えてエラいことになりませんか？私はなりました。\n\n環境ごとに似たようなワークフローが乱立し、保守が大変\n変更を加える際、複数のファイルを修正する必要がある\nワークフローの構造がアプリケーションごとに異なり、認知負荷が高い\nそもそも数が多すぎて何が何やら...\n\nGHA は特にこう構成すれば良い、みたいなプラクティスやフレームワークが無いので、リポジトリの規模が大きく複雑いなってくるにしたがい、GHA も複雑になってしまいがちだと思います。\n本記事では、そのような状況か..."
  },
  {
    "title": "Amazon Redshift DC2 から RA3 および Amazon Redshift Serverless へのアップグレードのベストプラクティス",
    "date": "2025-10-22T12:32:44.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/best-practices-for-upgrading-from-amazon-redshift-dc2-to-ra3-and-amazon-redshift-serverless/",
    "content": "<p><a href=\"https://aws.amazon.com/redshift/\">Amazon Redshift</a> は、標準 SQL と既存のビジネスインテリジェンス（BI）ツールを使用してデータを簡単かつ費用対効果高く分析できる、高速でペタバイト規模のクラウドデータウェアハウスです。何万もの顧客が Amazon Redshift を利用してエクサバイト規模のデータを分析し、複雑な分析クエリを実行して、最高のコストパフォーマンスを実現しています。</p> \n<p>完全マネージド型の AI 駆動による Massively Parallel Processing（MPP）アーキテクチャを備えた Amazon Redshift は、迅速かつコスト効率的にビジネス意思決定を推進します。以前、Amazon Redshift はコンピュート集約型ワークロードに最適化された DC2（Dense Compute）ノードタイプを提供していました。しかし、これらはコンピュートとストレージを独立してスケーリングする柔軟性に欠け、現在利用可能な多くの最新機能をサポートしていませんでした。分析需要の増大に伴い、多くのお客様が DC2 から RA3 または <a href=\"https://aws.amazon.com/jp/redshift/redshift-serverless/\">Amazon Redshift Serverless</a> へアップグレードしています。これらは独立したコンピュートとストレージのスケーリングを提供し、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/datashare-overview.html\">データ共有</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/zero-etl-using.html\">ゼロ ETL 統合</a>、<a href=\"https://aws.amazon.com/jp/redshift/features/redshift-ml/\">Amazon Redshift ML</a> による組み込みの人工知能および機械学習（AI/ML）サポートなどの高度な機能を備えています。</p> \n<p>この記事では、ターゲットアーキテクチャと移行戦略を計画するための実践的なガイドを提供し、アップグレードオプション、主要な考慮事項、および成功したシームレスな移行を促進するためのベストプラクティスをカバーしています。</p> \n<h2>DC2 ノードから RA3 および Redshift Serverless へのアップグレードプロセス</h2> \n<p>アップグレードへの第一歩は、新しいアーキテクチャをどのようにサイジングすべきかを理解することです。このために、AWS はプロビジョニングされたクラスター用の<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/managing-cluster-considerations.html#rs-upgrading-to-ra3\">推奨表</a>を提供しています。Redshift Serverless エンドポイントの構成を決定する際は、RPU とメモリの関係を調べることで、コンピューティング容量の詳細を評価できます。各 RPU は 16 GiB の RAM を割り当てます。ベース RPU 要件を見積もるには、DC2 ノードクラスターの合計 RAM を 16 で割ります。これらの推奨事項は、初期ターゲットアーキテクチャのサイジングに関するガイダンスを提供しますが、ワークロードのコンピューティング要件に依存します。要件をより適切に見積もるには、<a href=\"https://github.com/aws/redshift-test-drive\">Redshift Test Drive</a> を使用して潜在的な構成を実行する概念実証の実施を検討してください。詳細については、「<a href=\"https://aws.amazon.com/jp/blogs/big-data/find-the-best-amazon-redshift-configuration-for-your-workload-using-redshift-test-drive/\">Redshift Test Drive を使用してワークロードに最適な Amazon Redshift 構成を見つける</a>」および「<a href=\"https://aws.amazon.com/jp/blogs/big-data/successfully-conduct-a-proof-of-concept-in-amazon-redshift/\">Amazon Redshift で概念実証を実施する</a>」を参照してください。ターゲット構成とアーキテクチャを決定した後、アップグレード戦略を構築できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture1.jpg\"><img loading=\"lazy\" class=\"wp-image-167682 size-large aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture1-1024x114.jpg\" alt=\"\" width=\"1024\" height=\"114\"></a></p> \n<h2>アーキテクチャパターン</h2> \n<p>最初のステップは、ソリューションのターゲットアーキテクチャを定義することです。「<a href=\"http://aws.amazon.com/jp/blogs/big-data/architecture-patterns-to-optimize-amazon-redshift-performance-at-scale/\">Amazon Redshift のパフォーマンスを大規模に最適化するためのアーキテクチャパターン</a>」で提示されているオプションから、ユースケースに最も適合するメインのアーキテクチャパターンを選択できます。次の図に示すように、主に2つのシナリオがあります。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture2.jpg\"><img loading=\"lazy\" class=\"size-large wp-image-167683 aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture2-1024x396.jpg\" alt=\"\" width=\"1024\" height=\"396\"></a></p> \n<p>執筆時点では、Redshift Serverless には手動のワークロード管理機能がなく、すべてが自動ワークロード管理で実行されます。独立したスケーリングとより良いパフォーマンスを実現するために、ユースケースに基づいてワークロードを複数のエンドポイントへ分離することを検討してください。詳細については、「Amazon Redshiftのパフォーマンスを大規模に最適化するためのアーキテクチャパターン」を参照してください。</p> \n<h2>アップグレード戦略</h2> \n<p>DC2 ノードから RA3 ノードまたは Redshift Serverless へのアップグレード時には、2つのアップグレードオプションから選択できます：</p> \n<ul> \n <li>リアーキテクチャ ： 最初のステップでは、ワークロードを評価してモダンなデータアーキテクチャの導入効果があるかを判断します。次に、DC2 ノードからのアップグレードと同時に、既存プラットフォームのリアーキテクチャを実施します。</li> \n <li>段階的アプローチ ： これは2段階の戦略です。第1段階では、ターゲットの RA3 または Serverless 構成への単純な移行を行います。第2段階では、最先端の Redshift 機能を活用してターゲットアーキテクチャをモダナイズできます。</li> \n</ul> \n<p>通常、段階的なアプローチを推奨しています。これにより、将来の最適化を可能にしながら、よりスムーズな移行が実現できます。段階的アプローチの第1段階は、以下のステップで構成されています：</p> \n<ul> \n <li>既存の DC2 クラスターに相当する RA3 ノードまたは Redshift Serverless の構成を評価します。プロビジョニングされたクラスターの<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/managing-cluster-considerations.html#rs-upgrading-to-ra3\">サイジングガイドライン</a>またはサーバーレスエンドポイントの<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/serverless-capacity.html\">コンピューティング容量オプション</a>を使用します。</li> \n <li>Redshift Test Drive を使用して、非本番環境で選択したターゲット構成を検証します。この自動化ツールにより、本番ワークロードのシミュレーションプロセスが簡素化されます。さまざまな潜在的なターゲット構成で包括的な what-if 分析を実行できます。</li> \n <li>特定のターゲット構成の価格対性能比に満足できたら、次のセクションで詳述する方法のいずれかを使用してアップグレードプロセスに進みます。</li> \n</ul> \n<p>Redshift RA3 インスタンスと Redshift Serverless は、ゼロ ETL、<a href=\"https://aws.amazon.com/jp/redshift/redshift-streaming-ingestion/\">Amazon Redshift Streaming Ingestion</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/getting-started-datashare-writes.html\">データ共有を使用したマルチウェアハウス書き込み</a>、独立したコンピュートとストレージのスケーリングなど、強力な新機能へのアクセスを提供します。これらのメリットを最大限に活用するために、現在のアーキテクチャの包括的なレビュー（段階的アプローチの第2段階）を実施し、Amazon Redshiftの最新機能を使用したモダナイゼーションの機会を特定することをお勧めします。例えば：</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/jp/blogs/big-data/sharing-amazon-redshift-data-securely-across-amazon-redshift-clusters-for-workload-isolation/\">データ共有を使用したマルチウェアハウスアーキテクチャ</a>を実装し、ワークロードを分離してパフォーマンスを向上させる</li> \n <li>現在、トランザクショナルソースから Amazon Redshift へのデータ転送に <a href=\"https://aws.amazon.com/jp/dms/\">AWS Database Migration Service</a>（AWS DMS）を使用している場合は、ゼロ ETLを実装して運用を効率化し、メンテナンスのオーバーヘッドを削減する</li> \n</ul> \n<h2>アップグレードオプション</h2> \n<p>DC2 から RA3 または Redshift Serverless へのクラスターのリサイズまたはアップグレードには、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/working-with-snapshots.html\">スナップショットの復元</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/resizing-cluster.html#classic-resize-faster\">Classic resize</a>、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/resizing-cluster.html#elastic-resize\">Elastic resize</a> の3つの方法から選択できます。</p> \n<h3>スナップショットの復元</h3> \n<p>スナップショット復元方式は、既存の（ソース）クラスターのスナップショットを取得することから始まる順次的なプロセスに従います。このスナップショットは、希望する性能で新しいターゲットクラスターを作成するために使用されます。作成後、データがターゲットクラスターに正しく転送されたことを確認して、データの整合性を検証することが不可欠です。重要な考慮事項として、最初のスナップショット後にソースクラスターに書き込まれたデータは、同期を維持するために手動で転送する必要があります。</p> \n<p>この方式には以下の利点があります：</p> \n<ul> \n <li>既存の DC2 クラスターに影響を与えることなく、新しい RA3 または Serverless セットアップの検証が可能</li> \n <li>異なる AWS リージョンまたはアベイラビリティーゾーンへの復元の柔軟性を提供</li> \n <li>移行中の書き込み操作に対するクラスターのダウンタイムを最小限に抑える</li> \n</ul> \n<p>ただし、以下の考慮事項に留意してください：</p> \n<ul> \n <li>セットアップとデータの復元は、Elastic resize よりも時間がかかる場合があります。</li> \n <li>スナップショット作成後にソースクラスターに書き込まれた新しいデータは、ターゲットへの手動コピーが必要になるため、データ同期の課題に直面する可能性があります。このプロセスは完全な同期を達成するために複数回の反復が必要になる場合があり、カットオフ前にダウンタイムが必要になることがあります。</li> \n <li>新しい Redshift エンドポイントが生成されるため、接続の更新が必要になります。元のエンドポイントを維持するため、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/rs-mgmt-rename-cluster.html\">両方のクラスターの名前変更</a>を検討してください（新しいターゲットクラスターが元のソースクラスターの名前を採用するようにしてください）。</li> \n</ul> \n<h3>Classic resize</h3> \n<p>Amazon Redshift はターゲットクラスターを作成し、バックアップおよび復元を使用してソースクラスターからデータとメタデータを移行します。データベーススキーマやユーザー設定を含むすべてのデータは、新しいクラスターに正確に転送されます。ソースクラスターは最初に再起動し、数分間使用できなくなるため、ダウンタイムは最小限に抑えることができます。すぐに再開され、バックグラウンドでリサイズが継続される間、読み取りと書き込みの両方の操作が可能になります。<br> Classic resize は2段階のプロセスです：</p> \n<ul> \n <li>ステージ1（クリティカルパス）： このステージでは、ソースとターゲットの構成間でメタデータの移行が行われ、ソースクラスターが一時的に読み取り専用モードになります。この初期フェーズは通常、短時間で完了します。このフェーズが完了すると、クラスターは読み取りおよび書き込みクエリで使用可能になります。KEY 分散スタイルで最初に構成されたテーブルは一時的に EVEN 分散を使用して保存されますが、プロセスのステージ2でオリジナルの KEY 分散に再分散されます。</li> \n <li>ステージ2（バックグラウンド操作）：このステージは、データを元の分散パターンに復元することに焦点を当てています。この操作は、主要な移行プロセスに影響を与えることなく、低優先度でバックグラウンドで実行されます。このステージの期間は、再分散されるデータ量、進行中のクラスターワークロード、使用されているターゲット構成など、複数の要因によって異なります。</li> \n</ul> \n<p>全体的なリサイズ期間は、主に処理されるデータ量によって決まります。Amazon Redshift コンソールで進行状況を監視するか、変換中のテーブルの完了率を表示する <a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/SYS_RESTORE_STATE.html\">SYS_RESTORE_STATE</a> システムビューを使用して監視できます（このビューへのアクセスにはスーパーユーザー権限が必要です）。<br> Classic resize アプローチには、以下の利点があります：</p> \n<ul> \n <li>すべての可能なターゲットノード構成がサポートされています</li> \n <li>ソースクラスターの包括的な再構成により、データスライスがノードごとのデフォルトに再バランスされ、ノード間でデータが均等に分散されます</li> \n</ul> \n<p>ただし、以下の点に留意してください：</p> \n<ul> \n <li>ステージ2 では、最適なパフォーマンスのためにデータを再分散します。しかし、ステージ2 は低い優先度で実行され、ビジーなクラスターでは完了までに長時間かかることがあります。プロセスを高速化するには、KEY DISTSTYLE を持つテーブルに対して ALTER TABLE DISTSTYLE コマンドを手動で実行できます。このコマンドを実行することで、データの再配布を優先的に実行でき、進行中のステージ2 プロセスによる潜在的なパフォーマンス低下を軽減できます。</li> \n <li>ステージ2 のバックグラウンド再分散プロセスのため、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/resizing-cluster.html#classic-resize-faster\">リサイズ操作</a>中はクエリの完了に時間がかかることがあります。軽減策として同時実行スケーリングの有効化を検討してください。</li> \n <li>データ分散を高速化するため、リサイズを開始する前に不要で使用されていないテーブルを削除してください。</li> \n <li>リサイズ操作に使用されるスナップショットは、この操作専用になります。そのため、テーブルの復元やその他の目的には使用できません。</li> \n <li>クラスターは仮想プライベートクラウド（VPC）内で動作する必要があります。</li> \n <li>このアプローチでは、Classic resize を開始する前に取得した新しいまたは最近の手動スナップショットが必要です。</li> \n <li>ビジネスへの影響を最小限に抑えるため、オフピーク時間またはメンテナンスウィンドウ中に操作をスケジュールすることをお勧めします。</li> \n</ul> \n<h3>Elastic resize</h3> \n<p>Elastic resize を使用してノードタイプを変更する場合、Amazon Redshift は順次プロセスに従います。まず既存のクラスターのスナップショットを作成し、そのスナップショットの最新データを使用して新しいターゲットクラスターをプロビジョニングします。バックグラウンドでデータが新しいクラスターに転送される間、システムは読み取り専用モードのままです。リサイズ操作が完了に近づくと、Amazon Redshift は自動的にエンドポイントを新しいクラスターにリダイレクトし、元のクラスターへのすべての接続を停止します。このプロセス中に問題が発生した場合、システムは通常、手動介入を必要とせずに自動ロールバックを実行しますが、そのような障害は稀です。<br> Elastic resize にはいくつかの利点があります：</p> \n<ul> \n <li>平均 10 ～ 15 分で完了する迅速なプロセスです</li> \n <li>ユーザーはプロセス中もデータへの読み取りアクセスを維持でき、中断は最小限に抑えられます</li> \n <li>クラスターエンドポイントは操作中および操作後も変更されません</li> \n</ul> \n<p>このアプローチを検討する際は、以下の点に留意してください：</p> \n<ul> \n <li>Elastic resize 操作は、<a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms\">EC2-VPC プラットフォーム</a>を使用するクラスターでのみ実行できます。そのため、Redshift Serverless では利用できません。</li> \n <li>ターゲットノード構成は、既存のデータに対して十分なストレージ容量を提供する必要があります。</li> \n <li>すべてのターゲットクラスター構成が Elastic resize をサポートしているわけではありません。そのような場合は、Classic resize またはスナップショット復元を検討してください。</li> \n <li>プロセスが開始された後、Elastic resize を停止することはできません。</li> \n <li>データスライスは変更されません。これにより、データまたは CPU の偏りが発生する可能性があります。</li> \n</ul> \n<h2>アップグレード推奨事項</h2> \n<p>次のフローチャートは、適切な Amazon Redshift アップグレード方法を選択するための意思決定プロセスを視覚的にガイドします。</p> \n<p style=\"text-align: center\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture3.jpeg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167684\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Capture3.jpeg\" alt=\"\" width=\"314\" height=\"462\"></a></p> \n<p>Amazon Redshift をアップグレードする際、その方法はターゲット構成と運用上の制約によって異なります。Redshift Serverless の場合は、常にスナップショット復元方式を使用します。RA3 プロビジョニングクラスターにアップグレードする場合は、2つのオプションから選択できます。ダウンタイムを伴う完全なメンテナンスウィンドウが許容できる場合はスナップショット復元を使用し、ダウンタイムを最小限に抑えたい場合は Classic resize を選択します。Classic resize は、データスライスをノードごとのデフォルトにリバランスし、ノード間でデータを均等に分散させるためです。特定の範囲内での特定のノードタイプの変更（例：DC2 から RA3）には Elastic resize を使用できますが、Elastic resize はスライス数を変更しないため、データや CPU の偏りが生じる可能性があり、後で Redshift クラスターのパフォーマンスに影響を与える可能性があるため、推奨されません。ただし、既存のクラスターでノードを追加または削減する必要がある場合は、Elastic resize が引き続き主要な推奨事項となります。</p> \n<h2>移行のベストプラクティス</h2> \n<p>移行を計画する際は、以下のベストプラクティスを検討してください：</p> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/advisor-recommendations.html\">Amazon Redshift Advisor</a> または <a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch</a> を使用して、移行前の評価を実施する。</li> \n <li>ユースケースとワークロードに基づいて、適切なターゲットアーキテクチャを選択する。Redshift Test Drive を使用して、適切なターゲットアーキテクチャを決定する。</li> \n <li>手動スナップショットを使用してバックアップを作成し、自動ロールバックを有効にする。</li> \n <li>ステークホルダーにタイムライン、ダウンタイム、変更内容を伝える。</li> \n <li>新しいアーキテクチャの詳細とエンドポイントでランブックを更新する。</li> \n <li>ベンチマークとデータチェックサムを使用してワークロードを検証する。</li> \n <li>最終同期と切り替えにはメンテナンスウィンドウを使用する。</li> \n</ul> \n<p>これらのプラクティスに従うことで、パフォーマンス、コスト、運用の継続性のバランスを取りながら、低リスクな移行を実現できます。</p> \n<h2>結論</h2> \n<p>Redshift DC2 ノードから RA3 ノードまたは Redshift Serverless への移行には、パフォーマンス、コスト効率、および最小限の中断をサポートするための構造化されたアプローチが必要です。ワークロードに適したアーキテクチャを選択し、移行後のデータとワークロードを検証することで、組織はデータプラットフォームをシームレスに最新化できます。このアップグレードにより長期的な成功が促進され、チームは RA3 のスケーラブルストレージまたは Redshift Serverless の自動スケーリング機能を最大限に活用しながら、コストとパフォーマンスを最適化できるようになります。</p> \n<hr> \n<h3>著者について</h3> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Ziad-1.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167702 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Ziad-1.jpg\" alt=\"\" width=\"120\" height=\"180\"></a><strong>Ziad Wali</strong> は、AWS のアナリティクススペシャリストソリューションアーキテクトです。データベースとデータウェアハウジングにおいて10年以上の経験を持ち、信頼性が高く、スケーラブルで効率的なソリューションの構築を得意としています。仕事以外では、スポーツや自然の中で過ごすことを楽しんでいます。</p> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/omamapic-1.jpeg\"><img loading=\"lazy\" class=\"size-full wp-image-167700 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/omamapic-1.jpeg\" alt=\"\" width=\"120\" height=\"160\"></a><strong>Omama Khurshid</strong> は、Amazon Web Services のアナリティクスソリューションアーキテクトです。彼女は、さまざまな業界のお客様が信頼性、拡張性、効率性に優れたソリューションを構築できるよう支援することに注力しています。仕事以外では、家族との時間を過ごしたり、映画鑑賞、音楽鑑賞、新しい技術の学習を楽しんでいます。</p> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Srikant-1.png\"><img loading=\"lazy\" class=\"size-full wp-image-167701 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/Srikant-1.png\" alt=\"\" width=\"120\" height=\"128\"></a><strong>Srikant Das</strong> は、Amazon Web Services のアナリティクス スペシャリスト ソリューションアーキテクトとして、アナリティクスと AI においてスケーラブルで堅牢なクラウドソリューションを設計しています。技術的な専門知識に加えて、魅力的なブログを通じて旅行の冒険やデータインサイトを共有し、ソーシャルメディア上で分析的な厳密さとストーリーテリングを融合させています。</p> \n<p>翻訳は、ソリューションアーキテクトの駒野が担当しました。原文は<a href=\"https://aws.amazon.com/jp/blogs/big-data/best-practices-for-upgrading-from-amazon-redshift-dc2-to-ra3-and-amazon-redshift-serverless/\">こちら</a>です。</p>"
  },
  {
    "title": "株式会社クリエイティブ・ウェブ様の AWS 生成 AI 事例「Amazon Bedrock を活用したコールセンターお問い合わせ管理システムの実現」のご紹介",
    "date": "2025-10-22T10:31:29.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-creative-web/",
    "content": "<p><em>本ブログは <a href=\"https://www.creative-web.co.jp/\">株式会社クリエイティブ・ウェブ様</a> と <a href=\"https://aws.amazon.com/jp/\">アマゾン ウェブ サービス ジャパン合同会社</a> が共同で執筆いたしました。</em></p> \n<p>みなさん、こんにちは。AWS ソリューションアーキテクトの齋藤です。<br> 最近、多くのお客様から「コールセンター業務の効率化」や「問い合わせ対応の品質向上」についてのご相談をいただく機会が増えています。特に、生成 AI を活用した業務改善への関心が高まっており、実際の導入事例を求める声を多く耳にします。</p> \n<p>その一方で、「生成 AI をコールセンター業務にどう活用すればいいのかわからない」「過去のナレッジをうまく活用できていない」といった課題をお持ちの方も多いのではないでしょうか？</p> \n<p>今回ご紹介する事例は、株式会社クリエイティブ・ウェブ様が Amazon Bedrock をはじめとしたマネージドサービスを活用して開発された、コールセンターお問い合わせ管理システムです。RAG (Retrieval-Augmented Generation) 技術を用いることで、過去の対応履歴を活用した対応サジェスト機能を実現し、問い合わせ対応の効率化と品質向上を同時に達成された事例となります。</p> \n<h2>お客様の状況と課題</h2> \n<p>株式会社クリエイティブ・ウェブ様は、システム・PC サポート・Web サイト・EC 関連の問い合わせ対応サービスを提供しており、日々多様な問い合わせに対応されています。<br> 従来のコールセンター業務では、以下のような課題を抱えていらっしゃいました：</p> \n<h3>業務効率面での課題</h3> \n<ul> \n <li>手作業による情報管理: 問い合わせ内容や対応方法の記録・管理が属人的で、情報の一元化ができていない</li> \n <li>対応品質のばらつき: 担当者によって対応方法が異なり、サービス品質に差が生じている</li> \n <li>ナレッジ活用の困難: 過去の対応事例が蓄積されているものの、類似ケースを検索・参照するのに時間がかかる</li> \n</ul> \n<h3>業務管理面での課題</h3> \n<ul> \n <li>進捗状況の把握困難: 受電から完了までのステータス管理が不十分で、対応漏れや遅延が発生するリスク</li> \n <li>引き継ぎ作業の非効率: 担当者が変わる際の情報共有に時間がかかる</li> \n <li>対応データの活用不足: 蓄積された対応履歴を分析して改善に活かせていない</li> \n</ul> \n<h2>ソリューション・構成内容</h2> \n<p>これらの課題を解決するため、株式会社クリエイティブ・ウェブ様は AWS の生成 AI サービスを活用して「コールトラック」システムを開発されました。</p> \n<h3>システムアーキテクチャ</h3> \n<p>システムは AWS のマネージドサービスを中心としたサーバーレス構成で設計されています：</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_architecture.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167531\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_architecture.png\" alt=\"\" width=\"5587\" height=\"4694\"></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_summarize_architecture.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-167515 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_summarize_architecture.jpg\" alt=\"\" width=\"2560\" height=\"1306\"></a></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AmazonConnect_integration_architecture.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-167517 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AmazonConnect_integration_architecture.jpg\" alt=\"\" width=\"2560\" height=\"1306\"></a></p> \n<ul> \n <li>Amazon Bedrock: RAG 機能による過去対応履歴の検索</li> \n <li>Amazon OpenSearch Service: 過去の対応履歴データの検索・インデックス化</li> \n <li>AWS Lambda: 各種処理の実行基盤</li> \n <li>Amazon Relational Database Service (Amazon RDS): 問い合わせ情報と対応履歴の管理</li> \n <li>Amazon Simple Storage Service (Amazon S3): 対応関連ドキュメントの保存</li> \n <li>Amazon API Gateway: フロントエンドとバックエンドの連携</li> \n</ul> \n<h3>主要機能</h3> \n<h4>1. 問い合わせ情報管理機能</h4> \n<ul> \n <li>受電、保留、対応中、完了といったステータス管理</li> \n <li>担当者、顧客情報、問い合わせ内容、対応方法の詳細記録</li> \n <li>リアルタイムでの進捗状況可視化</li> \n</ul> \n<h4>2. RAG による過去対応履歴の検索</h4> \n<ul> \n <li>Amazon Bedrock の基盤モデルを活用し、過去の対応事例から最適な対応方法をサジェスト</li> \n <li>Amazon OpenSearch Service による高速な類似事例検索</li> \n <li>文脈を理解した自然な日本語での回答生成</li> \n</ul> \n<h4>3. 自動要約機能</h4> \n<ul> \n <li>問い合わせ内容を箇条書きで入力すると、AI が自動的に要約</li> \n <li>対応記録の標準化と効率化を実現</li> \n</ul> \n<h4>4. ナレッジの自動蓄積・学習機能</h4> \n<ul> \n <li>全ての対応履歴を自動でデータ化</li> \n <li>定期的な RAG への取り込みによる継続的な学習</li> \n <li>蓄積されたナレッジの品質向上</li> \n</ul> \n<h2>実際の画面</h2> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_screen.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167522\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_screen.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>オペレーターが受電・架電時に使用するメイン画面です。対応者の状況 (対応可能・対応中・離席中) が一目でわかり、ワンクリックでステータスを変更できるため、スムーズな電話対応業務をサポートします。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_history.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167521\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_history.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>「言った言わない」の確認や、対応内容の振り返りが簡単に行えます。通話音声の再生に加え、文字起こしデータと AI の要約が確認できます。さらに、電話対応を自動評価するため、教育にも利用可能です。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_evaluation.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167520\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_evaluation.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>質の高い対応履歴は、AI の精度向上に不可欠です。この機能は、履歴の内容を AI が評価し、「より良いナレッジ」となるように文章を自動で校正。手間をかけずにナレッジの品質を維持できます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_title_generation.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167516\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_AI_title_generation.jpg\" alt=\"\" width=\"1494\" height=\"1266\"></a></p> \n<p>対応履歴の作成時間を大幅に短縮します。箇条書きで入力したキーワードやメモを元に、AI が状況説明から対応内容までを瞬時に文章化。対応者は、文章作成の負担から解放されます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_visualization.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167524\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_contact_visualization.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>日々の頑張りが「見える化」され、モチベーションアップに繋がります。受電数や対応件数などの成果がポイントとして貯まり、そのポイントでバーチャルペットを育てて楽しむことができます。</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_visualization.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167525\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_visualization.jpg\" alt=\"\" width=\"1494\" height=\"781\"></a></p> \n<p>全体の業務状況をダッシュボードで可視化します。月・日・時間別の対応件数、カテゴリ別の割合など多角的に分析し、データに基づいた最適な人員配置や育成計画を支援します。</p> \n<h2>導入効果</h2> \n<p>お問い合わせ管理システムの導入により、以下の大きな効果を実現されました：</p> \n<h3>1. 対応効率の大幅向上</h3> \n<ul> \n <li>初回解決率の向上: RAG による過去対応履歴の検索により、一回目の対応で解決するケースが約 30% 増加</li> \n <li>対応時間の短縮: 平均対応時間を従来比で約 40% 削減</li> \n <li>情報検索時間の短縮: 過去事例の検索時間を従来の 5 分から 1 分以下に短縮</li> \n</ul> \n<h3>2. サービス品質の標準化</h3> \n<ul> \n <li>対応品質の均質化: 全担当者が同等レベルの対応サジェストにアクセスできるため、サービス品質が標準化</li> \n <li>新人教育期間の短縮: 蓄積されたナレッジを活用することで、新人でも早期に高品質な対応が可能</li> \n</ul> \n<h3>3. データ活用による継続改善</h3> \n<ul> \n <li>対応パフォーマンスの可視化: 対応件数、時間、解決率などの KPI を自動集計・分析</li> \n <li>改善点の特定: データ分析により、頻出する問い合わせパターンや対応改善点を特定</li> \n <li>ナレッジの品質向上: 継続的な学習により、サジェストの精度が徐々に向上</li> \n</ul> \n<h3>4. コスト削減効果</h3> \n<ul> \n <li>人件費の最適化: 対応効率向上により、同じ人員でより多くの問い合わせに対応可能</li> \n <li>教育コストの削減: 標準化されたナレッジにより、新人教育にかかる時間とコストを削減</li> \n</ul> \n<h2>技術的なポイント</h2> \n<h3>RAG の実装における工夫</h3> \n<p>株式会社クリエイティブ・ウェブ様では、RAG システムの精度向上のために以下の工夫を実装されました：</p> \n<ul> \n <li>多層的な検索戦略: キーワード検索とセマンティック検索を組み合わせた高精度な類似事例抽出</li> \n <li>文脈理解の強化: 問い合わせの背景情報も含めて分析し、より適切なサジェストを生成</li> \n <li>フィードバックループ: 実際の対応結果をフィードバックとして活用し、継続的にモデルの精度を向上</li> \n</ul> \n<h3>コスト最適化の取り組み</h3> \n<ul> \n <li>適切なモデル選択: 問い合わせの複雑さに応じて、Amazon Nova、Claude 3 Sonnet と Haiku などを使い分け</li> \n <li>サーバーレス構成: 必要な時だけリソースを使用するため、運用コストを最小化</li> \n <li>段階的なスケーリング: 問い合わせ量に応じた自動スケーリングにより、効率的なリソース利用を実現</li> \n</ul> \n<h2>今後の展望</h2> \n<p>株式会社クリエイティブ・ウェブ様では、お問い合わせ管理システムのさらなる発展を計画されています:</p> \n<h3>短期的な改善計画</h3> \n<ul> \n <li>音声認識機能の追加: 電話内容の自動文字起こしによる記録作業の完全自動化</li> \n <li>多言語対応: グローバル展開を見据えた多言語サポート機能</li> \n <li>リアルタイム分析: 対応中のリアルタイムサジェストとエスカレーション判定</li> \n</ul> \n<h3>長期的なビジョン</h3> \n<ul> \n <li>予測分析機能: 問い合わせ内容から将来のトラブルを予測し、事前対応を可能にする機能</li> \n <li>顧客感情分析: 音声や文章から顧客の感情を分析し、適切な対応トーンを提案</li> \n <li>業界特化型展開: 特定業界のナレッジベースを構築し、より専門的な対応を支援</li> \n</ul> \n<h2>お客様の声（株式会社クリエイティブ・ウェブ様）</h2> \n<p>Amazon Bedrock を活用した RAG システムの導入により、これまで活用しきれていなかった過去の対応履歴が貴重な資産として生まれ変わりました。新人スタッフでもベテランと同等の対応品質を提供できるようになり、お客様満足度の向上と業務効率化を同時に実現できています。</p> \n<p>AWS のマネージドサービスを活用することで、インフラ運用の負担を最小限に抑えながら、高度な AI 機能を短期間で実装することができました。特に Amazon Bedrock の多様なモデル選択肢により、コストと性能のバランスを最適化できた点が大きなメリットでした。</p> \n<p>今後は、このシステムをベースにさらなる機能拡張を計画しており、コールセンター業務の完全自動化に向けて取り組んでいきます。</p> \n<h2>まとめ</h2> \n<p>今回は、Amazon Bedrock を活用した RAG システムにより、コールセンター業務の効率化と品質向上を同時に実現された株式会社クリエイティブ・ウェブ様の事例をご紹介しました。</p> \n<p>特に注目すべきは、単なる AI ツールの導入ではなく、業務プロセス全体を見直し、データ駆動型の改善サイクルを構築された点です。これにより、継続的にサービス品質が向上する仕組みを実現されています。</p> \n<p>同様の課題をお持ちのお客様、特に「コールセンター業務の効率化を図りたい」「過去のナレッジを有効活用したい」「問い合わせ対応の品質を標準化したい」といったニーズをお持ちの方には、非常に参考になる事例だと思います。</p> \n<p>また、AWS では、生成 AI を活用したソリューション開発を支援するさまざまなイベントやプログラムを定期的に開催しております。技術セッションやハンズオンを通じて実際に技術に触れることができますので、ぜひご参加ください。<br> <a href=\"https://aws.amazon.com/jp/events/\">https://aws.amazon.com/jp/events/</a></p> \n<p>ご関心のあるお客様は、ぜひ AWS までお問い合わせください。</p> \n<p>\n <!-- 写真と説明 --></p> \n<div style=\"align-items: center;margin-bottom: 30px\"> \n <div style=\"flex: 0 0 60%;max-width: 600px;margin-right: 20px\">\n  <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_picture.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-167529\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/creative_web_picture.png\" alt=\"\" width=\"847\" height=\"529\"></a>\n  <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/01/creative-web-team.jpg\"><br> </a>\n </div> \n <div style=\"flex: 1\"> \n  <p><strong>株式会社クリエイティブ・ウェブ</strong>: 片桐 翼様 (左)、大皿 綾馬様 (中央)、藤井 龍生様 (右)</p> \n </div> \n</div> \n<h2>著者について</h2> \n<div class=\"blog-author-box\"> \n <div class=\"blog-author-image\">\n  <img loading=\"lazy\" class=\"aligncenter size-full wp-image-4921\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/takuaizu_raw.jpeg\" alt=\"\" width=\"10%\" height=\"auto\">\n </div> \n <h3 class=\"lb-h4\">齋藤 拓巳</h3> \n <p>ソリューションアーキテクトとして幅広いお客様の AWS 導入支援を担当しています。AWS Lambda や Amazon API Gateway などのサーバレスのサービスが好きです。</p> \n</div>"
  },
  {
    "title": "Amazon CloudFrontリクエストのライフサイクルを図解する",
    "date": "2025-10-22T08:05:52.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/charting-the-life-of-an-amazon-cloudfront-request/",
    "content": "<p>本稿は、2025 年 10 月 17 日に公開された “<a href=\"https://aws.amazon.com/jp/blogs/networking-and-content-delivery/charting-the-life-of-an-amazon-cloudfront-request/\" target=\"_blank\" rel=\"noopener\">Charting the life of an Amazon CloudFront request</a>” を翻訳したものです。</p> \n<p><a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"noopener\">Amazon CloudFront</a> は、AWS ネイティブの Content Delivery Network (CDN) サービスです。CDN は、エンドユーザーにより近い世界中のエッジロケーションのネットワークを使用し、エッジでコンテンツをキャッシュすることで、Web アクセラレーションを提供します。しかし、CloudFront はそれ以上のことができます。エッジでの機能として、地理的フィルタリング、関数の実行、<a href=\"https://aws.amazon.com/waf/\" target=\"_blank\" rel=\"noopener\">AWS Web Application Firewall (WAF)</a> フィルタリングの実行など、さまざまな機能を備えています。この投稿では、CloudFront ディストリビューションへのクライアントリクエストのライフサイクルを探求し、特にこれらの機能の実行順序に注目します。この理解は、Web アプリケーションの配信最適化、Web アプリケーションのセキュリティ保護、および CDN 設定のトラブルシューティングにおいて不可欠です。</p> \n<p>リクエストのライフサイクルを見ていく前に、CloudFront クライアントリクエストに関わるインフラストラクチャの構成要素を探ってみましょう。</p> \n<div id=\"attachment_167608\" style=\"width: 854px\" class=\"wp-caption aligncenter\">\n <img aria-describedby=\"caption-attachment-167608\" loading=\"lazy\" class=\"wp-image-167608 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/cf-request-jp1.jpg\" alt=\"\" width=\"844\" height=\"514\">\n <p id=\"caption-attachment-167608\" class=\"wp-caption-text\">図 1: CloudFront エッジロケーションと リージョン別エッジキャッシュ</p>\n</div> \n<h2>エッジキャッシングの概要</h2> \n<p>CloudFront の Point of Presence (POP)、別名エッジロケーションは、リクエストが最初に到達するサーバーグループです。エッジロケーションは、リクエストに対して応答する(コンテンツがキャッシュされている場合)か、次のレイヤーに転送するかを判断します。エッジロケーションは世界中に分散配置されており、通常の <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regions_az/\" target=\"_blank\" rel=\"noopener\">AWS リージョン</a>よりも小規模です。説明を分かりやすくするため、POP を 1 つの単位として考えることができます。図 1(公式 CloudFront ドキュメントより引用)は、この構成を示しています。</p> \n<p>この概要説明で十分なケースもありますが、実際には CDN 設定のトラブルシューティング、キャッシング最適化、動的コンテンツ配信のパフォーマンス改善などのために、リクエスト-レスポンスの流れをより詳細に理解する必要があります。注目すべき点は、ビューワーからのリクエストとレスポンスが CloudFront ネットワーク内の複数のレイヤーを通過することです。POP では初期接続処理、負荷分散、キャッシング、<a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html\" target=\"_blank\" rel=\"noopener\">CloudFront Functions</a> の実行が行われ、リージョン別エッジキャッシュ (REC) では高度なキャッシュ最適化、<a href=\"https://aws.amazon.com/lambda/edge/\" target=\"_blank\" rel=\"noopener\">Lambda@Edge</a> の実行、オリジンサーバーへの接続、リクエストの折りたたみ、オリジンタイムアウト設定などが処理されます。また、キャッシュ効率をさらに向上させるオプション機能として Origin Shield を有効化できます。</p> \n<p>HTTP(s) プロトコルに加えて、CloudFront はプロトコルの拡張機能もサポートしています。例えば、HTTP/2 上に構築されたオープンソースの Remote Procedure Call (RPC) フレームワークである <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-using-grpc.html\" target=\"_blank\" rel=\"noopener\">gRPC</a> や、TCP ベースのプロトコルである <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.websockets.html\" target=\"_blank\" rel=\"noopener\">WebSocket</a> があります。WebSocket は、リアルタイムアプリケーションで永続的な接続が必要な場合に、クライアントとサーバー間で長時間持続する双方向通信を実現するのに適しています。</p> \n<p>本記事では HTTP(s) のリクエストとレスポンス処理に絞って解説し、gRPC と WebSocket 接続については別の記事で詳しく説明する予定です。</p> \n<h2>DNS 名前解決と POP</h2> \n<p>ユーザーが CloudFront 経由で Web サイトにアクセスするところから始まります(次の図を参照)。通常、Web サイトは<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/LinkFormat.html#LinkFormat_OwnDomain\" target=\"_blank\" rel=\"noopener\">カスタムドメイン名</a>を CloudFront のドメイン名に紐付けて設定されています。CloudFront は DNS リクエストからユーザーの位置情報を判断し、そのリクエストを処理するのに最適なエッジロケーションの情報を DNS レスポンスとして返します。この際、CloudFront はインターネットネットワークの健全性、ネットワーク負荷など複数の要素を考慮して、ビューワーに最適な POP の IP アドレス(複数)を提供します。エンドユーザーの所在地に応じて、リクエストに応答するインフラを制限することで、コスト削減と異なる価格クラスの活用が可能です。CloudFront ディストリビューションで選択した価格クラスによって、ユーザーが利用できる POP が限定されます。また、<a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Network-Monitoring-Sections.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Network Monitor</a> と <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-InternetMonitor.html\" target=\"_blank\" rel=\"noopener\">CloudWatch Internet Monitor</a> を利用することで、AWS 上でホストされているアプリケーションのネットワークおよびインターネットのパフォーマンスと可用性について、運用上の可視性を得ることができます。</p> \n<p>CloudFront で <a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/request-static-ips.html\" target=\"_blank\" rel=\"noopener\">エニーキャスト</a>静的 IP を使用している場合、DNS 解決によって最適な CloudFront POP を決定するプロセスは異なります。本記事では エニーキャスト IP を使用しないケースを想定しています。</p> \n<div id=\"attachment_167610\" style=\"width: 732px\" class=\"wp-caption aligncenter\">\n <img aria-describedby=\"caption-attachment-167610\" loading=\"lazy\" class=\"wp-image-167610 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/cf-request-jp2.png\" alt=\"\" width=\"722\" height=\"1512\">\n <p id=\"caption-attachment-167610\" class=\"wp-caption-text\">図 2: CloudFront リクエストの経路</p>\n</div> \n<h3>接続確立と TLS ネゴシエーション</h3> \n<p>DNS 名前解決が完了すると、クライアントアプリケーション(Web ブラウザやモバイルアプリなど、ビューワーと呼ばれます)は、最適な POP の IP アドレスリストを受け取ります。クライアントアプリケーションは、これらの IP のいずれかを使用して POP への接続を確立し、必要に応じて別の IP を使ってフェイルオーバーすることができます。CloudFront は IETF 標準に準拠し、ポート 80/443 で HTTP、HTTPS、WebSocket を<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesGeneral.html#DownloadDistValuesSupportedHTTPVersions\" target=\"_blank\" rel=\"noopener\">受け付けます</a>。すべての POP は <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/ddos-standard-summary.html\" target=\"_blank\" rel=\"noopener\">AWS Shield Standard</a> によって保護されており、UDP フラッドや SYN フラッドなどの一般的な DDoS ボリューメトリック攻撃から守られています。次のレイヤーでは、Secure Sockets Layer (SSL)/Transport Layer Security (TLS) 接続が正しく確立されているかを確認します。CloudFront ディストリビューションに設定された<a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesGeneral.html#DownloadDistValues-security-policy\" target=\"_blank\" rel=\"noopener\">セキュリティポリシー</a>によって、使用可能なプロトコルと暗号スイートが定義されます。</p> \n<h3>リクエストルーティングと検証</h3> \n<p>リクエストはリクエストルーターに引き渡されます。POP のリクエストルーターは、クライアント接続を複数のキャッシュサーバーに負荷分散します。ここには重要なセキュリティレイヤーも存在し、クライアントからのリクエストが<a href=\"https://www.ietf.org/process/rfcs/\" target=\"_blank\" rel=\"noopener\"> Request for Comments</a> (RFC) に準拠しているか、不正または曖昧な構文による脅威が含まれていないかを確認することで、キャッシュサーバーを監視・保護しています。このレイヤーによって、キャッシュレイヤーに転送されるリクエストが適切なフォーマットで HTTP 仕様に準拠していることが保証されます。この段階で、CloudFront ディストリビューションの設定に基づき、許可されるプロトコル、HTTP メソッド、地理的制限が評価されます。</p> \n<h3>AWS WAF</h3> \n<p>リクエストの負荷分散とアクセス前のセキュリティチェックの後、CloudFront ディストリビューションで AWS WAF が有効化されている場合は、リクエストは AWS WAF のウェブアクセスコントロールリスト (ウェブ ACL) に設定されたルールによって処理されます。AWS WAF は Web アプリケーションファイアウォールであり、SQL インジェクション、クロスサイトスクリプティング、ボット攻撃、DDoS 攻撃などのアプリケーションレイヤーの攻撃からアプリケーションを守るために、リクエストを監視します。AWS WAF は、キャッシュビヘイビア、リクエスト/レスポンスヘッダーポリシー、CloudFront Functions や Lambda@Edge といったエッジコンピューティング関数などのコンテンツ処理ルールよりも必ず先に実行されます。</p> \n<h3>ビヘイビア</h3> \n<p>この段階で、ユーザーはビヘイビアセクションにて、CloudFront がリクエストをどのように処理するかを定義できます。ビヘイビアは URL のパスパターンごとに異なる設定を持つことができます。ビヘイビア設定では、使用するオリジン、許可する HTTP メソッド、キャッシュポリシー、関数の紐付け、そしてオリジンリクエストポリシーを指定します。オリジンリクエストポリシーでは、どのパラメータ(ヘッダー、クエリ文字列、Cookie)をオリジンに転送するかを定義します。また、機密情報を保護するためのフィールドレベル暗号化も設定可能です。</p> \n<h3>CloudFront キャッシング</h3> \n<p>CloudFront は、CloudFront Functions の Viewer Request 関数(設定されている場合)の実行後、POP のキャッシュに問い合わせを行います。POP 内には、キャッシュヒット率を最大化するための複数レイヤーのキャッシュが存在します。最初のレイヤーにオブジェクトがキャッシュされていない場合、リクエストは次のレイヤーへ、さらに次へと順次転送されていきます。ただし、無限にレイヤーを増やすことはできないため、各キャッシュスタック内のキャッシュサーバー数や、最初のレイヤーが参照できるピアの数には上限があります。POP 内のすべてのキャッシュレイヤーでオブジェクトが見つからない場合、リクエストは REC に転送されます。</p> \n<h3>REC</h3> \n<p>REC には POP と同様のキャッシュレイヤーがあり、キャッシュ容量の拡大と Lambda@Edge 関数の実行に必要なコンピューティングインフラを提供しています。REC は POP とオリジンサーバーの間に位置する大容量のキャッシュレイヤーとして機能し、キャッシュヒット率のさらなる向上、オリジンへのリクエスト削減、そして Lambda@Edge の実行基盤としての役割を果たします。</p> \n<p>Lambda@Edge の ビューワーリクエスト関数を定義している場合、CloudFront が REC のキャッシュを確認する前に、この段階で実行されます。その後、REC のキャッシュにオブジェクトが存在しない場合、Lambda@Edge のオリジンリクエスト関数が実行されます。</p> \n<p>CloudFront ディストリビューションで <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html\" target=\"_blank\" rel=\"noopener\">Origin Shield</a> を有効化している場合、すべての REC はオリジンサーバーへリクエストを送る前に Origin Shield を経由するため、オリジンサーバーへの負荷を削減できます。Origin Shield はユーザーのオリジンサーバーに近い場所に配置され、オリジンへのトラフィック帯域幅とリクエスト数を減らすことで、キャッシング効率を高めます。</p> \n<p>オリジン接続側の最終レイヤー (REC または Origin Shield) は、コンテンツオリジンとの間で永続的な接続を維持し、効率的なデータ転送を実現します。<a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesOrigin.html#origin-connection-timeout\" target=\"_blank\" rel=\"noopener\">オリジンタイムアウト設定</a> (カスタムオリジンの場合) では、ユーザーは以下の値を調整することができます:</p> \n<ol> \n <li>接続試行回数: CloudFront がオリジンサーバーへの接続を試みる回数を設定します。</li> \n <li>接続タイムアウト: CloudFront がオリジンサーバーへの接続確立を試みる際の待機時間(秒)を指定します。</li> \n <li>レスポンスタイムアウト: CloudFront がオリジンにリクエストを転送してからレスポンスを待つ時間、およびオリジンからレスポンスパケットを受信した後、次のパケットを受信するまでの待機時間を設定します。</li> \n</ol> \n<p><a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistValuesGeneral.html#DownloadDistValues-security-policy\" target=\"_blank\" rel=\"noopener\">オリジンリクエストポリシー</a>では、エッジからオリジンサーバーへ接続する際に使用する最小 SSL バージョンも定義されます。</p> \n<h3>オリジンからのレスポンス</h3> \n<p>リクエストがすべてのキャッシュレイヤー、REC、Origin Shield のいずれにも存在しない場合、オリジンサーバーから取得されます。オリジンはパブリック IP でアクセス可能なリソースですが、<a href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/private-content-vpc-origins.html\" target=\"_blank\" rel=\"noopener\">VPC オリジン</a>と組み合わせることでプライベートリソースにすることも可能です。オリジンが URL で指定されている場合、この段階で DNS 名前解決が実行されます。これにより、<a href=\"https://aws.amazon.com/route53/\" target=\"_blank\" rel=\"noopener\">Amazon Route 53</a> のレイテンシーベースルーティングや地理的位置情報ルーティングといったルーティングポリシーを活用して、最適なオリジンの場所を決定できます。</p> \n<p>レスポンスは、リクエストとは逆の経路をたどって戻ります。オリジンサーバーからのレスポンスは REC に返されます。リクエストがキャッシュ可能で圧縮が有効な場合、レスポンスは圧縮されます。キャッシュの保持期間は CloudFront ビヘイビアのキャッシュポリシーで管理されます。Lambda@Edge のオリジンレスポンス関数が定義されている場合は、この段階で実行され、その結果が REC にキャッシュされます。Lambda@Edge のビューワーレスポンス関数が定義されている場合も実行されます。セキュリティ上の理由から、レスポンスに対して実行される関数はレスポンスボディの読み取りはできませんが、置き換えることは可能です。処理は POP へと続きます。CloudFront Functions の ビューワーレスポンス関数が定義されている場合は POP で実行され、最終的なコンテンツがクライアントに配信されます。図 2 は、このリクエスト/レスポンスの流れにおける主要なステップをまとめたものです。</p> \n<h2>まとめ</h2> \n<p>本記事では、ビューワーから Amazon CloudFront を経由してオリジンサーバーへと至る単一のリクエスト、そしてオリジンサーバーからビューワーへ戻るレスポンスの流れを追いながら、CloudFront が提供する様々なレイヤーと機能について解説しました。</p> \n<p>各機能の実行順序と、それぞれがどのレイヤーで動作するかについて理解が深まったことと思います。ぜひこの知識を活かして、お使いの CloudFront 設定(キャッシュ設定、エッジ関数、AWS WAF、AWS Shield など)を見直し、CloudFront CDN の持つすべての力を最大限に活用してください。</p> \n<h2>著者について</h2> \n<p>\n <!-- First Author --></p> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <p class=\"sanchkan_square-e1758312914318.png\"><img loading=\"lazy\" class=\"alignleft wp-image-1288 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/5b384ce32d8cdef02bc3a139d4cac0a22bb029e8/2025/09/19/sanchkan_square-e1758312914318.png\" alt=\"Sanchith Kandaka\" width=\"125\" height=\"125\"></p> \n <h3 class=\"lb-h4\">Sanchith Kandaka</h3> \n <p style=\"color: #879196;font-size: 1rem\"><span style=\"color: #000000\">Sanchith は、コンテンツデリバリとアプリケーションセキュリティの分野で 15 年以上の経験を持ち、エッジ関連のあらゆる技術に情熱を注いでいます。ソリューションアーキテクトおよびソリューションエンジニアを経て、現在は AWS のスペシャリストソリューションアーキテクトとして、Amazon CloudFront、AWS WAF、AWS Shield などの AWS Edge Services および境界保護サービスを専門としています。</span></p> \n</div> \n<p>\n <!-- Second Author --></p> \n<div class=\"blog-author-box\" style=\"border: 1px solid #d5dbdb;padding: 15px\"> \n <p class=\"Jorge-125x125-1.jpg\"><img loading=\"lazy\" class=\"alignleft wp-image-1288 size-thumbnail\" src=\"https://d2908q01vomqb2.cloudfront.net/5b384ce32d8cdef02bc3a139d4cac0a22bb029e8/2023/11/22/Jorge-125x125-1.jpg\" alt=\"Jorge Prado\" width=\"125\" height=\"125\"></p> \n <h3 class=\"lb-h4\">Jorge Prado</h3> \n <p style=\"color: #879196;font-size: 1rem\"><span style=\"color: #000000\">Jorge は、ノースカロライナの AWS でシニアテクニカルアカウントマネージャーを務めています。エンタープライズサポートのお客様が最適なソリューションを見つけ、運用面での優れた成果を達成できるよう支援することに情熱を持っています。専門分野はネットワーキング技術です。プライベートでは、読書や映画鑑賞、お子さんとのゲームを楽しんでいます。</span></p> \n</div> \n<p>翻訳は Solutions Architect の長谷川 純也が担当しました。</p>"
  },
  {
    "title": "スクラムを導入したのに、なぜ組織は変わらないのか",
    "date": "2025-10-22T08:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/nttdata_tech/articles/34b4172b467aee",
    "content": "デイリースタンドアップ、スプリントプランニング、レトロスペクティブ。スクラムのフレームワークは完全に導入した。チームは毎日15分のスタンドアップをしているし、2週間ごとにふりかえりとカイゼンアイテムの特定をしている。でも、何かが違う。現場は相変わらず「忙しい」と言い続け、部門間の壁は高いままで、意思決定のスピードは上がらない。\nアジャイルやスクラムを始めたばかりのチームや組織において、このような状況に心当たりがあるのではないでしょうか。問題は、フレームワークそのものではありません。\nここで私たちが直面しているのは、技術的課題と適応課題を取り違えているという、より根本的な問題です。\n\n 技..."
  },
  {
    "title": "複数の並行開発におけるDocker Composeのポート競合を何とかする（Mac）",
    "date": "2025-10-22T04:43:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/shinoyu/articles/6a79758070df88",
    "content": "\n とにかく競合しがちな3000と8000\n複数の開発のお仕事を頂いて対応していると、このポート競合に悩まされてしまうということがよくあります。まあその時立ち上げるcomposeの環境を一つだけに限定すればいい、という話ではあるのですが、AIコーディングが常用化された今の環境化では平行に開発できないと辛いというのが実情なわけです。\n大体の現場は、並行で開発をしないといけないタイプのエンジニアのことは特に考慮してくれません。故に3000番ポートというある意味Web開発デファクトみたいなポートはくっっっっっそ被ります。8000番も同じくよく使われるものなので、これをまあ被る。いちいちcomp..."
  },
  {
    "title": "株式会社ファイン様のAWS 生成AI活用事例：建築AIパース生成サービスにレコメンドAI機能を実装。担当者の商品検索時間を75%削減し、顧客満足度も向上。",
    "date": "2025-10-22T04:29:26.000Z",
    "source": "Amazon Web Services ブログ",
    "url": "https://aws.amazon.com/jp/blogs/news/genai-case-study-fine-d/",
    "content": "<p><em>本ブログは株式会社ファイン様と Amazon Web Services Japan 合同会社が共同で執筆いたしました。</em></p> \n<p>皆様こんにちは。AWSジャパン アカウントマネージャーの松家です。</p> \n<p>近年、多くのお客様が生成AIの検証段階から本番環境への適用に移行されています。また、開発現場にも生成AIが活用される時代になり、アイデアから実装に至るまでのスピードも劇的に早くなっていることを実感しています。</p> \n<p>「建築CGのデジタル素材」という市場において高品質なデジタル商品、サービスを提供されている<strong><a href=\"https://www.fine-d.co.jp/\">株式会社ファイン様</a></strong>は実際のビジネス課題を解決する機能をAWS上で開発するハッカソンイベント AWS DEVCRAFTに参加。Amazon SageMakerやAmazon Bedrockを通じてAmazon Titan Multimodal Embeddings を活用し、設計からわずか1か月半で生成された建築AIパースのイメージに近い商品をレコメンドする機能を開発されました。<br> 本記事では生成AIを活用した業務効率化、および顧客満足度向上の取り組みについてご紹介いたします。</p> \n<p><strong>お客様の状況と検証に至る経緯</strong></p> \n<p>株式会社ファイン様は施主の要望と設計者の見識から建築パース画像を生成するサービス「AI PERS（AIパース）」を提供されています。このサービスはお客様に大変好評だったものの、いくつか運用面で課題が残っていました。</p> \n<p>• 施主のイメージは具体化出来るが、実際の商品とのマッチングや検索に時間がかかってしまう。</p> \n<p>• 営業や設計の商談に差が出てしまい、お客様の検討の温度感が高い間に提案が出来ずに至ってしまう。</p> \n<p>そこで、生成AIを活用してこれらの課題を解決できないかと考えました。</p> \n<p><strong>ソリューション / 構成</strong><br> <a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/image-13-4.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167590 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/22/image-13-4.png\" alt=\"\" width=\"1225\" height=\"686\"></a></p> \n<p>施主が選択したプランから、理想のお部屋イメージを入力すると入力内容に基づき建築AIパースが生成されます。その生成されたAIパースのイメージと、実際に販売している商品とをベクトル検索を通じておすすめ度の1-5位を表示します。</p> \n<p><strong>機能全体のフロー</strong></p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/image-14-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-167461 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/image-14-1.png\" alt=\"\" width=\"1233\" height=\"689\"></a></p> \n<p>• 生成された画像の中から検索をかけたい部位を検出します。今回は床を想定しています。</p> \n<p>• その床部分だけをAWS Lambdaを用いて切り抜きます。</p> \n<p>• 切り抜かれた画像をAmazon Bedrock に渡し、ベクトル化モデルのAmazon Titan Multimodal Embeddings を活用し、ベクトル化を実施します。</p> \n<p>• Amazon RDS PostgreSQLでベクトル検索を行い、類似品を検索します。</p> \n<p><strong><br> 導入効果</strong></p> \n<p>ファイン様の「レコメンド AI」により、以下の効果が期待されています。</p> \n<p>• 出力されたAIパースのイメージに近い商品を探す時間を75% 削減し、担当者の工数削減に寄与する。</p> \n<p>• ベクトル検索を通じて、おすすめ度合いに応じて1-5位まで瞬時に表示できるため、顧客体験の標準化や向上を図る。</p> \n<p><strong><br> 今後の展望</strong></p> \n<p>今後の展開について、ファイン様は次のように意欲を示しています。</p> \n<p>• AIパースサービスからの連携だけでなくSNSなどの写真画像を入力としての機能拡張</p> \n<p>• 自社のパース制作アプリケーションの自動仕様設定機能として組み込み</p> \n<p>• 自社のコンテンツ配信サービス（データステーション）の検索機能としての組み込み</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/画像1.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-167462 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/b3f0c7f6bb763af1be91d9e74eabfeb199dc1f1f/2025/10/21/画像1.jpg\" alt=\"\" width=\"1430\" height=\"1024\"></a></p> \n<p>AWS DEVCRAFTでの取り組み内容発表時の様子<br> 株式会社ファイン 開発部 ゼネラルマネージャー 雑賀 崇 氏</p>"
  },
  {
    "title": "GopherCon 2025に行ってきました！",
    "date": "2025-10-22T02:45:56.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/logica0419/articles/gophercon-2025",
    "content": "どうもこんにちは。\nブログを書くのは久しぶりのTakuto Nagamiです。\n今回の記事は、8/26～28にアメリカ・ニューヨークで行われたGopherConに参加してきた体験レポートです！🇺🇸\n\n\n 前置き\n今回のGopherCon参加にあたり、一般社団法人Gophers Japanの海外カンファレンス向けスカラーシップ制度で旅費支援をしていただきました。\nこれによって今回必要になった費用の大部分をカバーしていただき、非常に少ない自己負担でGopherConを楽しむことができました。\n改めてこの場で御礼申し上げます。誠にありがとうございました！！🙇\n海外カンファレンスに行きたいけれど..."
  },
  {
    "title": "vercel/next.js – v16.0.0",
    "date": "2025-10-22T00:35:18.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0",
    "content": "> [!TIP]  \r\n> **Check out our Next v16 [Blog Post](https://nextjs.org/blog/next-16) to learn more about this release.**\r\n\r\n### Core Changes\r\n\r\n- Development: Don't import app-router / hot-reloader through next/link in application code: #83656\r\n- Remove clientParamParsing requirement from RDC for Navigations: #83661\r\n- Upgrade React from `6b70072c-20250909` to `886b3d36-20250910`: #83650\r\n- Turbopack: Use readFileSync / writeFileSync for manifest writing: #83694\r\n- Upgrade React from `886b3d36-20250910` to `f3a80361-20250911`: #83696\r\n- Don't create client-side debug channel if the feature is disabled: #83699\r\n- fix: dev should produce the correct default fallback regex to match builds/Turbopack: #83701\r\n- [devtool] fix overlay styles are missing: #83721\r\n- Revert \"Remove clientParamParsing requirement from RDC for Navigations\": #83725\r\n- Only enable unhandledRejection filtering when opted in: #83726\r\n- Fix index data route for adapter build-complete: #83730\r\n- Remove leading underscore for unhandledRejection envvar: #83732\r\n- Upgrade React from `f3a80361-20250911` to `93d7aa69-20250912`: #83729\r\n- Upgrade React from `93d7aa69-20250912` to `8a8e9a7e-20250912`: #83742\r\n- Fix reentrancy of unhandledRejection filtering: #83741\r\n- Fix type for unhandled rejection handler process.removeListener: #83748\r\n- [OTel] fix: Root span name should not include high cardinality URL: #75416\r\n- Turbopack: Remove matchers.reload() call on each request: #83720\r\n- [Breaking] Flat config as default in `@next/eslint-plugin-next`: #83763\r\n- fix: Rspack splitChunks.chunks regex: #83670\r\n- Revert \"Turbopack: Remove matchers.reload() call on each request\": #83819\r\n- fix: unstable_cache should perform blocking revalidation during ISR revalidation: #83820\r\n- fix(Rspack): resolve HMR unresponsiveness or unexpected full reload & update dev snapshot: #83480\r\n- Allow `next.config.mts` for Node.js native TS resolver: #83556\r\n- chore: Ensure Import Trace starts in a newline: #83638\r\n- Development: Remove matchers.reload() on each request: #83829\r\n- Upgrade React from `8a8e9a7e-20250912` to `5e0c951b-20250916`: #83850\r\n- Bump typescript 5.9.2: #83833\r\n- Allow headers, rewrites and redirects to be defined as sync functions: #83743\r\n- Turbopack: Optimize addedRoutes and removedRoutes calculation: #83840\r\n- [next-config-ts] Set Node.js native TS loader fallback flag to process.env: #83832\r\n- Development: Clarify TypescriptStatus in watcher: #83857\r\n- Upgrade sharp dependency to version ^0.34.4: #83892\r\n- Upgrade React from `5e0c951b-20250916` to `128abcfa-20250917`: #83906\r\n- Add native ts resolver docs link to transpile-config: #83914\r\n- OTel: use `srcPage` for templates when `next.route` is unavailable: #83911\r\n- Remove inline CSS sourcemaps from next-devtools: #83917\r\n- Development: Move all TypeScript related work in watcher together: #83912\r\n- [Cache Components] Allow sync IO inside console methods : #83843\r\n- Upgrade React from `128abcfa-20250917` to `84af9085-20250917`: #83959\r\n- Build: Add .next/trace-build with high level trace: #83949\r\n- Remove force writing **/*.mts to tsconfig: #83967\r\n- feat: Isolate dev build from prod: #83961\r\n- Remove JS size reporting from next build: #83815\r\n- Docs/workspace setup: #83490\r\n- Turbopack: support `import ... with {type: \"bytes\"}`: #83896\r\n- fix: error overlay not closing when backdrop clicked: #83981\r\n- Upgrade React from `84af9085-20250917` to `d415fd3e-20250919`: #84003\r\n- fix: worker logs should still support color: #84024\r\n- Update font data: #84005\r\n- Allow passing port to `next internal trace`: #83907\r\n- Turbopack: error when importing Typescript in node_modules: #83990\r\n- Turbopack: Deterministic builds (prerender-manifest, .next/package.json, ./next/postcss.js): #84081\r\n- Turbopack: Fix babel-loader (allowing built-in or manual configuration): #82676\r\n- [Cache Components] allow using headers() in runtime prefetches: #83838\r\n- [Breaking] Remove deprecated `publicRuntimeConfig` and `serverRuntimeConfig`: #83944\r\n- Turbopack: mode to disable tracing: #83683\r\n- babel-loader: Fix a few issues with config caching: #83973\r\n- Turbopack: Merge babel-loader and react-compiler configuration logic to avoid running babel twice: #83502\r\n- [breaking]: enable router scroll optimization by default: #84102\r\n- Fix layout for `ssgPageRoutes` in the file tree: #84104\r\n- Turbopack: Remove useless 'default' built-in webpack loader condition: #84111\r\n- Fix: Client should auto reload after server restarts: #83971\r\n- trace-build: Add missing spans: #84080\r\n- Development: Remove TypeScript from the hot path during bootup: #84090\r\n- Guide users to `experimental.cacheComponents` config: #84121\r\n- Development: Only load webpack when used: #84123\r\n- Turbopack: Skip loading webpack plugin: #84125\r\n- Development: Only load createEnvDefinitions when used: #83935\r\n- BREAKING CHANGE!: bump default `images.minimumCacheTTL` from 1 min to 4 hours: #84105\r\n- Feat: Add Model Context Protocol (MCP) server to Next.js dev server: #84100\r\n- Upgrade React from `d415fd3e-20250919` to `1eca9a27-20250922`: #84093\r\n- Turbopack: Remove the deprecated `.turbo` config object: #84109\r\n- Flag excess properties in Next.js config with TypeScript: #84069\r\n- docs: update Security section to direct disclosures : #84156\r\n- ci: Enable `experimental.isolatedDevBuild` for `test-experimental-dev`: #84099\r\n- [turbopack] Ensure React Compiler options are based dev vs prod: #84062\r\n- Enable anonymous function naming in React Compiler: #84070\r\n- Revert \"[Breaking] Remove deprecated `publicRuntimeConfig` and `serverRuntimeConfig` (#83944)\": #84167\r\n- Fix double comma in build manifest: #84131\r\n- [turbopack] set app dir only to true when no pages entries detected: #84144\r\n- Split code-frame into separate compiled package: #84174\r\n- refactor: separate forward browser logs utils: #84151\r\n- Upgrade React from `1eca9a27-20250922` to `e2332183-20250924`: #84189\r\n- [Cache Components] default to filtering unhandledRejection after abort: #84192\r\n- fix: prevent URL mutation in router rewrites: #83963\r\n- fix(server): fix pages router resume router matching: #84158\r\n- Feat: `get_errors` MCP endpoint: #84161\r\n- Add internal environment variable for enabling React Compiler: #84176\r\n- [devtools] Disable React's default Transition indicator: #84202\r\n- Upgrade React from `e2332183-20250924` to `b0c1dc01-20250925`: #84248\r\n- Feat: `get_page_metadata` MCP endpoint: #84211\r\n- feat: capture logs into logging file during development: #84183\r\n- babel-loader: Avoid calling expensive `isReactCompilerRequired` check when we must run Babel anyways: #84103\r\n- [mcp] expose logging: #84226\r\n- Move `config.turbopack.moduleIds` to `config.experimental.turbopackModuleIds`: #84230\r\n- Show invalid default export errors during prerendering: #84242\r\n- fix: make sure caller exists in babel preset: #84154\r\n- [mcp] allow to enable mcp server through env var: #84278\r\n- fix(metadata): make formatDetection respect true/false properly: #83924\r\n- Upgrade React from `b0c1dc01-20250925` to `df38ac9a-20250926`: #84276\r\n- Add a --webpack flag and default --turbopack to true: #84216\r\n- fix: Update URL resolution logic to handle search parameters on root path /?foo=bar: #78262\r\n- [Breaking] Remove deprecated sync access to Dynamic APIs: #84179\r\n- Move `config.turbopack.moduleIds` to `config.experimental.turbopackModuleIds`: #84230\r\n- Show invalid default export errors during prerendering: #84242\r\n- fix: make sure caller exists in babel preset: #84154\r\n- [mcp] allow to enable mcp server through env var: #84278\r\n- fix(metadata): make formatDetection respect true/false properly: #83924\r\n- Upgrade React from `b0c1dc01-20250925` to `df38ac9a-20250926`: #84276\r\n- Add a --webpack flag and default --turbopack to true: #84216\r\n- fix: Update URL resolution logic to handle search parameters on root path /?foo=bar: #78262\r\n- [Breaking] Remove deprecated sync access to Dynamic APIs: #84179\r\n- Turbopack: only write merged manifests when they have been changed: #84261\r\n- Turbopack: add separate turbopackPersistentCachingForBuild/ForDev flags: #84215\r\n- Revert \"Add a --webpack flag and default --turbopack to true (#84216)\": #84348\r\n- Upgrade React from `df38ac9a-20250926` to `d15d7fd7-20250929`: #84347\r\n- Mark React Compiler integration as stable: #84220\r\n- [cna] Add `reactCompiler` option: #82251\r\n- Turbopack: remove canary version check for turbopackPersistentCachingForDev: #84277\r\n- [turbopack] Add support for debug_ids: #84319\r\n- Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\": #84351\r\n- [Breaking] Remove AMP codemod: #84356\r\n- [Breaking] Remove deprecated built-in AMP: #84312\r\n- auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents: #84250\r\n- [mcp] get server action tool: #84382\r\n- Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\": #84389\r\n- Update otel test assertions and pages span_name: #84393\r\n- [Breaking] Bump minimum TypeScript version to 5.1.0: #84384\r\n- Upgrade React from `d15d7fd7-20250929` to `ef889445-20250930`: #84383\r\n- [Breaking] Remove deprecated `unstable_rootParams`: #84373\r\n- [metadata] remove falsy dynamicParams approach: #84405\r\n- fix: next rspack binding NextExternalsPlugin: #84303\r\n- Development: Skip route matching when there is an existing match: #84227\r\n- Revert \"auto-enable clientParamParsing and clientSegmentCache w/ cacheComponents\": #84419\r\n- Upgrade React from `ef889445-20250930` to `548235db-20251001`: #84416\r\n- [Breaking] Update default browserslist config: #84401\r\n- Upgrade React from `548235db-20251001` to `1bd1f01f-20251001`: #84417\r\n- Allow `metadataBase` to be a string URL in addition to `URL` instance: #84297\r\n- Upgrade React from `1bd1f01f-20251001` to `86181134-20251001`: #84427\r\n- [mcp] logging file should be reset for each session: #84425\r\n- Revert \"Revert \"Revert \"Revert \"Add a --webpack flag and default --turbopack to true (#84216)\"\"\"\": #84394\r\n- Optimize isMetadataRoute function: #84409\r\n- [ci]: split clientSegmentCache test runners off from experimental: #84440\r\n- [Cache Components] Fix caching in `generateMetadata`/`generateViewport`: #84228\r\n- Upgrade React from `86181134-20251001` to `a757cb76-20251002`: #84463\r\n- [segment cache]: fix trailingSlash handling with output: export: #84465\r\n- perf: Use a more aggressive retry loop for `recursiveDelete`: #84444\r\n- [Cache Components] Dim logs after prerender aborts: #84153\r\n- telemetry track mcp server usage: #84471\r\n- simplify the way we check for turbopack config to ensure we support an empty turbopack object: #84494\r\n- perf: Use synchronous IO when cleaning `distDir` in `next dev` and `next build`: #84472\r\n- Make turbopack the default bundler for custom servers: #84281\r\n- [segment cache]: fix interception route handling: #84497\r\n- Upgrade React from `a757cb76-20251002` to `85c427d8-20251003`: #84496\r\n- [segment cache]: collectSegmentData should respect experimental.staleTime config: #84520\r\n- Fix potential race condition with request ID in dev mode: #84532\r\n- [test] Enable `reactDebugChannel` for experimental test shards: #84533\r\n- Simplify Metadata components: #84527\r\n- Implement the updated prerender API shape: #84254\r\n- Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003`: #84499\r\n- Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006`: #84573\r\n- fix(Turbopack): Add better error messaging for when we can't determine Next.js root: #83918\r\n- Allow silencing unhandled rejection filter warnings and improve debugging: #84572\r\n- [MCP] Fix: Do not dedup by URL for MCP get_page_metadata: #84564\r\n- Guard `createDebugChannel` import by feature flag: #84604\r\n- Build: Add time to logline of every step: #84602\r\n- Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006`: #84589\r\n- [Cache Components] Schedule work on timeouts: #84344\r\n- [dev] Define request ID for RSC requests on the client: #84605\r\n- fix(cache-tags): add `/index` to implicit tags and adjust `revalidatePath()`: #84586\r\n- Build: Highlight TypeScript and ESLint being run clearer: #84606\r\n- [Breaking] Bump sass-loader to v16: #84387\r\n- Update cases for build complete with adapters: #84361\r\n- Turbopack: delete .next folder before throwing due to \"pages/app directory must be in the same folder\": #84553\r\n- [mcp] change get-project-path to get-project-metadata: #84619\r\n- feat(next/image)!: deprecate and warn on `images.domains` config: #84625\r\n- feat(next/legacy/image)!: deprecate and warn on `next/legacy/image` usage: #84622\r\n- Turbopack: improve errors/warnings for turbopack messages: #84552\r\n- Turbopack: rename turbopackPersistentCachingForXXX to turbopackFileSystemCacheForXXX: #84632\r\n- [Segment Cache] Add refresh URL to reused default segments: #84627\r\n- [Segment Cache] Fix tests related to optimistic loading state reuse: #84498\r\n- Upgrade React from `a4eb2dfa-20251006` to `3025aa39-20251007`: #84613\r\n- [breaking]: enable clientSegmentCache by default: #84643\r\n- feat: Acquire a lockfile on `distDir` in `next dev` and `next build`: #84428\r\n- Add deprecation warning to Runtime config: #84168\r\n- [middleware]: add upper bound to cloneBodyStream: #84539\r\n- Remove automatic linting from build: #83136\r\n- Re-enable legacyBehavior and passHref on Link: #84500\r\n- [cna] Use stable React Compiler: #84660\r\n- Add codemod for `middleware` to `proxy`: #84127\r\n- Fix dynamic catchall parameter interpolation in parallel routes: #84279\r\n- feat(breaking): Hard Deprecate PPR Configuration: #84280\r\n- Deprecate `middleware` and recommend `proxy`: #84119\r\n- Put native TS resolver for next config under `--experimental-next-config-strip-types` flag: #84675\r\n- Fix interception route rewrites for nested dynamic routes: #84413\r\n- fix: strip _NEXTSEP_ from interpolated pathnames: #84430\r\n- chore: Remove useless symlink resolution logic in `recursive-delete.js`: #84582\r\n- breaking(next/image)!: remove 16px from default `images.imageSizes` config: #84647\r\n- add Statsig Node Core package to Server External Packages: #84157\r\n- Remove bailed out SSG routes from the list of SSG: #83861\r\n- Revert \"[Breaking] Skip Next.js internal routes `/_next` in middleware\": #84697\r\n- Bump eslint-plugin-react-hooks to v7: #84669\r\n- Add refresh API to next/cache: #84666\r\n- [Breaking] Require `images.localPatterns` for query in Image src: #84406\r\n- [Breaking] feat(next/image)!: add support for `images.dangerouslyAllowLocalIP` and `images.maximumRedirects`: #84676\r\n- Add new updateTag API and new signature for revalidateTag: #83822\r\n- Add validation for missing default.js in parallel routes: #84702\r\n- misc: allow beta to be triggered: #84713\r\n- Fix tags check for expired/stale: #84717\r\n- tweak middlewareClientMaxBodySize handling: #84712\r\n- docs: Add more details to `useLightningcss` docs: #84581\r\n- Version gate migration docs link: #84740\r\n- [Cache Components] Allow hiding logs after abort: #84579\r\n- Log `Compiled proxy in ...`: #84746\r\n- Upgrade React from `3025aa39-20251007` to `9724e3e6-20251008`: #84642\r\n- Remove unused `eslint-disable` directives: #84797\r\n- Use ESLint Flat Config: #84800\r\n- fix missing flight-router-state-tree header normalization: #84718\r\n- Write `.next/dev/types/**/*.d.ts` to default tsconfig: #84747\r\n- Upgrade React from `9724e3e6-20251008` to `ead92181-20251010`: #84793\r\n- [mcp] capture next config schema errors: #84832\r\n- feat: using @next/rspack-core: #84221\r\n- Upgrade React from `ead92181-20251010` to `d7215b49-20251013`: #84850\r\n- Turbopack build: Switch to using workerthreads for process: #84818\r\n- [Cache Components] Dev - restart render on cache miss: #84088\r\n- Update font data: #84785\r\n- Fix build compile mode if pages dir does not exist in Next.js 16: #84783\r\n- improve next config schema validation errors: #84847\r\n- Upgrade React from `d7215b49-20251013` to `56e84692-20251014`: #84860\r\n- warnOnce for Middleware deprecation: #84862\r\n- Add codemod for Middleware API to Proxy API: #84824\r\n- Deprecate Middleware API and add Proxy API: #84764\r\n- remove `clientParamParsing` configuration & bundle it with `cacheComponents`: #84763\r\n- remove dynamicIO flag: #84872\r\n- Bump eslint-plugin-react to 7.37.0: #84876\r\n- Add nextjs condition when cacheComponents is enabled: #84843\r\n- remove rdcForNavigations configuration & bundle with cacheComponents: #84870\r\n- Convert eslint-config-next project to TypeScript: #84839\r\n- [eslint-config] [Breaking] Use Flat config by default: #84874\r\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheLife`: #84877\r\n- fix: always use the safe stable stringify: #84909\r\n- [Cache Components] Fix cacheSignal in dev render: #84846\r\n- [dev-overlay] Never dedupe errors with different names or messages: #84908\r\n- Remove deprecated experimental_ppr route-level configuration: #84871\r\n- Include server latency in debug info: #84580\r\n- Fix parallel routes ignoring generateStaticParams from primary route: #84889\r\n- Revert \"Include server latency in debug info\": #84932\r\n- Development: Use process.hrtime for request time calculation: #84905\r\n- Use correct JSX runtime for library-owned JSX in React Server: #84869\r\n- Development: Implement request log time details: #84906\r\n- [Cache Components] Remove `unstable` prefix from `unstable_cacheTag`: #84880\r\n- [Cache Components] separate runtime stage in dev render: #84644\r\n- Reland \"Include server latency in debug info\": #84950\r\n- Update  codemod ESLint template to Flat config: #84919\r\n- Upgrade React from `56e84692-20251014` to `93f85932-20251016`: #84963\r\n- [dev] Fix Middleware and Proxy file conflict: #84965\r\n- stabilize experimental.enablePrerenderSourcemaps: #84916\r\n- Stop manually setting stacktrace limit: #84968\r\n- Turbopack: respect `--profile` CLI param: #84920\r\n- Relax default.tsx validation for parallel routes leaf segments: #84767\r\n- Add codemod for removing `unstable_` prefix: #84974\r\n- Interception routes match from nested route navigation: #84898\r\n- [Cache Components] Allow unstable prefix for cacheLife and cacheTag: #84934\r\n- Relax default.tsx validation for parallel routes leaf segments: #84767\r\n- Add codemod for removing `unstable_` prefix: #84974\r\n- Interception routes match from nested route navigation: #84898\r\n- [Cache Components] Allow unstable prefix for cacheLife and cacheTag: #84934\r\n- Add codemod for removing `experimental_ppr`: #84979\r\n- fix: throw error during build when invalid export for Proxy: #84886\r\n- [cache components]: prevent expired entries from being served: #84975\r\n- Delete old prefetch cache related code: #84977\r\n- docs: Deprecation of Middleware: #84710\r\n- Add rendered search to router state: #84983\r\n- [segment cache]: delay revalidation prefetch pings 300ms: #84981\r\n- Show relative path from cwd for Proxy Middleware file conflict error: #84993\r\n- [Cache Components] fix docs for cacheLife(\"seconds\"): #85004\r\n- Rename MiddlewareMatcher to ProxyMatcher: #85005\r\n- [Breaking] Rename instrumentation onRequestError `context.routeType` from `middleware` to `proxy`: #85006\r\n- [turbopack] Prevent accidental access to `.next`: #84714\r\n- fix: incorrect canonicalUrl set when using output: export: #85019\r\n- Add Activity name to route layouts and pages: #85011\r\n- Update next-lint-to-eslint-cli to support `FlatCompat.config`: #85026\r\n- [cache components]: move flag out of experimental: #85035\r\n- [Cache Components] When caches are disabled in dev skip the cache warmup: #85014\r\n- [Cache Components] Use canary React when only Cache Components is enabled: #85042\r\n- Turbopack: Remove unneeded warning for telemetry: #85039\r\n- [cache components] stabilize cacheLife profiles: #85050\r\n- [cache components] show when cache components is enabled in the CLI: #85047\r\n- [cache components]: show cache components enabled in DevTools: #85048\r\n- [Cache Components] correctly label IO promises in devtools: #84928\r\n- Plumbing for cache indicator: #84955\r\n- Upgrade React from `93f85932-20251016` to `1324e1bb-20251016`: #84999\r\n- enable mcp server by default: #85058\r\n- Add comment that we expect the function passed to bind to be anonymous: #85070\r\n- Development: Addres comments on request log PR: #84945\r\n- Development: Implement request time for Pages Router: #85012\r\n- [cache components] add cache components indicator to dev start: #85069\r\n- cli: build partial entries --debug-build-paths arg: #85052\r\n- Turbopack: Better error for sassOptions.functions as it's unsupported: #85073\r\n- Upgrade React from `58bdc0bb-20251019` to `f6a48828-20251019`: #85081\r\n- [devtools]: instrument client navigation hooks for suspense devtools: #85007\r\n- Remove Segment from CacheNodeSeedData: #85080\r\n- label as Prefetch/Prefetchable depending on prefetch config: #85076\r\n- [cache components]: add 'bypass' cache indicator status: #85082\r\n- Upgrade React from `f6a48828-20251019` to `2bcbf254-20251020`: #85112\r\n- [cache components]: guard against setCacheStatus since its conditionally defined: #85125\r\n- warn: add deprecation warning of eslint config: #85122\r\n- add new devtools indicator loading state: #85083\r\n- Await initial Flight response before hydrating: #85124\r\n- fix(experimental.lockDistDir): Acquire the lock in dev earlier: #85116\r\n- telemetry: mcp tool call: #85120\r\n- [Turbopack] dedupe build errors: #85062\r\n- Fix subtree layout alignment for route summary in `next build`: #85137\r\n- [codemod] Remove runtime config when running `middleware-to-proxy`: #85075\r\n- [turbopack] Improve the multiple bundler flags messge to note that perhaps your `package.json` is the problem: #85118\r\n- Add Learn more docs to Middleware deprecation warning: #84711\r\n- [BF Cache]: skip lazyData fetch logic for inactive segments: #85142\r\n- Pass `startTime` to initial RSC payload stream: #85144\r\n- guard navigation `use` hooks for React 18: #85151\r\n- [turbopack] Don't warn on the lightning css experimental option: #84913\r\n- Turbopack: Remove redundant log line, increase delay for compiling log message: #85133\r\n- Make params and searchParams new Promises: #85158\r\n- Name \"cache\" streams for React DevTools: #85159\r\n- Use cacheMaxMemorySize config in default cache handler: #85153\r\n- Omit params to from client segments: #84883\r\n- enable experimental.routerBfCache behind cacheComponents: #84923\r\n- [Cache Components] Allow stale longer than expire in cacheLife: #85115\r\n- Update Activity names given to routes: #85155\r\n- use port zero for --inspect when forking, if used by parent: #85128\r\n- Update blocking prerender error message: #85087\r\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\r\n- Update routes generation for build-complete: #85017\r\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\r\n- Don't assign displayName to the internal Promises: #85178\r\n- Assign name to hydration stream: #85179\r\n- fix: add backwards compat for middleware → proxy field renames: #85183\r\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\r\n- Improve Proxy invalid export error message: #84887\r\n- Fix Activity boundary names: #85185\r\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\r\n- [upgrade] Version gate adding `--turbopack` flag: #85180\r\n- Tweaks to blocking route error message: #85191\r\n- Remove layout-router sticky/fixed debug warning: #85193\r\n- [cache components] persist cache bypass UI until it's disabled: #85190\r\n- Only allow node runtime in proxy: #85139\r\n- logger: skip logging full element: #85194\r\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\r\n- Update routes generation for build-complete: #85017\r\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\r\n- Don't assign displayName to the internal Promises: #85178\r\n- Assign name to hydration stream: #85179\r\n- fix: add backwards compat for middleware → proxy field renames: #85183\r\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\r\n- Improve Proxy invalid export error message: #84887\r\n- Fix Activity boundary names: #85185\r\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\r\n- [upgrade] Version gate adding `--turbopack` flag: #85180\r\n- Tweaks to blocking route error message: #85191\r\n- Remove layout-router sticky/fixed debug warning: #85193\r\n- [cache components] persist cache bypass UI until it's disabled: #85190\r\n- Only allow node runtime in proxy: #85139\r\n- logger: skip logging full element: #85194\r\n\r\n### Example Changes\r\n\r\n- docs: Convert relative imports to @ aliases in examples: #83813\r\n- chore: add example with oxlint: #83842\r\n- fix: correct typo 'incomming' to 'incoming' in with-mqtt-js example: #83887\r\n- chore: improve oxlint example: #83898\r\n- docs: update Dockerfile to use node:lts-alpine instead of node:18-alpine: #84229\r\n- Use Array.from to avoid @ts-ignore when copying i18n.locales: #82148\r\n- examples: Remove AMP example: #84355\r\n- [docs] fix(with-supabase): Update README env variables: #84745\r\n\r\n### Misc Changes\r\n\r\n- Turbopack: remove `css_environment` from `Environment`: #83487\r\n- Turbopack: Don't add client_runtime_entries to Route Handler compilation: #83655\r\n- Turbopack: Only load capsize-font-metrics once: #83654\r\n- [CI] Fix GitHub Actions matrix configuration for React versions: #83677\r\n- fix(Turbopack): Enable scope hoisting for large files or module counts: #83399\r\n- [turbopack] Lazily construct `resolved::Requests` for `EsmAssetReference`: #83662\r\n- Update content-security-policy.mdx, fix development environment error: #83665\r\n- tests: disable flaky deployment test while investigating upstream: #83705\r\n- [test] Update snapshots for Rspack + React 18: #83712\r\n- Docs/sep paper cuts: #83689\r\n- [Turbopack] Remove `ssr-data` module context: #83626\r\n- CI: use KV for test timing data: #83745\r\n- Emit build error when `'use cache'` directive is misspelled: #83756\r\n- docs(metadata): align default function export name with file name: #83796\r\n- [turbopack] Remove the `should_track_children` parameter of the turbo tasks backend: #83258\r\n- docs(data-security): add bun package manager example: #83735\r\n- Update next-intlayer reference in i18n doc: #83761\r\n- Update Rspack production test manifest: #83790\r\n- Update Rspack development test manifest: #83791\r\n- Turbopack: chunking debugging utilities: #83801\r\n- Removed link to maintain text consistency: #83644\r\n- Turbopack: rename some fields in fs: #83808\r\n- Turbopack: validate CSS without computing all paths: #83810\r\n- [test] Disable flaky navigation test: #83828\r\n- docs: Type narrowing using LayoutProps, PageProps: #83692\r\n- docs: implications of mutating cookies in server actions: #83691\r\n- Only retry if canary fails on required jobs: #83851\r\n- docs: Fix self-referential link to Middleware in middleware.mdx: #83854\r\n- Update Rspack production test manifest: #83826\r\n- Update generate-metadata.mdx: #81853\r\n- Turbopack: remove lazy invalidated tasks: #83845\r\n- Turbopack: remove Backend TaskState: #83846\r\n- Turbopack: don't recompute empty parse results: #83883\r\n- Turbopack: delete broken hmr benchmark: #83882\r\n- Turbopack: only generate error string in error case: #83884\r\n- docs: the as prop is still available in Pages Router: #83864\r\n- Turbopack: map_module_batch: #83885\r\n- Turbopack: Change run once signature to avoid exposing TaskId: #83844\r\n- docs: Update command to use `npx` for tracing files: #83903\r\n- Turbopack: ModuleGraphRef: #83890\r\n- Update Rspack development test manifest: #83876\r\n- Turbopack: make graph traversal sync: #83891\r\n- chore: Fix test snapshot: #83901\r\n- Update Rspack production test manifest: #83877\r\n- docs: add `next.config.ts` Node.js native resolver: #83561\r\n- Turbopack: add turbo_tasks::run to run in turbo tasks scope without a task: #83847\r\n- Turbopack: fix double codegen of some merged modules: #83886\r\n- Turbopack: add traces to merged module computation: #83908\r\n- Turbopack: RuleCondition support resourceQuery contains: #83468\r\n- fix: add the missing comma in the document example: #83932\r\n- Turbopack: Document the reasons for the current design of `parse_segment_config_from_source`: #83919\r\n- Turbopack: extract parse_source_map_comment: #83938\r\n- Turbopack: enable nodelay for node.js pool socket: #83942\r\n- feat: next-rspack-binding: #82811\r\n- Only send notification if canary fails on required jobs: #83953\r\n- Turbopack: allow to read State from turbo_tasks::run: #83955\r\n- Fix conclusion check for retry_test workflow: #83960\r\n- Add Descope to Auth libraries list: #83968\r\n- [turbopack] Track task durations in the task_statistics file: #83522\r\n- [turbopack] Remove the `issue_path` feature and related functionality: #83920\r\n- Turbopack: use turbo_tasks::run in next.js to avoid task memory leak: #83848\r\n- Update Rspack production test manifest: #83934\r\n- Update Rspack development test manifest: #83933\r\n- Turbopack: add test case that checks memory leak: #83849\r\n- Turbopack: read project strongly consistent in project_update: #83974\r\n- Fix output comparison when checking conclusion of required jobs: #83986\r\n- Turbopack: JsAnalyzer parse AssignExpr: #83962\r\n- Turbopack: less eager manifest generation: #83736\r\n- Turbopack: use depth as priority for merged module info: #83909\r\n- Turbopack: \"connect\" tasks in turbo_tasks::run too: #83975\r\n- Update Rspack production test manifest: #83979\r\n- Update Rspack development test manifest: #83980\r\n- Turbopack: Make transient tasks root tasks too when called in turbo_tasks::run: #83976\r\n- Turbopack: trace state changes: #83977\r\n- [turbopack] cleanup analyzer: #83983\r\n- [Turbopack] Fix AST traversal for `this` in function default parameters: #83746\r\n- [turbopack] Consolodate logic for visiting functions to simplify state management: #82763\r\n- [turbopack] Track the scope in which variables are assigned: #82845\r\n- [turbopack] Set `liveness` of exports based on assignment analysis: #82802\r\n- Turbopack: trace all state changes: #84053\r\n- docs: We have dropped the CORS example linked: #84065\r\n- docs: add pageExtensions note to Middleware and clarify default filename: #84045\r\n- Fix TypeScript type error in example code: #84041\r\n- Turbopack: fix test case and update project_update to turbo_tasks::run too: #83978\r\n- Turbopack: run tests with multiple threads: #84074\r\n- Turbopack: flush Node.js worker IPC on error: #84077\r\n- Turbopack: parallelize scope hoisting computation: #83904\r\n- Add test for JS resource size on navigation: #83731\r\n- Update Rspack development test manifest: #84061\r\n- Update Rspack production test manifest: #84060\r\n- Turbopack: Document automatic Babel config support: #84002\r\n- docs: Fix the title/path of the turbopack page on pages router: #84001\r\n- Turbopack: remove references from ChunkData: #84076\r\n- Turbopack: include availability hash in the ident of evaluated chunks groups: #84082\r\n- [turbopack] s/analyse/analyze/g: #84112\r\n- [Turbopack] avoid attaching referenced output assets to chunks: #75933\r\n- fix(docs): Fix links in UPGRADING.md: #84114\r\n- docs: improve dynamic routes example in project structure page: #84086\r\n- docs: onRequestError request header type: #83988\r\n- Turbopack: Improve persistent caching test case: #83205\r\n- Turbopack: add more details to the graph panic: #84126\r\n- docs: Cookies store access is async: #83987\r\n- Bump Rust to nightly-2025-09-21: #83415\r\n- Upgrade CodSpeed action and add analyzer benchmarks: #84135\r\n- Turbopack: fix run_once when returning error: #84142\r\n- [turbopack] Conditionally collect affecting sources: #83921\r\n- Turbopack: slightly improve resolve_source_map_sources: #84147\r\n- Turbopack: RawEcmascriptModule: #81806\r\n- Turbopack: add more details to the graph panic: #84143\r\n- test: split app-middleware test per describe: #84130\r\n- Update Rspack development test manifest: #84117\r\n- script: improve release log generation: #83686\r\n- Turbopack: split task_execution_completed into multiple methods: #84170\r\n- Turbopack: only generate field if spans are enabled: #84184\r\n- Turbopack: support more dynamic request with import map: #84178\r\n- [turbopack] defer a `value_to_string` operation until we need it: #84188\r\n- Update Rspack production test manifest: #84165\r\n- Revert \"[turbopack] Set `liveness` of exports based on assignment ana…: #84207\r\n- Turbopack: increase retry duration, reduce busy looping when there is other work: #84171\r\n- Turbopack: Try to avoid block_in_place in scope: #84172\r\n- [turbopack] Remove some bitmap clones: #84193\r\n- Turbopack: lazier manifests, part deux: #84191\r\n- Turbopack: avoid panic on updating output when a task was cancelled: #84214\r\n- docs: nav_title for long unbroken words: #84233\r\n- Turbopack: Use `RawValue` for `mappings` inside `SourceMapJson`: #84208\r\n- Update Rspack development test manifest: #84218\r\n- Turbopack: fix NFT of readFileSync of relative path: #84155\r\n- Turbopack: improve references benchmark: #84223\r\n- Update Rspack production test manifest: #84217\r\n- Turbopack: drop ASTs when only tracing: #84185\r\n- docs: Include more detailed instructions on excluding from common AV solutions, including macOS Gatekeeper: #84206\r\n- Turbopack: trace fs-extra calls: #84246\r\n- [test] Overhaul `Undefined default export` test suite: #84235\r\n- Turbopack: Scope with work queue: #84225\r\n- [test] Make `Undefined default export` an e2e test suite: #84240\r\n- [turbopack] Conditionally create pages router data endpoints.: #84194\r\n- Turbopack: parallel connect children: #84173\r\n- Turbopack: count turbo_tasks::run as foreground tasks to avoid being idle: #84245\r\n- Turbopack: make persistent caching log line more clear: #84262\r\n- Turbopack: make tracing nicer: #84263\r\n- docs:Small improvement on the contribution guide for clarity: #84200\r\n- Turbopack: Remove not-very-useful \"Finished writing to disk in\" log line: #84244\r\n- Turbopack: follow up changes from parallel children: #84219\r\n- [turbopack] Simplify take_issues and peek issues: #84199\r\n- Update Rspack development test manifest: #84260\r\n- Update Rspack production test manifest: #84259\r\n- Turbopack: Scope with work queue: #84225\r\n- [test] Make `Undefined default export` an e2e test suite: #84240\r\n- [turbopack] Conditionally create pages router data endpoints.: #84194\r\n- Turbopack: parallel connect children: #84173\r\n- Turbopack: count turbo_tasks::run as foreground tasks to avoid being idle: #84245\r\n- Turbopack: make persistent caching log line more clear: #84262\r\n- Turbopack: make tracing nicer: #84263\r\n- docs:Small improvement on the contribution guide for clarity: #84200\r\n- Turbopack: Remove not-very-useful \"Finished writing to disk in\" log line: #84244\r\n- Turbopack: follow up changes from parallel children: #84219\r\n- [turbopack] Simplify take_issues and peek issues: #84199\r\n- Update Rspack development test manifest: #84260\r\n- Update Rspack production test manifest: #84259\r\n- [test] Ignore pnpm update notifier: #84328\r\n- [test] Stop downloading unused test browsers when generating PR stats: #84329\r\n- docs: remove repeated to: #84325\r\n- Turbopack: Use more robust logic for absolute and percent-encoded URLs in source maps received from loaders: #84255\r\n- Turbopack: only replace edge dynamic calls in dev: #84354\r\n- [turbopack] Remove a bunch of dead code from the source map implementation: #84318\r\n- Turbopack: prevent duplicate NFT modules: #84369\r\n- docs: Remove AMP docs: #84357\r\n- docs: Type helpers don't need to be imported: #84265\r\n- Turbopack: Add docs for debugIds option: #84375\r\n- Remove references to size metrics in next build from our docs: #83823\r\n- Bump to swc v42: #83477\r\n- Turbopack: skip invalidating a task on cell/output change when the dependency is outdated: #84376\r\n- Turbopack: trace module.createRequire: #84335\r\n- Update failing e2e deploy tests: #84395\r\n- Turbopack: Webpack loader `this.fs.readFile`: #83313\r\n- Improve tests: #84374\r\n- Revamp Next.js boilerplate: #81945\r\n- Add test for twoslash: #84267\r\n- Docs/project structure polish: #84386\r\n- Bump to swc v44: #84420\r\n- Turbopack: don't fail for parse errors in tracing: #84408\r\n- Update Rspack development test manifest: #84365\r\n- Update Rspack production test manifest: #84366\r\n- [ci]: remove PPR-specific CI jobs: #84439\r\n- docs: Verbose troubleshooting for unconfigured hosts: #84271\r\n- Update Rspack production test manifest: #84398\r\n- Add gt-next to i18n list: #84396\r\n- [ci]: fix build-output-prerender to support segment cache env: #84467\r\n- [ci]: fix app-static snapshots with clientSegmentCache: #84468\r\n- Turbopack: Only benchmark file IO on `next dev`: #84474\r\n- Turbopack: improve incremental build performance when deployment id changes: #84460\r\n- fix: Missing link in Lazy Loading docs: #84473\r\n- docs: simplify streaming metadata: #84253\r\n- make withRspack idempotent: #84482\r\n- Turbopack: Use strongly consistent reads in `random_change` unit test: #84505\r\n- Update Rspack development test manifest: #84480\r\n- Update Rspack production test manifest: #84481\r\n- [ci]: remove test from segment cache manifest: #84507\r\n- [ci]: de-flake client cache test: #84517\r\n- Revert \"Turbopack: skip invalidating a task on cell/output change when the dependency is outdated\": #84526\r\n- next mcp router\r\n- Revert \"next mcp router\"\r\n- test: Use nextTestSetup in scss tests: #84501\r\n- [turbopack[ Use the configured hasher to implementh Hash for AutoMap and AutoSet: #84542\r\n- Turbopack: debug ids for server chunks: #84557\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-unit`: #84559\r\n- [test]: convert prefetching tests to be segmentCache compatible: #84521\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-prod`: #84556\r\n- Add `.next/dev/types` to CNA templates tsconfig include: #84566\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-integration`: #84558\r\n- Update Rspack development test manifest: #84548\r\n- Add a webpack flag to create next app.  Ensure that if you set it or decline turbopack we set the --webpack flag on the generated project: #84476\r\n- Update Rspack production test manifest: #84549\r\n- CI: Enable `experimental.isolatedDevBuild` for `test-dev`: #84562\r\n- [test] Unflake static image test: #84535\r\n- Turbopack: Lower the IO concurrency limit in CI tests: #84508\r\n- Add documentation for experimental adapters handling: #83737\r\n- Turbopack: improve next/dynamic eventual consistentcy: #84560\r\n- fix hidden errors in router-act: #84603\r\n- fix(cna): use correct postcss plugins syntax: #79949\r\n- Turbopack: absolute requests in webpack loader: #84575\r\n- Update Rspack development test manifest: #84592\r\n- Update Rspack production test manifest: #84593\r\n- Turbopack: Remove workaround in hyper for rustc miscompilation bug on macos intel: #84578\r\n- Turbopack: add manual worker count override: #84454\r\n- Turbopack: don't ignore TS parse errors: #84597\r\n- Add middleware to routes order doc: #84618\r\n- [create-next-app]: prompt to use recommended options: #84570\r\n- Update labeler: #84623\r\n- Turbopack: use mmap advise to help the OS preloading: #84379\r\n- Turbopack: skip invalidating a task on cell/output change when the dependency is outdated: #84551\r\n- Turbopack: follow-up changes from untracked tracing: #84629\r\n- Turbopack: sourcemaps for JSON modules: #84611\r\n- Turbopack: avoid race condition when updating cells: #84598\r\n- docs: update core documentation for Turbopack as default bundler: #84282\r\n- Update Rspack development test manifest: #84631\r\n- [turbopack] Only send the filesystem caching timing messages for slow events: #84646\r\n- docs: `experimental.isolatedDevBuild`: #84656\r\n- docs: add note clarifying project root in monorepo: #84628\r\n- Fix flakey overlay feedback test: #84662\r\n- [ci]: update flake detection to only run in Turbopack: #84659\r\n- [ci]: move router-act to top level testing utils: #84653\r\n- [tests]: de-flake client-cache.parallel-routes.test.ts: #84655\r\n- [create-next-app]: add eslint to default template: #84661\r\n- Update Rspack production test manifest: #84630\r\n- [test] Assert on stable error codes: #84671\r\n- Turbopack: convert HashMap to IndexMap for deterministic tasks: #84641\r\n- Add note about $ACTION_ properties, remove reference to .entries(): #84459\r\n- Fix typo on welcome page: #84715\r\n- Rspack: Fix lockfile test on rspack: #84707\r\n- [turbopack] Emit a warning when there are too many matches from a FileSourceReference: #84701\r\n- Update beta tag: #84725\r\n- [next-codemod] fix: Set codemod version to the first introduced version: #84726\r\n- [next-upgrade] misc: update comment: #84727\r\n- Turbopack: use vector instead of hash map: #84696\r\n- Revert \"docs: nav_title for long unbroken words (#84233)\": #84346\r\n- [turbopack] tweak the doc on the inner graph optimization: #84752\r\n- [turbopack] Fix a few references to caching configuration as it is no longer canary guarded: #84761\r\n- Add 16.0.0-beta.0 to next/third-parties peerDeps: #84741\r\n- [eslint-plugin] Remove `eslint-v8` testing: #84721\r\n- Update Rspack production test manifest: #84729\r\n- Update Rspack development test manifest: #84730\r\n- fix: release next-rspack ci: #84673\r\n- [cna] Preserve existing config option when enabling React Compiler: #84663\r\n- Prevent failing `types-and-precompiled` from corrupting terminal output: #84799\r\n- Update test/CNA templates React version to 19.2.0: #84736\r\n- Turbopack: use the same serialization method for lookup as for storing: #84765\r\n- Turbopack: update petgraph: #84757\r\n- [turbopack] Issue 'too many matches' warning for DirAssets also: #84768\r\n- Revert \"Fix flakey overlay feedback test\": #84819\r\n- [test]: de-flake client-cache.original.test.ts: #84831\r\n- [ci]: set NEXT_TEST_VERSION to release tag for deploy tests: #84840\r\n- docs: soft 404's, Suspense and loading.tsx: #83867\r\n- [turbopack] Discuss Core Web vitals in our bundle size gap docs: #84837\r\n- [turbopack] document missing webpack loader features: #84849\r\n- [turbopack] fix typo in docs: #84868\r\n- [turbopack] Remove the implementation of `TaskInput` from `AutoSet`: #84867\r\n- Update turborepo env in workflows: #84879\r\n- Turbopack: take task cache log before starting snapshot: #84755\r\n- Turbopack: allow gzip compression on trace files: #84685\r\n- Turbopack: process task result as part of the task completion: #84638\r\n- Add test for eslint-config-next: #84838\r\n- Turbopack: lower level drop collectibles: #84895\r\n- docs: next/dynamic headings: #84492\r\n- Turbopack: expose client static assets correctly: #84695\r\n- Turbopack: better errors for strip_prefix_len: #84882\r\n- Turbopack: improve missing factory message: #84881\r\n- CNA: Update template to use ESLint Flat config: #84917\r\n- fix: process.env.TURBOPACK maybe undefined: #84885\r\n- Turbopack: fix spacing on EcmascriptModuleAssetType: #84915\r\n- Update Rspack development test manifest: #84890\r\n- Update Rspack production test manifest: #84891\r\n- Fix url-imports test: #84922\r\n- Turbopack: fix pageExtensions precedence: #84926\r\n- Turbopack: fix client reference order for shared references: #84760\r\n- Turbopack: turn panic into bail: #84927\r\n- Docs/sync with new features 0: #84861\r\n- Turbopack: transpile runtime with swc: #84931\r\n- docs: x-nextjs-stale-time header: #84901\r\n- docs: Templates on navigation: #84493\r\n- Docs/sync with new features 0: #84861\r\n- Turbopack: transpile runtime with swc: #84931\r\n- docs: x-nextjs-stale-time header: #84901\r\n- docs: Templates on navigation: #84493\r\n- chore: Attempt to fix ppr-partial-hydration flakiness: #84672\r\n- Update Rspack production test manifest: #84939\r\n- Turbopack: rename Persistent Caching: #84896\r\n- Turbopack: Add ChunkedVec test case: #84756\r\n- docs: Add missing codemod docs: #84980\r\n- Update prefetching.mdx providing more clarity on the usage of `router.prefetch()`: #84903\r\n- docs: getting started installation and next lint removal: #84781\r\n- docs: Split \"Get Started: Route Handlers and Middleware\" to Route Handlers and Proxy: #84708\r\n- docs: Replace Middleware docs to Proxy: #84709\r\n- chore: Remove redundant copy of rust reqwest crate: #84982\r\n- [turbopack] Allow withRspack to work even if you already have NEXT_RSPACK set: #84987\r\n- Turbopack: Track errored tasks as dependency when using untracked(): #84914\r\n- Turbopack: shard amount need to grow quadratic to cpu count to keep propability of conflicts constant: #84921\r\n- Turbopack: fix race condition when adding dependencies: #84946\r\n- Turbopack: make tracing warning not fail build: #85032\r\n- [ci]: increase number of runners for test jobs: #85049\r\n- add a message about Turbopack tracing: #85044\r\n- Turbopack: Implement next/font/local declarations option: #85051\r\n- docs: experimentalClientMaxBodySize: #85105\r\n- Docs: Add `--debug-build-paths` next build option: #85097\r\n- Docs: Add note on tag limits for `cacheTag`: #85106\r\n- docs: no switcher for TS only examples: #85109\r\n- fix: Handle non-directory files in cache folder when performing cleanup: #84930\r\n- Turbopack: Suggest using system certs when a TLS error occurs: #85009\r\n- [turbopack] Try to fix v8 crashes on github actions: #85114\r\n- docs: Update to Zod v4 syntax: #84807\r\n- Docs: Add version history for `next lint` deprecation and update error message: #85100\r\n- Turbopack: improve module evaluation name: #84633\r\n- [test] Current behavior of dynamic APIs integration with React DevTools: #85111\r\n- [Cache Components] fix env labels in perf track test: #85132\r\n- Turbopack: Disable LightningCSS MediaRangeSyntax feature: #85086\r\n- Don't expliclitly set the `--turbopack` flag in Create Next App, it is no longer necessary: #85117\r\n- [turbopack] Remove the canary icon from the cache components docs: #85149\r\n- Bump swc to v45: #85143\r\n- [test] Fix test-dev with --projects: #85167\r\n- [test] Update snapshots: #85171\r\n- docs: mcp: #85010\r\n- Docs: Explain Sass tilde import difference: #85041\r\n- Turbopack: don't fail on export type in use server: #85054\r\n- Turbopack: speedup module merging: #85043\r\n- docs: remove experimental_ppr route segment config: #85188\r\n- Rename \"blocking route\" error docs page: #85189\r\n- docs: upgrade from 15 to 16: #85176\r\n- Docs: Explain Sass tilde import difference: #85041\r\n- Turbopack: don't fail on export type in use server: #85054\r\n- Turbopack: speedup module merging: #85043\r\n- docs: remove experimental_ppr route segment config: #85188\r\n- Rename \"blocking route\" error docs page: #85189\r\n- docs: upgrade from 15 to 16: #85176\r\n\r\n### Credits\r\n\r\nHuge thanks to @mischnic, @timneutkens, @unstubbable, @wyattjoh, @Cy-Tek, @lukesandberg, @OoMNoO, @ztanner, @icyJoseph, @huozhi, @gnoff, @ijjk, @povilasv, @dwrth, @obendev, @aymericzip, @devjiwonchoi, @SyMind, @vercel-release-bot, @Shireee, @eps1lon, @dharun36, @kachkaev, @bgw, @yousefdawood7, @TheAlexLichter, @sokra, @ericx0099, @leerob, @Copilot, @fireairforce, @fufuShih, @anvibanga, @hayes, @Milancen123, @martinfrancois, @lubieowoce, @gaojude, @lachlanjc, @liketiger, @styfle, @aaronbrown-vercel, @Samii2383, @FelipeChicaiza, @kevva, @m1abdullahh, @F7b5, @Anshuman71, @RobertFent, @poteto, @chloe-yan, @sireesha-siri, @brian-lou, @joao4xz, @stefanprobst, @samselikoff, @acdlite, @gwkline, @bgub, @brock-statsig, @karlhorky, @feedthejim, @CarloQuick, @greguintow, @hallucinogenizer, @sebmarkbage, @delbaoliveira, @makandrr, @seeplusplus, and @serhalp for helping!"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.18",
    "date": "2025-10-21T23:44:31.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.18",
    "content": "### Core Changes\n\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\n- Update routes generation for build-complete: #85017\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\n- Don't assign displayName to the internal Promises: #85178\n- Assign name to hydration stream: #85179\n- fix: add backwards compat for middleware → proxy field renames: #85183\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\n- Improve Proxy invalid export error message: #84887\n- Fix Activity boundary names: #85185\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\n- [upgrade] Version gate adding `--turbopack` flag: #85180\n- Tweaks to blocking route error message: #85191\n- Remove layout-router sticky/fixed debug warning: #85193\n- [cache components] persist cache bypass UI until it's disabled: #85190\n- Only allow node runtime in proxy: #85139\n- logger: skip logging full element: #85194\n\n### Misc Changes\n\n- Docs: Explain Sass tilde import difference: #85041\n- Turbopack: don't fail on export type in use server: #85054\n- Turbopack: speedup module merging: #85043\n- docs: remove experimental_ppr route segment config: #85188\n- Rename \"blocking route\" error docs page: #85189\n- docs: upgrade from 15 to 16: #85176\n\n### Credits \n\nHuge thanks to @timneutkens, @gaojude, @ijjk, @ztanner, @sebmarkbage, @mischnic, @icyJoseph, @acdlite, @serhalp, @lukesandberg, @devjiwonchoi, and @huozhi for helping!\n"
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.19",
    "date": "2025-10-21T23:39:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.19",
    "content": "### Core Changes\n\n- Fix: CSS asset URLs broken with `experimental.inlineCss`: #85140\n- Update routes generation for build-complete: #85017\n- [cache components] move experimental.cacheHandlers out of experimental: #85157\n- Don't assign displayName to the internal Promises: #85178\n- Assign name to hydration stream: #85179\n- fix: add backwards compat for middleware → proxy field renames: #85183\n- [turbopack] Implement improved deobfuscation for free calls and module identifiers.: #85060\n- Improve Proxy invalid export error message: #84887\n- Fix Activity boundary names: #85185\n- [codemod] Install ESLint v9 if version under for next-lint-to-eslint-cli: #85182\n- [upgrade] Version gate adding `--turbopack` flag: #85180\n- Tweaks to blocking route error message: #85191\n- Remove layout-router sticky/fixed debug warning: #85193\n- [cache components] persist cache bypass UI until it's disabled: #85190\n- Only allow node runtime in proxy: #85139\n- logger: skip logging full element: #85194\n\n### Misc Changes\n\n- Docs: Explain Sass tilde import difference: #85041\n- Turbopack: don't fail on export type in use server: #85054\n- Turbopack: speedup module merging: #85043\n- docs: remove experimental_ppr route segment config: #85188\n- Rename \"blocking route\" error docs page: #85189\n- docs: upgrade from 15 to 16: #85176\n\n### Credits \n\nHuge thanks to @timneutkens, @gaojude, @ijjk, @ztanner, @sebmarkbage, @mischnic, @icyJoseph, @acdlite, @serhalp, @lukesandberg, @devjiwonchoi, and @huozhi for helping!\n"
  },
  {
    "title": "Claude Skills × GitHub Actions でバグ修正の自動化を試す！",
    "date": "2025-10-21T23:08:25.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kis9a/articles/claude-skills-pr-auto-fix",
    "content": "\n はじめに\n2025年10月、Anthropic から立て続けに2つの発表がありました。\n\n\n10月16日: Agent Skills - AIが自律的に使える「スキル」の仕組み\n\n10月20日: Claude Code on the web - ブラウザでコーディングエージェントを動かせる WebUI\n\n正直なところ、最初は「また新しい機能か」程度の印象でした。しかし、公式ドキュメントやコミュニティの反応を調べていくうちに、これが単なる機能追加ではないことに気づきました。\n特に興味を引かれたのは、 「Claude Skills がユーザーからの要求とスキルの説明に基づいて自律的に使用..."
  },
  {
    "title": "vercel/next.js – v16.0.0-canary.17",
    "date": "2025-10-21T16:38:00.000Z",
    "source": "GitHub",
    "url": "https://github.com/vercel/next.js/releases/tag/v16.0.0-canary.17",
    "content": "### Core Changes\n\n- Fix subtree layout alignment for route summary in `next build`: #85137\n- [codemod] Remove runtime config when running `middleware-to-proxy`: #85075\n- [turbopack] Improve the multiple bundler flags messge to note that perhaps your `package.json` is the problem: #85118\n- Add Learn more docs to Middleware deprecation warning: #84711\n- [BF Cache]: skip lazyData fetch logic for inactive segments: #85142\n- Pass `startTime` to initial RSC payload stream: #85144\n- guard navigation `use` hooks for React 18: #85151\n- [turbopack] Don't warn on the lightning css experimental option: #84913\n- Turbopack: Remove redundant log line, increase delay for compiling log message: #85133\n- Make params and searchParams new Promises: #85158\n- Name \"cache\" streams for React DevTools: #85159\n- Use cacheMaxMemorySize config in default cache handler: #85153\n- Omit params to from client segments: #84883\n- enable experimental.routerBfCache behind cacheComponents: #84923\n- [Cache Components] Allow stale longer than expire in cacheLife: #85115\n- Update Activity names given to routes: #85155\n- use port zero for --inspect when forking, if used by parent: #85128\n- Update blocking prerender error message: #85087\n\n### Misc Changes\n\n- Turbopack: Disable LightningCSS MediaRangeSyntax feature: #85086\n- Don't expliclitly set the `--turbopack` flag in Create Next App, it is no longer necessary: #85117\n- [turbopack] Remove the canary icon from the cache components docs: #85149\n- Bump swc to v45: #85143\n- [test] Fix test-dev with --projects: #85167\n- [test] Update snapshots: #85171\n- docs: mcp: #85010\n\n### Credits \n\nHuge thanks to @eps1lon, @devjiwonchoi, @lukesandberg, @timneutkens, @ztanner, @acdlite, @mischnic, @bgw, @sebmarkbage, @wyattjoh, @gnoff, @huozhi, and @seeplusplus for helping!\n"
  },
  {
    "title": "†二分探索†で怠惰なカーソル移動をしよう",
    "date": "2025-10-21T15:00:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/kamecha/articles/de680018133636",
    "content": "\n まえがき\nvim のカーソル移動…面倒臭いですよね…\n特に縦移動\nこれを補助するプラグイン等はあるのですが、ラベルを付けてそれを認知する必要があったりと、なかなかしっくり来るものが無い印象です\nそれもそのはずで、大体のものは明確な行き先があり、それに対して最小のキー数で移動する事を目標としてるんですよね\n自分の場合はそういうのではなくて、\nざっくりこの辺りに移動したいなぁ〜ってのがあって、そこへ大雑把に移動してから微調整みたいな感じなのが多いです\nマクロとか繰り返しを意識した場合ならまだしも通常時のカーソル移動なんぞ適当でいいし、脳のリソースを使いたくないぜ！のお気持ちです。\n特に文..."
  },
  {
    "title": "Claude Code Web版 - スマホで指示、帰宅後に完成する開発の未来",
    "date": "2025-10-21T10:27:55.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/lnest_knowledge/articles/9629c5083357aa",
    "content": "\n Claude Code Web版 - スマホで指示、帰宅後に完成する開発の未来\n\n はじめに\n2025年10月20日、Anthropicが「Claude Code Web版」をリリースしました。これまでターミナルでのみ利用可能だったClaude Codeが、ついにブラウザから直接使える時代が来たのです。\n筆者は、このweb版を使ってQ-Learningの迷路問題をStreamlitで実装してみました。開発スタイルが大きく変わる可能性を感じる一方で、いくつかの制限や課題も見えてきました。\nこの記事では、実装を通じて感じたClaude Code Web版の実用性、メリット・デメリット、そ..."
  },
  {
    "title": "あなたは5年後必要な人材ですか？",
    "date": "2025-10-21T06:36:45.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/coconala/articles/c33e04818367b5",
    "content": "\n はじめに\nはじめまして、hibikiです。株式会社ココナラでプロダクト開発のエンジニアとして働いており、今年で新卒3年目になります。\n直近では、開発エディタ「Cursor」の全社導入や「Claude Code」の活用推進といった、AIで開発組織全体の生産性を向上させる取り組みを担当しています。\nこうしたAI推進の業務に携わる中で、「AIを中心とした世界で、エンジニアとしての自分の価値、人材としてのポジショニングはどうあるべきか」を深く考えるようになりました。\nそんな問題意識を抱えていたタイミングで、すてぃおさんのClaude Code時代のソフトウェアエンジニア生存戦略という記事を拝..."
  },
  {
    "title": "最新のNext.js15 / React19における実践的な設計方針とベストプラクティスを体系的にまとめました",
    "date": "2025-10-21T02:50:20.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/assign/articles/482e93693773e5",
    "content": "\n はじめに\nNext.js 15とReact 19が登場し、App Routerを中心とした新しい開発体験が標準となってきました。Server ComponentとClient Componentを意識したコンポーネント設計、データハンドリング、状態管理、キャッシュ戦略など、実務で求められる設計判断は多岐にわたります。\n筆者は、2023年7月のApp Routerリリース直後から現在まで、約2年に渡りNext.js（v13~15）を使った開発に携わってきました。 実際にApp Routerを使った開発では、情報が少ない中で様々な課題に直面し、最初に挙げたような複数観点での設計や実装判断..."
  },
  {
    "title": "uv × DockerでのPython開発環境構築方法",
    "date": "2025-10-21T02:50:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/mkj/articles/3aaa36d6f35c08",
    "content": "松尾研究所では、Python開発における標準ツールとしてuvを推奨しています。uvはPythonのパッケージ管理ツールで、依存関係の管理や仮想環境の構築を自動化し、高速で再現性のある開発を可能にすることが特長です。\nPythonパッケージだけでなく、Node.jsやブラウザ周りのツールなど他の依存も扱うときには、uvとDockerを併用するケースもあるかと思います。Dockerのコンテナ上でuvを使用する方法について社内で話題になったとき、調べたところいくつか方法があることが分かったので、それぞれの方法の違いと松尾研究所推奨の環境構築方法についてまとめました。\n!\n本記事では、uv、Do..."
  },
  {
    "title": "Next.js 15 / React 19 実践設計ガイド 実装観点別のベストプラクティス",
    "date": "2025-10-21T02:44:31.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/k_mori/books/24320553af0956",
    "content": "Next.js 15とReact 19を使用したWebアプリケーション開発における、実践的な設計方針とベストプラクティスをまとめたガイドを作成しました。\n\n本書では、Next.js 15 / React 19を活用したモダンなWebアプリケーション開発における設計方針を、実装観点ごとに整理しています。App Routerを前提とし、ディレクトリ構成、コンポーネント設計、データ取得、データ更新、状態管理、キャッシュ戦略、エラーハンドリングといった各テーマについて、具体的なユースケースと実装手段を紹介します。"
  },
  {
    "title": "0からフロントエンドにテストを導入した話",
    "date": "2025-10-21T01:07:58.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/eversteel_tech/articles/c510e3f036b2bf",
    "content": "こんにちは。株式会社EVERSTEELで業務委託のソフトウェアエンジニアとして参画している日野原です。\n主にフロントエンドを担当しており、技術としてはNext.jsを使用しています。（詳しい技術内容はこちらを参照）\n少し前の話になりますが、ゼロからテストを導入したので、その過程や戦略について話していこうと思います。\nフロントエンドのテストを検討している方や、テストの運用方法を迷っている方の参考になるかと思います。\n\n Reactアプリにおけるテスト戦略と実践ガイド\n一昔前はフロントエンド開発においてテストはあまり重要視されていませんでした。\nしかし、フロントエンドの複雑さが増したため、最..."
  },
  {
    "title": "RAGが苦手な「ぬるっとした日本語」と戦う",
    "date": "2025-10-21T00:01:01.000Z",
    "source": "Zennのトレンド",
    "url": "https://zenn.dev/knowledgesense/articles/83c89503b6531b",
    "content": "本記事では、RAGの性能を高めるための「DualCSE」という手法について、ざっくり理解します。\n株式会社ナレッジセンスは、生成AIやRAGを使ったプロダクトを、エンタープライズ企業向けに開発しているスタートアップです。\n\n この記事は何\nこの記事は、日本語特有の「あいまいな婉曲表現」（=ぬるっとした日本語）を含む文章でもRAGの精度を上げるための手法「DualCSE」の論文[1]について、日本語で簡単にまとめたものです。\nhttps://arxiv.org/abs/2510.09293\n今回も「そもそもRAGとは？」については、知っている前提で進みます。確認する場合は、こちらの記事もご..."
  },
  {
    "title": "nodejs/node – 2025-10-20, Version 22.21.0 'Jod' (LTS), @aduh95",
    "date": "2025-10-20T23:56:15.000Z",
    "source": "GitHub",
    "url": "https://github.com/nodejs/node/releases/tag/v22.21.0",
    "content": "\n\n\n### Notable Changes\n\n* \\[[`1486fedea1`](https://github.com/nodejs/node/commit/1486fedea1)] - **(SEMVER-MINOR)** **cli**: add `--use-env-proxy` (Joyee Cheung) [#59151](https://github.com/nodejs/node/pull/59151)\n* \\[[`bedaaa11fc`](https://github.com/nodejs/node/commit/bedaaa11fc)] - **(SEMVER-MINOR)** **http**: support http proxy for fetch under `NODE_USE_ENV_PROXY` (Joyee Cheung) [#57165](https://github.com/nodejs/node/pull/57165)\n* \\[[`af8b5fa29d`](https://github.com/nodejs/node/commit/af8b5fa29d)] - **(SEMVER-MINOR)** **http**: add `shouldUpgradeCallback` to let servers control HTTP upgrades (Tim Perry) [#59824](https://github.com/nodejs/node/pull/59824)\n* \\[[`42102594b1`](https://github.com/nodejs/node/commit/42102594b1)] - **(SEMVER-MINOR)** **http,https**: add built-in proxy support in `http`/`https.request` and `Agent` (Joyee Cheung) [#58980](https://github.com/nodejs/node/pull/58980)\n* \\[[`686ac49b82`](https://github.com/nodejs/node/commit/686ac49b82)] - **(SEMVER-MINOR)** **src**: add percentage support to `--max-old-space-size` (Asaf Federman) [#59082](https://github.com/nodejs/node/pull/59082)\n\n### Commits\n\n* \\[[`a71dd592e3`](https://github.com/nodejs/node/commit/a71dd592e3)] - **benchmark**: calibrate config dgram multi-buffer (Bruno Rodrigues) [#59696](https://github.com/nodejs/node/pull/59696)\n* \\[[`16c4b466f4`](https://github.com/nodejs/node/commit/16c4b466f4)] - **benchmark**: calibrate config cluster/echo.js (Nam Yooseong) [#59836](https://github.com/nodejs/node/pull/59836)\n* \\[[`53cb9f3b6c`](https://github.com/nodejs/node/commit/53cb9f3b6c)] - **build**: add the missing macro definitions for OpenHarmony (hqzing) [#59804](https://github.com/nodejs/node/pull/59804)\n* \\[[`ec5290fe01`](https://github.com/nodejs/node/commit/ec5290fe01)] - **build**: do not include custom ESLint rules testing in tarball (Antoine du Hamel) [#59809](https://github.com/nodejs/node/pull/59809)\n* \\[[`1486fedea1`](https://github.com/nodejs/node/commit/1486fedea1)] - **(SEMVER-MINOR)** **cli**: add --use-env-proxy (Joyee Cheung) [#59151](https://github.com/nodejs/node/pull/59151)\n* \\[[`1f93913446`](https://github.com/nodejs/node/commit/1f93913446)] - **crypto**: use `return await` when returning Promises from async functions (Renegade334) [#59841](https://github.com/nodejs/node/pull/59841)\n* \\[[`f488b2ff73`](https://github.com/nodejs/node/commit/f488b2ff73)] - **crypto**: use async functions for non-stub Promise-returning functions (Renegade334) [#59841](https://github.com/nodejs/node/pull/59841)\n* \\[[`aed9fd5ac4`](https://github.com/nodejs/node/commit/aed9fd5ac4)] - **crypto**: avoid calls to `promise.catch()` (Renegade334) [#59841](https://github.com/nodejs/node/pull/59841)\n* \\[[`37c2d186f0`](https://github.com/nodejs/node/commit/37c2d186f0)] - **deps**: update amaro to 1.1.4 (pmarchini) [#60044](https://github.com/nodejs/node/pull/60044)\n* \\[[`28aea13419`](https://github.com/nodejs/node/commit/28aea13419)] - **deps**: update archs files for openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\n* \\[[`ddbc1aa0bb`](https://github.com/nodejs/node/commit/ddbc1aa0bb)] - **deps**: upgrade openssl sources to openssl-3.5.4 (Node.js GitHub Bot) [#60101](https://github.com/nodejs/node/pull/60101)\n* \\[[`badbba2da9`](https://github.com/nodejs/node/commit/badbba2da9)] - **deps**: update googletest to 50b8600 (Node.js GitHub Bot) [#59955](https://github.com/nodejs/node/pull/59955)\n* \\[[`48aaf98a08`](https://github.com/nodejs/node/commit/48aaf98a08)] - **deps**: update archs files for openssl-3.5.3 (Node.js GitHub Bot) [#59901](https://github.com/nodejs/node/pull/59901)\n* \\[[`e02a562ea6`](https://github.com/nodejs/node/commit/e02a562ea6)] - **deps**: upgrade openssl sources to openssl-3.5.3 (Node.js GitHub Bot) [#59901](https://github.com/nodejs/node/pull/59901)\n* \\[[`7e0e86cb92`](https://github.com/nodejs/node/commit/7e0e86cb92)] - **deps**: upgrade npm to 10.9.4 (npm team) [#60074](https://github.com/nodejs/node/pull/60074)\n* \\[[`91dda5facf`](https://github.com/nodejs/node/commit/91dda5facf)] - **deps**: update undici to 6.22.0 (Matteo Collina) [#60112](https://github.com/nodejs/node/pull/60112)\n* \\[[`3a3220a2f0`](https://github.com/nodejs/node/commit/3a3220a2f0)] - **dgram**: restore buffer optimization in fixBufferList (Yoo) [#59934](https://github.com/nodejs/node/pull/59934)\n* \\[[`09bdcce6b8`](https://github.com/nodejs/node/commit/09bdcce6b8)] - **diagnostics\\_channel**: fix race condition with diagnostics\\_channel and GC (Ugaitz Urien) [#59910](https://github.com/nodejs/node/pull/59910)\n* \\[[`b3eeb3bd13`](https://github.com/nodejs/node/commit/b3eeb3bd13)] - **doc**: provide alternative to `url.parse()` using WHATWG URL (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\n* \\[[`1ddaab1904`](https://github.com/nodejs/node/commit/1ddaab1904)] - **doc**: mention reverse proxy and include simple example (Steven) [#59736](https://github.com/nodejs/node/pull/59736)\n* \\[[`3b3b71e99c`](https://github.com/nodejs/node/commit/3b3b71e99c)] - **doc**: mark `.env` files support as stable (Santeri Hiltunen) [#59925](https://github.com/nodejs/node/pull/59925)\n* \\[[`d37f67d1bd`](https://github.com/nodejs/node/commit/d37f67d1bd)] - **doc**: remove optional title prefixes (Aviv Keller) [#60087](https://github.com/nodejs/node/pull/60087)\n* \\[[`ca2dff63f9`](https://github.com/nodejs/node/commit/ca2dff63f9)] - **doc**: fix typo on child\\_process.md (Angelo Gazzola) [#60114](https://github.com/nodejs/node/pull/60114)\n* \\[[`3fca564a05`](https://github.com/nodejs/node/commit/3fca564a05)] - **doc**: add automated migration info to deprecations (Augustin Mauroy) [#60022](https://github.com/nodejs/node/pull/60022)\n* \\[[`4bc366fc16`](https://github.com/nodejs/node/commit/4bc366fc16)] - **doc**: use \"WebAssembly\" instead of \"Web Assembly\" (Tobias Nießen) [#59954](https://github.com/nodejs/node/pull/59954)\n* \\[[`4808dbdd9a`](https://github.com/nodejs/node/commit/4808dbdd9a)] - **doc**: fix typo in section on microtask order (Tobias Nießen) [#59932](https://github.com/nodejs/node/pull/59932)\n* \\[[`d6e303d645`](https://github.com/nodejs/node/commit/d6e303d645)] - **doc**: update V8 fast API guidance (René) [#58999](https://github.com/nodejs/node/pull/58999)\n* \\[[`0a3a3f729e`](https://github.com/nodejs/node/commit/0a3a3f729e)] - **doc**: add security escalation policy (Ulises Gascón) [#59806](https://github.com/nodejs/node/pull/59806)\n* \\[[`8fd669c70d`](https://github.com/nodejs/node/commit/8fd669c70d)] - **doc**: type improvement of file `http.md` (yusheng chen) [#58189](https://github.com/nodejs/node/pull/58189)\n* \\[[`9833dc6060`](https://github.com/nodejs/node/commit/9833dc6060)] - **doc**: rephrase dynamic import() description (Nam Yooseong) [#59224](https://github.com/nodejs/node/pull/59224)\n* \\[[`2870a73681`](https://github.com/nodejs/node/commit/2870a73681)] - **doc,crypto**: update subtle.generateKey and subtle.importKey (Filip Skokan) [#59851](https://github.com/nodejs/node/pull/59851)\n* \\[[`85818db93c`](https://github.com/nodejs/node/commit/85818db93c)] - **fs,win**: do not add a second trailing slash in readdir (Gerhard Stöbich) [#59847](https://github.com/nodejs/node/pull/59847)\n* \\[[`bedaaa11fc`](https://github.com/nodejs/node/commit/bedaaa11fc)] - **(SEMVER-MINOR)** **http**: support http proxy for fetch under NODE\\_USE\\_ENV\\_PROXY (Joyee Cheung) [#57165](https://github.com/nodejs/node/pull/57165)\n* \\[[`af8b5fa29d`](https://github.com/nodejs/node/commit/af8b5fa29d)] - **(SEMVER-MINOR)** **http**: add shouldUpgradeCallback to let servers control HTTP upgrades (Tim Perry) [#59824](https://github.com/nodejs/node/pull/59824)\n* \\[[`758271ae66`](https://github.com/nodejs/node/commit/758271ae66)] - **http**: optimize checkIsHttpToken for short strings (방진혁) [#59832](https://github.com/nodejs/node/pull/59832)\n* \\[[`42102594b1`](https://github.com/nodejs/node/commit/42102594b1)] - **(SEMVER-MINOR)** **http,https**: add built-in proxy support in http/https.request and Agent (Joyee Cheung) [#58980](https://github.com/nodejs/node/pull/58980)\n* \\[[`a33ed9bf96`](https://github.com/nodejs/node/commit/a33ed9bf96)] - **inspector**: ensure adequate memory allocation for `Binary::toBase64` (René) [#59870](https://github.com/nodejs/node/pull/59870)\n* \\[[`34c686be2b`](https://github.com/nodejs/node/commit/34c686be2b)] - **lib**: update inspect output format for subclasses (Miguel Marcondes Filho) [#59687](https://github.com/nodejs/node/pull/59687)\n* \\[[`12e553529c`](https://github.com/nodejs/node/commit/12e553529c)] - **lib**: add source map support for assert messages (Chengzhong Wu) [#59751](https://github.com/nodejs/node/pull/59751)\n* \\[[`d2a70571f8`](https://github.com/nodejs/node/commit/d2a70571f8)] - **lib,src**: refactor assert to load error source from memory (Chengzhong Wu) [#59751](https://github.com/nodejs/node/pull/59751)\n* \\[[`20a9e86b5d`](https://github.com/nodejs/node/commit/20a9e86b5d)] - **meta**: move Michael to emeritus (Michael Dawson) [#60070](https://github.com/nodejs/node/pull/60070)\n* \\[[`c591cca15c`](https://github.com/nodejs/node/commit/c591cca15c)] - **meta**: bump github/codeql-action from 3.30.0 to 3.30.5 (dependabot\\[bot]) [#60089](https://github.com/nodejs/node/pull/60089)\n* \\[[`090ba141b1`](https://github.com/nodejs/node/commit/090ba141b1)] - **meta**: bump codecov/codecov-action from 5.5.0 to 5.5.1 (dependabot\\[bot]) [#60091](https://github.com/nodejs/node/pull/60091)\n* \\[[`a0ba6884a5`](https://github.com/nodejs/node/commit/a0ba6884a5)] - **meta**: bump actions/stale from 9.1.0 to 10.0.0 (dependabot\\[bot]) [#60092](https://github.com/nodejs/node/pull/60092)\n* \\[[`0feca0c541`](https://github.com/nodejs/node/commit/0feca0c541)] - **meta**: bump actions/setup-node from 4.4.0 to 5.0.0 (dependabot\\[bot]) [#60093](https://github.com/nodejs/node/pull/60093)\n* \\[[`7cd2b42d18`](https://github.com/nodejs/node/commit/7cd2b42d18)] - **meta**: bump step-security/harden-runner from 2.12.2 to 2.13.1 (dependabot\\[bot]) [#60094](https://github.com/nodejs/node/pull/60094)\n* \\[[`1f3b9d66ac`](https://github.com/nodejs/node/commit/1f3b9d66ac)] - **meta**: bump actions/cache from 4.2.4 to 4.3.0 (dependabot\\[bot]) [#60095](https://github.com/nodejs/node/pull/60095)\n* \\[[`0fedbb3de7`](https://github.com/nodejs/node/commit/0fedbb3de7)] - **meta**: bump ossf/scorecard-action from 2.4.2 to 2.4.3 (dependabot\\[bot]) [#60096](https://github.com/nodejs/node/pull/60096)\n* \\[[`04590b8267`](https://github.com/nodejs/node/commit/04590b8267)] - **meta**: bump actions/setup-python from 5.6.0 to 6.0.0 (dependabot\\[bot]) [#60090](https://github.com/nodejs/node/pull/60090)\n* \\[[`2bf0a9318f`](https://github.com/nodejs/node/commit/2bf0a9318f)] - **meta**: add .npmrc with ignore-scripts=true (Joyee Cheung) [#59914](https://github.com/nodejs/node/pull/59914)\n* \\[[`e10dc7b81c`](https://github.com/nodejs/node/commit/e10dc7b81c)] - **module**: allow overriding linked requests for a ModuleWrap (Chengzhong Wu) [#59527](https://github.com/nodejs/node/pull/59527)\n* \\[[`2237142369`](https://github.com/nodejs/node/commit/2237142369)] - **module**: link module with a module request record (Chengzhong Wu) [#58886](https://github.com/nodejs/node/pull/58886)\n* \\[[`6d24b88fbc`](https://github.com/nodejs/node/commit/6d24b88fbc)] - **node-api**: added SharedArrayBuffer api (Mert Can Altin) [#59071](https://github.com/nodejs/node/pull/59071)\n* \\[[`4cc84c96f4`](https://github.com/nodejs/node/commit/4cc84c96f4)] - **node-api**: make napi\\_delete\\_reference use node\\_api\\_basic\\_env (Jeetu Suthar) [#59684](https://github.com/nodejs/node/pull/59684)\n* \\[[`e790eb6b50`](https://github.com/nodejs/node/commit/e790eb6b50)] - **repl**: fix cpu overhead pasting big strings to the REPL (Ruben Bridgewater) [#59857](https://github.com/nodejs/node/pull/59857)\n* \\[[`99ea08dc43`](https://github.com/nodejs/node/commit/99ea08dc43)] - **repl**: add isValidParentheses check before wrap input (Xuguang Mei) [#59607](https://github.com/nodejs/node/pull/59607)\n* \\[[`e4a4f63019`](https://github.com/nodejs/node/commit/e4a4f63019)] - **sqlite**: fix crash session extension callbacks with workers (Bart Louwers) [#59848](https://github.com/nodejs/node/pull/59848)\n* \\[[`42c5544b97`](https://github.com/nodejs/node/commit/42c5544b97)] - **src**: assert memory calc for max-old-space-size-percentage (Asaf Federman) [#59460](https://github.com/nodejs/node/pull/59460)\n* \\[[`686ac49b82`](https://github.com/nodejs/node/commit/686ac49b82)] - **(SEMVER-MINOR)** **src**: add percentage support to --max-old-space-size (Asaf Federman) [#59082](https://github.com/nodejs/node/pull/59082)\n* \\[[`84701ff668`](https://github.com/nodejs/node/commit/84701ff668)] - **src**: clear all linked module caches once instantiated (Chengzhong Wu) [#59117](https://github.com/nodejs/node/pull/59117)\n* \\[[`8e182e561f`](https://github.com/nodejs/node/commit/8e182e561f)] - **src**: remove unnecessary `Environment::GetCurrent()` calls (Moonki Choi) [#59814](https://github.com/nodejs/node/pull/59814)\n* \\[[`c9cde35c4d`](https://github.com/nodejs/node/commit/c9cde35c4d)] - **src**: simplify is\\_callable by making it a concept (Tobias Nießen) [#58169](https://github.com/nodejs/node/pull/58169)\n* \\[[`892b425ee1`](https://github.com/nodejs/node/commit/892b425ee1)] - **src**: rename private fields to follow naming convention (Moonki Choi) [#59923](https://github.com/nodejs/node/pull/59923)\n* \\[[`36b68db7f5`](https://github.com/nodejs/node/commit/36b68db7f5)] - **src**: reduce the nearest parent package JSON cache size (Michael Smith) [#59888](https://github.com/nodejs/node/pull/59888)\n* \\[[`26b40bad02`](https://github.com/nodejs/node/commit/26b40bad02)] - **src**: replace FIXED\\_ONE\\_BYTE\\_STRING with Environment-cached strings (Moonki Choi) [#59891](https://github.com/nodejs/node/pull/59891)\n* \\[[`34dcb7dc32`](https://github.com/nodejs/node/commit/34dcb7dc32)] - **src**: create strings in `FIXED_ONE_BYTE_STRING` as internalized (Anna Henningsen) [#59826](https://github.com/nodejs/node/pull/59826)\n* \\[[`4d748add05`](https://github.com/nodejs/node/commit/4d748add05)] - **src**: remove `std::array` overload of `FIXED_ONE_BYTE_STRING` (Anna Henningsen) [#59826](https://github.com/nodejs/node/pull/59826)\n* \\[[`bb6fd7c2d1`](https://github.com/nodejs/node/commit/bb6fd7c2d1)] - **src**: ensure `v8::Eternal` is empty before setting it (Anna Henningsen) [#59825](https://github.com/nodejs/node/pull/59825)\n* \\[[`7a91282bf9`](https://github.com/nodejs/node/commit/7a91282bf9)] - **src**: use simdjson::pad (0hm☘️) [#59391](https://github.com/nodejs/node/pull/59391)\n* \\[[`ba00875f01`](https://github.com/nodejs/node/commit/ba00875f01)] - **stream**: use new AsyncResource instead of bind (Matteo Collina) [#59867](https://github.com/nodejs/node/pull/59867)\n* \\[[`ebec3ef68b`](https://github.com/nodejs/node/commit/ebec3ef68b)] - **(SEMVER-MINOR)** **test**: move http proxy tests to test/client-proxy (Joyee Cheung) [#58980](https://github.com/nodejs/node/pull/58980)\n* \\[[`7067d79fb3`](https://github.com/nodejs/node/commit/7067d79fb3)] - **test**: mark sea tests flaky on macOS x64 (Richard Lau) [#60068](https://github.com/nodejs/node/pull/60068)\n* \\[[`ca1942c9d5`](https://github.com/nodejs/node/commit/ca1942c9d5)] - **test**: testcase demonstrating issue 59541 (Eric Rannaud) [#59801](https://github.com/nodejs/node/pull/59801)\n* \\[[`660d57355e`](https://github.com/nodejs/node/commit/660d57355e)] - **test,doc**: skip --max-old-space-size-percentage on 32-bit platforms (Asaf Federman) [#60144](https://github.com/nodejs/node/pull/60144)\n* \\[[`19a7b1ef26`](https://github.com/nodejs/node/commit/19a7b1ef26)] - **tls**: load bundled and extra certificates off-thread (Joyee Cheung) [#59856](https://github.com/nodejs/node/pull/59856)\n* \\[[`095e7a81fc`](https://github.com/nodejs/node/commit/095e7a81fc)] - **tls**: only do off-thread certificate loading on loading tls (Joyee Cheung) [#59856](https://github.com/nodejs/node/pull/59856)\n* \\[[`c42c1204c7`](https://github.com/nodejs/node/commit/c42c1204c7)] - **tools**: fix `tools/make-v8.sh` for clang (Richard Lau) [#59893](https://github.com/nodejs/node/pull/59893)\n* \\[[`b632a1d98d`](https://github.com/nodejs/node/commit/b632a1d98d)] - **tools**: skip test-internet workflow for draft PRs (Michaël Zasso) [#59817](https://github.com/nodejs/node/pull/59817)\n* \\[[`6021c3ac76`](https://github.com/nodejs/node/commit/6021c3ac76)] - **tools**: copyedit `build-tarball.yml` (Antoine du Hamel) [#59808](https://github.com/nodejs/node/pull/59808)\n* \\[[`ef005d0c9b`](https://github.com/nodejs/node/commit/ef005d0c9b)] - **typings**: update 'types' binding (René) [#59692](https://github.com/nodejs/node/pull/59692)\n* \\[[`28ef564ecd`](https://github.com/nodejs/node/commit/28ef564ecd)] - **typings**: remove unused imports (Nam Yooseong) [#59880](https://github.com/nodejs/node/pull/59880)\n* \\[[`f88752ddb6`](https://github.com/nodejs/node/commit/f88752ddb6)] - **url**: replaced slice with at (Mikhail) [#59181](https://github.com/nodejs/node/pull/59181)\n* \\[[`24c224960c`](https://github.com/nodejs/node/commit/24c224960c)] - **url**: add type checking to urlToHttpOptions() (simon-id) [#59753](https://github.com/nodejs/node/pull/59753)\n* \\[[`f2fbcc576d`](https://github.com/nodejs/node/commit/f2fbcc576d)] - **util**: fix debuglog.enabled not being present with callback logger (Ruben Bridgewater) [#59858](https://github.com/nodejs/node/pull/59858)\n* \\[[`6277058e43`](https://github.com/nodejs/node/commit/6277058e43)] - **vm**: sync-ify SourceTextModule linkage (Chengzhong Wu) [#59000](https://github.com/nodejs/node/pull/59000)\n* \\[[`5bf21a4309`](https://github.com/nodejs/node/commit/5bf21a4309)] - **vm**: explain how to share promises between contexts w/ afterEvaluate (Eric Rannaud) [#59801](https://github.com/nodejs/node/pull/59801)\n* \\[[`312b33a083`](https://github.com/nodejs/node/commit/312b33a083)] - **vm**: \"afterEvaluate\", evaluate() return a promise from the outer context (Eric Rannaud) [#59801](https://github.com/nodejs/node/pull/59801)\n* \\[[`1eadab863c`](https://github.com/nodejs/node/commit/1eadab863c)] - **win,tools**: add description to signature (Martin Costello) [#59877](https://github.com/nodejs/node/pull/59877)\n* \\[[`816e1befb1`](https://github.com/nodejs/node/commit/816e1befb1)] - **zlib**: reduce code duplication (jhofstee) [#57810](https://github.com/nodejs/node/pull/57810)\n\n"
  },
  {
    "title": "vitejs/vite – v5.4.21",
    "date": "2025-10-20T05:30:37.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v5.4.21",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v5.4.21/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v6.4.1",
    "date": "2025-10-20T05:25:55.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v6.4.1",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v6.4.1/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v7.0.8",
    "date": "2025-10-20T05:20:29.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.0.8",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.0.8/packages/vite/CHANGELOG.md) for details."
  },
  {
    "title": "vitejs/vite – v7.1.11",
    "date": "2025-10-20T05:09:01.000Z",
    "source": "GitHub",
    "url": "https://github.com/vitejs/vite/releases/tag/v7.1.11",
    "content": "Please refer to [CHANGELOG.md](https://github.com/vitejs/vite/blob/v7.1.11/packages/vite/CHANGELOG.md) for details."
  }
]